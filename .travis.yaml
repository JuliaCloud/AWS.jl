# Documentation: http://docs.travis-ci.com/user/languages/julia/
language: julia
os:
  - linux
  - osx
julia:
  - 1.0  # LTS
  - 1 # Latest
  - nightly
matrix:
  allow_failures:
    - julia: nightly
branches:
  only:
    - master
    - staging
    - trying
    - /^v[0-9]+\.[0-9]+\.[0-9]+$/  # version tags
notifications:
  email: false
env:
  # arn:aws:iam::134847318362:user/aws-jl
  global:
    - secure: 
    - secure: 
jobs:
  include:
    - stage: "Online tests"
      name: "EC2"
      julia: 1
      os: linux
      before_install:
        - export AWS_DEFAULT_REGION=us-east-1
        - pip install --user awscli
      script:
        - aws ssm get-parameter --region $AWS_DEFAULT_REGION --name /public_ci/AWS_JL/ec2_keyfile --query 'Parameter.Value' --output text --with-decryption > ec2.pem
        - chmod 600 ec2.pem
        - export KEYFILE=ec2.pem
        # Tag with commit to be able to terminate later
        - INSTANCE_ID=$(aws ec2 run-instances --region $AWS_DEFAULT_REGION --launch-template LaunchTemplateName=AWS_JL_EC2Template --tag-specifications "ResourceType=instance,Tags=[{Key=AWS_JL_Commit,Value=$TRAVIS_COMMIT}]" --query 'Instances[0].InstanceId' --output text)
        # Wait until UserData installs Julia
        - aws ec2 wait instance-status-ok --region $AWS_DEFAULT_REGION --instance-ids $INSTANCE_ID
        - export EC2Ip=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID  --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        - |
          julia -e '
          using Distributed
          addprocs(
              ["ec2-user@$(ENV["EC2Ip"])"],
              sshflags=`-i $(ENV["KEYFILE"]) -o "StrictHostKeyChecking=no"`,
              exename="/julia/bin/julia",
              dir="/home/ec2-user",
              tunnel=true,
          )
          @fetch @eval using Pkg
          rev=ENV["TRAVIS_COMMIT"]
          @fetch Pkg.add(PackageSpec(url="https://github.com/JuliaCloud/AWS.jl", rev=rev))
          @fetch ENV["AWS_JL_INSTANCE_TYPE"]="EC2"
          @fetch Pkg.build("AWS")
          @fetch @eval using AWS
          @fetch Pkg.test("AWS")
          '
      after_script:
        - INSTANCE_ID=$(aws ec2 describe-instances --filter Name=tag:AWS_JL_Commit,Values=$TRAVIS_COMMIT Name=instance-state-name,Values=running,pending --query 'Reservations[*].Instances[0].InstanceId' --output text)
        - |
          if [ "$INSTANCE_ID" ]; then
              aws ec2 terminate-instances --region $AWS_DEFAULT_REGION --instance-ids $INSTANCE_ID
              aws ec2 wait instance-terminated --region $AWS_DEFAULT_REGION --instance-ids $INSTANCE_ID
          fi
      after_success: skip
    - stage: "Online tests"
      name: "ECS"
      julia: 1
      os: linux
      before_install:
        - export AWS_DEFAULT_REGION=us-east-1
        - pip install --user awscli
      script:
        - id=$(aws batch submit-job --region $AWS_DEFAULT_REGION --job-name $TRAVIS_COMMIT --job-definition AWS_JL-ECS-00001-Job --job-queue AWS_JL-ECS-00001-JobQueue --container-overrides "environment=[{name=AWS_JL_BRANCH,value=$TRAVIS_COMMIT}]" --query jobId --output text)
        - |
          status=$(aws batch describe-jobs --jobs $id --query jobs[0].status --output text)
          # If the query fails it will either return "None" or status won't be set
          while [ "$status" ] && [ "$status" != "None" ] && [ "$status" != "FAILED" ] && [ "$status" != "SUCCEEDED" ]; do
              echo "Waiting for job $id, status: $status..."
              sleep 30
              status=$(aws batch describe-jobs --jobs $id --query jobs[0].status --output text)
          done
          echo "Job $id finished, status: $status"
        - |
          # Get test output
          logstream=$(aws batch describe-jobs --jobs $id --query jobs[0].container.logStreamName --output text)
          if [ "$logstream" ]; then
              aws logs get-log-events --log-group-name /aws/batch/job --log-stream-name $logstream --query events[*].message --output text | tr '\t' '\n'
          fi
        - test "$status" == "SUCCEEDED"
      after_success: skip
