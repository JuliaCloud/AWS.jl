# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: mediapackage_vod

using Compat
using UUIDs
"""
    CreateAsset()

Creates a new MediaPackage VOD Asset resource.

# Required Parameters
- `id`: The unique identifier for the Asset.
- `packagingGroupId`: The ID of the PackagingGroup for the Asset.
- `sourceArn`: ARN of the source object in S3.
- `sourceRoleArn`: The IAM role ARN used to access the source S3 bucket.

# Optional Parameters
- `resourceId`: The resource ID to include in SPEKE key requests.
- `tags`: 
"""
CreateAsset(id, packagingGroupId, sourceArn, sourceRoleArn; aws::AWSConfig=AWSConfig()) = mediapackage_vod("POST", "/assets", Dict{String, Any}("id"=>id, "packagingGroupId"=>packagingGroupId, "sourceArn"=>sourceArn, "sourceRoleArn"=>sourceRoleArn))
CreateAsset(id, packagingGroupId, sourceArn, sourceRoleArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("POST", "/assets", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("id"=>id, "packagingGroupId"=>packagingGroupId, "sourceArn"=>sourceArn, "sourceRoleArn"=>sourceRoleArn), args)); aws=aws)

"""
    CreatePackagingConfiguration()

Creates a new MediaPackage VOD PackagingConfiguration resource.

# Required Parameters
- `id`: The ID of the PackagingConfiguration.
- `packagingGroupId`: The ID of a PackagingGroup.

# Optional Parameters
- `cmafPackage`: 
- `dashPackage`: 
- `hlsPackage`: 
- `mssPackage`: 
- `tags`: 
"""
CreatePackagingConfiguration(id, packagingGroupId; aws::AWSConfig=AWSConfig()) = mediapackage_vod("POST", "/packaging_configurations", Dict{String, Any}("id"=>id, "packagingGroupId"=>packagingGroupId))
CreatePackagingConfiguration(id, packagingGroupId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("POST", "/packaging_configurations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("id"=>id, "packagingGroupId"=>packagingGroupId), args)); aws=aws)

"""
    CreatePackagingGroup()

Creates a new MediaPackage VOD PackagingGroup resource.

# Required Parameters
- `id`: The ID of the PackagingGroup.

# Optional Parameters
- `authorization`: 
- `tags`: 
"""
CreatePackagingGroup(id; aws::AWSConfig=AWSConfig()) = mediapackage_vod("POST", "/packaging_groups", Dict{String, Any}("id"=>id))
CreatePackagingGroup(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("POST", "/packaging_groups", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("id"=>id), args)); aws=aws)

"""
    DeleteAsset()

Deletes an existing MediaPackage VOD Asset resource.

# Required Parameters
- `id`: The ID of the MediaPackage VOD Asset resource to delete.

"""
DeleteAsset(id; aws::AWSConfig=AWSConfig()) = mediapackage_vod("DELETE", "/assets/$(id)"; aws=aws)
DeleteAsset(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("DELETE", "/assets/$(id)", args; aws=aws)

"""
    DeletePackagingConfiguration()

Deletes a MediaPackage VOD PackagingConfiguration resource.

# Required Parameters
- `id`: The ID of the MediaPackage VOD PackagingConfiguration resource to delete.

"""
DeletePackagingConfiguration(id; aws::AWSConfig=AWSConfig()) = mediapackage_vod("DELETE", "/packaging_configurations/$(id)"; aws=aws)
DeletePackagingConfiguration(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("DELETE", "/packaging_configurations/$(id)", args; aws=aws)

"""
    DeletePackagingGroup()

Deletes a MediaPackage VOD PackagingGroup resource.

# Required Parameters
- `id`: The ID of the MediaPackage VOD PackagingGroup resource to delete.

"""
DeletePackagingGroup(id; aws::AWSConfig=AWSConfig()) = mediapackage_vod("DELETE", "/packaging_groups/$(id)"; aws=aws)
DeletePackagingGroup(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("DELETE", "/packaging_groups/$(id)", args; aws=aws)

"""
    DescribeAsset()

Returns a description of a MediaPackage VOD Asset resource.

# Required Parameters
- `id`: The ID of an MediaPackage VOD Asset resource.

"""
DescribeAsset(id; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/assets/$(id)"; aws=aws)
DescribeAsset(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/assets/$(id)", args; aws=aws)

"""
    DescribePackagingConfiguration()

Returns a description of a MediaPackage VOD PackagingConfiguration resource.

# Required Parameters
- `id`: The ID of a MediaPackage VOD PackagingConfiguration resource.

"""
DescribePackagingConfiguration(id; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/packaging_configurations/$(id)"; aws=aws)
DescribePackagingConfiguration(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/packaging_configurations/$(id)", args; aws=aws)

"""
    DescribePackagingGroup()

Returns a description of a MediaPackage VOD PackagingGroup resource.

# Required Parameters
- `id`: The ID of a MediaPackage VOD PackagingGroup resource.

"""
DescribePackagingGroup(id; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/packaging_groups/$(id)"; aws=aws)
DescribePackagingGroup(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/packaging_groups/$(id)", args; aws=aws)

"""
    ListAssets()

Returns a collection of MediaPackage VOD Asset resources.

# Optional Parameters
- `maxResults`: Upper bound on number of records to return.
- `nextToken`: A token used to resume pagination from the end of a previous request.
- `packagingGroupId`: Returns Assets associated with the specified PackagingGroup.
"""
ListAssets(; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/assets"; aws=aws)
ListAssets(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/assets", args; aws=aws)

"""
    ListPackagingConfigurations()

Returns a collection of MediaPackage VOD PackagingConfiguration resources.

# Optional Parameters
- `maxResults`: Upper bound on number of records to return.
- `nextToken`: A token used to resume pagination from the end of a previous request.
- `packagingGroupId`: Returns MediaPackage VOD PackagingConfigurations associated with the specified PackagingGroup.
"""
ListPackagingConfigurations(; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/packaging_configurations"; aws=aws)
ListPackagingConfigurations(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/packaging_configurations", args; aws=aws)

"""
    ListPackagingGroups()

Returns a collection of MediaPackage VOD PackagingGroup resources.

# Optional Parameters
- `maxResults`: Upper bound on number of records to return.
- `nextToken`: A token used to resume pagination from the end of a previous request.
"""
ListPackagingGroups(; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/packaging_groups"; aws=aws)
ListPackagingGroups(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/packaging_groups", args; aws=aws)

"""
    ListTagsForResource()

Returns a list of the tags assigned to the specified resource.

# Required Parameters
- `resource-arn`: The Amazon Resource Name (ARN) for the resource. You can get this from the response to any request to the resource.

"""
ListTagsForResource(resource_arn; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/tags/$(resource-arn)"; aws=aws)
ListTagsForResource(resource_arn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("GET", "/tags/$(resource-arn)", args; aws=aws)

"""
    TagResource()

Adds tags to the specified resource. You can specify one or more tags to add.

# Required Parameters
- `resource-arn`: The Amazon Resource Name (ARN) for the resource. You can get this from the response to any request to the resource.
- `tags`: A collection of tags associated with a resource

"""
TagResource(resource_arn, tags; aws::AWSConfig=AWSConfig()) = mediapackage_vod("POST", "/tags/$(resource-arn)", Dict{String, Any}("tags"=>tags))
TagResource(resource_arn, tags, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("POST", "/tags/$(resource-arn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tags"=>tags), args)); aws=aws)

"""
    UntagResource()

Removes tags from the specified resource. You can specify one or more tags to remove.

# Required Parameters
- `resource-arn`: The Amazon Resource Name (ARN) for the resource. You can get this from the response to any request to the resource.
- `tagKeys`: A comma-separated list of the tag keys to remove from the resource.

"""
UntagResource(resource_arn, tagKeys; aws::AWSConfig=AWSConfig()) = mediapackage_vod("DELETE", "/tags/$(resource-arn)", Dict{String, Any}("tagKeys"=>tagKeys))
UntagResource(resource_arn, tagKeys, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("DELETE", "/tags/$(resource-arn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), args)); aws=aws)

"""
    UpdatePackagingGroup()

Updates a specific packaging group. You can't change the id attribute or any other system-generated attributes.

# Required Parameters
- `id`: The ID of a MediaPackage VOD PackagingGroup resource.

# Optional Parameters
- `authorization`: 
"""
UpdatePackagingGroup(id; aws::AWSConfig=AWSConfig()) = mediapackage_vod("PUT", "/packaging_groups/$(id)"; aws=aws)
UpdatePackagingGroup(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage_vod("PUT", "/packaging_groups/$(id)", args; aws=aws)
