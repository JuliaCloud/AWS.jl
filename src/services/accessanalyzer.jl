# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
using .AWSServices: accessanalyzer

"""
    CreateAnalyzer()

Creates an analyzer for your account.

Required Parameters
{
  "analyzerName": "The name of the analyzer to create.",
  "type": "The type of analyzer to create. Only ACCOUNT analyzers are supported. You can create only one analyzer per account per Region."
}

Optional Parameters
{
  "archiveRules": "Specifies the archive rules to add for the analyzer. Archive rules automatically archive findings that meet the criteria you define for the rule.",
  "clientToken": "A client token.",
  "tags": "The tags to apply to the analyzer."
}
"""
CreateAnalyzer(args) = accessanalyzer("PUT", "/analyzer", args)

"""
    CreateArchiveRule()

Creates an archive rule for the specified analyzer. Archive rules automatically archive findings that meet the criteria you define when you create the rule.

Required Parameters
{
  "analyzerName": "The name of the created analyzer.",
  "filter": "The criteria for the rule.",
  "ruleName": "The name of the rule to create."
}

Optional Parameters
{
  "clientToken": "A client token."
}
"""
CreateArchiveRule(args) = accessanalyzer("PUT", "/analyzer/{analyzerName}/archive-rule", args)

"""
    DeleteAnalyzer()

Deletes the specified analyzer. When you delete an analyzer, Access Analyzer is disabled for the account in the current or specific Region. All findings that were generated by the analyzer are deleted. You cannot undo this action.

Required Parameters
{
  "analyzerName": "The name of the analyzer to delete."
}

Optional Parameters
{
  "clientToken": "A client token."
}
"""
DeleteAnalyzer(args) = accessanalyzer("DELETE", "/analyzer/{analyzerName}", args)

"""
    DeleteArchiveRule()

Deletes the specified archive rule.

Required Parameters
{
  "analyzerName": "The name of the analyzer that associated with the archive rule to delete.",
  "ruleName": "The name of the rule to delete."
}

Optional Parameters
{
  "clientToken": "A client token."
}
"""
DeleteArchiveRule(args) = accessanalyzer("DELETE", "/analyzer/{analyzerName}/archive-rule/{ruleName}", args)

"""
    GetAnalyzedResource()

Retrieves information about a resource that was analyzed.

Required Parameters
{
  "analyzerArn": "The ARN of the analyzer to retrieve information from.",
  "resourceArn": "The ARN of the resource to retrieve information about."
}
"""
GetAnalyzedResource(args) = accessanalyzer("GET", "/analyzed-resource", args)

"""
    GetAnalyzer()

Retrieves information about the specified analyzer.

Required Parameters
{
  "analyzerName": "The name of the analyzer retrieved."
}
"""
GetAnalyzer(args) = accessanalyzer("GET", "/analyzer/{analyzerName}", args)

"""
    GetArchiveRule()

Retrieves information about an archive rule.

Required Parameters
{
  "analyzerName": "The name of the analyzer to retrieve rules from.",
  "ruleName": "The name of the rule to retrieve."
}
"""
GetArchiveRule(args) = accessanalyzer("GET", "/analyzer/{analyzerName}/archive-rule/{ruleName}", args)

"""
    GetFinding()

Retrieves information about the specified finding.

Required Parameters
{
  "analyzerArn": "The ARN of the analyzer that generated the finding.",
  "id": "The ID of the finding to retrieve."
}
"""
GetFinding(args) = accessanalyzer("GET", "/finding/{id}", args)

"""
    ListAnalyzedResources()

Retrieves a list of resources of the specified type that have been analyzed by the specified analyzer..

Required Parameters
{
  "analyzerArn": "The ARN of the analyzer to retrieve a list of analyzed resources from."
}

Optional Parameters
{
  "maxResults": "The maximum number of results to return in the response.",
  "nextToken": "A token used for pagination of results returned.",
  "resourceType": "The type of resource."
}
"""
ListAnalyzedResources(args) = accessanalyzer("POST", "/analyzed-resource", args)

"""
    ListAnalyzers()

Retrieves a list of analyzers.

Optional Parameters
{
  "maxResults": "The maximum number of results to return in the response.",
  "nextToken": "A token used for pagination of results returned.",
  "type": "The type of analyzer."
}
"""
ListAnalyzers() = accessanalyzer("GET", "/analyzer")
ListAnalyzers(args) = accessanalyzer("GET", "/analyzer", args)

"""
    ListArchiveRules()

Retrieves a list of archive rules created for the specified analyzer.

Required Parameters
{
  "analyzerName": "The name of the analyzer to retrieve rules from."
}

Optional Parameters
{
  "maxResults": "The maximum number of results to return in the request.",
  "nextToken": "A token used for pagination of results returned."
}
"""
ListArchiveRules(args) = accessanalyzer("GET", "/analyzer/{analyzerName}/archive-rule", args)

"""
    ListFindings()

Retrieves a list of findings generated by the specified analyzer.

Required Parameters
{
  "analyzerArn": "The ARN of the analyzer to retrieve findings from."
}

Optional Parameters
{
  "filter": "A filter to match for the findings to return.",
  "maxResults": "The maximum number of results to return in the response.",
  "nextToken": "A token used for pagination of results returned.",
  "sort": "The sort order for the findings returned."
}
"""
ListFindings(args) = accessanalyzer("POST", "/finding", args)

"""
    ListTagsForResource()

Retrieves a list of tags applied to the specified resource.

Required Parameters
{
  "resourceArn": "The ARN of the resource to retrieve tags from."
}
"""
ListTagsForResource(args) = accessanalyzer("GET", "/tags/{resourceArn}", args)

"""
    StartResourceScan()

Immediately starts a scan of the policies applied to the specified resource.

Required Parameters
{
  "analyzerArn": "The ARN of the analyzer to use to scan the policies applied to the specified resource.",
  "resourceArn": "The ARN of the resource to scan."
}
"""
StartResourceScan(args) = accessanalyzer("POST", "/resource/scan", args)

"""
    TagResource()

Adds a tag to the specified resource.

Required Parameters
{
  "resourceArn": "The ARN of the resource to add the tag to.",
  "tags": "The tags to add to the resource."
}
"""
TagResource(args) = accessanalyzer("POST", "/tags/{resourceArn}", args)

"""
    UntagResource()

Removes a tag from the specified resource.

Required Parameters
{
  "resourceArn": "The ARN of the resource to remove the tag from.",
  "tagKeys": "The key for the tag to add."
}
"""
UntagResource(args) = accessanalyzer("DELETE", "/tags/{resourceArn}", args)

"""
    UpdateArchiveRule()

Updates the criteria and values for the specified archive rule.

Required Parameters
{
  "analyzerName": "The name of the analyzer to update the archive rules for.",
  "filter": "A filter to match for the rules to update. Only rules that match the filter are updated.",
  "ruleName": "The name of the rule to update."
}

Optional Parameters
{
  "clientToken": "A client token."
}
"""
UpdateArchiveRule(args) = accessanalyzer("PUT", "/analyzer/{analyzerName}/archive-rule/{ruleName}", args)

"""
    UpdateFindings()

Updates the status for the specified findings.

Required Parameters
{
  "analyzerArn": "The ARN of the analyzer that generated the findings to update.",
  "status": "The state represents the action to take to update the finding Status. Use ARCHIVE to change an Active finding to an Archived finding. Use ACTIVE to change an Archived finding to an Active finding."
}

Optional Parameters
{
  "clientToken": "A client token.",
  "ids": "The IDs of the findings to update.",
  "resourceArn": "The ARN of the resource identified in the finding."
}
"""
UpdateFindings(args) = accessanalyzer("PUT", "/finding", args)
