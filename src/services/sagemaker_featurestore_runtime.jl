# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: sagemaker_featurestore_runtime
using AWS.Compat
using AWS.UUIDs

"""
    batch_get_record(identifiers)
    batch_get_record(identifiers, params::Dict{String,<:Any})

Retrieves a batch of Records from a FeatureGroup.

# Arguments
- `identifiers`: A list of FeatureGroup names, with their corresponding RecordIdentifier
  value, and Feature name that have been requested to be retrieved in batch.

"""
function batch_get_record(Identifiers; aws_config::AbstractAWSConfig=global_aws_config())
    return sagemaker_featurestore_runtime(
        "POST",
        "/BatchGetRecord",
        Dict{String,Any}("Identifiers" => Identifiers);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function batch_get_record(
    Identifiers,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sagemaker_featurestore_runtime(
        "POST",
        "/BatchGetRecord",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("Identifiers" => Identifiers), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_record(event_time, feature_group_name, record_identifier_value_as_string)
    delete_record(event_time, feature_group_name, record_identifier_value_as_string, params::Dict{String,<:Any})

Deletes a Record from a FeatureGroup in the OnlineStore. Feature Store supports both
SOFT_DELETE and HARD_DELETE. For SOFT_DELETE (default), feature columns are set to null and
the record is no longer retrievable by GetRecord or BatchGetRecord. For HARD_DELETE, the
complete Record is removed from the OnlineStore. In both cases, Feature Store appends the
deleted record marker to the OfflineStore with feature values set to null, is_deleted value
set to True, and EventTime set to the delete input EventTime. Note that the EventTime
specified in DeleteRecord should be set later than the EventTime of the existing record in
the OnlineStore for that RecordIdentifer. If it is not, the deletion does not occur:   For
SOFT_DELETE, the existing (undeleted) record remains in the OnlineStore, though the delete
record marker is still written to the OfflineStore.    HARD_DELETE returns EventTime: 400
ValidationException to indicate that the delete operation failed. No delete record marker
is written to the OfflineStore.

# Arguments
- `event_time`: Timestamp indicating when the deletion event occurred. EventTime can be
  used to query data at a certain point in time.
- `feature_group_name`: The name of the feature group to delete the record from.
- `record_identifier_value_as_string`: The value for the RecordIdentifier that uniquely
  identifies the record, in string format.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DeletionMode"`: The name of the deletion mode for deleting the record. By default, the
  deletion mode is set to SoftDelete.
- `"TargetStores"`: A list of stores from which you're deleting the record. By default,
  Feature Store deletes the record from all of the stores that you're using for the
  FeatureGroup.
"""
function delete_record(
    EventTime,
    FeatureGroupName,
    RecordIdentifierValueAsString;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sagemaker_featurestore_runtime(
        "DELETE",
        "/FeatureGroup/$(FeatureGroupName)",
        Dict{String,Any}(
            "EventTime" => EventTime,
            "RecordIdentifierValueAsString" => RecordIdentifierValueAsString,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_record(
    EventTime,
    FeatureGroupName,
    RecordIdentifierValueAsString,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sagemaker_featurestore_runtime(
        "DELETE",
        "/FeatureGroup/$(FeatureGroupName)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "EventTime" => EventTime,
                    "RecordIdentifierValueAsString" => RecordIdentifierValueAsString,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_record(feature_group_name, record_identifier_value_as_string)
    get_record(feature_group_name, record_identifier_value_as_string, params::Dict{String,<:Any})

Use for OnlineStore serving from a FeatureStore. Only the latest records stored in the
OnlineStore can be retrieved. If no Record with RecordIdentifierValue is found, then an
empty result is returned.

# Arguments
- `feature_group_name`: The name of the feature group from which you want to retrieve a
  record.
- `record_identifier_value_as_string`: The value that corresponds to RecordIdentifier type
  and uniquely identifies the record in the FeatureGroup.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"FeatureName"`: List of names of Features to be retrieved. If not specified, the latest
  value for all the Features are returned.
"""
function get_record(
    FeatureGroupName,
    RecordIdentifierValueAsString;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sagemaker_featurestore_runtime(
        "GET",
        "/FeatureGroup/$(FeatureGroupName)",
        Dict{String,Any}("RecordIdentifierValueAsString" => RecordIdentifierValueAsString);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_record(
    FeatureGroupName,
    RecordIdentifierValueAsString,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sagemaker_featurestore_runtime(
        "GET",
        "/FeatureGroup/$(FeatureGroupName)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "RecordIdentifierValueAsString" => RecordIdentifierValueAsString
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_record(feature_group_name, record)
    put_record(feature_group_name, record, params::Dict{String,<:Any})

Used for data ingestion into the FeatureStore. The PutRecord API writes to both the
OnlineStore and OfflineStore. If the record is the latest record for the recordIdentifier,
the record is written to both the OnlineStore and OfflineStore. If the record is a historic
record, it is written only to the OfflineStore.

# Arguments
- `feature_group_name`: The name of the feature group that you want to insert the record
  into.
- `record`: List of FeatureValues to be inserted. This will be a full over-write. If you
  only want to update few of the feature values, do the following:   Use GetRecord to
  retrieve the latest record.   Update the record returned from GetRecord.    Use PutRecord
  to update feature values.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"TargetStores"`: A list of stores to which you're adding the record. By default, Feature
  Store adds the record to all of the stores that you're using for the FeatureGroup.
"""
function put_record(
    FeatureGroupName, Record; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sagemaker_featurestore_runtime(
        "PUT",
        "/FeatureGroup/$(FeatureGroupName)",
        Dict{String,Any}("Record" => Record);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_record(
    FeatureGroupName,
    Record,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sagemaker_featurestore_runtime(
        "PUT",
        "/FeatureGroup/$(FeatureGroupName)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Record" => Record), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
