# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
using Compat
using .AWSServices: quicksight

"""
    CancelIngestion()

Cancels an ongoing ingestion of data into SPICE.

Required Parameters
AwsAccountId => The AWS account ID.
DataSetId => The ID of the dataset used in the ingestion.
IngestionId => An ID for the ingestion.

"""
CancelIngestion(AwsAccountId, DataSetId, IngestionId) = quicksight("DELETE", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions/$(IngestionId)")
CancelIngestion(AwsAccountId, DataSetId, IngestionId, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions/$(IngestionId)", args)
CancelIngestion(a...; b...) = CancelIngestion(a..., b)

"""
    CreateAccountCustomization()

Creates a customization for the Amazon QuickSight subscription associated with your AWS account.

Required Parameters
AccountCustomization => The customizations you're adding to the QuickSight subscription for the AWS account. For example, you could add a default theme by setting AccountCustomization to the midnight theme (DefaultTheme="arn:aws:quicksight::aws:theme/MIDNIGHT") or to a custom theme (DefaultTheme="arn:aws:quicksight:us-west-2:111122223333:theme/bdb844d0-0fe9-4d9d-b520-0fe602d93639").
AwsAccountId => The ID for the AWS account that you want to customize QuickSight for.

Optional Parameters
namespace => The namespace associated with the customization that you're creating.
"""
CreateAccountCustomization(AccountCustomization, AwsAccountId) = quicksight("POST", "/accounts/$(AwsAccountId)/customizations", Dict{String, Any}("AccountCustomization"=>AccountCustomization))
CreateAccountCustomization(AccountCustomization, AwsAccountId, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/customizations", Dict{String, Any}("AccountCustomization"=>AccountCustomization, args...))
CreateAccountCustomization(a...; b...) = CreateAccountCustomization(a..., b)

"""
    CreateDashboard()

Creates a dashboard from a template. To first create a template, see the CreateTemplate API operation. A dashboard is an entity in QuickSight that identifies QuickSight reports, created from analyses. You can share QuickSight dashboards. With the right permissions, you can create scheduled email reports from them. The CreateDashboard, DescribeDashboard, and ListDashboardsByUser API operations act on the dashboard entity. If you have the correct permissions, you can create a dashboard from a template that exists in a different AWS account.

Required Parameters
AwsAccountId => The ID of the AWS account where you want to create the dashboard.
DashboardId => The ID for the dashboard, also added to the IAM policy.
Name => The display name of the dashboard.
SourceEntity => The entity that you are using as a source when you create the dashboard. In SourceEntity, you specify the type of object you're using as source. You can only create a dashboard from a template, so you use a SourceTemplate entity. If you need to create a dashboard from an analysis, first convert the analysis to a template by using the CreateTemplate API operation. For SourceTemplate, specify the Amazon Resource Name (ARN) of the source template. The SourceTemplateARN can contain any AWS Account and any QuickSight-supported AWS Region.  Use the DataSetReferences entity within SourceTemplate to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder. 

Optional Parameters
DashboardPublishOptions => Options for publishing the dashboard when you create it:    AvailabilityStatus for AdHocFilteringOption - This status can be either ENABLED or DISABLED. When this is set to DISABLED, QuickSight disables the left filter pane on the published dashboard, which can be used for ad hoc (one-time) filtering. This option is ENABLED by default.     AvailabilityStatus for ExportToCSVOption - This status can be either ENABLED or DISABLED. The visual option to export data to .csv format isn't enabled when this is set to DISABLED. This option is ENABLED by default.     VisibilityState for SheetControlsOption - This visibility state can be either COLLAPSED or EXPANDED. This option is COLLAPSED by default.   
Parameters => The parameters for the creation of the dashboard, which you want to use to override the default settings. A dashboard can have any type of parameters, and some parameters might accept multiple values. 
Permissions => A structure that contains the permissions of the dashboard. You can use this structure for granting permissions with principal and action information.
Tags => Contains a map of the key-value pairs for the resource tag or tags assigned to the dashboard.
ThemeArn => The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that is used in the source entity. The theme ARN must exist in the same AWS account where you create the dashboard.
VersionDescription => A description for the first version of the dashboard being created.
"""
CreateDashboard(AwsAccountId, DashboardId, Name, SourceEntity) = quicksight("POST", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)", Dict{String, Any}("Name"=>Name, "SourceEntity"=>SourceEntity))
CreateDashboard(AwsAccountId, DashboardId, Name, SourceEntity, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)", Dict{String, Any}("Name"=>Name, "SourceEntity"=>SourceEntity, args...))
CreateDashboard(a...; b...) = CreateDashboard(a..., b)

"""
    CreateDataSet()

Creates a dataset.

Required Parameters
AwsAccountId => The AWS account ID.
DataSetId => An ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.
ImportMode => Indicates whether you want to import the data into SPICE.
Name => The display name for the dataset.
PhysicalTableMap => Declares the physical tables that are available in the underlying data sources.

Optional Parameters
ColumnGroups => Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.
LogicalTableMap => Configures the combination and transformation of the data from the physical tables.
Permissions => A list of resource permissions on the dataset.
RowLevelPermissionDataSet => The row-level security configuration for the data that you want to create.
Tags => Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.
"""
CreateDataSet(AwsAccountId, DataSetId, ImportMode, Name, PhysicalTableMap) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sets", Dict{String, Any}("DataSetId"=>DataSetId, "ImportMode"=>ImportMode, "Name"=>Name, "PhysicalTableMap"=>PhysicalTableMap))
CreateDataSet(AwsAccountId, DataSetId, ImportMode, Name, PhysicalTableMap, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sets", Dict{String, Any}("DataSetId"=>DataSetId, "ImportMode"=>ImportMode, "Name"=>Name, "PhysicalTableMap"=>PhysicalTableMap, args...))
CreateDataSet(a...; b...) = CreateDataSet(a..., b)

"""
    CreateDataSource()

Creates a data source.

Required Parameters
AwsAccountId => The AWS account ID.
DataSourceId => An ID for the data source. This ID is unique per AWS Region for each AWS account. 
Name => A display name for the data source.
Type => The type of the data source. Currently, the supported types for this operation are: ATHENA, AURORA, AURORA_POSTGRESQL, MARIADB, MYSQL, POSTGRESQL, PRESTO, REDSHIFT, S3, SNOWFLAKE, SPARK, SQLSERVER, TERADATA. Use ListDataSources to return a list of all data sources.

Optional Parameters
Credentials => The credentials QuickSight that uses to connect to your underlying source. Currently, only credentials based on user name and password are supported.
DataSourceParameters => The parameters that QuickSight uses to connect to your underlying source.
Permissions => A list of resource permissions on the data source.
SslProperties => Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying source.
Tags => Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.
VpcConnectionProperties => Use this parameter only when you want QuickSight to use a VPC connection when connecting to your underlying source.
"""
CreateDataSource(AwsAccountId, DataSourceId, Name, Type) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sources", Dict{String, Any}("DataSourceId"=>DataSourceId, "Name"=>Name, "Type"=>Type))
CreateDataSource(AwsAccountId, DataSourceId, Name, Type, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sources", Dict{String, Any}("DataSourceId"=>DataSourceId, "Name"=>Name, "Type"=>Type, args...))
CreateDataSource(a...; b...) = CreateDataSource(a..., b)

"""
    CreateGroup()

Creates an Amazon QuickSight group. The permissions resource is arn:aws:quicksight:us-east-1:&lt;relevant-aws-account-id&gt;:group/default/&lt;group-name&gt; . The response is a group object.

Required Parameters
AwsAccountId => The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
GroupName => A name for the group that you want to create.
Namespace => The namespace. Currently, you should set this to default.

Optional Parameters
Description => A description for the group that you want to create.
"""
CreateGroup(AwsAccountId, GroupName, Namespace) = quicksight("POST", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups", Dict{String, Any}("GroupName"=>GroupName))
CreateGroup(AwsAccountId, GroupName, Namespace, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups", Dict{String, Any}("GroupName"=>GroupName, args...))
CreateGroup(a...; b...) = CreateGroup(a..., b)

"""
    CreateGroupMembership()

Adds an Amazon QuickSight user to an Amazon QuickSight group. 

Required Parameters
AwsAccountId => The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
GroupName => The name of the group that you want to add the user to.
MemberName => The name of the user that you want to add to the group membership.
Namespace => The namespace. Currently, you should set this to default.

"""
CreateGroupMembership(AwsAccountId, GroupName, MemberName, Namespace) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)/members/$(MemberName)")
CreateGroupMembership(AwsAccountId, GroupName, MemberName, Namespace, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)/members/$(MemberName)", args)
CreateGroupMembership(a...; b...) = CreateGroupMembership(a..., b)

"""
    CreateIAMPolicyAssignment()

Creates an assignment with one specified IAM policy, identified by its Amazon Resource Name (ARN). This policy will be assigned to specified groups or users of Amazon QuickSight. The users and groups need to be in the same namespace. 

Required Parameters
AssignmentName => The name of the assignment. It must be unique within an AWS account.
AssignmentStatus => The status of the assignment. Possible values are as follows:    ENABLED - Anything specified in this assignment is used when creating the data source.    DISABLED - This assignment isn't used when creating the data source.    DRAFT - This assignment is an unfinished draft and isn't used when creating the data source.  
AwsAccountId => The ID of the AWS account where you want to assign an IAM policy to QuickSight users or groups.
Namespace => The namespace that contains the assignment.

Optional Parameters
Identities => The QuickSight users, groups, or both that you want to assign the policy to.
PolicyArn => The ARN for the IAM policy to apply to the QuickSight users and groups specified in this assignment.
"""
CreateIAMPolicyAssignment(AssignmentName, AssignmentStatus, AwsAccountId, Namespace) = quicksight("POST", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments/", Dict{String, Any}("AssignmentName"=>AssignmentName, "AssignmentStatus"=>AssignmentStatus))
CreateIAMPolicyAssignment(AssignmentName, AssignmentStatus, AwsAccountId, Namespace, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments/", Dict{String, Any}("AssignmentName"=>AssignmentName, "AssignmentStatus"=>AssignmentStatus, args...))
CreateIAMPolicyAssignment(a...; b...) = CreateIAMPolicyAssignment(a..., b)

"""
    CreateIngestion()

Creates and starts a new SPICE ingestion on a dataset Any ingestions operating on tagged datasets inherit the same tags automatically for use in access control. For an example, see How do I create an IAM policy to control access to Amazon EC2 resources using tags? in the AWS Knowledge Center. Tags are visible on the tagged dataset, but not on the ingestion resource.

Required Parameters
AwsAccountId => The AWS account ID.
DataSetId => The ID of the dataset used in the ingestion.
IngestionId => An ID for the ingestion.

"""
CreateIngestion(AwsAccountId, DataSetId, IngestionId) = quicksight("PUT", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions/$(IngestionId)")
CreateIngestion(AwsAccountId, DataSetId, IngestionId, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions/$(IngestionId)", args)
CreateIngestion(a...; b...) = CreateIngestion(a..., b)

"""
    CreateNamespace()

(Enterprise edition only) Creates a new namespace for you to use with Amazon QuickSight. A namespace allows you to isolate the QuickSight users and groups that are registered for that namespace. Users that access the namespace can share assets only with other users or groups in the same namespace. They can't see users and groups in other namespaces. You can create a namespace after your AWS account is subscribed to QuickSight. The namespace must be unique within the AWS account. By default, there is a limit of 100 namespaces per AWS account. To increase your limit, create a ticket with AWS Support. 

Required Parameters
AwsAccountId => The ID for the AWS account that you want to create the QuickSight namespace in.
IdentityStore => Specifies the type of your user identity directory. Currently, this supports users with an identity type of QUICKSIGHT.
Namespace => The name that you want to use to describe the new namespace.

Optional Parameters
Tags => The tags that you want to associate with the namespace that you're creating.
"""
CreateNamespace(AwsAccountId, IdentityStore, Namespace) = quicksight("POST", "/accounts/$(AwsAccountId)", Dict{String, Any}("IdentityStore"=>IdentityStore, "Namespace"=>Namespace))
CreateNamespace(AwsAccountId, IdentityStore, Namespace, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)", Dict{String, Any}("IdentityStore"=>IdentityStore, "Namespace"=>Namespace, args...))
CreateNamespace(a...; b...) = CreateNamespace(a..., b)

"""
    CreateTemplate()

Creates a template from an existing QuickSight analysis or template. You can use the resulting template to create a dashboard. A template is an entity in QuickSight that encapsulates the metadata required to create an analysis and that you can use to create s dashboard. A template adds a layer of abstraction by using placeholders to replace the dataset associated with the analysis. You can use templates to create dashboards by replacing dataset placeholders with datasets that follow the same schema that was used to create the source analysis and template.

Required Parameters
AwsAccountId => The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
SourceEntity => The entity that you are using as a source when you create the template. In SourceEntity, you specify the type of object you're using as source: SourceTemplate for a template or SourceAnalysis for an analysis. Both of these require an Amazon Resource Name (ARN). For SourceTemplate, specify the ARN of the source template. For SourceAnalysis, specify the ARN of the source analysis. The SourceTemplate ARN can contain any AWS Account and any QuickSight-supported AWS Region.  Use the DataSetReferences entity within SourceTemplate or SourceAnalysis to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder. 
TemplateId => An ID for the template that you want to create. This template is unique per AWS Region in each AWS account.

Optional Parameters
Name => A display name for the template.
Permissions => A list of resource permissions to be set on the template. 
Tags => Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.
VersionDescription => A description of the current template version being created. This API operation creates the first version of the template. Every time UpdateTemplate is called, a new version is created. Each version of the template maintains a description of the version in the VersionDescription field.
"""
CreateTemplate(AwsAccountId, SourceEntity, TemplateId) = quicksight("POST", "/accounts/$(AwsAccountId)/templates/$(TemplateId)", Dict{String, Any}("SourceEntity"=>SourceEntity))
CreateTemplate(AwsAccountId, SourceEntity, TemplateId, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/templates/$(TemplateId)", Dict{String, Any}("SourceEntity"=>SourceEntity, args...))
CreateTemplate(a...; b...) = CreateTemplate(a..., b)

"""
    CreateTemplateAlias()

Creates a template alias for a template.

Required Parameters
AliasName => The name that you want to give to the template alias that you're creating. Don't start the alias name with the   character. Alias names that start with   are reserved by QuickSight. 
AwsAccountId => The ID of the AWS account that contains the template that you creating an alias for.
TemplateId => An ID for the template.
TemplateVersionNumber => The version number of the template.

"""
CreateTemplateAlias(AliasName, AwsAccountId, TemplateId, TemplateVersionNumber) = quicksight("POST", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)", Dict{String, Any}("TemplateVersionNumber"=>TemplateVersionNumber))
CreateTemplateAlias(AliasName, AwsAccountId, TemplateId, TemplateVersionNumber, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)", Dict{String, Any}("TemplateVersionNumber"=>TemplateVersionNumber, args...))
CreateTemplateAlias(a...; b...) = CreateTemplateAlias(a..., b)

"""
    CreateTheme()

Creates a theme. A theme is set of configuration options for color and layout. Themes apply to analyses and dashboards. For more information, see Using Themes in Amazon QuickSight in the Amazon QuickSight User Guide.

Required Parameters
AwsAccountId => The ID of the AWS account where you want to store the new theme. 
BaseThemeId => The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use ListThemes or choose Themes from within a QuickSight analysis. 
Configuration => The theme configuration, which contains the theme display properties.
Name => A display name for the theme.
ThemeId => An ID for the theme that you want to create. The theme ID is unique per AWS Region in each AWS account.

Optional Parameters
Permissions => A valid grouping of resource permissions to apply to the new theme. 
Tags => A map of the key-value pairs for the resource tag or tags that you want to add to the resource.
VersionDescription => A description of the first version of the theme that you're creating. Every time UpdateTheme is called, a new version is created. Each version of the theme has a description of the version in the VersionDescription field.
"""
CreateTheme(AwsAccountId, BaseThemeId, Configuration, Name, ThemeId) = quicksight("POST", "/accounts/$(AwsAccountId)/themes/$(ThemeId)", Dict{String, Any}("BaseThemeId"=>BaseThemeId, "Configuration"=>Configuration, "Name"=>Name))
CreateTheme(AwsAccountId, BaseThemeId, Configuration, Name, ThemeId, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/themes/$(ThemeId)", Dict{String, Any}("BaseThemeId"=>BaseThemeId, "Configuration"=>Configuration, "Name"=>Name, args...))
CreateTheme(a...; b...) = CreateTheme(a..., b)

"""
    CreateThemeAlias()

Creates a theme alias for a theme.

Required Parameters
AliasName => The name that you want to give to the theme alias that you are creating. The alias name can't begin with a  . Alias names that start with   are reserved by Amazon QuickSight. 
AwsAccountId => The ID of the AWS account that contains the theme for the new theme alias.
ThemeId => An ID for the theme alias.
ThemeVersionNumber => The version number of the theme.

"""
CreateThemeAlias(AliasName, AwsAccountId, ThemeId, ThemeVersionNumber) = quicksight("POST", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)", Dict{String, Any}("ThemeVersionNumber"=>ThemeVersionNumber))
CreateThemeAlias(AliasName, AwsAccountId, ThemeId, ThemeVersionNumber, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)", Dict{String, Any}("ThemeVersionNumber"=>ThemeVersionNumber, args...))
CreateThemeAlias(a...; b...) = CreateThemeAlias(a..., b)

"""
    DeleteAccountCustomization()

Deletes customizations for the QuickSight subscription on your AWS account.

Required Parameters
AwsAccountId => The ID for the AWS account that you want to delete QuickSight customizations from.

Optional Parameters
namespace => The namespace associated with the customization that you're deleting.
"""
DeleteAccountCustomization(AwsAccountId) = quicksight("DELETE", "/accounts/$(AwsAccountId)/customizations")
DeleteAccountCustomization(AwsAccountId, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/customizations", args)
DeleteAccountCustomization(a...; b...) = DeleteAccountCustomization(a..., b)

"""
    DeleteDashboard()

Deletes a dashboard.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the dashboard that you're deleting.
DashboardId => The ID for the dashboard.

Optional Parameters
version-number => The version number of the dashboard. If the version number property is provided, only the specified version of the dashboard is deleted.
"""
DeleteDashboard(AwsAccountId, DashboardId) = quicksight("DELETE", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)")
DeleteDashboard(AwsAccountId, DashboardId, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)", args)
DeleteDashboard(a...; b...) = DeleteDashboard(a..., b)

"""
    DeleteDataSet()

Deletes a dataset.

Required Parameters
AwsAccountId => The AWS account ID.
DataSetId => The ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.

"""
DeleteDataSet(AwsAccountId, DataSetId) = quicksight("DELETE", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)")
DeleteDataSet(AwsAccountId, DataSetId, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)", args)
DeleteDataSet(a...; b...) = DeleteDataSet(a..., b)

"""
    DeleteDataSource()

Deletes the data source permanently. This action breaks all the datasets that reference the deleted data source.

Required Parameters
AwsAccountId => The AWS account ID.
DataSourceId => The ID of the data source. This ID is unique per AWS Region for each AWS account.

"""
DeleteDataSource(AwsAccountId, DataSourceId) = quicksight("DELETE", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)")
DeleteDataSource(AwsAccountId, DataSourceId, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)", args)
DeleteDataSource(a...; b...) = DeleteDataSource(a..., b)

"""
    DeleteGroup()

Removes a user group from Amazon QuickSight. 

Required Parameters
AwsAccountId => The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
GroupName => The name of the group that you want to delete.
Namespace => The namespace. Currently, you should set this to default.

"""
DeleteGroup(AwsAccountId, GroupName, Namespace) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)")
DeleteGroup(AwsAccountId, GroupName, Namespace, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)", args)
DeleteGroup(a...; b...) = DeleteGroup(a..., b)

"""
    DeleteGroupMembership()

Removes a user from a group so that the user is no longer a member of the group.

Required Parameters
AwsAccountId => The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
GroupName => The name of the group that you want to delete the user from.
MemberName => The name of the user that you want to delete from the group membership.
Namespace => The namespace. Currently, you should set this to default.

"""
DeleteGroupMembership(AwsAccountId, GroupName, MemberName, Namespace) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)/members/$(MemberName)")
DeleteGroupMembership(AwsAccountId, GroupName, MemberName, Namespace, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)/members/$(MemberName)", args)
DeleteGroupMembership(a...; b...) = DeleteGroupMembership(a..., b)

"""
    DeleteIAMPolicyAssignment()

Deletes an existing IAM policy assignment.

Required Parameters
AssignmentName => The name of the assignment. 
AwsAccountId => The AWS account ID where you want to delete the IAM policy assignment.
Namespace => The namespace that contains the assignment.

"""
DeleteIAMPolicyAssignment(AssignmentName, AwsAccountId, Namespace) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespace/$(Namespace)/iam-policy-assignments/$(AssignmentName)")
DeleteIAMPolicyAssignment(AssignmentName, AwsAccountId, Namespace, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespace/$(Namespace)/iam-policy-assignments/$(AssignmentName)", args)
DeleteIAMPolicyAssignment(a...; b...) = DeleteIAMPolicyAssignment(a..., b)

"""
    DeleteNamespace()

Deletes a namespace and the users and groups that are associated with the namespace. This is an asynchronous process. Assets including dashboards, analyses, datasets and data sources are not deleted. To delete these assets, you use the APIs for the relevant asset. 

Required Parameters
AwsAccountId => The ID for the AWS account that you want to delete the QuickSight namespace from.
Namespace => The namespace that you want to delete.

"""
DeleteNamespace(AwsAccountId, Namespace) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)")
DeleteNamespace(AwsAccountId, Namespace, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)", args)
DeleteNamespace(a...; b...) = DeleteNamespace(a..., b)

"""
    DeleteTemplate()

Deletes a template.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the template that you're deleting.
TemplateId => An ID for the template you want to delete.

Optional Parameters
version-number => Specifies the version of the template that you want to delete. If you don't provide a version number, DeleteTemplate deletes all versions of the template. 
"""
DeleteTemplate(AwsAccountId, TemplateId) = quicksight("DELETE", "/accounts/$(AwsAccountId)/templates/$(TemplateId)")
DeleteTemplate(AwsAccountId, TemplateId, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/templates/$(TemplateId)", args)
DeleteTemplate(a...; b...) = DeleteTemplate(a..., b)

"""
    DeleteTemplateAlias()

Deletes the item that the specified template alias points to. If you provide a specific alias, you delete the version of the template that the alias points to.

Required Parameters
AliasName => The name for the template alias. To delete a specific alias, you delete the version that the alias points to. You can specify the alias name, or specify the latest version of the template by providing the keyword  LATEST in the AliasName parameter. 
AwsAccountId => The ID of the AWS account that contains the item to delete.
TemplateId => The ID for the template that the specified alias is for.

"""
DeleteTemplateAlias(AliasName, AwsAccountId, TemplateId) = quicksight("DELETE", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)")
DeleteTemplateAlias(AliasName, AwsAccountId, TemplateId, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)", args)
DeleteTemplateAlias(a...; b...) = DeleteTemplateAlias(a..., b)

"""
    DeleteTheme()

Deletes a theme.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the theme that you're deleting.
ThemeId => An ID for the theme that you want to delete.

Optional Parameters
version-number => The version of the theme that you want to delete.   Note: If you don't provide a version number, you're using this call to DeleteTheme to delete all versions of the theme.
"""
DeleteTheme(AwsAccountId, ThemeId) = quicksight("DELETE", "/accounts/$(AwsAccountId)/themes/$(ThemeId)")
DeleteTheme(AwsAccountId, ThemeId, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/themes/$(ThemeId)", args)
DeleteTheme(a...; b...) = DeleteTheme(a..., b)

"""
    DeleteThemeAlias()

Deletes the version of the theme that the specified theme alias points to. If you provide a specific alias, you delete the version of the theme that the alias points to.

Required Parameters
AliasName => The unique name for the theme alias to delete.
AwsAccountId => The ID of the AWS account that contains the theme alias to delete.
ThemeId => The ID for the theme that the specified alias is for.

"""
DeleteThemeAlias(AliasName, AwsAccountId, ThemeId) = quicksight("DELETE", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)")
DeleteThemeAlias(AliasName, AwsAccountId, ThemeId, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)", args)
DeleteThemeAlias(a...; b...) = DeleteThemeAlias(a..., b)

"""
    DeleteUser()

Deletes the Amazon QuickSight user that is associated with the identity of the AWS Identity and Access Management (IAM) user or role that's making the call. The IAM user isn't deleted as a result of this call. 

Required Parameters
AwsAccountId => The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
Namespace => The namespace. Currently, you should set this to default.
UserName => The name of the user that you want to delete.

"""
DeleteUser(AwsAccountId, Namespace, UserName) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)")
DeleteUser(AwsAccountId, Namespace, UserName, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)", args)
DeleteUser(a...; b...) = DeleteUser(a..., b)

"""
    DeleteUserByPrincipalId()

Deletes a user identified by its principal ID. 

Required Parameters
AwsAccountId => The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
Namespace => The namespace. Currently, you should set this to default.
PrincipalId => The principal ID of the user.

"""
DeleteUserByPrincipalId(AwsAccountId, Namespace, PrincipalId) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/user-principals/$(PrincipalId)")
DeleteUserByPrincipalId(AwsAccountId, Namespace, PrincipalId, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/user-principals/$(PrincipalId)", args)
DeleteUserByPrincipalId(a...; b...) = DeleteUserByPrincipalId(a..., b)

"""
    DescribeAccountCustomization()

Describes the customizations associated with your AWS account.

Required Parameters
AwsAccountId => The ID for the AWS account that you want to describe QuickSight customizations for.

Optional Parameters
namespace => The namespace associated with the customization that you're describing.
resolved => The status of the creation of the customization. This is an asynchronous process. A status of CREATED means that your customization is ready to use.
"""
DescribeAccountCustomization(AwsAccountId) = quicksight("GET", "/accounts/$(AwsAccountId)/customizations")
DescribeAccountCustomization(AwsAccountId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/customizations", args)
DescribeAccountCustomization(a...; b...) = DescribeAccountCustomization(a..., b)

"""
    DescribeAccountSettings()

Describes the settings that were used when your QuickSight subscription was first created in this AWS Account.

Required Parameters
AwsAccountId => The ID for the AWS account that contains the QuickSight namespaces that you want to list.

"""
DescribeAccountSettings(AwsAccountId) = quicksight("GET", "/accounts/$(AwsAccountId)/settings")
DescribeAccountSettings(AwsAccountId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/settings", args)
DescribeAccountSettings(a...; b...) = DescribeAccountSettings(a..., b)

"""
    DescribeDashboard()

Provides a summary for a dashboard.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the dashboard that you're describing.
DashboardId => The ID for the dashboard.

Optional Parameters
alias-name => The alias name.
version-number => The version number for the dashboard. If a version number isn't passed, the latest published dashboard version is described. 
"""
DescribeDashboard(AwsAccountId, DashboardId) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)")
DescribeDashboard(AwsAccountId, DashboardId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)", args)
DescribeDashboard(a...; b...) = DescribeDashboard(a..., b)

"""
    DescribeDashboardPermissions()

Describes read and write permissions for a dashboard.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the dashboard that you're describing permissions for.
DashboardId => The ID for the dashboard, also added to the IAM policy.

"""
DescribeDashboardPermissions(AwsAccountId, DashboardId) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/permissions")
DescribeDashboardPermissions(AwsAccountId, DashboardId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/permissions", args)
DescribeDashboardPermissions(a...; b...) = DescribeDashboardPermissions(a..., b)

"""
    DescribeDataSet()

Describes a dataset. 

Required Parameters
AwsAccountId => The AWS account ID.
DataSetId => The ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.

"""
DescribeDataSet(AwsAccountId, DataSetId) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)")
DescribeDataSet(AwsAccountId, DataSetId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)", args)
DescribeDataSet(a...; b...) = DescribeDataSet(a..., b)

"""
    DescribeDataSetPermissions()

Describes the permissions on a dataset. The permissions resource is arn:aws:quicksight:region:aws-account-id:dataset/data-set-id.

Required Parameters
AwsAccountId => The AWS account ID.
DataSetId => The ID for the dataset that you want to create. This ID is unique per AWS Region for each AWS account.

"""
DescribeDataSetPermissions(AwsAccountId, DataSetId) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/permissions")
DescribeDataSetPermissions(AwsAccountId, DataSetId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/permissions", args)
DescribeDataSetPermissions(a...; b...) = DescribeDataSetPermissions(a..., b)

"""
    DescribeDataSource()

Describes a data source.

Required Parameters
AwsAccountId => The AWS account ID.
DataSourceId => The ID of the data source. This ID is unique per AWS Region for each AWS account.

"""
DescribeDataSource(AwsAccountId, DataSourceId) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)")
DescribeDataSource(AwsAccountId, DataSourceId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)", args)
DescribeDataSource(a...; b...) = DescribeDataSource(a..., b)

"""
    DescribeDataSourcePermissions()

Describes the resource permissions for a data source.

Required Parameters
AwsAccountId => The AWS account ID.
DataSourceId => The ID of the data source. This ID is unique per AWS Region for each AWS account.

"""
DescribeDataSourcePermissions(AwsAccountId, DataSourceId) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)/permissions")
DescribeDataSourcePermissions(AwsAccountId, DataSourceId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)/permissions", args)
DescribeDataSourcePermissions(a...; b...) = DescribeDataSourcePermissions(a..., b)

"""
    DescribeGroup()

Returns an Amazon QuickSight group's description and Amazon Resource Name (ARN). 

Required Parameters
AwsAccountId => The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
GroupName => The name of the group that you want to describe.
Namespace => The namespace. Currently, you should set this to default.

"""
DescribeGroup(AwsAccountId, GroupName, Namespace) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)")
DescribeGroup(AwsAccountId, GroupName, Namespace, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)", args)
DescribeGroup(a...; b...) = DescribeGroup(a..., b)

"""
    DescribeIAMPolicyAssignment()

Describes an existing IAM policy assignment, as specified by the assignment name.

Required Parameters
AssignmentName => The name of the assignment. 
AwsAccountId => The ID of the AWS account that contains the assignment that you want to describe.
Namespace => The namespace that contains the assignment.

"""
DescribeIAMPolicyAssignment(AssignmentName, AwsAccountId, Namespace) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments/$(AssignmentName)")
DescribeIAMPolicyAssignment(AssignmentName, AwsAccountId, Namespace, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments/$(AssignmentName)", args)
DescribeIAMPolicyAssignment(a...; b...) = DescribeIAMPolicyAssignment(a..., b)

"""
    DescribeIngestion()

Describes a SPICE ingestion.

Required Parameters
AwsAccountId => The AWS account ID.
DataSetId => The ID of the dataset used in the ingestion.
IngestionId => An ID for the ingestion.

"""
DescribeIngestion(AwsAccountId, DataSetId, IngestionId) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions/$(IngestionId)")
DescribeIngestion(AwsAccountId, DataSetId, IngestionId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions/$(IngestionId)", args)
DescribeIngestion(a...; b...) = DescribeIngestion(a..., b)

"""
    DescribeNamespace()

Describes the current namespace.

Required Parameters
AwsAccountId => The ID for the AWS account that contains the QuickSight namespace that you want to describe.
Namespace => The namespace that you want to describe.

"""
DescribeNamespace(AwsAccountId, Namespace) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)")
DescribeNamespace(AwsAccountId, Namespace, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)", args)
DescribeNamespace(a...; b...) = DescribeNamespace(a..., b)

"""
    DescribeTemplate()

Describes a template's metadata.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the template that you're describing.
TemplateId => The ID for the template.

Optional Parameters
alias-name => The alias of the template that you want to describe. If you name a specific alias, you describe the version that the alias points to. You can specify the latest version of the template by providing the keyword  LATEST in the AliasName parameter. The keyword  PUBLISHED doesn't apply to templates.
version-number => (Optional) The number for the version to describe. If a VersionNumber parameter value isn't provided, the latest version of the template is described.
"""
DescribeTemplate(AwsAccountId, TemplateId) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)")
DescribeTemplate(AwsAccountId, TemplateId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)", args)
DescribeTemplate(a...; b...) = DescribeTemplate(a..., b)

"""
    DescribeTemplateAlias()

Describes the template alias for a template.

Required Parameters
AliasName => The name of the template alias that you want to describe. If you name a specific alias, you describe the version that the alias points to. You can specify the latest version of the template by providing the keyword  LATEST in the AliasName parameter. The keyword  PUBLISHED doesn't apply to templates.
AwsAccountId => The ID of the AWS account that contains the template alias that you're describing.
TemplateId => The ID for the template.

"""
DescribeTemplateAlias(AliasName, AwsAccountId, TemplateId) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)")
DescribeTemplateAlias(AliasName, AwsAccountId, TemplateId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)", args)
DescribeTemplateAlias(a...; b...) = DescribeTemplateAlias(a..., b)

"""
    DescribeTemplatePermissions()

Describes read and write permissions on a template.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the template that you're describing.
TemplateId => The ID for the template.

"""
DescribeTemplatePermissions(AwsAccountId, TemplateId) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/permissions")
DescribeTemplatePermissions(AwsAccountId, TemplateId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/permissions", args)
DescribeTemplatePermissions(a...; b...) = DescribeTemplatePermissions(a..., b)

"""
    DescribeTheme()

Describes a theme.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the theme that you're describing.
ThemeId => The ID for the theme.

Optional Parameters
alias-name => The alias of the theme that you want to describe. If you name a specific alias, you describe the version that the alias points to. You can specify the latest version of the theme by providing the keyword  LATEST in the AliasName parameter. The keyword  PUBLISHED doesn't apply to themes.
version-number => The version number for the version to describe. If a VersionNumber parameter value isn't provided, the latest version of the theme is described.
"""
DescribeTheme(AwsAccountId, ThemeId) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)")
DescribeTheme(AwsAccountId, ThemeId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)", args)
DescribeTheme(a...; b...) = DescribeTheme(a..., b)

"""
    DescribeThemeAlias()

Describes the alias for a theme.

Required Parameters
AliasName => The name of the theme alias that you want to describe.
AwsAccountId => The ID of the AWS account that contains the theme alias that you're describing.
ThemeId => The ID for the theme.

"""
DescribeThemeAlias(AliasName, AwsAccountId, ThemeId) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)")
DescribeThemeAlias(AliasName, AwsAccountId, ThemeId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)", args)
DescribeThemeAlias(a...; b...) = DescribeThemeAlias(a..., b)

"""
    DescribeThemePermissions()

Describes the read and write permissions for a theme.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the theme that you're describing.
ThemeId => The ID for the theme that you want to describe permissions for.

"""
DescribeThemePermissions(AwsAccountId, ThemeId) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/permissions")
DescribeThemePermissions(AwsAccountId, ThemeId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/permissions", args)
DescribeThemePermissions(a...; b...) = DescribeThemePermissions(a..., b)

"""
    DescribeUser()

Returns information about a user, given the user name. 

Required Parameters
AwsAccountId => The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
Namespace => The namespace. Currently, you should set this to default.
UserName => The name of the user that you want to describe.

"""
DescribeUser(AwsAccountId, Namespace, UserName) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)")
DescribeUser(AwsAccountId, Namespace, UserName, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)", args)
DescribeUser(a...; b...) = DescribeUser(a..., b)

"""
    GetDashboardEmbedUrl()

Generates a URL and authorization code that you can embed in your web server code. Before you use this command, make sure that you have configured the dashboards and permissions.  Currently, you can use GetDashboardEmbedURL only from the server, not from the user's browser. The following rules apply to the combination of URL and authorization code:   They must be used together.   They can be used one time only.   They are valid for 5 minutes after you run this command.   The resulting user session is valid for 10 hours.    For more information, see Embedding Amazon QuickSight Dashboards in the Amazon QuickSight User Guide or Embedding Amazon QuickSight Dashboards in the Amazon QuickSight API Reference.

Required Parameters
AwsAccountId => The ID for the AWS account that contains the dashboard that you're embedding.
DashboardId => The ID for the dashboard, also added to the IAM policy.
creds-type => The authentication method that the user uses to sign in.

Optional Parameters
reset-disabled => Remove the reset button on the embedded dashboard. The default is FALSE, which enables the reset button.
session-lifetime => How many minutes the session is valid. The session lifetime must be 15-600 minutes.
undo-redo-disabled => Remove the undo/redo button on the embedded dashboard. The default is FALSE, which enables the undo/redo button.
user-arn => The Amazon QuickSight user's Amazon Resource Name (ARN), for use with QUICKSIGHT identity type. You can use this for any Amazon QuickSight users in your account (readers, authors, or admins) authenticated as one of the following:   Active Directory (AD) users or group members   Invited nonfederated users   IAM users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation.  
"""
GetDashboardEmbedUrl(AwsAccountId, DashboardId, creds_type) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/embed-url", Dict{String, Any}("creds-type"=>creds_type))
GetDashboardEmbedUrl(AwsAccountId, DashboardId, creds_type, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/embed-url", Dict{String, Any}("creds-type"=>creds_type, args...))
GetDashboardEmbedUrl(a...; b...) = GetDashboardEmbedUrl(a..., b)

"""
    GetSessionEmbedUrl()

Generates a session URL and authorization code that you can embed in your web server code. 

Required Parameters
AwsAccountId => The ID for the AWS account that contains the QuickSight session that you're embedding.

Optional Parameters
entry-point => The entry point for the embedded session.
session-lifetime => How many minutes the session is valid. The session lifetime must be 15-600 minutes.
user-arn => The Amazon QuickSight user's Amazon Resource Name (ARN), for use with QUICKSIGHT identity type. You can use this for any Amazon QuickSight users in your account (readers, authors, or admins) authenticated as one of the following:   Active Directory (AD) users or group members   Invited nonfederated users   IAM users and IAM role-based sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation.  
"""
GetSessionEmbedUrl(AwsAccountId) = quicksight("GET", "/accounts/$(AwsAccountId)/session-embed-url")
GetSessionEmbedUrl(AwsAccountId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/session-embed-url", args)
GetSessionEmbedUrl(a...; b...) = GetSessionEmbedUrl(a..., b)

"""
    ListDashboardVersions()

Lists all the versions of the dashboards in the QuickSight subscription.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the dashboard that you're listing versions for.
DashboardId => The ID for the dashboard.

Optional Parameters
max-results => The maximum number of results to be returned per request.
next-token => The token for the next set of results, or null if there are no more results.
"""
ListDashboardVersions(AwsAccountId, DashboardId) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/versions")
ListDashboardVersions(AwsAccountId, DashboardId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/versions", args)
ListDashboardVersions(a...; b...) = ListDashboardVersions(a..., b)

"""
    ListDashboards()

Lists dashboards in an AWS account.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the dashboards that you're listing.

Optional Parameters
max-results => The maximum number of results to be returned per request.
next-token => The token for the next set of results, or null if there are no more results.
"""
ListDashboards(AwsAccountId) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards")
ListDashboards(AwsAccountId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards", args)
ListDashboards(a...; b...) = ListDashboards(a..., b)

"""
    ListDataSets()

Lists all of the datasets belonging to the current AWS account in an AWS Region. The permissions resource is arn:aws:quicksight:region:aws-account-id:dataset/*.

Required Parameters
AwsAccountId => The AWS account ID.

Optional Parameters
max-results => The maximum number of results to be returned per request.
next-token => The token for the next set of results, or null if there are no more results.
"""
ListDataSets(AwsAccountId) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets")
ListDataSets(AwsAccountId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets", args)
ListDataSets(a...; b...) = ListDataSets(a..., b)

"""
    ListDataSources()

Lists data sources in current AWS Region that belong to this AWS account.

Required Parameters
AwsAccountId => The AWS account ID.

Optional Parameters
max-results => The maximum number of results to be returned per request.
next-token => The token for the next set of results, or null if there are no more results.
"""
ListDataSources(AwsAccountId) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sources")
ListDataSources(AwsAccountId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sources", args)
ListDataSources(a...; b...) = ListDataSources(a..., b)

"""
    ListGroupMemberships()

Lists member users in a group.

Required Parameters
AwsAccountId => The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
GroupName => The name of the group that you want to see a membership list of.
Namespace => The namespace. Currently, you should set this to default.

Optional Parameters
max-results => The maximum number of results to return from this request.
next-token => A pagination token that can be used in a subsequent request.
"""
ListGroupMemberships(AwsAccountId, GroupName, Namespace) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)/members")
ListGroupMemberships(AwsAccountId, GroupName, Namespace, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)/members", args)
ListGroupMemberships(a...; b...) = ListGroupMemberships(a..., b)

"""
    ListGroups()

Lists all user groups in Amazon QuickSight. 

Required Parameters
AwsAccountId => The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
Namespace => The namespace. Currently, you should set this to default.

Optional Parameters
max-results => The maximum number of results to return.
next-token => A pagination token that can be used in a subsequent request.
"""
ListGroups(AwsAccountId, Namespace) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups")
ListGroups(AwsAccountId, Namespace, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups", args)
ListGroups(a...; b...) = ListGroups(a..., b)

"""
    ListIAMPolicyAssignments()

Lists IAM policy assignments in the current Amazon QuickSight account.

Required Parameters
AwsAccountId => The ID of the AWS account that contains these IAM policy assignments.
Namespace => The namespace for the assignments.

Optional Parameters
AssignmentStatus => The status of the assignments.
max-results => The maximum number of results to be returned per request.
next-token => The token for the next set of results, or null if there are no more results.
"""
ListIAMPolicyAssignments(AwsAccountId, Namespace) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments")
ListIAMPolicyAssignments(AwsAccountId, Namespace, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments", args)
ListIAMPolicyAssignments(a...; b...) = ListIAMPolicyAssignments(a..., b)

"""
    ListIAMPolicyAssignmentsForUser()

Lists all the IAM policy assignments, including the Amazon Resource Names (ARNs) for the IAM policies assigned to the specified user and group or groups that the user belongs to.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the assignments.
Namespace => The namespace of the assignment.
UserName => The name of the user.

Optional Parameters
max-results => The maximum number of results to be returned per request.
next-token => The token for the next set of results, or null if there are no more results.
"""
ListIAMPolicyAssignmentsForUser(AwsAccountId, Namespace, UserName) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)/iam-policy-assignments")
ListIAMPolicyAssignmentsForUser(AwsAccountId, Namespace, UserName, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)/iam-policy-assignments", args)
ListIAMPolicyAssignmentsForUser(a...; b...) = ListIAMPolicyAssignmentsForUser(a..., b)

"""
    ListIngestions()

Lists the history of SPICE ingestions for a dataset.

Required Parameters
AwsAccountId => The AWS account ID.
DataSetId => The ID of the dataset used in the ingestion.

Optional Parameters
max-results => The maximum number of results to be returned per request.
next-token => The token for the next set of results, or null if there are no more results.
"""
ListIngestions(AwsAccountId, DataSetId) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions")
ListIngestions(AwsAccountId, DataSetId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions", args)
ListIngestions(a...; b...) = ListIngestions(a..., b)

"""
    ListNamespaces()

Lists the namespaces for the specified AWS account.

Required Parameters
AwsAccountId => The ID for the AWS account that contains the QuickSight namespaces that you want to list.

Optional Parameters
max-results => The maximum number of results to return.
next-token => A pagination token that can be used in a subsequent request.
"""
ListNamespaces(AwsAccountId) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces")
ListNamespaces(AwsAccountId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces", args)
ListNamespaces(a...; b...) = ListNamespaces(a..., b)

"""
    ListTagsForResource()

Lists the tags assigned to a resource.

Required Parameters
ResourceArn => The Amazon Resource Name (ARN) of the resource that you want a list of tags for.

"""
ListTagsForResource(ResourceArn) = quicksight("GET", "/resources/$(ResourceArn)/tags")
ListTagsForResource(ResourceArn, args::AbstractDict{String, <: Any}) = quicksight("GET", "/resources/$(ResourceArn)/tags", args)
ListTagsForResource(a...; b...) = ListTagsForResource(a..., b)

"""
    ListTemplateAliases()

Lists all the aliases of a template.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the template aliases that you're listing.
TemplateId => The ID for the template.

Optional Parameters
max-result => The maximum number of results to be returned per request.
next-token => The token for the next set of results, or null if there are no more results.
"""
ListTemplateAliases(AwsAccountId, TemplateId) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases")
ListTemplateAliases(AwsAccountId, TemplateId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases", args)
ListTemplateAliases(a...; b...) = ListTemplateAliases(a..., b)

"""
    ListTemplateVersions()

Lists all the versions of the templates in the current Amazon QuickSight account.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the templates that you're listing.
TemplateId => The ID for the template.

Optional Parameters
max-results => The maximum number of results to be returned per request.
next-token => The token for the next set of results, or null if there are no more results.
"""
ListTemplateVersions(AwsAccountId, TemplateId) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/versions")
ListTemplateVersions(AwsAccountId, TemplateId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/versions", args)
ListTemplateVersions(a...; b...) = ListTemplateVersions(a..., b)

"""
    ListTemplates()

Lists all the templates in the current Amazon QuickSight account.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the templates that you're listing.

Optional Parameters
max-result => The maximum number of results to be returned per request.
next-token => The token for the next set of results, or null if there are no more results.
"""
ListTemplates(AwsAccountId) = quicksight("GET", "/accounts/$(AwsAccountId)/templates")
ListTemplates(AwsAccountId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/templates", args)
ListTemplates(a...; b...) = ListTemplates(a..., b)

"""
    ListThemeAliases()

Lists all the aliases of a theme.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the theme aliases that you're listing.
ThemeId => The ID for the theme.

Optional Parameters
max-result => The maximum number of results to be returned per request.
next-token => The token for the next set of results, or null if there are no more results.
"""
ListThemeAliases(AwsAccountId, ThemeId) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases")
ListThemeAliases(AwsAccountId, ThemeId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases", args)
ListThemeAliases(a...; b...) = ListThemeAliases(a..., b)

"""
    ListThemeVersions()

Lists all the versions of the themes in the current AWS account.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the themes that you're listing.
ThemeId => The ID for the theme.

Optional Parameters
max-results => The maximum number of results to be returned per request.
next-token => The token for the next set of results, or null if there are no more results.
"""
ListThemeVersions(AwsAccountId, ThemeId) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/versions")
ListThemeVersions(AwsAccountId, ThemeId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/versions", args)
ListThemeVersions(a...; b...) = ListThemeVersions(a..., b)

"""
    ListThemes()

Lists all the themes in the current AWS account.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the themes that you're listing.

Optional Parameters
max-results => The maximum number of results to be returned per request.
next-token => The token for the next set of results, or null if there are no more results.
type => The type of themes that you want to list. Valid options include the following:    ALL (default)- Display all existing themes.    CUSTOM - Display only the themes created by people using Amazon QuickSight.    QUICKSIGHT - Display only the starting themes defined by QuickSight.  
"""
ListThemes(AwsAccountId) = quicksight("GET", "/accounts/$(AwsAccountId)/themes")
ListThemes(AwsAccountId, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/themes", args)
ListThemes(a...; b...) = ListThemes(a..., b)

"""
    ListUserGroups()

Lists the Amazon QuickSight groups that an Amazon QuickSight user is a member of.

Required Parameters
AwsAccountId => The AWS account ID that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
Namespace => The namespace. Currently, you should set this to default.
UserName => The Amazon QuickSight user name that you want to list group memberships for.

Optional Parameters
max-results => The maximum number of results to return from this request.
next-token => A pagination token that can be used in a subsequent request.
"""
ListUserGroups(AwsAccountId, Namespace, UserName) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)/groups")
ListUserGroups(AwsAccountId, Namespace, UserName, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)/groups", args)
ListUserGroups(a...; b...) = ListUserGroups(a..., b)

"""
    ListUsers()

Returns a list of all of the Amazon QuickSight users belonging to this account. 

Required Parameters
AwsAccountId => The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
Namespace => The namespace. Currently, you should set this to default.

Optional Parameters
max-results => The maximum number of results to return from this request.
next-token => A pagination token that can be used in a subsequent request.
"""
ListUsers(AwsAccountId, Namespace) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users")
ListUsers(AwsAccountId, Namespace, args::AbstractDict{String, <: Any}) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users", args)
ListUsers(a...; b...) = ListUsers(a..., b)

"""
    RegisterUser()

Creates an Amazon QuickSight user, whose identity is associated with the AWS Identity and Access Management (IAM) identity or role specified in the request. 

Required Parameters
AwsAccountId => The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
Email => The email address of the user that you want to register.
IdentityType => Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts two values:    IAM: A user whose identity maps to an existing IAM user or role.     QUICKSIGHT: A user whose identity is owned and managed internally by Amazon QuickSight.   
Namespace => The namespace. Currently, you should set this to default.
UserRole => The Amazon QuickSight role for the user. The user role can be one of the following:    READER: A user who has read-only access to dashboards.    AUTHOR: A user who can create data sources, datasets, analyses, and dashboards.    ADMIN: A user who is an author, who can also manage Amazon QuickSight settings.    RESTRICTED_READER: This role isn't currently available for use.    RESTRICTED_AUTHOR: This role isn't currently available for use.  

Optional Parameters
CustomPermissionsName => (Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Currently, custom permissions profile names are assigned to permissions profiles in the QuickSight console. You use this API to assign the named set of permissions to a QuickSight user.  Customizing permissions in the QuickSight UI allows you to control a user's access to the following operations:               QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning QuickSight users to one of the default security cohorts (admin, author, reader) in QuickSight. This feature is available only to QuickSight Enterprise edition subscriptions that use SAML 2.0-Based Federation for Single Sign-On (SSO).
IamArn => The ARN of the IAM user or role that you are registering with Amazon QuickSight. 
SessionName => You need to use this parameter only when you register one or more users using an assumed IAM role. You don't need to provide the session name for other scenarios, for example when you are registering an IAM user or an Amazon QuickSight user. You can register multiple users using the same IAM role if each user has a different session name. For more information on assuming IAM roles, see  assume-role  in the AWS CLI Reference. 
UserName => The Amazon QuickSight user name that you want to create for the user you are registering.
"""
RegisterUser(AwsAccountId, Email, IdentityType, Namespace, UserRole) = quicksight("POST", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users", Dict{String, Any}("Email"=>Email, "IdentityType"=>IdentityType, "UserRole"=>UserRole))
RegisterUser(AwsAccountId, Email, IdentityType, Namespace, UserRole, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users", Dict{String, Any}("Email"=>Email, "IdentityType"=>IdentityType, "UserRole"=>UserRole, args...))
RegisterUser(a...; b...) = RegisterUser(a..., b)

"""
    SearchDashboards()

Searchs for dashboards that belong to a user. 

Required Parameters
AwsAccountId => The ID of the AWS account that contains the user whose dashboards you're searching for. 
Filters => The filters to apply to the search. Currently, you can search only by user name, for example, "Filters": [ { "Name": "QUICKSIGHT_USER", "Operator": "StringEquals", "Value": "arn:aws:quicksight:us-east-1:1:user/default/UserName1" } ] 

Optional Parameters
MaxResults => The maximum number of results to be returned per request.
NextToken => The token for the next set of results, or null if there are no more results.
"""
SearchDashboards(AwsAccountId, Filters) = quicksight("POST", "/accounts/$(AwsAccountId)/search/dashboards", Dict{String, Any}("Filters"=>Filters))
SearchDashboards(AwsAccountId, Filters, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/search/dashboards", Dict{String, Any}("Filters"=>Filters, args...))
SearchDashboards(a...; b...) = SearchDashboards(a..., b)

"""
    TagResource()

Assigns one or more tags (key-value pairs) to the specified QuickSight resource.  Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values. You can use the TagResource operation with a resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag. You can associate as many as 50 tags with a resource. QuickSight supports tagging on data set, data source, dashboard, and template.  Tagging for QuickSight works in a similar way to tagging for other AWS services, except for the following:   You can't use tags to track AWS costs for QuickSight. This restriction is because QuickSight costs are based on users and SPICE capacity, which aren't taggable resources.   QuickSight doesn't currently support the Tag Editor for AWS Resource Groups.  

Required Parameters
ResourceArn => The Amazon Resource Name (ARN) of the resource that you want to tag.
Tags => Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.

"""
TagResource(ResourceArn, Tags) = quicksight("POST", "/resources/$(ResourceArn)/tags", Dict{String, Any}("Tags"=>Tags))
TagResource(ResourceArn, Tags, args::AbstractDict{String, <: Any}) = quicksight("POST", "/resources/$(ResourceArn)/tags", Dict{String, Any}("Tags"=>Tags, args...))
TagResource(a...; b...) = TagResource(a..., b)

"""
    UntagResource()

Removes a tag or tags from a resource.

Required Parameters
ResourceArn => The Amazon Resource Name (ARN) of the resource that you want to untag.
keys => The keys of the key-value pairs for the resource tag or tags assigned to the resource.

"""
UntagResource(ResourceArn, keys) = quicksight("DELETE", "/resources/$(ResourceArn)/tags", Dict{String, Any}("keys"=>keys))
UntagResource(ResourceArn, keys, args::AbstractDict{String, <: Any}) = quicksight("DELETE", "/resources/$(ResourceArn)/tags", Dict{String, Any}("keys"=>keys, args...))
UntagResource(a...; b...) = UntagResource(a..., b)

"""
    UpdateAccountCustomization()

Updates customizations associated with the QuickSight subscription on your AWS account.

Required Parameters
AccountCustomization => The customizations you want to update in QuickSight.
AwsAccountId => The ID for the AWS account that you want to update QuickSight customizations for.

Optional Parameters
namespace => The namespace associated with the customization that you're updating.
"""
UpdateAccountCustomization(AccountCustomization, AwsAccountId) = quicksight("PUT", "/accounts/$(AwsAccountId)/customizations", Dict{String, Any}("AccountCustomization"=>AccountCustomization))
UpdateAccountCustomization(AccountCustomization, AwsAccountId, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/customizations", Dict{String, Any}("AccountCustomization"=>AccountCustomization, args...))
UpdateAccountCustomization(a...; b...) = UpdateAccountCustomization(a..., b)

"""
    UpdateAccountSettings()

Updates the settings for the Amazon QuickSight subscription in your AWS Account.

Required Parameters
AwsAccountId => The ID for the AWS account that contains the QuickSight namespaces that you want to list.
DefaultNamespace => The default namespace for this AWS Account. Currently, the default is default. IAM users who register for the first time with QuickSight provide an email that becomes associated with the default namespace.

Optional Parameters
NotificationEmail => Email address used to send notifications regarding administration of QuickSight.
"""
UpdateAccountSettings(AwsAccountId, DefaultNamespace) = quicksight("PUT", "/accounts/$(AwsAccountId)/settings", Dict{String, Any}("DefaultNamespace"=>DefaultNamespace))
UpdateAccountSettings(AwsAccountId, DefaultNamespace, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/settings", Dict{String, Any}("DefaultNamespace"=>DefaultNamespace, args...))
UpdateAccountSettings(a...; b...) = UpdateAccountSettings(a..., b)

"""
    UpdateDashboard()

Updates a dashboard in an AWS account.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the dashboard that you're updating.
DashboardId => The ID for the dashboard.
Name => The display name of the dashboard.
SourceEntity => The entity that you are using as a source when you update the dashboard. In SourceEntity, you specify the type of object you're using as source. You can only update a dashboard from a template, so you use a SourceTemplate entity. If you need to update a dashboard from an analysis, first convert the analysis to a template by using the CreateTemplate API operation. For SourceTemplate, specify the Amazon Resource Name (ARN) of the source template. The SourceTemplate ARN can contain any AWS Account and any QuickSight-supported AWS Region.  Use the DataSetReferences entity within SourceTemplate to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder. 

Optional Parameters
DashboardPublishOptions => Options for publishing the dashboard when you create it:    AvailabilityStatus for AdHocFilteringOption - This status can be either ENABLED or DISABLED. When this is set to DISABLED, QuickSight disables the left filter pane on the published dashboard, which can be used for ad hoc (one-time) filtering. This option is ENABLED by default.     AvailabilityStatus for ExportToCSVOption - This status can be either ENABLED or DISABLED. The visual option to export data to .csv format isn't enabled when this is set to DISABLED. This option is ENABLED by default.     VisibilityState for SheetControlsOption - This visibility state can be either COLLAPSED or EXPANDED. This option is COLLAPSED by default.   
Parameters => A structure that contains the parameters of the dashboard. These are parameter overrides for a dashboard. A dashboard can have any type of parameters, and some parameters might accept multiple values.
ThemeArn => The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that was originally associated with the entity. The theme ARN must exist in the same AWS account where you create the dashboard.
VersionDescription => A description for the first version of the dashboard being created.
"""
UpdateDashboard(AwsAccountId, DashboardId, Name, SourceEntity) = quicksight("PUT", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)", Dict{String, Any}("Name"=>Name, "SourceEntity"=>SourceEntity))
UpdateDashboard(AwsAccountId, DashboardId, Name, SourceEntity, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)", Dict{String, Any}("Name"=>Name, "SourceEntity"=>SourceEntity, args...))
UpdateDashboard(a...; b...) = UpdateDashboard(a..., b)

"""
    UpdateDashboardPermissions()

Updates read and write permissions on a dashboard.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the dashboard whose permissions you're updating.
DashboardId => The ID for the dashboard.

Optional Parameters
GrantPermissions => The permissions that you want to grant on this resource.
RevokePermissions => The permissions that you want to revoke from this resource.
"""
UpdateDashboardPermissions(AwsAccountId, DashboardId) = quicksight("PUT", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/permissions")
UpdateDashboardPermissions(AwsAccountId, DashboardId, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/permissions", args)
UpdateDashboardPermissions(a...; b...) = UpdateDashboardPermissions(a..., b)

"""
    UpdateDashboardPublishedVersion()

Updates the published version of a dashboard.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the dashboard that you're updating.
DashboardId => The ID for the dashboard.
VersionNumber => The version number of the dashboard.

"""
UpdateDashboardPublishedVersion(AwsAccountId, DashboardId, VersionNumber) = quicksight("PUT", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/versions/$(VersionNumber)")
UpdateDashboardPublishedVersion(AwsAccountId, DashboardId, VersionNumber, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/versions/$(VersionNumber)", args)
UpdateDashboardPublishedVersion(a...; b...) = UpdateDashboardPublishedVersion(a..., b)

"""
    UpdateDataSet()

Updates a dataset.

Required Parameters
AwsAccountId => The AWS account ID.
DataSetId => The ID for the dataset that you want to update. This ID is unique per AWS Region for each AWS account.
ImportMode => Indicates whether you want to import the data into SPICE.
Name => The display name for the dataset.
PhysicalTableMap => Declares the physical tables that are available in the underlying data sources.

Optional Parameters
ColumnGroups => Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.
LogicalTableMap => Configures the combination and transformation of the data from the physical tables.
RowLevelPermissionDataSet => The row-level security configuration for the data you want to create.
"""
UpdateDataSet(AwsAccountId, DataSetId, ImportMode, Name, PhysicalTableMap) = quicksight("PUT", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)", Dict{String, Any}("ImportMode"=>ImportMode, "Name"=>Name, "PhysicalTableMap"=>PhysicalTableMap))
UpdateDataSet(AwsAccountId, DataSetId, ImportMode, Name, PhysicalTableMap, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)", Dict{String, Any}("ImportMode"=>ImportMode, "Name"=>Name, "PhysicalTableMap"=>PhysicalTableMap, args...))
UpdateDataSet(a...; b...) = UpdateDataSet(a..., b)

"""
    UpdateDataSetPermissions()

Updates the permissions on a dataset. The permissions resource is arn:aws:quicksight:region:aws-account-id:dataset/data-set-id.

Required Parameters
AwsAccountId => The AWS account ID.
DataSetId => The ID for the dataset whose permissions you want to update. This ID is unique per AWS Region for each AWS account.

Optional Parameters
GrantPermissions => The resource permissions that you want to grant to the dataset.
RevokePermissions => The resource permissions that you want to revoke from the dataset.
"""
UpdateDataSetPermissions(AwsAccountId, DataSetId) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/permissions")
UpdateDataSetPermissions(AwsAccountId, DataSetId, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/permissions", args)
UpdateDataSetPermissions(a...; b...) = UpdateDataSetPermissions(a..., b)

"""
    UpdateDataSource()

Updates a data source.

Required Parameters
AwsAccountId => The AWS account ID.
DataSourceId => The ID of the data source. This ID is unique per AWS Region for each AWS account. 
Name => A display name for the data source.

Optional Parameters
Credentials => The credentials that QuickSight that uses to connect to your underlying source. Currently, only credentials based on user name and password are supported.
DataSourceParameters => The parameters that QuickSight uses to connect to your underlying source.
SslProperties => Secure Socket Layer (SSL) properties that apply when QuickSight connects to your underlying source.
VpcConnectionProperties => Use this parameter only when you want QuickSight to use a VPC connection when connecting to your underlying source.
"""
UpdateDataSource(AwsAccountId, DataSourceId, Name) = quicksight("PUT", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)", Dict{String, Any}("Name"=>Name))
UpdateDataSource(AwsAccountId, DataSourceId, Name, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)", Dict{String, Any}("Name"=>Name, args...))
UpdateDataSource(a...; b...) = UpdateDataSource(a..., b)

"""
    UpdateDataSourcePermissions()

Updates the permissions to a data source.

Required Parameters
AwsAccountId => The AWS account ID.
DataSourceId => The ID of the data source. This ID is unique per AWS Region for each AWS account. 

Optional Parameters
GrantPermissions => A list of resource permissions that you want to grant on the data source.
RevokePermissions => A list of resource permissions that you want to revoke on the data source.
"""
UpdateDataSourcePermissions(AwsAccountId, DataSourceId) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)/permissions")
UpdateDataSourcePermissions(AwsAccountId, DataSourceId, args::AbstractDict{String, <: Any}) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)/permissions", args)
UpdateDataSourcePermissions(a...; b...) = UpdateDataSourcePermissions(a..., b)

"""
    UpdateGroup()

Changes a group description. 

Required Parameters
AwsAccountId => The ID for the AWS account that the group is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
GroupName => The name of the group that you want to update.
Namespace => The namespace. Currently, you should set this to default.

Optional Parameters
Description => The description for the group that you want to update.
"""
UpdateGroup(AwsAccountId, GroupName, Namespace) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)")
UpdateGroup(AwsAccountId, GroupName, Namespace, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)", args)
UpdateGroup(a...; b...) = UpdateGroup(a..., b)

"""
    UpdateIAMPolicyAssignment()

Updates an existing IAM policy assignment. This operation updates only the optional parameter or parameters that are specified in the request.

Required Parameters
AssignmentName => The name of the assignment. This name must be unique within an AWS account.
AwsAccountId => The ID of the AWS account that contains the IAM policy assignment.
Namespace => The namespace of the assignment.

Optional Parameters
AssignmentStatus => The status of the assignment. Possible values are as follows:    ENABLED - Anything specified in this assignment is used when creating the data source.    DISABLED - This assignment isn't used when creating the data source.    DRAFT - This assignment is an unfinished draft and isn't used when creating the data source.  
Identities => The QuickSight users, groups, or both that you want to assign the policy to.
PolicyArn => The ARN for the IAM policy to apply to the QuickSight users and groups specified in this assignment.
"""
UpdateIAMPolicyAssignment(AssignmentName, AwsAccountId, Namespace) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments/$(AssignmentName)")
UpdateIAMPolicyAssignment(AssignmentName, AwsAccountId, Namespace, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments/$(AssignmentName)", args)
UpdateIAMPolicyAssignment(a...; b...) = UpdateIAMPolicyAssignment(a..., b)

"""
    UpdateTemplate()

Updates a template from an existing Amazon QuickSight analysis or another template.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the template that you're updating.
SourceEntity => The entity that you are using as a source when you update the template. In SourceEntity, you specify the type of object you're using as source: SourceTemplate for a template or SourceAnalysis for an analysis. Both of these require an Amazon Resource Name (ARN). For SourceTemplate, specify the ARN of the source template. For SourceAnalysis, specify the ARN of the source analysis. The SourceTemplate ARN can contain any AWS Account and any QuickSight-supported AWS Region.  Use the DataSetReferences entity within SourceTemplate or SourceAnalysis to list the replacement datasets for the placeholders listed in the original. The schema in each dataset must match its placeholder. 
TemplateId => The ID for the template.

Optional Parameters
Name => The name for the template.
VersionDescription => A description of the current template version that is being updated. Every time you call UpdateTemplate, you create a new version of the template. Each version of the template maintains a description of the version in the VersionDescription field.
"""
UpdateTemplate(AwsAccountId, SourceEntity, TemplateId) = quicksight("PUT", "/accounts/$(AwsAccountId)/templates/$(TemplateId)", Dict{String, Any}("SourceEntity"=>SourceEntity))
UpdateTemplate(AwsAccountId, SourceEntity, TemplateId, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/templates/$(TemplateId)", Dict{String, Any}("SourceEntity"=>SourceEntity, args...))
UpdateTemplate(a...; b...) = UpdateTemplate(a..., b)

"""
    UpdateTemplateAlias()

Updates the template alias of a template.

Required Parameters
AliasName => The alias of the template that you want to update. If you name a specific alias, you update the version that the alias points to. You can specify the latest version of the template by providing the keyword  LATEST in the AliasName parameter. The keyword  PUBLISHED doesn't apply to templates.
AwsAccountId => The ID of the AWS account that contains the template alias that you're updating.
TemplateId => The ID for the template.
TemplateVersionNumber => The version number of the template.

"""
UpdateTemplateAlias(AliasName, AwsAccountId, TemplateId, TemplateVersionNumber) = quicksight("PUT", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)", Dict{String, Any}("TemplateVersionNumber"=>TemplateVersionNumber))
UpdateTemplateAlias(AliasName, AwsAccountId, TemplateId, TemplateVersionNumber, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)", Dict{String, Any}("TemplateVersionNumber"=>TemplateVersionNumber, args...))
UpdateTemplateAlias(a...; b...) = UpdateTemplateAlias(a..., b)

"""
    UpdateTemplatePermissions()

Updates the resource permissions for a template.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the template.
TemplateId => The ID for the template.

Optional Parameters
GrantPermissions => A list of resource permissions to be granted on the template. 
RevokePermissions => A list of resource permissions to be revoked from the template. 
"""
UpdateTemplatePermissions(AwsAccountId, TemplateId) = quicksight("PUT", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/permissions")
UpdateTemplatePermissions(AwsAccountId, TemplateId, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/permissions", args)
UpdateTemplatePermissions(a...; b...) = UpdateTemplatePermissions(a..., b)

"""
    UpdateTheme()

Updates a theme.

Required Parameters
AwsAccountId => The ID of the AWS account that contains the theme that you're updating.
BaseThemeId => The theme ID, defined by Amazon QuickSight, that a custom theme inherits from. All themes initially inherit from a default QuickSight theme.
ThemeId => The ID for the theme.

Optional Parameters
Configuration => The theme configuration, which contains the theme display properties.
Name => The name for the theme.
VersionDescription => A description of the theme version that you're updating Every time that you call UpdateTheme, you create a new version of the theme. Each version of the theme maintains a description of the version in VersionDescription.
"""
UpdateTheme(AwsAccountId, BaseThemeId, ThemeId) = quicksight("PUT", "/accounts/$(AwsAccountId)/themes/$(ThemeId)", Dict{String, Any}("BaseThemeId"=>BaseThemeId))
UpdateTheme(AwsAccountId, BaseThemeId, ThemeId, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/themes/$(ThemeId)", Dict{String, Any}("BaseThemeId"=>BaseThemeId, args...))
UpdateTheme(a...; b...) = UpdateTheme(a..., b)

"""
    UpdateThemeAlias()

Updates an alias of a theme.

Required Parameters
AliasName => The name of the theme alias that you want to update.
AwsAccountId => The ID of the AWS account that contains the theme alias that you're updating.
ThemeId => The ID for the theme.
ThemeVersionNumber => The version number of the theme that the alias should reference.

"""
UpdateThemeAlias(AliasName, AwsAccountId, ThemeId, ThemeVersionNumber) = quicksight("PUT", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)", Dict{String, Any}("ThemeVersionNumber"=>ThemeVersionNumber))
UpdateThemeAlias(AliasName, AwsAccountId, ThemeId, ThemeVersionNumber, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)", Dict{String, Any}("ThemeVersionNumber"=>ThemeVersionNumber, args...))
UpdateThemeAlias(a...; b...) = UpdateThemeAlias(a..., b)

"""
    UpdateThemePermissions()

Updates the resource permissions for a theme. Permissions apply to the action to grant or revoke permissions on, for example "quicksight:DescribeTheme". Theme permissions apply in groupings. Valid groupings include the following for the three levels of permissions, which are user, owner, or no permissions:    User    "quicksight:DescribeTheme"     "quicksight:DescribeThemeAlias"     "quicksight:ListThemeAliases"     "quicksight:ListThemeVersions"      Owner    "quicksight:DescribeTheme"     "quicksight:DescribeThemeAlias"     "quicksight:ListThemeAliases"     "quicksight:ListThemeVersions"     "quicksight:DeleteTheme"     "quicksight:UpdateTheme"     "quicksight:CreateThemeAlias"     "quicksight:DeleteThemeAlias"     "quicksight:UpdateThemeAlias"     "quicksight:UpdateThemePermissions"     "quicksight:DescribeThemePermissions"      To specify no permissions, omit the permissions list.  

Required Parameters
AwsAccountId => The ID of the AWS account that contains the theme.
ThemeId => The ID for the theme.

Optional Parameters
GrantPermissions => A list of resource permissions to be granted for the theme.
RevokePermissions => A list of resource permissions to be revoked from the theme.
"""
UpdateThemePermissions(AwsAccountId, ThemeId) = quicksight("PUT", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/permissions")
UpdateThemePermissions(AwsAccountId, ThemeId, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/permissions", args)
UpdateThemePermissions(a...; b...) = UpdateThemePermissions(a..., b)

"""
    UpdateUser()

Updates an Amazon QuickSight user.

Required Parameters
AwsAccountId => The ID for the AWS account that the user is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
Email => The email address of the user that you want to update.
Namespace => The namespace. Currently, you should set this to default.
Role => The Amazon QuickSight role of the user. The user role can be one of the following:    READER: A user who has read-only access to dashboards.    AUTHOR: A user who can create data sources, datasets, analyses, and dashboards.    ADMIN: A user who is an author, who can also manage Amazon QuickSight settings.  
UserName => The Amazon QuickSight user name that you want to update.

Optional Parameters
CustomPermissionsName => The name of the custom permissions profile that you want to assign to this user. Currently, custom permissions profile names are assigned to permissions profiles in the QuickSight console. You use this API to assign the named set of permissions to a QuickSight user. 
UnapplyCustomPermissions => A flag that you use to indicate that you want to remove all custom permissions from this user. Using this parameter resets the user to the state it was in before a custom permissions profile was applied. This parameter defaults to NULL and it doesn't accept any other value.
"""
UpdateUser(AwsAccountId, Email, Namespace, Role, UserName) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)", Dict{String, Any}("Email"=>Email, "Role"=>Role))
UpdateUser(AwsAccountId, Email, Namespace, Role, UserName, args::AbstractDict{String, <: Any}) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)", Dict{String, Any}("Email"=>Email, "Role"=>Role, args...))
UpdateUser(a...; b...) = UpdateUser(a..., b)
