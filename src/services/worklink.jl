# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
using .AWSServices: worklink

"""
    AssociateDomain()

Specifies a domain to be associated to Amazon WorkLink.

Required Parameters
{
  "AcmCertificateArn": "The ARN of an issued ACM certificate that is valid for the domain being associated.",
  "DomainName": "The fully qualified domain name (FQDN).",
  "FleetArn": "The Amazon Resource Name (ARN) of the fleet."
}

Optional Parameters
{
  "DisplayName": "The name to display."
}
"""
AssociateDomain(AcmCertificateArn, DomainName, FleetArn) = worklink("POST", "/associateDomain")
AssociateDomain(AcmCertificateArn, DomainName, FleetArn, args) = worklink("POST", "/associateDomain", args)
AssociateDomain(a...; b...) = AssociateDomain(a..., b)

"""
    AssociateWebsiteAuthorizationProvider()

Associates a website authorization provider with a specified fleet. This is used to authorize users against associated websites in the company network.

Required Parameters
{
  "AuthorizationProviderType": "The authorization provider type.",
  "FleetArn": "The ARN of the fleet."
}

Optional Parameters
{
  "DomainName": "The domain name of the authorization provider. This applies only to SAML-based authorization providers."
}
"""
AssociateWebsiteAuthorizationProvider(AuthorizationProviderType, FleetArn) = worklink("POST", "/associateWebsiteAuthorizationProvider")
AssociateWebsiteAuthorizationProvider(AuthorizationProviderType, FleetArn, args) = worklink("POST", "/associateWebsiteAuthorizationProvider", args)
AssociateWebsiteAuthorizationProvider(a...; b...) = AssociateWebsiteAuthorizationProvider(a..., b)

"""
    AssociateWebsiteCertificateAuthority()

Imports the root certificate of a certificate authority (CA) used to obtain TLS certificates used by associated websites within the company network.

Required Parameters
{
  "Certificate": "The root certificate of the CA.",
  "FleetArn": "The ARN of the fleet."
}

Optional Parameters
{
  "DisplayName": "The certificate name to display."
}
"""
AssociateWebsiteCertificateAuthority(Certificate, FleetArn) = worklink("POST", "/associateWebsiteCertificateAuthority")
AssociateWebsiteCertificateAuthority(Certificate, FleetArn, args) = worklink("POST", "/associateWebsiteCertificateAuthority", args)
AssociateWebsiteCertificateAuthority(a...; b...) = AssociateWebsiteCertificateAuthority(a..., b)

"""
    CreateFleet()

Creates a fleet. A fleet consists of resources and the configuration that delivers associated websites to authorized users who download and set up the Amazon WorkLink app.

Required Parameters
{
  "FleetName": "A unique name for the fleet."
}

Optional Parameters
{
  "DisplayName": "The fleet name to display.",
  "OptimizeForEndUserLocation": "The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region.",
  "Tags": " The tags to add to the resource. A tag is a key-value pair."
}
"""
CreateFleet(FleetName) = worklink("POST", "/createFleet")
CreateFleet(FleetName, args) = worklink("POST", "/createFleet", args)
CreateFleet(a...; b...) = CreateFleet(a..., b)

"""
    DeleteFleet()

Deletes a fleet. Prevents users from accessing previously associated websites. 

Required Parameters
{
  "FleetArn": "The ARN of the fleet."
}
"""
DeleteFleet(FleetArn) = worklink("POST", "/deleteFleet")
DeleteFleet(FleetArn, args) = worklink("POST", "/deleteFleet", args)
DeleteFleet(a...; b...) = DeleteFleet(a..., b)

"""
    DescribeAuditStreamConfiguration()

Describes the configuration for delivering audit streams to the customer account.

Required Parameters
{
  "FleetArn": "The ARN of the fleet."
}
"""
DescribeAuditStreamConfiguration(FleetArn) = worklink("POST", "/describeAuditStreamConfiguration")
DescribeAuditStreamConfiguration(FleetArn, args) = worklink("POST", "/describeAuditStreamConfiguration", args)
DescribeAuditStreamConfiguration(a...; b...) = DescribeAuditStreamConfiguration(a..., b)

"""
    DescribeCompanyNetworkConfiguration()

Describes the networking configuration to access the internal websites associated with the specified fleet.

Required Parameters
{
  "FleetArn": "The ARN of the fleet."
}
"""
DescribeCompanyNetworkConfiguration(FleetArn) = worklink("POST", "/describeCompanyNetworkConfiguration")
DescribeCompanyNetworkConfiguration(FleetArn, args) = worklink("POST", "/describeCompanyNetworkConfiguration", args)
DescribeCompanyNetworkConfiguration(a...; b...) = DescribeCompanyNetworkConfiguration(a..., b)

"""
    DescribeDevice()

Provides information about a user's device.

Required Parameters
{
  "DeviceId": "A unique identifier for a registered user's device.",
  "FleetArn": "The ARN of the fleet."
}
"""
DescribeDevice(DeviceId, FleetArn) = worklink("POST", "/describeDevice")
DescribeDevice(DeviceId, FleetArn, args) = worklink("POST", "/describeDevice", args)
DescribeDevice(a...; b...) = DescribeDevice(a..., b)

"""
    DescribeDevicePolicyConfiguration()

Describes the device policy configuration for the specified fleet.

Required Parameters
{
  "FleetArn": "The ARN of the fleet."
}
"""
DescribeDevicePolicyConfiguration(FleetArn) = worklink("POST", "/describeDevicePolicyConfiguration")
DescribeDevicePolicyConfiguration(FleetArn, args) = worklink("POST", "/describeDevicePolicyConfiguration", args)
DescribeDevicePolicyConfiguration(a...; b...) = DescribeDevicePolicyConfiguration(a..., b)

"""
    DescribeDomain()

Provides information about the domain.

Required Parameters
{
  "DomainName": "The name of the domain.",
  "FleetArn": "The ARN of the fleet."
}
"""
DescribeDomain(DomainName, FleetArn) = worklink("POST", "/describeDomain")
DescribeDomain(DomainName, FleetArn, args) = worklink("POST", "/describeDomain", args)
DescribeDomain(a...; b...) = DescribeDomain(a..., b)

"""
    DescribeFleetMetadata()

Provides basic information for the specified fleet, excluding identity provider, networking, and device configuration details.

Required Parameters
{
  "FleetArn": "The Amazon Resource Name (ARN) of the fleet."
}
"""
DescribeFleetMetadata(FleetArn) = worklink("POST", "/describeFleetMetadata")
DescribeFleetMetadata(FleetArn, args) = worklink("POST", "/describeFleetMetadata", args)
DescribeFleetMetadata(a...; b...) = DescribeFleetMetadata(a..., b)

"""
    DescribeIdentityProviderConfiguration()

Describes the identity provider configuration of the specified fleet.

Required Parameters
{
  "FleetArn": "The ARN of the fleet."
}
"""
DescribeIdentityProviderConfiguration(FleetArn) = worklink("POST", "/describeIdentityProviderConfiguration")
DescribeIdentityProviderConfiguration(FleetArn, args) = worklink("POST", "/describeIdentityProviderConfiguration", args)
DescribeIdentityProviderConfiguration(a...; b...) = DescribeIdentityProviderConfiguration(a..., b)

"""
    DescribeWebsiteCertificateAuthority()

Provides information about the certificate authority.

Required Parameters
{
  "FleetArn": "The ARN of the fleet.",
  "WebsiteCaId": "A unique identifier for the certificate authority."
}
"""
DescribeWebsiteCertificateAuthority(FleetArn, WebsiteCaId) = worklink("POST", "/describeWebsiteCertificateAuthority")
DescribeWebsiteCertificateAuthority(FleetArn, WebsiteCaId, args) = worklink("POST", "/describeWebsiteCertificateAuthority", args)
DescribeWebsiteCertificateAuthority(a...; b...) = DescribeWebsiteCertificateAuthority(a..., b)

"""
    DisassociateDomain()

Disassociates a domain from Amazon WorkLink. End users lose the ability to access the domain with Amazon WorkLink. 

Required Parameters
{
  "DomainName": "The name of the domain.",
  "FleetArn": "The ARN of the fleet."
}
"""
DisassociateDomain(DomainName, FleetArn) = worklink("POST", "/disassociateDomain")
DisassociateDomain(DomainName, FleetArn, args) = worklink("POST", "/disassociateDomain", args)
DisassociateDomain(a...; b...) = DisassociateDomain(a..., b)

"""
    DisassociateWebsiteAuthorizationProvider()

Disassociates a website authorization provider from a specified fleet. After the disassociation, users can't load any associated websites that require this authorization provider.

Required Parameters
{
  "AuthorizationProviderId": "A unique identifier for the authorization provider.",
  "FleetArn": "The ARN of the fleet."
}
"""
DisassociateWebsiteAuthorizationProvider(AuthorizationProviderId, FleetArn) = worklink("POST", "/disassociateWebsiteAuthorizationProvider")
DisassociateWebsiteAuthorizationProvider(AuthorizationProviderId, FleetArn, args) = worklink("POST", "/disassociateWebsiteAuthorizationProvider", args)
DisassociateWebsiteAuthorizationProvider(a...; b...) = DisassociateWebsiteAuthorizationProvider(a..., b)

"""
    DisassociateWebsiteCertificateAuthority()

Removes a certificate authority (CA).

Required Parameters
{
  "FleetArn": "The ARN of the fleet.",
  "WebsiteCaId": "A unique identifier for the CA."
}
"""
DisassociateWebsiteCertificateAuthority(FleetArn, WebsiteCaId) = worklink("POST", "/disassociateWebsiteCertificateAuthority")
DisassociateWebsiteCertificateAuthority(FleetArn, WebsiteCaId, args) = worklink("POST", "/disassociateWebsiteCertificateAuthority", args)
DisassociateWebsiteCertificateAuthority(a...; b...) = DisassociateWebsiteCertificateAuthority(a..., b)

"""
    ListDevices()

Retrieves a list of devices registered with the specified fleet.

Required Parameters
{
  "FleetArn": "The ARN of the fleet."
}

Optional Parameters
{
  "MaxResults": "The maximum number of results to be included in the next page.",
  "NextToken": "The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
}
"""
ListDevices(FleetArn) = worklink("POST", "/listDevices")
ListDevices(FleetArn, args) = worklink("POST", "/listDevices", args)
ListDevices(a...; b...) = ListDevices(a..., b)

"""
    ListDomains()

Retrieves a list of domains associated to a specified fleet.

Required Parameters
{
  "FleetArn": "The ARN of the fleet."
}

Optional Parameters
{
  "MaxResults": "The maximum number of results to be included in the next page.",
  "NextToken": "The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
}
"""
ListDomains(FleetArn) = worklink("POST", "/listDomains")
ListDomains(FleetArn, args) = worklink("POST", "/listDomains", args)
ListDomains(a...; b...) = ListDomains(a..., b)

"""
    ListFleets()

Retrieves a list of fleets for the current account and Region.

Optional Parameters
{
  "MaxResults": "The maximum number of results to be included in the next page.",
  "NextToken": "The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
}
"""
ListFleets() = worklink("POST", "/listFleets")
ListFleets(args) = worklink("POST", "/listFleets", args)
ListFleets(a...; b...) = ListFleets(a..., b)

"""
    ListTagsForResource()

Retrieves a list of tags for the specified resource.

Required Parameters
{
  "ResourceArn": "The Amazon Resource Name (ARN) of the fleet."
}
"""
ListTagsForResource(ResourceArn) = worklink("GET", "/tags/$(ResourceArn)")
ListTagsForResource(ResourceArn, args) = worklink("GET", "/tags/$(ResourceArn)", args)
ListTagsForResource(a...; b...) = ListTagsForResource(a..., b)

"""
    ListWebsiteAuthorizationProviders()

Retrieves a list of website authorization providers associated with a specified fleet.

Required Parameters
{
  "FleetArn": "The ARN of the fleet."
}

Optional Parameters
{
  "MaxResults": "The maximum number of results to be included in the next page.",
  "NextToken": "The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
}
"""
ListWebsiteAuthorizationProviders(FleetArn) = worklink("POST", "/listWebsiteAuthorizationProviders")
ListWebsiteAuthorizationProviders(FleetArn, args) = worklink("POST", "/listWebsiteAuthorizationProviders", args)
ListWebsiteAuthorizationProviders(a...; b...) = ListWebsiteAuthorizationProviders(a..., b)

"""
    ListWebsiteCertificateAuthorities()

Retrieves a list of certificate authorities added for the current account and Region.

Required Parameters
{
  "FleetArn": "The ARN of the fleet."
}

Optional Parameters
{
  "MaxResults": "The maximum number of results to be included in the next page.",
  "NextToken": "The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page."
}
"""
ListWebsiteCertificateAuthorities(FleetArn) = worklink("POST", "/listWebsiteCertificateAuthorities")
ListWebsiteCertificateAuthorities(FleetArn, args) = worklink("POST", "/listWebsiteCertificateAuthorities", args)
ListWebsiteCertificateAuthorities(a...; b...) = ListWebsiteCertificateAuthorities(a..., b)

"""
    RestoreDomainAccess()

Moves a domain to ACTIVE status if it was in the INACTIVE status.

Required Parameters
{
  "DomainName": "The name of the domain.",
  "FleetArn": "The ARN of the fleet."
}
"""
RestoreDomainAccess(DomainName, FleetArn) = worklink("POST", "/restoreDomainAccess")
RestoreDomainAccess(DomainName, FleetArn, args) = worklink("POST", "/restoreDomainAccess", args)
RestoreDomainAccess(a...; b...) = RestoreDomainAccess(a..., b)

"""
    RevokeDomainAccess()

Moves a domain to INACTIVE status if it was in the ACTIVE status.

Required Parameters
{
  "DomainName": "The name of the domain.",
  "FleetArn": "The ARN of the fleet."
}
"""
RevokeDomainAccess(DomainName, FleetArn) = worklink("POST", "/revokeDomainAccess")
RevokeDomainAccess(DomainName, FleetArn, args) = worklink("POST", "/revokeDomainAccess", args)
RevokeDomainAccess(a...; b...) = RevokeDomainAccess(a..., b)

"""
    SignOutUser()

Signs the user out from all of their devices. The user can sign in again if they have valid credentials.

Required Parameters
{
  "FleetArn": "The ARN of the fleet.",
  "Username": "The name of the user."
}
"""
SignOutUser(FleetArn, Username) = worklink("POST", "/signOutUser")
SignOutUser(FleetArn, Username, args) = worklink("POST", "/signOutUser", args)
SignOutUser(a...; b...) = SignOutUser(a..., b)

"""
    TagResource()

Adds or overwrites one or more tags for the specified resource, such as a fleet. Each tag consists of a key and an optional value. If a resource already has a tag with the same key, this operation updates its value.

Required Parameters
{
  "ResourceArn": "The Amazon Resource Name (ARN) of the fleet.",
  "Tags": "The tags to add to the resource. A tag is a key-value pair."
}
"""
TagResource(ResourceArn, Tags) = worklink("POST", "/tags/$(ResourceArn)")
TagResource(ResourceArn, Tags, args) = worklink("POST", "/tags/$(ResourceArn)", args)
TagResource(a...; b...) = TagResource(a..., b)

"""
    UntagResource()

Removes one or more tags from the specified resource.

Required Parameters
{
  "ResourceArn": "The Amazon Resource Name (ARN) of the fleet.",
  "TagKeys": "The list of tag keys to remove from the resource."
}
"""
UntagResource(ResourceArn, TagKeys) = worklink("DELETE", "/tags/$(ResourceArn)")
UntagResource(ResourceArn, TagKeys, args) = worklink("DELETE", "/tags/$(ResourceArn)", args)
UntagResource(a...; b...) = UntagResource(a..., b)

"""
    UpdateAuditStreamConfiguration()

Updates the audit stream configuration for the fleet.

Required Parameters
{
  "FleetArn": "The ARN of the fleet."
}

Optional Parameters
{
  "AuditStreamArn": "The ARN of the Amazon Kinesis data stream that receives the audit events."
}
"""
UpdateAuditStreamConfiguration(FleetArn) = worklink("POST", "/updateAuditStreamConfiguration")
UpdateAuditStreamConfiguration(FleetArn, args) = worklink("POST", "/updateAuditStreamConfiguration", args)
UpdateAuditStreamConfiguration(a...; b...) = UpdateAuditStreamConfiguration(a..., b)

"""
    UpdateCompanyNetworkConfiguration()

Updates the company network configuration for the fleet.

Required Parameters
{
  "FleetArn": "The ARN of the fleet.",
  "SecurityGroupIds": "The security groups associated with access to the provided subnets.",
  "SubnetIds": "The subnets used for X-ENI connections from Amazon WorkLink rendering containers.",
  "VpcId": "The VPC with connectivity to associated websites."
}
"""
UpdateCompanyNetworkConfiguration(FleetArn, SecurityGroupIds, SubnetIds, VpcId) = worklink("POST", "/updateCompanyNetworkConfiguration")
UpdateCompanyNetworkConfiguration(FleetArn, SecurityGroupIds, SubnetIds, VpcId, args) = worklink("POST", "/updateCompanyNetworkConfiguration", args)
UpdateCompanyNetworkConfiguration(a...; b...) = UpdateCompanyNetworkConfiguration(a..., b)

"""
    UpdateDevicePolicyConfiguration()

Updates the device policy configuration for the fleet.

Required Parameters
{
  "FleetArn": "The ARN of the fleet."
}

Optional Parameters
{
  "DeviceCaCertificate": "The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates."
}
"""
UpdateDevicePolicyConfiguration(FleetArn) = worklink("POST", "/updateDevicePolicyConfiguration")
UpdateDevicePolicyConfiguration(FleetArn, args) = worklink("POST", "/updateDevicePolicyConfiguration", args)
UpdateDevicePolicyConfiguration(a...; b...) = UpdateDevicePolicyConfiguration(a..., b)

"""
    UpdateDomainMetadata()

Updates domain metadata, such as DisplayName.

Required Parameters
{
  "DomainName": "The name of the domain.",
  "FleetArn": "The ARN of the fleet."
}

Optional Parameters
{
  "DisplayName": "The name to display."
}
"""
UpdateDomainMetadata(DomainName, FleetArn) = worklink("POST", "/updateDomainMetadata")
UpdateDomainMetadata(DomainName, FleetArn, args) = worklink("POST", "/updateDomainMetadata", args)
UpdateDomainMetadata(a...; b...) = UpdateDomainMetadata(a..., b)

"""
    UpdateFleetMetadata()

Updates fleet metadata, such as DisplayName.

Required Parameters
{
  "FleetArn": "The ARN of the fleet."
}

Optional Parameters
{
  "DisplayName": "The fleet name to display. The existing DisplayName is unset if null is passed.",
  "OptimizeForEndUserLocation": "The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region."
}
"""
UpdateFleetMetadata(FleetArn) = worklink("POST", "/UpdateFleetMetadata")
UpdateFleetMetadata(FleetArn, args) = worklink("POST", "/UpdateFleetMetadata", args)
UpdateFleetMetadata(a...; b...) = UpdateFleetMetadata(a..., b)

"""
    UpdateIdentityProviderConfiguration()

Updates the identity provider configuration for the fleet.

Required Parameters
{
  "FleetArn": "The ARN of the fleet.",
  "IdentityProviderType": "The type of identity provider."
}

Optional Parameters
{
  "IdentityProviderSamlMetadata": "The SAML metadata document provided by the customer’s identity provider. The existing IdentityProviderSamlMetadata is unset if null is passed."
}
"""
UpdateIdentityProviderConfiguration(FleetArn, IdentityProviderType) = worklink("POST", "/updateIdentityProviderConfiguration")
UpdateIdentityProviderConfiguration(FleetArn, IdentityProviderType, args) = worklink("POST", "/updateIdentityProviderConfiguration", args)
UpdateIdentityProviderConfiguration(a...; b...) = UpdateIdentityProviderConfiguration(a..., b)
