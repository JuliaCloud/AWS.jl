# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: worklink

using Compat
using UUIDs
"""
    AssociateDomain()

Specifies a domain to be associated to Amazon WorkLink.

# Required Parameters
- `AcmCertificateArn`: The ARN of an issued ACM certificate that is valid for the domain being associated.
- `DomainName`: The fully qualified domain name (FQDN).
- `FleetArn`: The Amazon Resource Name (ARN) of the fleet.

# Optional Parameters
- `DisplayName`: The name to display.
"""
AssociateDomain(AcmCertificateArn, DomainName, FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/associateDomain", Dict{String, Any}("AcmCertificateArn"=>AcmCertificateArn, "DomainName"=>DomainName, "FleetArn"=>FleetArn))
AssociateDomain(AcmCertificateArn, DomainName, FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/associateDomain", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AcmCertificateArn"=>AcmCertificateArn, "DomainName"=>DomainName, "FleetArn"=>FleetArn), args)); aws=aws)

"""
    AssociateWebsiteAuthorizationProvider()

Associates a website authorization provider with a specified fleet. This is used to authorize users against associated websites in the company network.

# Required Parameters
- `AuthorizationProviderType`: The authorization provider type.
- `FleetArn`: The ARN of the fleet.

# Optional Parameters
- `DomainName`: The domain name of the authorization provider. This applies only to SAML-based authorization providers.
"""
AssociateWebsiteAuthorizationProvider(AuthorizationProviderType, FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/associateWebsiteAuthorizationProvider", Dict{String, Any}("AuthorizationProviderType"=>AuthorizationProviderType, "FleetArn"=>FleetArn))
AssociateWebsiteAuthorizationProvider(AuthorizationProviderType, FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/associateWebsiteAuthorizationProvider", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AuthorizationProviderType"=>AuthorizationProviderType, "FleetArn"=>FleetArn), args)); aws=aws)

"""
    AssociateWebsiteCertificateAuthority()

Imports the root certificate of a certificate authority (CA) used to obtain TLS certificates used by associated websites within the company network.

# Required Parameters
- `Certificate`: The root certificate of the CA.
- `FleetArn`: The ARN of the fleet.

# Optional Parameters
- `DisplayName`: The certificate name to display.
"""
AssociateWebsiteCertificateAuthority(Certificate, FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/associateWebsiteCertificateAuthority", Dict{String, Any}("Certificate"=>Certificate, "FleetArn"=>FleetArn))
AssociateWebsiteCertificateAuthority(Certificate, FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/associateWebsiteCertificateAuthority", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Certificate"=>Certificate, "FleetArn"=>FleetArn), args)); aws=aws)

"""
    CreateFleet()

Creates a fleet. A fleet consists of resources and the configuration that delivers associated websites to authorized users who download and set up the Amazon WorkLink app.

# Required Parameters
- `FleetName`: A unique name for the fleet.

# Optional Parameters
- `DisplayName`: The fleet name to display.
- `OptimizeForEndUserLocation`: The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region.
- `Tags`:  The tags to add to the resource. A tag is a key-value pair.
"""
CreateFleet(FleetName; aws::AWSConfig=AWSConfig()) = worklink("POST", "/createFleet", Dict{String, Any}("FleetName"=>FleetName))
CreateFleet(FleetName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/createFleet", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetName"=>FleetName), args)); aws=aws)

"""
    DeleteFleet()

Deletes a fleet. Prevents users from accessing previously associated websites. 

# Required Parameters
- `FleetArn`: The ARN of the fleet.

"""
DeleteFleet(FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/deleteFleet", Dict{String, Any}("FleetArn"=>FleetArn))
DeleteFleet(FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/deleteFleet", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn), args)); aws=aws)

"""
    DescribeAuditStreamConfiguration()

Describes the configuration for delivering audit streams to the customer account.

# Required Parameters
- `FleetArn`: The ARN of the fleet.

"""
DescribeAuditStreamConfiguration(FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeAuditStreamConfiguration", Dict{String, Any}("FleetArn"=>FleetArn))
DescribeAuditStreamConfiguration(FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeAuditStreamConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn), args)); aws=aws)

"""
    DescribeCompanyNetworkConfiguration()

Describes the networking configuration to access the internal websites associated with the specified fleet.

# Required Parameters
- `FleetArn`: The ARN of the fleet.

"""
DescribeCompanyNetworkConfiguration(FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeCompanyNetworkConfiguration", Dict{String, Any}("FleetArn"=>FleetArn))
DescribeCompanyNetworkConfiguration(FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeCompanyNetworkConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn), args)); aws=aws)

"""
    DescribeDevice()

Provides information about a user's device.

# Required Parameters
- `DeviceId`: A unique identifier for a registered user's device.
- `FleetArn`: The ARN of the fleet.

"""
DescribeDevice(DeviceId, FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeDevice", Dict{String, Any}("DeviceId"=>DeviceId, "FleetArn"=>FleetArn))
DescribeDevice(DeviceId, FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeDevice", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DeviceId"=>DeviceId, "FleetArn"=>FleetArn), args)); aws=aws)

"""
    DescribeDevicePolicyConfiguration()

Describes the device policy configuration for the specified fleet.

# Required Parameters
- `FleetArn`: The ARN of the fleet.

"""
DescribeDevicePolicyConfiguration(FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeDevicePolicyConfiguration", Dict{String, Any}("FleetArn"=>FleetArn))
DescribeDevicePolicyConfiguration(FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeDevicePolicyConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn), args)); aws=aws)

"""
    DescribeDomain()

Provides information about the domain.

# Required Parameters
- `DomainName`: The name of the domain.
- `FleetArn`: The ARN of the fleet.

"""
DescribeDomain(DomainName, FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeDomain", Dict{String, Any}("DomainName"=>DomainName, "FleetArn"=>FleetArn))
DescribeDomain(DomainName, FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeDomain", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DomainName"=>DomainName, "FleetArn"=>FleetArn), args)); aws=aws)

"""
    DescribeFleetMetadata()

Provides basic information for the specified fleet, excluding identity provider, networking, and device configuration details.

# Required Parameters
- `FleetArn`: The Amazon Resource Name (ARN) of the fleet.

"""
DescribeFleetMetadata(FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeFleetMetadata", Dict{String, Any}("FleetArn"=>FleetArn))
DescribeFleetMetadata(FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeFleetMetadata", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn), args)); aws=aws)

"""
    DescribeIdentityProviderConfiguration()

Describes the identity provider configuration of the specified fleet.

# Required Parameters
- `FleetArn`: The ARN of the fleet.

"""
DescribeIdentityProviderConfiguration(FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeIdentityProviderConfiguration", Dict{String, Any}("FleetArn"=>FleetArn))
DescribeIdentityProviderConfiguration(FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeIdentityProviderConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn), args)); aws=aws)

"""
    DescribeWebsiteCertificateAuthority()

Provides information about the certificate authority.

# Required Parameters
- `FleetArn`: The ARN of the fleet.
- `WebsiteCaId`: A unique identifier for the certificate authority.

"""
DescribeWebsiteCertificateAuthority(FleetArn, WebsiteCaId; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeWebsiteCertificateAuthority", Dict{String, Any}("FleetArn"=>FleetArn, "WebsiteCaId"=>WebsiteCaId))
DescribeWebsiteCertificateAuthority(FleetArn, WebsiteCaId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/describeWebsiteCertificateAuthority", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn, "WebsiteCaId"=>WebsiteCaId), args)); aws=aws)

"""
    DisassociateDomain()

Disassociates a domain from Amazon WorkLink. End users lose the ability to access the domain with Amazon WorkLink. 

# Required Parameters
- `DomainName`: The name of the domain.
- `FleetArn`: The ARN of the fleet.

"""
DisassociateDomain(DomainName, FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/disassociateDomain", Dict{String, Any}("DomainName"=>DomainName, "FleetArn"=>FleetArn))
DisassociateDomain(DomainName, FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/disassociateDomain", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DomainName"=>DomainName, "FleetArn"=>FleetArn), args)); aws=aws)

"""
    DisassociateWebsiteAuthorizationProvider()

Disassociates a website authorization provider from a specified fleet. After the disassociation, users can't load any associated websites that require this authorization provider.

# Required Parameters
- `AuthorizationProviderId`: A unique identifier for the authorization provider.
- `FleetArn`: The ARN of the fleet.

"""
DisassociateWebsiteAuthorizationProvider(AuthorizationProviderId, FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/disassociateWebsiteAuthorizationProvider", Dict{String, Any}("AuthorizationProviderId"=>AuthorizationProviderId, "FleetArn"=>FleetArn))
DisassociateWebsiteAuthorizationProvider(AuthorizationProviderId, FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/disassociateWebsiteAuthorizationProvider", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AuthorizationProviderId"=>AuthorizationProviderId, "FleetArn"=>FleetArn), args)); aws=aws)

"""
    DisassociateWebsiteCertificateAuthority()

Removes a certificate authority (CA).

# Required Parameters
- `FleetArn`: The ARN of the fleet.
- `WebsiteCaId`: A unique identifier for the CA.

"""
DisassociateWebsiteCertificateAuthority(FleetArn, WebsiteCaId; aws::AWSConfig=AWSConfig()) = worklink("POST", "/disassociateWebsiteCertificateAuthority", Dict{String, Any}("FleetArn"=>FleetArn, "WebsiteCaId"=>WebsiteCaId))
DisassociateWebsiteCertificateAuthority(FleetArn, WebsiteCaId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/disassociateWebsiteCertificateAuthority", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn, "WebsiteCaId"=>WebsiteCaId), args)); aws=aws)

"""
    ListDevices()

Retrieves a list of devices registered with the specified fleet.

# Required Parameters
- `FleetArn`: The ARN of the fleet.

# Optional Parameters
- `MaxResults`: The maximum number of results to be included in the next page.
- `NextToken`: The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
"""
ListDevices(FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/listDevices", Dict{String, Any}("FleetArn"=>FleetArn))
ListDevices(FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/listDevices", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn), args)); aws=aws)

"""
    ListDomains()

Retrieves a list of domains associated to a specified fleet.

# Required Parameters
- `FleetArn`: The ARN of the fleet.

# Optional Parameters
- `MaxResults`: The maximum number of results to be included in the next page.
- `NextToken`: The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
"""
ListDomains(FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/listDomains", Dict{String, Any}("FleetArn"=>FleetArn))
ListDomains(FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/listDomains", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn), args)); aws=aws)

"""
    ListFleets()

Retrieves a list of fleets for the current account and Region.

# Optional Parameters
- `MaxResults`: The maximum number of results to be included in the next page.
- `NextToken`: The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
"""
ListFleets(; aws::AWSConfig=AWSConfig()) = worklink("POST", "/listFleets"; aws=aws)
ListFleets(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/listFleets", args; aws=aws)

"""
    ListTagsForResource()

Retrieves a list of tags for the specified resource.

# Required Parameters
- `ResourceArn`: The Amazon Resource Name (ARN) of the fleet.

"""
ListTagsForResource(ResourceArn; aws::AWSConfig=AWSConfig()) = worklink("GET", "/tags/$(ResourceArn)"; aws=aws)
ListTagsForResource(ResourceArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("GET", "/tags/$(ResourceArn)", args; aws=aws)

"""
    ListWebsiteAuthorizationProviders()

Retrieves a list of website authorization providers associated with a specified fleet.

# Required Parameters
- `FleetArn`: The ARN of the fleet.

# Optional Parameters
- `MaxResults`: The maximum number of results to be included in the next page.
- `NextToken`: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
"""
ListWebsiteAuthorizationProviders(FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/listWebsiteAuthorizationProviders", Dict{String, Any}("FleetArn"=>FleetArn))
ListWebsiteAuthorizationProviders(FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/listWebsiteAuthorizationProviders", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn), args)); aws=aws)

"""
    ListWebsiteCertificateAuthorities()

Retrieves a list of certificate authorities added for the current account and Region.

# Required Parameters
- `FleetArn`: The ARN of the fleet.

# Optional Parameters
- `MaxResults`: The maximum number of results to be included in the next page.
- `NextToken`: The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
"""
ListWebsiteCertificateAuthorities(FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/listWebsiteCertificateAuthorities", Dict{String, Any}("FleetArn"=>FleetArn))
ListWebsiteCertificateAuthorities(FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/listWebsiteCertificateAuthorities", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn), args)); aws=aws)

"""
    RestoreDomainAccess()

Moves a domain to ACTIVE status if it was in the INACTIVE status.

# Required Parameters
- `DomainName`: The name of the domain.
- `FleetArn`: The ARN of the fleet.

"""
RestoreDomainAccess(DomainName, FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/restoreDomainAccess", Dict{String, Any}("DomainName"=>DomainName, "FleetArn"=>FleetArn))
RestoreDomainAccess(DomainName, FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/restoreDomainAccess", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DomainName"=>DomainName, "FleetArn"=>FleetArn), args)); aws=aws)

"""
    RevokeDomainAccess()

Moves a domain to INACTIVE status if it was in the ACTIVE status.

# Required Parameters
- `DomainName`: The name of the domain.
- `FleetArn`: The ARN of the fleet.

"""
RevokeDomainAccess(DomainName, FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/revokeDomainAccess", Dict{String, Any}("DomainName"=>DomainName, "FleetArn"=>FleetArn))
RevokeDomainAccess(DomainName, FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/revokeDomainAccess", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DomainName"=>DomainName, "FleetArn"=>FleetArn), args)); aws=aws)

"""
    SignOutUser()

Signs the user out from all of their devices. The user can sign in again if they have valid credentials.

# Required Parameters
- `FleetArn`: The ARN of the fleet.
- `Username`: The name of the user.

"""
SignOutUser(FleetArn, Username; aws::AWSConfig=AWSConfig()) = worklink("POST", "/signOutUser", Dict{String, Any}("FleetArn"=>FleetArn, "Username"=>Username))
SignOutUser(FleetArn, Username, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/signOutUser", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn, "Username"=>Username), args)); aws=aws)

"""
    TagResource()

Adds or overwrites one or more tags for the specified resource, such as a fleet. Each tag consists of a key and an optional value. If a resource already has a tag with the same key, this operation updates its value.

# Required Parameters
- `ResourceArn`: The Amazon Resource Name (ARN) of the fleet.
- `Tags`: The tags to add to the resource. A tag is a key-value pair.

"""
TagResource(ResourceArn, Tags; aws::AWSConfig=AWSConfig()) = worklink("POST", "/tags/$(ResourceArn)", Dict{String, Any}("Tags"=>Tags))
TagResource(ResourceArn, Tags, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/tags/$(ResourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Tags"=>Tags), args)); aws=aws)

"""
    UntagResource()

Removes one or more tags from the specified resource.

# Required Parameters
- `ResourceArn`: The Amazon Resource Name (ARN) of the fleet.
- `tagKeys`: The list of tag keys to remove from the resource.

"""
UntagResource(ResourceArn, tagKeys; aws::AWSConfig=AWSConfig()) = worklink("DELETE", "/tags/$(ResourceArn)", Dict{String, Any}("tagKeys"=>tagKeys))
UntagResource(ResourceArn, tagKeys, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("DELETE", "/tags/$(ResourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), args)); aws=aws)

"""
    UpdateAuditStreamConfiguration()

Updates the audit stream configuration for the fleet.

# Required Parameters
- `FleetArn`: The ARN of the fleet.

# Optional Parameters
- `AuditStreamArn`: The ARN of the Amazon Kinesis data stream that receives the audit events.
"""
UpdateAuditStreamConfiguration(FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/updateAuditStreamConfiguration", Dict{String, Any}("FleetArn"=>FleetArn))
UpdateAuditStreamConfiguration(FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/updateAuditStreamConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn), args)); aws=aws)

"""
    UpdateCompanyNetworkConfiguration()

Updates the company network configuration for the fleet.

# Required Parameters
- `FleetArn`: The ARN of the fleet.
- `SecurityGroupIds`: The security groups associated with access to the provided subnets.
- `SubnetIds`: The subnets used for X-ENI connections from Amazon WorkLink rendering containers.
- `VpcId`: The VPC with connectivity to associated websites.

"""
UpdateCompanyNetworkConfiguration(FleetArn, SecurityGroupIds, SubnetIds, VpcId; aws::AWSConfig=AWSConfig()) = worklink("POST", "/updateCompanyNetworkConfiguration", Dict{String, Any}("FleetArn"=>FleetArn, "SecurityGroupIds"=>SecurityGroupIds, "SubnetIds"=>SubnetIds, "VpcId"=>VpcId))
UpdateCompanyNetworkConfiguration(FleetArn, SecurityGroupIds, SubnetIds, VpcId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/updateCompanyNetworkConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn, "SecurityGroupIds"=>SecurityGroupIds, "SubnetIds"=>SubnetIds, "VpcId"=>VpcId), args)); aws=aws)

"""
    UpdateDevicePolicyConfiguration()

Updates the device policy configuration for the fleet.

# Required Parameters
- `FleetArn`: The ARN of the fleet.

# Optional Parameters
- `DeviceCaCertificate`: The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates.
"""
UpdateDevicePolicyConfiguration(FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/updateDevicePolicyConfiguration", Dict{String, Any}("FleetArn"=>FleetArn))
UpdateDevicePolicyConfiguration(FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/updateDevicePolicyConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn), args)); aws=aws)

"""
    UpdateDomainMetadata()

Updates domain metadata, such as DisplayName.

# Required Parameters
- `DomainName`: The name of the domain.
- `FleetArn`: The ARN of the fleet.

# Optional Parameters
- `DisplayName`: The name to display.
"""
UpdateDomainMetadata(DomainName, FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/updateDomainMetadata", Dict{String, Any}("DomainName"=>DomainName, "FleetArn"=>FleetArn))
UpdateDomainMetadata(DomainName, FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/updateDomainMetadata", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DomainName"=>DomainName, "FleetArn"=>FleetArn), args)); aws=aws)

"""
    UpdateFleetMetadata()

Updates fleet metadata, such as DisplayName.

# Required Parameters
- `FleetArn`: The ARN of the fleet.

# Optional Parameters
- `DisplayName`: The fleet name to display. The existing DisplayName is unset if null is passed.
- `OptimizeForEndUserLocation`: The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region.
"""
UpdateFleetMetadata(FleetArn; aws::AWSConfig=AWSConfig()) = worklink("POST", "/UpdateFleetMetadata", Dict{String, Any}("FleetArn"=>FleetArn))
UpdateFleetMetadata(FleetArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/UpdateFleetMetadata", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn), args)); aws=aws)

"""
    UpdateIdentityProviderConfiguration()

Updates the identity provider configuration for the fleet.

# Required Parameters
- `FleetArn`: The ARN of the fleet.
- `IdentityProviderType`: The type of identity provider.

# Optional Parameters
- `IdentityProviderSamlMetadata`: The SAML metadata document provided by the customer’s identity provider. The existing IdentityProviderSamlMetadata is unset if null is passed.
"""
UpdateIdentityProviderConfiguration(FleetArn, IdentityProviderType; aws::AWSConfig=AWSConfig()) = worklink("POST", "/updateIdentityProviderConfiguration", Dict{String, Any}("FleetArn"=>FleetArn, "IdentityProviderType"=>IdentityProviderType))
UpdateIdentityProviderConfiguration(FleetArn, IdentityProviderType, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = worklink("POST", "/updateIdentityProviderConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("FleetArn"=>FleetArn, "IdentityProviderType"=>IdentityProviderType), args)); aws=aws)
