# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
using Compat
using .AWSServices: schemas

"""
    CreateDiscoverer()

Creates a discoverer.

Required Parameters
SourceArn => The ARN of the event bus.

Optional Parameters
Description => A description for the discoverer.
tags => Tags associated with the resource.
"""
CreateDiscoverer(SourceArn) = schemas("POST", "/v1/discoverers", Dict{String, Any}("SourceArn"=>SourceArn))
CreateDiscoverer(SourceArn, args::AbstractDict{String, <: Any}) = schemas("POST", "/v1/discoverers", Dict{String, Any}("SourceArn"=>SourceArn, args...))
CreateDiscoverer(a...; b...) = CreateDiscoverer(a..., b)

"""
    CreateRegistry()

Creates a registry.

Required Parameters
registryName => The name of the registry.

Optional Parameters
Description => A description of the registry to be created.
tags => Tags to associate with the registry.
"""
CreateRegistry(registryName) = schemas("POST", "/v1/registries/name/$(registryName)")
CreateRegistry(registryName, args::AbstractDict{String, <: Any}) = schemas("POST", "/v1/registries/name/$(registryName)", args)
CreateRegistry(a...; b...) = CreateRegistry(a..., b)

"""
    CreateSchema()

Creates a schema definition. Inactive schemas will be deleted after two years.

Required Parameters
Content => The source of the schema definition.
Type => The type of schema.
registryName => The name of the registry.
schemaName => The name of the schema.

Optional Parameters
Description => A description of the schema.
tags => Tags associated with the schema.
"""
CreateSchema(Content, Type, registryName, schemaName) = schemas("POST", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)", Dict{String, Any}("Content"=>Content, "Type"=>Type))
CreateSchema(Content, Type, registryName, schemaName, args::AbstractDict{String, <: Any}) = schemas("POST", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)", Dict{String, Any}("Content"=>Content, "Type"=>Type, args...))
CreateSchema(a...; b...) = CreateSchema(a..., b)

"""
    DeleteDiscoverer()

Deletes a discoverer.

Required Parameters
discovererId => The ID of the discoverer.

"""
DeleteDiscoverer(discovererId) = schemas("DELETE", "/v1/discoverers/id/$(discovererId)")
DeleteDiscoverer(discovererId, args::AbstractDict{String, <: Any}) = schemas("DELETE", "/v1/discoverers/id/$(discovererId)", args)
DeleteDiscoverer(a...; b...) = DeleteDiscoverer(a..., b)

"""
    DeleteRegistry()

Deletes a Registry.

Required Parameters
registryName => The name of the registry.

"""
DeleteRegistry(registryName) = schemas("DELETE", "/v1/registries/name/$(registryName)")
DeleteRegistry(registryName, args::AbstractDict{String, <: Any}) = schemas("DELETE", "/v1/registries/name/$(registryName)", args)
DeleteRegistry(a...; b...) = DeleteRegistry(a..., b)

"""
    DeleteResourcePolicy()

Delete the resource-based policy attached to the specified registry.

Optional Parameters
registryName => The name of the registry.
"""
DeleteResourcePolicy() = schemas("DELETE", "/v1/policy")
DeleteResourcePolicy(args::AbstractDict{String, Any}) = schemas("DELETE", "/v1/policy", args)
DeleteResourcePolicy(a...; b...) = DeleteResourcePolicy(a..., b)

"""
    DeleteSchema()

Delete a schema definition.

Required Parameters
registryName => The name of the registry.
schemaName => The name of the schema.

"""
DeleteSchema(registryName, schemaName) = schemas("DELETE", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)")
DeleteSchema(registryName, schemaName, args::AbstractDict{String, <: Any}) = schemas("DELETE", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)", args)
DeleteSchema(a...; b...) = DeleteSchema(a..., b)

"""
    DeleteSchemaVersion()

Delete the schema version definition

Required Parameters
registryName => The name of the registry.
schemaName => The name of the schema.
schemaVersion => The version number of the schema

"""
DeleteSchemaVersion(registryName, schemaName, schemaVersion) = schemas("DELETE", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)/version/$(schemaVersion)")
DeleteSchemaVersion(registryName, schemaName, schemaVersion, args::AbstractDict{String, <: Any}) = schemas("DELETE", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)/version/$(schemaVersion)", args)
DeleteSchemaVersion(a...; b...) = DeleteSchemaVersion(a..., b)

"""
    DescribeCodeBinding()

Describe the code binding URI.

Required Parameters
language => The language of the code binding.
registryName => The name of the registry.
schemaName => The name of the schema.

Optional Parameters
schemaVersion => Specifying this limits the results to only this schema version.
"""
DescribeCodeBinding(language, registryName, schemaName) = schemas("GET", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)/language/$(language)")
DescribeCodeBinding(language, registryName, schemaName, args::AbstractDict{String, <: Any}) = schemas("GET", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)/language/$(language)", args)
DescribeCodeBinding(a...; b...) = DescribeCodeBinding(a..., b)

"""
    DescribeDiscoverer()

Describes the discoverer.

Required Parameters
discovererId => The ID of the discoverer.

"""
DescribeDiscoverer(discovererId) = schemas("GET", "/v1/discoverers/id/$(discovererId)")
DescribeDiscoverer(discovererId, args::AbstractDict{String, <: Any}) = schemas("GET", "/v1/discoverers/id/$(discovererId)", args)
DescribeDiscoverer(a...; b...) = DescribeDiscoverer(a..., b)

"""
    DescribeRegistry()

Describes the registry.

Required Parameters
registryName => The name of the registry.

"""
DescribeRegistry(registryName) = schemas("GET", "/v1/registries/name/$(registryName)")
DescribeRegistry(registryName, args::AbstractDict{String, <: Any}) = schemas("GET", "/v1/registries/name/$(registryName)", args)
DescribeRegistry(a...; b...) = DescribeRegistry(a..., b)

"""
    DescribeSchema()

Retrieve the schema definition.

Required Parameters
registryName => The name of the registry.
schemaName => The name of the schema.

Optional Parameters
schemaVersion => Specifying this limits the results to only this schema version.
"""
DescribeSchema(registryName, schemaName) = schemas("GET", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)")
DescribeSchema(registryName, schemaName, args::AbstractDict{String, <: Any}) = schemas("GET", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)", args)
DescribeSchema(a...; b...) = DescribeSchema(a..., b)

"""
    GetCodeBindingSource()

Get the code binding source URI.

Required Parameters
language => The language of the code binding.
registryName => The name of the registry.
schemaName => The name of the schema.

Optional Parameters
schemaVersion => Specifying this limits the results to only this schema version.
"""
GetCodeBindingSource(language, registryName, schemaName) = schemas("GET", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)/language/$(language)/source")
GetCodeBindingSource(language, registryName, schemaName, args::AbstractDict{String, <: Any}) = schemas("GET", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)/language/$(language)/source", args)
GetCodeBindingSource(a...; b...) = GetCodeBindingSource(a..., b)

"""
    GetDiscoveredSchema()

Get the discovered schema that was generated based on sampled events.

Required Parameters
Events => An array of strings where each string is a JSON event. These are the events that were used to generate the schema. The array includes a single type of event and has a maximum size of 10 events.
Type => The type of event.

"""
GetDiscoveredSchema(Events, Type) = schemas("POST", "/v1/discover", Dict{String, Any}("Events"=>Events, "Type"=>Type))
GetDiscoveredSchema(Events, Type, args::AbstractDict{String, <: Any}) = schemas("POST", "/v1/discover", Dict{String, Any}("Events"=>Events, "Type"=>Type, args...))
GetDiscoveredSchema(a...; b...) = GetDiscoveredSchema(a..., b)

"""
    GetResourcePolicy()

Retrieves the resource-based policy attached to a given registry.

Optional Parameters
registryName => The name of the registry.
"""
GetResourcePolicy() = schemas("GET", "/v1/policy")
GetResourcePolicy(args::AbstractDict{String, Any}) = schemas("GET", "/v1/policy", args)
GetResourcePolicy(a...; b...) = GetResourcePolicy(a..., b)

"""
    ListDiscoverers()

List the discoverers.

Optional Parameters
discovererIdPrefix => Specifying this limits the results to only those discoverer IDs that start with the specified prefix.
limit => 
nextToken => The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.
sourceArnPrefix => Specifying this limits the results to only those ARNs that start with the specified prefix.
"""
ListDiscoverers() = schemas("GET", "/v1/discoverers")
ListDiscoverers(args::AbstractDict{String, Any}) = schemas("GET", "/v1/discoverers", args)
ListDiscoverers(a...; b...) = ListDiscoverers(a..., b)

"""
    ListRegistries()

List the registries.

Optional Parameters
limit => 
nextToken => The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.
registryNamePrefix => Specifying this limits the results to only those registry names that start with the specified prefix.
scope => Can be set to Local or AWS to limit responses to your custom registries, or the ones provided by AWS.
"""
ListRegistries() = schemas("GET", "/v1/registries")
ListRegistries(args::AbstractDict{String, Any}) = schemas("GET", "/v1/registries", args)
ListRegistries(a...; b...) = ListRegistries(a..., b)

"""
    ListSchemaVersions()

Provides a list of the schema versions and related information.

Required Parameters
registryName => The name of the registry.
schemaName => The name of the schema.

Optional Parameters
limit => 
nextToken => The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.
"""
ListSchemaVersions(registryName, schemaName) = schemas("GET", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)/versions")
ListSchemaVersions(registryName, schemaName, args::AbstractDict{String, <: Any}) = schemas("GET", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)/versions", args)
ListSchemaVersions(a...; b...) = ListSchemaVersions(a..., b)

"""
    ListSchemas()

List the schemas.

Required Parameters
registryName => The name of the registry.

Optional Parameters
limit => 
nextToken => The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.
schemaNamePrefix => Specifying this limits the results to only those schema names that start with the specified prefix.
"""
ListSchemas(registryName) = schemas("GET", "/v1/registries/name/$(registryName)/schemas")
ListSchemas(registryName, args::AbstractDict{String, <: Any}) = schemas("GET", "/v1/registries/name/$(registryName)/schemas", args)
ListSchemas(a...; b...) = ListSchemas(a..., b)

"""
    ListTagsForResource()

Get tags for resource.

Required Parameters
resource-arn => The ARN of the resource.

"""
ListTagsForResource(resource_arn) = schemas("GET", "/tags/$(resource-arn)")
ListTagsForResource(resource_arn, args::AbstractDict{String, <: Any}) = schemas("GET", "/tags/$(resource-arn)", args)
ListTagsForResource(a...; b...) = ListTagsForResource(a..., b)

"""
    PutCodeBinding()

Put code binding URI

Required Parameters
language => The language of the code binding.
registryName => The name of the registry.
schemaName => The name of the schema.

Optional Parameters
schemaVersion => Specifying this limits the results to only this schema version.
"""
PutCodeBinding(language, registryName, schemaName) = schemas("POST", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)/language/$(language)")
PutCodeBinding(language, registryName, schemaName, args::AbstractDict{String, <: Any}) = schemas("POST", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)/language/$(language)", args)
PutCodeBinding(a...; b...) = PutCodeBinding(a..., b)

"""
    PutResourcePolicy()

The name of the policy.

Required Parameters
Policy => The resource-based policy.

Optional Parameters
RevisionId => The revision ID of the policy.
registryName => The name of the registry.
"""
PutResourcePolicy(Policy) = schemas("PUT", "/v1/policy", Dict{String, Any}("Policy"=>Policy))
PutResourcePolicy(Policy, args::AbstractDict{String, <: Any}) = schemas("PUT", "/v1/policy", Dict{String, Any}("Policy"=>Policy, args...))
PutResourcePolicy(a...; b...) = PutResourcePolicy(a..., b)

"""
    SearchSchemas()

Search the schemas

Required Parameters
keywords => Specifying this limits the results to only schemas that include the provided keywords.
registryName => The name of the registry.

Optional Parameters
limit => 
nextToken => The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.
"""
SearchSchemas(keywords, registryName) = schemas("GET", "/v1/registries/name/$(registryName)/schemas/search", Dict{String, Any}("keywords"=>keywords))
SearchSchemas(keywords, registryName, args::AbstractDict{String, <: Any}) = schemas("GET", "/v1/registries/name/$(registryName)/schemas/search", Dict{String, Any}("keywords"=>keywords, args...))
SearchSchemas(a...; b...) = SearchSchemas(a..., b)

"""
    StartDiscoverer()

Starts the discoverer

Required Parameters
discovererId => The ID of the discoverer.

"""
StartDiscoverer(discovererId) = schemas("POST", "/v1/discoverers/id/$(discovererId)/start")
StartDiscoverer(discovererId, args::AbstractDict{String, <: Any}) = schemas("POST", "/v1/discoverers/id/$(discovererId)/start", args)
StartDiscoverer(a...; b...) = StartDiscoverer(a..., b)

"""
    StopDiscoverer()

Stops the discoverer

Required Parameters
discovererId => The ID of the discoverer.

"""
StopDiscoverer(discovererId) = schemas("POST", "/v1/discoverers/id/$(discovererId)/stop")
StopDiscoverer(discovererId, args::AbstractDict{String, <: Any}) = schemas("POST", "/v1/discoverers/id/$(discovererId)/stop", args)
StopDiscoverer(a...; b...) = StopDiscoverer(a..., b)

"""
    TagResource()

Add tags to a resource.

Required Parameters
resource-arn => The ARN of the resource.
tags => Tags associated with the resource.

"""
TagResource(resource_arn, tags) = schemas("POST", "/tags/$(resource-arn)", Dict{String, Any}("tags"=>tags))
TagResource(resource_arn, tags, args::AbstractDict{String, <: Any}) = schemas("POST", "/tags/$(resource-arn)", Dict{String, Any}("tags"=>tags, args...))
TagResource(a...; b...) = TagResource(a..., b)

"""
    UntagResource()

Removes tags from a resource.

Required Parameters
resource-arn => The ARN of the resource.
tagKeys => Keys of key-value pairs.

"""
UntagResource(resource_arn, tagKeys) = schemas("DELETE", "/tags/$(resource-arn)", Dict{String, Any}("tagKeys"=>tagKeys))
UntagResource(resource_arn, tagKeys, args::AbstractDict{String, <: Any}) = schemas("DELETE", "/tags/$(resource-arn)", Dict{String, Any}("tagKeys"=>tagKeys, args...))
UntagResource(a...; b...) = UntagResource(a..., b)

"""
    UpdateDiscoverer()

Updates the discoverer

Required Parameters
discovererId => The ID of the discoverer.

Optional Parameters
Description => The description of the discoverer to update.
"""
UpdateDiscoverer(discovererId) = schemas("PUT", "/v1/discoverers/id/$(discovererId)")
UpdateDiscoverer(discovererId, args::AbstractDict{String, <: Any}) = schemas("PUT", "/v1/discoverers/id/$(discovererId)", args)
UpdateDiscoverer(a...; b...) = UpdateDiscoverer(a..., b)

"""
    UpdateRegistry()

Updates a registry.

Required Parameters
registryName => The name of the registry.

Optional Parameters
Description => The description of the registry to update.
"""
UpdateRegistry(registryName) = schemas("PUT", "/v1/registries/name/$(registryName)")
UpdateRegistry(registryName, args::AbstractDict{String, <: Any}) = schemas("PUT", "/v1/registries/name/$(registryName)", args)
UpdateRegistry(a...; b...) = UpdateRegistry(a..., b)

"""
    UpdateSchema()

Updates the schema definition Inactive schemas will be deleted after two years.

Required Parameters
registryName => The name of the registry.
schemaName => The name of the schema.

Optional Parameters
ClientTokenId => The ID of the client token.
Content => The source of the schema definition.
Description => The description of the schema.
Type => The schema type for the events schema.
"""
UpdateSchema(registryName, schemaName) = schemas("PUT", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)")
UpdateSchema(registryName, schemaName, args::AbstractDict{String, <: Any}) = schemas("PUT", "/v1/registries/name/$(registryName)/schemas/name/$(schemaName)", args)
UpdateSchema(a...; b...) = UpdateSchema(a..., b)
