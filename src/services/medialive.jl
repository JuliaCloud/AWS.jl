# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: medialive

using Compat
using UUIDs
"""
    BatchUpdateSchedule()

Update a channel schedule

# Required Parameters
- `channelId`: Id of the channel whose schedule is being updated.

# Optional Parameters
- `creates`: Schedule actions to create in the schedule.
- `deletes`: Schedule actions to delete from the schedule.
"""

BatchUpdateSchedule(channelId; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/channels/$(channelId)/schedule"; aws_config=aws_config)
BatchUpdateSchedule(channelId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/channels/$(channelId)/schedule", args; aws_config=aws_config)

"""
    CreateChannel()

Creates a new channel

# Optional Parameters
- `channelClass`: The class for this channel. STANDARD for a channel with two pipelines or SINGLE_PIPELINE for a channel with one pipeline.
- `destinations`: 
- `encoderSettings`: 
- `inputAttachments`: List of input attachments for channel.
- `inputSpecification`: Specification of input for this channel (max. bitrate, resolution, codec, etc.)
- `logLevel`: The log level to write to CloudWatch Logs.
- `name`: Name of channel.
- `requestId`: Unique request ID to be specified. This is needed to prevent retries from
creating multiple resources.

- `reserved`: Deprecated field that's only usable by whitelisted customers.
- `roleArn`: An optional Amazon Resource Name (ARN) of the role to assume when running the Channel.
- `tags`: A collection of key-value pairs.
"""

CreateChannel(; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/channels", Dict{String, Any}("requestId"=>string(uuid4())); aws_config=aws_config)
CreateChannel(args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/channels", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("requestId"=>string(uuid4())), args)); aws_config=aws_config)

"""
    CreateInput()

Create an input

# Optional Parameters
- `destinations`: Destination settings for PUSH type inputs.
- `inputDevices`: Settings for the devices.
- `inputSecurityGroups`: A list of security groups referenced by IDs to attach to the input.
- `mediaConnectFlows`: A list of the MediaConnect Flows that you want to use in this input. You can specify as few as one
Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a
separate Availability Zone as this ensures your EML input is redundant to AZ issues.

- `name`: Name of the input.
- `requestId`: Unique identifier of the request to ensure the request is handled
exactly once in case of retries.

- `roleArn`: The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
- `sources`: The source URLs for a PULL-type input. Every PULL type input needs
exactly two source URLs for redundancy.
Only specify sources for PULL type Inputs. Leave Destinations empty.

- `tags`: A collection of key-value pairs.
- `type`: 
- `vpc`: 
"""

CreateInput(; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/inputs", Dict{String, Any}("requestId"=>string(uuid4())); aws_config=aws_config)
CreateInput(args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/inputs", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("requestId"=>string(uuid4())), args)); aws_config=aws_config)

"""
    CreateInputSecurityGroup()

Creates a Input Security Group

# Optional Parameters
- `tags`: A collection of key-value pairs.
- `whitelistRules`: List of IPv4 CIDR addresses to whitelist
"""

CreateInputSecurityGroup(; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/inputSecurityGroups"; aws_config=aws_config)
CreateInputSecurityGroup(args::AbstractDict{String, Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/inputSecurityGroups", args; aws_config=aws_config)

"""
    CreateMultiplex()

Create a new multiplex.

# Required Parameters
- `availabilityZones`: A list of availability zones for the multiplex. You must specify exactly two.
- `multiplexSettings`: Configuration for a multiplex event.
- `name`: Name of multiplex.
- `requestId`: Unique request ID. This prevents retries from creating multiple
resources.


# Optional Parameters
- `tags`: A collection of key-value pairs.
"""

CreateMultiplex(availabilityZones, multiplexSettings, name, requestId; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/multiplexes", Dict{String, Any}("availabilityZones"=>availabilityZones, "multiplexSettings"=>multiplexSettings, "name"=>name, "requestId"=>requestId); aws_config=aws_config)
CreateMultiplex(availabilityZones, multiplexSettings, name, requestId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/multiplexes", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("availabilityZones"=>availabilityZones, "multiplexSettings"=>multiplexSettings, "name"=>name, "requestId"=>requestId), args)); aws_config=aws_config)

"""
    CreateMultiplexProgram()

Create a new program in the multiplex.

# Required Parameters
- `multiplexId`: ID of the multiplex where the program is to be created.
- `multiplexProgramSettings`: The settings for this multiplex program.
- `programName`: Name of multiplex program.
- `requestId`: Unique request ID. This prevents retries from creating multiple
resources.


"""

CreateMultiplexProgram(multiplexId, multiplexProgramSettings, programName, requestId; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/multiplexes/$(multiplexId)/programs", Dict{String, Any}("multiplexProgramSettings"=>multiplexProgramSettings, "programName"=>programName, "requestId"=>requestId); aws_config=aws_config)
CreateMultiplexProgram(multiplexId, multiplexProgramSettings, programName, requestId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/multiplexes/$(multiplexId)/programs", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("multiplexProgramSettings"=>multiplexProgramSettings, "programName"=>programName, "requestId"=>requestId), args)); aws_config=aws_config)

"""
    CreateTags()

Create tags for a resource

# Required Parameters
- `resource-arn`: 

# Optional Parameters
- `tags`: 
"""

CreateTags(resource_arn; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/tags/$(resource-arn)"; aws_config=aws_config)
CreateTags(resource_arn, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/tags/$(resource-arn)", args; aws_config=aws_config)

"""
    DeleteChannel()

Starts deletion of channel. The associated outputs are also deleted.

# Required Parameters
- `channelId`: Unique ID of the channel.

"""

DeleteChannel(channelId; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/channels/$(channelId)"; aws_config=aws_config)
DeleteChannel(channelId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/channels/$(channelId)", args; aws_config=aws_config)

"""
    DeleteInput()

Deletes the input end point

# Required Parameters
- `inputId`: Unique ID of the input

"""

DeleteInput(inputId; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/inputs/$(inputId)"; aws_config=aws_config)
DeleteInput(inputId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/inputs/$(inputId)", args; aws_config=aws_config)

"""
    DeleteInputSecurityGroup()

Deletes an Input Security Group

# Required Parameters
- `inputSecurityGroupId`: The Input Security Group to delete

"""

DeleteInputSecurityGroup(inputSecurityGroupId; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/inputSecurityGroups/$(inputSecurityGroupId)"; aws_config=aws_config)
DeleteInputSecurityGroup(inputSecurityGroupId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/inputSecurityGroups/$(inputSecurityGroupId)", args; aws_config=aws_config)

"""
    DeleteMultiplex()

Delete a multiplex. The multiplex must be idle.

# Required Parameters
- `multiplexId`: The ID of the multiplex.

"""

DeleteMultiplex(multiplexId; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/multiplexes/$(multiplexId)"; aws_config=aws_config)
DeleteMultiplex(multiplexId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/multiplexes/$(multiplexId)", args; aws_config=aws_config)

"""
    DeleteMultiplexProgram()

Delete a program from a multiplex.

# Required Parameters
- `multiplexId`: The ID of the multiplex that the program belongs to.
- `programName`: The multiplex program name.

"""

DeleteMultiplexProgram(multiplexId, programName; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/multiplexes/$(multiplexId)/programs/$(programName)"; aws_config=aws_config)
DeleteMultiplexProgram(multiplexId, programName, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/multiplexes/$(multiplexId)/programs/$(programName)", args; aws_config=aws_config)

"""
    DeleteReservation()

Delete an expired reservation.

# Required Parameters
- `reservationId`: Unique reservation ID, e.g. '1234567'

"""

DeleteReservation(reservationId; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/reservations/$(reservationId)"; aws_config=aws_config)
DeleteReservation(reservationId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/reservations/$(reservationId)", args; aws_config=aws_config)

"""
    DeleteSchedule()

Delete all schedule actions on a channel.

# Required Parameters
- `channelId`: Id of the channel whose schedule is being deleted.

"""

DeleteSchedule(channelId; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/channels/$(channelId)/schedule"; aws_config=aws_config)
DeleteSchedule(channelId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/channels/$(channelId)/schedule", args; aws_config=aws_config)

"""
    DeleteTags()

Removes tags for a resource

# Required Parameters
- `resource-arn`: 
- `tagKeys`: An array of tag keys to delete

"""

DeleteTags(resource_arn, tagKeys; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/tags/$(resource-arn)", Dict{String, Any}("tagKeys"=>tagKeys); aws_config=aws_config)
DeleteTags(resource_arn, tagKeys, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("DELETE", "/prod/tags/$(resource-arn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), args)); aws_config=aws_config)

"""
    DescribeChannel()

Gets details about a channel

# Required Parameters
- `channelId`: channel ID

"""

DescribeChannel(channelId; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/channels/$(channelId)"; aws_config=aws_config)
DescribeChannel(channelId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/channels/$(channelId)", args; aws_config=aws_config)

"""
    DescribeInput()

Produces details about an input

# Required Parameters
- `inputId`: Unique ID of the input

"""

DescribeInput(inputId; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputs/$(inputId)"; aws_config=aws_config)
DescribeInput(inputId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputs/$(inputId)", args; aws_config=aws_config)

"""
    DescribeInputDevice()

Gets the details for the input device

# Required Parameters
- `inputDeviceId`: The unique ID of this input device. For example, hd-123456789abcdef.

"""

DescribeInputDevice(inputDeviceId; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputDevices/$(inputDeviceId)"; aws_config=aws_config)
DescribeInputDevice(inputDeviceId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputDevices/$(inputDeviceId)", args; aws_config=aws_config)

"""
    DescribeInputDeviceThumbnail()

Get the latest thumbnail data for the input device.

# Required Parameters
- `accept`: The HTTP Accept header. Indicates the requested type for the thumbnail.
- `inputDeviceId`: The unique ID of this input device. For example, hd-123456789abcdef.

"""

DescribeInputDeviceThumbnail(accept, inputDeviceId; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputDevices/$(inputDeviceId)/thumbnailData", Dict{String, Any}("headers"=>Dict{String, Any}("accept"=>accept)); aws_config=aws_config)
DescribeInputDeviceThumbnail(accept, inputDeviceId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputDevices/$(inputDeviceId)/thumbnailData", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("headers"=>Dict{String, Any}("accept"=>accept)), args)); aws_config=aws_config)

"""
    DescribeInputSecurityGroup()

Produces a summary of an Input Security Group

# Required Parameters
- `inputSecurityGroupId`: The id of the Input Security Group to describe

"""

DescribeInputSecurityGroup(inputSecurityGroupId; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputSecurityGroups/$(inputSecurityGroupId)"; aws_config=aws_config)
DescribeInputSecurityGroup(inputSecurityGroupId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputSecurityGroups/$(inputSecurityGroupId)", args; aws_config=aws_config)

"""
    DescribeMultiplex()

Gets details about a multiplex.

# Required Parameters
- `multiplexId`: The ID of the multiplex.

"""

DescribeMultiplex(multiplexId; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/multiplexes/$(multiplexId)"; aws_config=aws_config)
DescribeMultiplex(multiplexId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/multiplexes/$(multiplexId)", args; aws_config=aws_config)

"""
    DescribeMultiplexProgram()

Get the details for a program in a multiplex.

# Required Parameters
- `multiplexId`: The ID of the multiplex that the program belongs to.
- `programName`: The name of the program.

"""

DescribeMultiplexProgram(multiplexId, programName; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/multiplexes/$(multiplexId)/programs/$(programName)"; aws_config=aws_config)
DescribeMultiplexProgram(multiplexId, programName, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/multiplexes/$(multiplexId)/programs/$(programName)", args; aws_config=aws_config)

"""
    DescribeOffering()

Get details for an offering.

# Required Parameters
- `offeringId`: Unique offering ID, e.g. '87654321'

"""

DescribeOffering(offeringId; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/offerings/$(offeringId)"; aws_config=aws_config)
DescribeOffering(offeringId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/offerings/$(offeringId)", args; aws_config=aws_config)

"""
    DescribeReservation()

Get details for a reservation.

# Required Parameters
- `reservationId`: Unique reservation ID, e.g. '1234567'

"""

DescribeReservation(reservationId; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/reservations/$(reservationId)"; aws_config=aws_config)
DescribeReservation(reservationId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/reservations/$(reservationId)", args; aws_config=aws_config)

"""
    DescribeSchedule()

Get a channel schedule

# Required Parameters
- `channelId`: Id of the channel whose schedule is being updated.

# Optional Parameters
- `maxResults`: 
- `nextToken`: 
"""

DescribeSchedule(channelId; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/channels/$(channelId)/schedule"; aws_config=aws_config)
DescribeSchedule(channelId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/channels/$(channelId)/schedule", args; aws_config=aws_config)

"""
    ListChannels()

Produces list of channels that have been created

# Optional Parameters
- `maxResults`: 
- `nextToken`: 
"""

ListChannels(; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/channels"; aws_config=aws_config)
ListChannels(args::AbstractDict{String, Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/channels", args; aws_config=aws_config)

"""
    ListInputDevices()

List input devices

# Optional Parameters
- `maxResults`: 
- `nextToken`: 
"""

ListInputDevices(; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputDevices"; aws_config=aws_config)
ListInputDevices(args::AbstractDict{String, Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputDevices", args; aws_config=aws_config)

"""
    ListInputSecurityGroups()

Produces a list of Input Security Groups for an account

# Optional Parameters
- `maxResults`: 
- `nextToken`: 
"""

ListInputSecurityGroups(; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputSecurityGroups"; aws_config=aws_config)
ListInputSecurityGroups(args::AbstractDict{String, Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputSecurityGroups", args; aws_config=aws_config)

"""
    ListInputs()

Produces list of inputs that have been created

# Optional Parameters
- `maxResults`: 
- `nextToken`: 
"""

ListInputs(; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputs"; aws_config=aws_config)
ListInputs(args::AbstractDict{String, Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/inputs", args; aws_config=aws_config)

"""
    ListMultiplexPrograms()

List the programs that currently exist for a specific multiplex.

# Required Parameters
- `multiplexId`: The ID of the multiplex that the programs belong to.

# Optional Parameters
- `maxResults`: The maximum number of items to return.
- `nextToken`: The token to retrieve the next page of results.
"""

ListMultiplexPrograms(multiplexId; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/multiplexes/$(multiplexId)/programs"; aws_config=aws_config)
ListMultiplexPrograms(multiplexId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/multiplexes/$(multiplexId)/programs", args; aws_config=aws_config)

"""
    ListMultiplexes()

Retrieve a list of the existing multiplexes.

# Optional Parameters
- `maxResults`: The maximum number of items to return.
- `nextToken`: The token to retrieve the next page of results.
"""

ListMultiplexes(; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/multiplexes"; aws_config=aws_config)
ListMultiplexes(args::AbstractDict{String, Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/multiplexes", args; aws_config=aws_config)

"""
    ListOfferings()

List offerings available for purchase.

# Optional Parameters
- `channelClass`: Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'

- `channelConfiguration`: Filter to offerings that match the configuration of an existing channel, e.g. '2345678' (a channel ID)

- `codec`: Filter by codec, 'AVC', 'HEVC', 'MPEG2', or 'AUDIO'
- `duration`: Filter by offering duration, e.g. '12'
- `maxResults`: 
- `maximumBitrate`: Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'

- `maximumFramerate`: Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
- `nextToken`: 
- `resolution`: Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
- `resourceType`: Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
- `specialFeature`: Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'

- `videoQuality`: Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'

"""

ListOfferings(; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/offerings"; aws_config=aws_config)
ListOfferings(args::AbstractDict{String, Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/offerings", args; aws_config=aws_config)

"""
    ListReservations()

List purchased reservations.

# Optional Parameters
- `channelClass`: Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'

- `codec`: Filter by codec, 'AVC', 'HEVC', 'MPEG2', or 'AUDIO'
- `maxResults`: 
- `maximumBitrate`: Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'

- `maximumFramerate`: Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'
- `nextToken`: 
- `resolution`: Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'
- `resourceType`: Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
- `specialFeature`: Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'

- `videoQuality`: Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'

"""

ListReservations(; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/reservations"; aws_config=aws_config)
ListReservations(args::AbstractDict{String, Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/reservations", args; aws_config=aws_config)

"""
    ListTagsForResource()

Produces list of tags that have been created for a resource

# Required Parameters
- `resource-arn`: 

"""

ListTagsForResource(resource_arn; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/tags/$(resource-arn)"; aws_config=aws_config)
ListTagsForResource(resource_arn, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("GET", "/prod/tags/$(resource-arn)", args; aws_config=aws_config)

"""
    PurchaseOffering()

Purchase an offering and create a reservation.

# Required Parameters
- `count`: Number of resources
- `offeringId`: Offering to purchase, e.g. '87654321'

# Optional Parameters
- `name`: Name for the new reservation
- `requestId`: Unique request ID to be specified. This is needed to prevent retries from creating multiple resources.
- `start`: Requested reservation start time (UTC) in ISO-8601 format. The specified time must be between the first day of the current month and one year from now. If no value is given, the default is now.
- `tags`: A collection of key-value pairs
"""

PurchaseOffering(count, offeringId; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/offerings/$(offeringId)/purchase", Dict{String, Any}("count"=>count, "requestId"=>string(uuid4())); aws_config=aws_config)
PurchaseOffering(count, offeringId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/offerings/$(offeringId)/purchase", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("count"=>count, "requestId"=>string(uuid4())), args)); aws_config=aws_config)

"""
    StartChannel()

Starts an existing channel

# Required Parameters
- `channelId`: A request to start a channel

"""

StartChannel(channelId; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/channels/$(channelId)/start"; aws_config=aws_config)
StartChannel(channelId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/channels/$(channelId)/start", args; aws_config=aws_config)

"""
    StartMultiplex()

Start (run) the multiplex. Starting the multiplex does not start the channels. You must explicitly start each channel.

# Required Parameters
- `multiplexId`: The ID of the multiplex.

"""

StartMultiplex(multiplexId; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/multiplexes/$(multiplexId)/start"; aws_config=aws_config)
StartMultiplex(multiplexId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/multiplexes/$(multiplexId)/start", args; aws_config=aws_config)

"""
    StopChannel()

Stops a running channel

# Required Parameters
- `channelId`: A request to stop a running channel

"""

StopChannel(channelId; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/channels/$(channelId)/stop"; aws_config=aws_config)
StopChannel(channelId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/channels/$(channelId)/stop", args; aws_config=aws_config)

"""
    StopMultiplex()

Stops a running multiplex. If the multiplex isn't running, this action has no effect.

# Required Parameters
- `multiplexId`: The ID of the multiplex.

"""

StopMultiplex(multiplexId; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/multiplexes/$(multiplexId)/stop"; aws_config=aws_config)
StopMultiplex(multiplexId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("POST", "/prod/multiplexes/$(multiplexId)/stop", args; aws_config=aws_config)

"""
    UpdateChannel()

Updates a channel.

# Required Parameters
- `channelId`: channel ID

# Optional Parameters
- `destinations`: A list of output destinations for this channel.
- `encoderSettings`: The encoder settings for this channel.
- `inputAttachments`: 
- `inputSpecification`: Specification of input for this channel (max. bitrate, resolution, codec, etc.)
- `logLevel`: The log level to write to CloudWatch Logs.
- `name`: The name of the channel.
- `roleArn`: An optional Amazon Resource Name (ARN) of the role to assume when running the Channel. If you do not specify this on an update call but the role was previously set that role will be removed.
"""

UpdateChannel(channelId; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/channels/$(channelId)"; aws_config=aws_config)
UpdateChannel(channelId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/channels/$(channelId)", args; aws_config=aws_config)

"""
    UpdateChannelClass()

Changes the class of the channel.

# Required Parameters
- `channelClass`: The channel class that you wish to update this channel to use.
- `channelId`: Channel Id of the channel whose class should be updated.

# Optional Parameters
- `destinations`: A list of output destinations for this channel.
"""

UpdateChannelClass(channelClass, channelId; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/channels/$(channelId)/channelClass", Dict{String, Any}("channelClass"=>channelClass); aws_config=aws_config)
UpdateChannelClass(channelClass, channelId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/channels/$(channelId)/channelClass", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("channelClass"=>channelClass), args)); aws_config=aws_config)

"""
    UpdateInput()

Updates an input.

# Required Parameters
- `inputId`: Unique ID of the input.

# Optional Parameters
- `destinations`: Destination settings for PUSH type inputs.
- `inputDevices`: Settings for the devices.
- `inputSecurityGroups`: A list of security groups referenced by IDs to attach to the input.
- `mediaConnectFlows`: A list of the MediaConnect Flow ARNs that you want to use as the source of the input. You can specify as few as one
Flow and presently, as many as two. The only requirement is when you have more than one is that each Flow is in a
separate Availability Zone as this ensures your EML input is redundant to AZ issues.

- `name`: Name of the input.
- `roleArn`: The Amazon Resource Name (ARN) of the role this input assumes during and after creation.
- `sources`: The source URLs for a PULL-type input. Every PULL type input needs
exactly two source URLs for redundancy.
Only specify sources for PULL type Inputs. Leave Destinations empty.

"""

UpdateInput(inputId; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/inputs/$(inputId)"; aws_config=aws_config)
UpdateInput(inputId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/inputs/$(inputId)", args; aws_config=aws_config)

"""
    UpdateInputDevice()

Updates the parameters for the input device.

# Required Parameters
- `inputDeviceId`: The unique ID of the input device. For example, hd-123456789abcdef.

# Optional Parameters
- `hdDeviceSettings`: The settings that you want to apply to the input device.
- `name`: The name that you assigned to this input device (not the unique ID).
"""

UpdateInputDevice(inputDeviceId; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/inputDevices/$(inputDeviceId)"; aws_config=aws_config)
UpdateInputDevice(inputDeviceId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/inputDevices/$(inputDeviceId)", args; aws_config=aws_config)

"""
    UpdateInputSecurityGroup()

Update an Input Security Group's Whilelists.

# Required Parameters
- `inputSecurityGroupId`: The id of the Input Security Group to update.

# Optional Parameters
- `tags`: A collection of key-value pairs.
- `whitelistRules`: List of IPv4 CIDR addresses to whitelist
"""

UpdateInputSecurityGroup(inputSecurityGroupId; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/inputSecurityGroups/$(inputSecurityGroupId)"; aws_config=aws_config)
UpdateInputSecurityGroup(inputSecurityGroupId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/inputSecurityGroups/$(inputSecurityGroupId)", args; aws_config=aws_config)

"""
    UpdateMultiplex()

Updates a multiplex.

# Required Parameters
- `multiplexId`: ID of the multiplex to update.

# Optional Parameters
- `multiplexSettings`: The new settings for a multiplex.
- `name`: Name of the multiplex.
"""

UpdateMultiplex(multiplexId; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/multiplexes/$(multiplexId)"; aws_config=aws_config)
UpdateMultiplex(multiplexId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/multiplexes/$(multiplexId)", args; aws_config=aws_config)

"""
    UpdateMultiplexProgram()

Update a program in a multiplex.

# Required Parameters
- `multiplexId`: The ID of the multiplex of the program to update.
- `programName`: The name of the program to update.

# Optional Parameters
- `multiplexProgramSettings`: The new settings for a multiplex program.
"""

UpdateMultiplexProgram(multiplexId, programName; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/multiplexes/$(multiplexId)/programs/$(programName)"; aws_config=aws_config)
UpdateMultiplexProgram(multiplexId, programName, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/multiplexes/$(multiplexId)/programs/$(programName)", args; aws_config=aws_config)

"""
    UpdateReservation()

Update reservation.

# Required Parameters
- `reservationId`: Unique reservation ID, e.g. '1234567'

# Optional Parameters
- `name`: Name of the reservation
"""

UpdateReservation(reservationId; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/reservations/$(reservationId)"; aws_config=aws_config)
UpdateReservation(reservationId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = medialive("PUT", "/prod/reservations/$(reservationId)", args; aws_config=aws_config)
