# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
using Compat
using .AWSServices: securityhub

"""
    AcceptInvitation()

Accepts the invitation to be a member account and be monitored by the Security Hub master account that the invitation was sent from. When the member account accepts the invitation, permission is granted to the master account to view findings generated in the member account.

Required Parameters
InvitationId => The ID of the invitation sent from the Security Hub master account.
MasterId => The account ID of the Security Hub master account that sent the invitation.

"""
AcceptInvitation(InvitationId, MasterId) = securityhub("POST", "/master", Dict{String, Any}("InvitationId"=>InvitationId, "MasterId"=>MasterId))
AcceptInvitation(InvitationId, MasterId, args::AbstractDict{String, <: Any}) = securityhub("POST", "/master", Dict{String, Any}("InvitationId"=>InvitationId, "MasterId"=>MasterId, args...))
AcceptInvitation(a...; b...) = AcceptInvitation(a..., b)

"""
    BatchDisableStandards()

Disables the standards specified by the provided StandardsSubscriptionArns. For more information, see Security Standards section of the AWS Security Hub User Guide.

Required Parameters
StandardsSubscriptionArns => The ARNs of the standards subscriptions to disable.

"""
BatchDisableStandards(StandardsSubscriptionArns) = securityhub("POST", "/standards/deregister", Dict{String, Any}("StandardsSubscriptionArns"=>StandardsSubscriptionArns))
BatchDisableStandards(StandardsSubscriptionArns, args::AbstractDict{String, <: Any}) = securityhub("POST", "/standards/deregister", Dict{String, Any}("StandardsSubscriptionArns"=>StandardsSubscriptionArns, args...))
BatchDisableStandards(a...; b...) = BatchDisableStandards(a..., b)

"""
    BatchEnableStandards()

Enables the standards specified by the provided StandardsArn. To obtain the ARN for a standard, use the  DescribeStandards  operation. For more information, see the Security Standards section of the AWS Security Hub User Guide.

Required Parameters
StandardsSubscriptionRequests => The list of standards checks to enable.

"""
BatchEnableStandards(StandardsSubscriptionRequests) = securityhub("POST", "/standards/register", Dict{String, Any}("StandardsSubscriptionRequests"=>StandardsSubscriptionRequests))
BatchEnableStandards(StandardsSubscriptionRequests, args::AbstractDict{String, <: Any}) = securityhub("POST", "/standards/register", Dict{String, Any}("StandardsSubscriptionRequests"=>StandardsSubscriptionRequests, args...))
BatchEnableStandards(a...; b...) = BatchEnableStandards(a..., b)

"""
    BatchImportFindings()

Imports security findings generated from an integrated third-party product into Security Hub. This action is requested by the integrated product to import its findings into Security Hub. The maximum allowed size for a finding is 240 Kb. An error is returned for any finding larger than 240 Kb. After a finding is created, BatchImportFindings cannot be used to update the following finding fields and objects, which Security Hub customers use to manage their investigation workflow.    Confidence     Criticality     Note     RelatedFindings     Severity     Types     UserDefinedFields     VerificationState     Workflow   

Required Parameters
Findings => A list of findings to import. To successfully import a finding, it must follow the AWS Security Finding Format. Maximum of 100 findings per request.

"""
BatchImportFindings(Findings) = securityhub("POST", "/findings/import", Dict{String, Any}("Findings"=>Findings))
BatchImportFindings(Findings, args::AbstractDict{String, <: Any}) = securityhub("POST", "/findings/import", Dict{String, Any}("Findings"=>Findings, args...))
BatchImportFindings(a...; b...) = BatchImportFindings(a..., b)

"""
    BatchUpdateFindings()

Used by Security Hub customers to update information about their investigation into a finding. Requested by master accounts or member accounts. Master accounts can update findings for their account and their member accounts. Member accounts can update findings for their account. Updates from BatchUpdateFindings do not affect the value of UpdatedAt for a finding. Master accounts can use BatchUpdateFindings to update the following finding fields and objects.    Confidence     Criticality     Note     RelatedFindings     Severity     Types     UserDefinedFields     VerificationState     Workflow    Member accounts can only use BatchUpdateFindings to update the Note object.

Required Parameters
FindingIdentifiers => The list of findings to update. BatchUpdateFindings can be used to update up to 100 findings at a time. For each finding, the list provides the finding identifier and the ARN of the finding provider.

Optional Parameters
Confidence => The updated value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.
Criticality => The updated value for the level of importance assigned to the resources associated with the findings. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources. 
Note => 
RelatedFindings => A list of findings that are related to the updated findings.
Severity => Used to update the finding severity.
Types => One or more finding types in the format of namespace/category/classifier that classify a finding. Valid namespace values are as follows.   Software and Configuration Checks   TTPs   Effects   Unusual Behaviors   Sensitive Data Identifications   
UserDefinedFields => A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding.
VerificationState => Indicates the veracity of a finding. The available values for VerificationState are as follows.    UNKNOWN – The default disposition of a security finding    TRUE_POSITIVE – The security finding is confirmed    FALSE_POSITIVE – The security finding was determined to be a false alarm    BENIGN_POSITIVE – A special case of TRUE_POSITIVE where the finding doesn't pose any threat, is expected, or both  
Workflow => Used to update the workflow status of a finding. The workflow status indicates the progress of the investigation into the finding. 
"""
BatchUpdateFindings(FindingIdentifiers) = securityhub("PATCH", "/findings/batchupdate", Dict{String, Any}("FindingIdentifiers"=>FindingIdentifiers))
BatchUpdateFindings(FindingIdentifiers, args::AbstractDict{String, <: Any}) = securityhub("PATCH", "/findings/batchupdate", Dict{String, Any}("FindingIdentifiers"=>FindingIdentifiers, args...))
BatchUpdateFindings(a...; b...) = BatchUpdateFindings(a..., b)

"""
    CreateActionTarget()

Creates a custom action target in Security Hub. You can use custom actions on findings and insights in Security Hub to trigger target actions in Amazon CloudWatch Events.

Required Parameters
Description => The description for the custom action target.
Id => The ID for the custom action target.
Name => The name of the custom action target.

"""
CreateActionTarget(Description, Id, Name) = securityhub("POST", "/actionTargets", Dict{String, Any}("Description"=>Description, "Id"=>Id, "Name"=>Name))
CreateActionTarget(Description, Id, Name, args::AbstractDict{String, <: Any}) = securityhub("POST", "/actionTargets", Dict{String, Any}("Description"=>Description, "Id"=>Id, "Name"=>Name, args...))
CreateActionTarget(a...; b...) = CreateActionTarget(a..., b)

"""
    CreateInsight()

Creates a custom insight in Security Hub. An insight is a consolidation of findings that relate to a security issue that requires attention or remediation. To group the related findings in the insight, use the GroupByAttribute.

Required Parameters
Filters => One or more attributes used to filter the findings included in the insight. The insight only includes findings that match the criteria defined in the filters.
GroupByAttribute => The attribute used to group the findings for the insight. The grouping attribute identifies the type of item that the insight applies to. For example, if an insight is grouped by resource identifier, then the insight produces a list of resource identifiers.
Name => The name of the custom insight to create.

"""
CreateInsight(Filters, GroupByAttribute, Name) = securityhub("POST", "/insights", Dict{String, Any}("Filters"=>Filters, "GroupByAttribute"=>GroupByAttribute, "Name"=>Name))
CreateInsight(Filters, GroupByAttribute, Name, args::AbstractDict{String, <: Any}) = securityhub("POST", "/insights", Dict{String, Any}("Filters"=>Filters, "GroupByAttribute"=>GroupByAttribute, "Name"=>Name, args...))
CreateInsight(a...; b...) = CreateInsight(a..., b)

"""
    CreateMembers()

Creates a member association in Security Hub between the specified accounts and the account used to make the request, which is the master account. To successfully create a member, you must use this action from an account that already has Security Hub enabled. To enable Security Hub, you can use the  EnableSecurityHub  operation. After you use CreateMembers to create member account associations in Security Hub, you must use the  InviteMembers  operation to invite the accounts to enable Security Hub and become member accounts in Security Hub. If the account owner accepts the invitation, the account becomes a member account in Security Hub. A permissions policy is added that permits the master account to view the findings generated in the member account. When Security Hub is enabled in the invited account, findings start to be sent to both the member and master accounts. To remove the association between the master and member accounts, use the  DisassociateFromMasterAccount  or  DisassociateMembers  operation.

Optional Parameters
AccountDetails => The list of accounts to associate with the Security Hub master account. For each account, the list includes the account ID and the email address.
"""
CreateMembers() = securityhub("POST", "/members")
CreateMembers(args::AbstractDict{String, Any}) = securityhub("POST", "/members", args)
CreateMembers(a...; b...) = CreateMembers(a..., b)

"""
    DeclineInvitations()

Declines invitations to become a member account.

Required Parameters
AccountIds => The list of account IDs for the accounts from which to decline the invitations to Security Hub.

"""
DeclineInvitations(AccountIds) = securityhub("POST", "/invitations/decline", Dict{String, Any}("AccountIds"=>AccountIds))
DeclineInvitations(AccountIds, args::AbstractDict{String, <: Any}) = securityhub("POST", "/invitations/decline", Dict{String, Any}("AccountIds"=>AccountIds, args...))
DeclineInvitations(a...; b...) = DeclineInvitations(a..., b)

"""
    DeleteActionTarget()

Deletes a custom action target from Security Hub. Deleting a custom action target does not affect any findings or insights that were already sent to Amazon CloudWatch Events using the custom action.

Required Parameters
ActionTargetArn => The ARN of the custom action target to delete.

"""
DeleteActionTarget(ActionTargetArn) = securityhub("DELETE", "/actionTargets/$(ActionTargetArn)")
DeleteActionTarget(ActionTargetArn, args::AbstractDict{String, <: Any}) = securityhub("DELETE", "/actionTargets/$(ActionTargetArn)", args)
DeleteActionTarget(a...; b...) = DeleteActionTarget(a..., b)

"""
    DeleteInsight()

Deletes the insight specified by the InsightArn.

Required Parameters
InsightArn => The ARN of the insight to delete.

"""
DeleteInsight(InsightArn) = securityhub("DELETE", "/insights/$(InsightArn)")
DeleteInsight(InsightArn, args::AbstractDict{String, <: Any}) = securityhub("DELETE", "/insights/$(InsightArn)", args)
DeleteInsight(a...; b...) = DeleteInsight(a..., b)

"""
    DeleteInvitations()

Deletes invitations received by the AWS account to become a member account.

Required Parameters
AccountIds => The list of the account IDs that sent the invitations to delete.

"""
DeleteInvitations(AccountIds) = securityhub("POST", "/invitations/delete", Dict{String, Any}("AccountIds"=>AccountIds))
DeleteInvitations(AccountIds, args::AbstractDict{String, <: Any}) = securityhub("POST", "/invitations/delete", Dict{String, Any}("AccountIds"=>AccountIds, args...))
DeleteInvitations(a...; b...) = DeleteInvitations(a..., b)

"""
    DeleteMembers()

Deletes the specified member accounts from Security Hub.

Optional Parameters
AccountIds => The list of account IDs for the member accounts to delete.
"""
DeleteMembers() = securityhub("POST", "/members/delete")
DeleteMembers(args::AbstractDict{String, Any}) = securityhub("POST", "/members/delete", args)
DeleteMembers(a...; b...) = DeleteMembers(a..., b)

"""
    DescribeActionTargets()

Returns a list of the custom action targets in Security Hub in your account.

Optional Parameters
ActionTargetArns => A list of custom action target ARNs for the custom action targets to retrieve.
MaxResults => The maximum number of results to return.
NextToken => The token that is required for pagination. On your first call to the DescribeActionTargets operation, set the value of this parameter to NULL. For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.
"""
DescribeActionTargets() = securityhub("POST", "/actionTargets/get")
DescribeActionTargets(args::AbstractDict{String, Any}) = securityhub("POST", "/actionTargets/get", args)
DescribeActionTargets(a...; b...) = DescribeActionTargets(a..., b)

"""
    DescribeHub()

Returns details about the Hub resource in your account, including the HubArn and the time when you enabled Security Hub.

Optional Parameters
HubArn => The ARN of the Hub resource to retrieve.
"""
DescribeHub() = securityhub("GET", "/accounts")
DescribeHub(args::AbstractDict{String, Any}) = securityhub("GET", "/accounts", args)
DescribeHub(a...; b...) = DescribeHub(a..., b)

"""
    DescribeProducts()

Returns information about the available products that you can subscribe to and integrate with Security Hub in order to consolidate findings.

Optional Parameters
MaxResults => The maximum number of results to return.
NextToken => The token that is required for pagination. On your first call to the DescribeProducts operation, set the value of this parameter to NULL. For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.
"""
DescribeProducts() = securityhub("GET", "/products")
DescribeProducts(args::AbstractDict{String, Any}) = securityhub("GET", "/products", args)
DescribeProducts(a...; b...) = DescribeProducts(a..., b)

"""
    DescribeStandards()

Returns a list of the available standards in Security Hub. For each standard, the results include the standard ARN, the name, and a description. 

Optional Parameters
MaxResults => The maximum number of standards to return.
NextToken => The token that is required for pagination. On your first call to the DescribeStandards operation, set the value of this parameter to NULL. For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.
"""
DescribeStandards() = securityhub("GET", "/standards")
DescribeStandards(args::AbstractDict{String, Any}) = securityhub("GET", "/standards", args)
DescribeStandards(a...; b...) = DescribeStandards(a..., b)

"""
    DescribeStandardsControls()

Returns a list of security standards controls. For each control, the results include information about whether it is currently enabled, the severity, and a link to remediation information.

Required Parameters
StandardsSubscriptionArn => The ARN of a resource that represents your subscription to a supported standard.

Optional Parameters
MaxResults => The maximum number of security standard controls to return.
NextToken => The token that is required for pagination. On your first call to the DescribeStandardsControls operation, set the value of this parameter to NULL. For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.
"""
DescribeStandardsControls(StandardsSubscriptionArn) = securityhub("GET", "/standards/controls/$(StandardsSubscriptionArn)")
DescribeStandardsControls(StandardsSubscriptionArn, args::AbstractDict{String, <: Any}) = securityhub("GET", "/standards/controls/$(StandardsSubscriptionArn)", args)
DescribeStandardsControls(a...; b...) = DescribeStandardsControls(a..., b)

"""
    DisableImportFindingsForProduct()

Disables the integration of the specified product with Security Hub. After the integration is disabled, findings from that product are no longer sent to Security Hub.

Required Parameters
ProductSubscriptionArn => The ARN of the integrated product to disable the integration for.

"""
DisableImportFindingsForProduct(ProductSubscriptionArn) = securityhub("DELETE", "/productSubscriptions/$(ProductSubscriptionArn)")
DisableImportFindingsForProduct(ProductSubscriptionArn, args::AbstractDict{String, <: Any}) = securityhub("DELETE", "/productSubscriptions/$(ProductSubscriptionArn)", args)
DisableImportFindingsForProduct(a...; b...) = DisableImportFindingsForProduct(a..., b)

"""
    DisableSecurityHub()

Disables Security Hub in your account only in the current Region. To disable Security Hub in all Regions, you must submit one request per Region where you have enabled Security Hub. When you disable Security Hub for a master account, it doesn't disable Security Hub for any associated member accounts. When you disable Security Hub, your existing findings and insights and any Security Hub configuration settings are deleted after 90 days and cannot be recovered. Any standards that were enabled are disabled, and your master and member account associations are removed. If you want to save your existing findings, you must export them before you disable Security Hub.

"""
DisableSecurityHub() = securityhub("DELETE", "/accounts")
DisableSecurityHub(args::AbstractDict{String, Any}) = securityhub("DELETE", "/accounts", args)
DisableSecurityHub(a...; b...) = DisableSecurityHub(a..., b)

"""
    DisassociateFromMasterAccount()

Disassociates the current Security Hub member account from the associated master account.

"""
DisassociateFromMasterAccount() = securityhub("POST", "/master/disassociate")
DisassociateFromMasterAccount(args::AbstractDict{String, Any}) = securityhub("POST", "/master/disassociate", args)
DisassociateFromMasterAccount(a...; b...) = DisassociateFromMasterAccount(a..., b)

"""
    DisassociateMembers()

Disassociates the specified member accounts from the associated master account.

Optional Parameters
AccountIds => The account IDs of the member accounts to disassociate from the master account.
"""
DisassociateMembers() = securityhub("POST", "/members/disassociate")
DisassociateMembers(args::AbstractDict{String, Any}) = securityhub("POST", "/members/disassociate", args)
DisassociateMembers(a...; b...) = DisassociateMembers(a..., b)

"""
    EnableImportFindingsForProduct()

Enables the integration of a partner product with Security Hub. Integrated products send findings to Security Hub. When you enable a product integration, a permissions policy that grants permission for the product to send findings to Security Hub is applied.

Required Parameters
ProductArn => The ARN of the product to enable the integration for.

"""
EnableImportFindingsForProduct(ProductArn) = securityhub("POST", "/productSubscriptions", Dict{String, Any}("ProductArn"=>ProductArn))
EnableImportFindingsForProduct(ProductArn, args::AbstractDict{String, <: Any}) = securityhub("POST", "/productSubscriptions", Dict{String, Any}("ProductArn"=>ProductArn, args...))
EnableImportFindingsForProduct(a...; b...) = EnableImportFindingsForProduct(a..., b)

"""
    EnableSecurityHub()

Enables Security Hub for your account in the current Region or the Region you specify in the request. When you enable Security Hub, you grant to Security Hub the permissions necessary to gather findings from other services that are integrated with Security Hub. When you use the EnableSecurityHub operation to enable Security Hub, you also automatically enable the following standards.   CIS AWS Foundations   AWS Foundational Security Best Practices   You do not enable the Payment Card Industry Data Security Standard (PCI DSS) standard.  To not enable the automatically enabled standards, set EnableDefaultStandards to false. After you enable Security Hub, to enable a standard, use the  BatchEnableStandards  operation. To disable a standard, use the  BatchDisableStandards  operation. To learn more, see Setting Up AWS Security Hub in the AWS Security Hub User Guide.

Optional Parameters
EnableDefaultStandards => Whether to enable the security standards that Security Hub has designated as automatically enabled. If you do not provide a value for EnableDefaultStandards, it is set to true. To not enable the automatically enabled standards, set EnableDefaultStandards to false.
Tags => The tags to add to the hub resource when you enable Security Hub.
"""
EnableSecurityHub() = securityhub("POST", "/accounts")
EnableSecurityHub(args::AbstractDict{String, Any}) = securityhub("POST", "/accounts", args)
EnableSecurityHub(a...; b...) = EnableSecurityHub(a..., b)

"""
    GetEnabledStandards()

Returns a list of the standards that are currently enabled.

Optional Parameters
MaxResults => The maximum number of results to return in the response.
NextToken => The token that is required for pagination. On your first call to the GetEnabledStandards operation, set the value of this parameter to NULL. For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.
StandardsSubscriptionArns => The list of the standards subscription ARNs for the standards to retrieve.
"""
GetEnabledStandards() = securityhub("POST", "/standards/get")
GetEnabledStandards(args::AbstractDict{String, Any}) = securityhub("POST", "/standards/get", args)
GetEnabledStandards(a...; b...) = GetEnabledStandards(a..., b)

"""
    GetFindings()

Returns a list of findings that match the specified criteria.

Optional Parameters
Filters => The finding attributes used to define a condition to filter the returned findings.
MaxResults => The maximum number of findings to return.
NextToken => The token that is required for pagination. On your first call to the GetFindings operation, set the value of this parameter to NULL. For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.
SortCriteria => The finding attributes used to sort the list of returned findings.
"""
GetFindings() = securityhub("POST", "/findings")
GetFindings(args::AbstractDict{String, Any}) = securityhub("POST", "/findings", args)
GetFindings(a...; b...) = GetFindings(a..., b)

"""
    GetInsightResults()

Lists the results of the Security Hub insight specified by the insight ARN.

Required Parameters
InsightArn => The ARN of the insight for which to return results.

"""
GetInsightResults(InsightArn) = securityhub("GET", "/insights/results/$(InsightArn)")
GetInsightResults(InsightArn, args::AbstractDict{String, <: Any}) = securityhub("GET", "/insights/results/$(InsightArn)", args)
GetInsightResults(a...; b...) = GetInsightResults(a..., b)

"""
    GetInsights()

Lists and describes insights for the specified insight ARNs.

Optional Parameters
InsightArns => The ARNs of the insights to describe. If you do not provide any insight ARNs, then GetInsights returns all of your custom insights. It does not return any managed insights.
MaxResults => The maximum number of items to return in the response.
NextToken => The token that is required for pagination. On your first call to the GetInsights operation, set the value of this parameter to NULL. For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.
"""
GetInsights() = securityhub("POST", "/insights/get")
GetInsights(args::AbstractDict{String, Any}) = securityhub("POST", "/insights/get", args)
GetInsights(a...; b...) = GetInsights(a..., b)

"""
    GetInvitationsCount()

Returns the count of all Security Hub membership invitations that were sent to the current member account, not including the currently accepted invitation. 

"""
GetInvitationsCount() = securityhub("GET", "/invitations/count")
GetInvitationsCount(args::AbstractDict{String, Any}) = securityhub("GET", "/invitations/count", args)
GetInvitationsCount(a...; b...) = GetInvitationsCount(a..., b)

"""
    GetMasterAccount()

Provides the details for the Security Hub master account for the current member account. 

"""
GetMasterAccount() = securityhub("GET", "/master")
GetMasterAccount(args::AbstractDict{String, Any}) = securityhub("GET", "/master", args)
GetMasterAccount(a...; b...) = GetMasterAccount(a..., b)

"""
    GetMembers()

Returns the details for the Security Hub member accounts for the specified account IDs.

Required Parameters
AccountIds => The list of account IDs for the Security Hub member accounts to return the details for. 

"""
GetMembers(AccountIds) = securityhub("POST", "/members/get", Dict{String, Any}("AccountIds"=>AccountIds))
GetMembers(AccountIds, args::AbstractDict{String, <: Any}) = securityhub("POST", "/members/get", Dict{String, Any}("AccountIds"=>AccountIds, args...))
GetMembers(a...; b...) = GetMembers(a..., b)

"""
    InviteMembers()

Invites other AWS accounts to become member accounts for the Security Hub master account that the invitation is sent from. Before you can use this action to invite a member, you must first use the  CreateMembers  action to create the member account in Security Hub. When the account owner accepts the invitation to become a member account and enables Security Hub, the master account can view the findings generated from the member account.

Optional Parameters
AccountIds => The list of account IDs of the AWS accounts to invite to Security Hub as members. 
"""
InviteMembers() = securityhub("POST", "/members/invite")
InviteMembers(args::AbstractDict{String, Any}) = securityhub("POST", "/members/invite", args)
InviteMembers(a...; b...) = InviteMembers(a..., b)

"""
    ListEnabledProductsForImport()

Lists all findings-generating solutions (products) that you are subscribed to receive findings from in Security Hub.

Optional Parameters
MaxResults => The maximum number of items to return in the response.
NextToken => The token that is required for pagination. On your first call to the ListEnabledProductsForImport operation, set the value of this parameter to NULL. For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.
"""
ListEnabledProductsForImport() = securityhub("GET", "/productSubscriptions")
ListEnabledProductsForImport(args::AbstractDict{String, Any}) = securityhub("GET", "/productSubscriptions", args)
ListEnabledProductsForImport(a...; b...) = ListEnabledProductsForImport(a..., b)

"""
    ListInvitations()

Lists all Security Hub membership invitations that were sent to the current AWS account. 

Optional Parameters
MaxResults => The maximum number of items to return in the response. 
NextToken => The token that is required for pagination. On your first call to the ListInvitations operation, set the value of this parameter to NULL. For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.
"""
ListInvitations() = securityhub("GET", "/invitations")
ListInvitations(args::AbstractDict{String, Any}) = securityhub("GET", "/invitations", args)
ListInvitations(a...; b...) = ListInvitations(a..., b)

"""
    ListMembers()

Lists details about all member accounts for the current Security Hub master account.

Optional Parameters
MaxResults => The maximum number of items to return in the response. 
NextToken => The token that is required for pagination. On your first call to the ListMembers operation, set the value of this parameter to NULL. For subsequent calls to the operation, to continue listing data, set the value of this parameter to the value returned from the previous response.
OnlyAssociated => Specifies which member accounts to include in the response based on their relationship status with the master account. The default value is TRUE. If OnlyAssociated is set to TRUE, the response includes member accounts whose relationship status with the master is set to ENABLED or DISABLED. If OnlyAssociated is set to FALSE, the response includes all existing member accounts. 
"""
ListMembers() = securityhub("GET", "/members")
ListMembers(args::AbstractDict{String, Any}) = securityhub("GET", "/members", args)
ListMembers(a...; b...) = ListMembers(a..., b)

"""
    ListTagsForResource()

Returns a list of tags associated with a resource.

Required Parameters
ResourceArn => The ARN of the resource to retrieve tags for.

"""
ListTagsForResource(ResourceArn) = securityhub("GET", "/tags/$(ResourceArn)")
ListTagsForResource(ResourceArn, args::AbstractDict{String, <: Any}) = securityhub("GET", "/tags/$(ResourceArn)", args)
ListTagsForResource(a...; b...) = ListTagsForResource(a..., b)

"""
    TagResource()

Adds one or more tags to a resource.

Required Parameters
ResourceArn => The ARN of the resource to apply the tags to.
Tags => The tags to add to the resource.

"""
TagResource(ResourceArn, Tags) = securityhub("POST", "/tags/$(ResourceArn)", Dict{String, Any}("Tags"=>Tags))
TagResource(ResourceArn, Tags, args::AbstractDict{String, <: Any}) = securityhub("POST", "/tags/$(ResourceArn)", Dict{String, Any}("Tags"=>Tags, args...))
TagResource(a...; b...) = TagResource(a..., b)

"""
    UntagResource()

Removes one or more tags from a resource.

Required Parameters
ResourceArn => The ARN of the resource to remove the tags from.
tagKeys => The tag keys associated with the tags to remove from the resource.

"""
UntagResource(ResourceArn, tagKeys) = securityhub("DELETE", "/tags/$(ResourceArn)", Dict{String, Any}("tagKeys"=>tagKeys))
UntagResource(ResourceArn, tagKeys, args::AbstractDict{String, <: Any}) = securityhub("DELETE", "/tags/$(ResourceArn)", Dict{String, Any}("tagKeys"=>tagKeys, args...))
UntagResource(a...; b...) = UntagResource(a..., b)

"""
    UpdateActionTarget()

Updates the name and description of a custom action target in Security Hub.

Required Parameters
ActionTargetArn => The ARN of the custom action target to update.

Optional Parameters
Description => The updated description for the custom action target.
Name => The updated name of the custom action target.
"""
UpdateActionTarget(ActionTargetArn) = securityhub("PATCH", "/actionTargets/$(ActionTargetArn)")
UpdateActionTarget(ActionTargetArn, args::AbstractDict{String, <: Any}) = securityhub("PATCH", "/actionTargets/$(ActionTargetArn)", args)
UpdateActionTarget(a...; b...) = UpdateActionTarget(a..., b)

"""
    UpdateFindings()

 UpdateFindings is deprecated. Instead of UpdateFindings, use BatchUpdateFindings. Updates the Note and RecordState of the Security Hub-aggregated findings that the filter attributes specify. Any member account that can view the finding also sees the update to the finding.

Required Parameters
Filters => A collection of attributes that specify which findings you want to update.

Optional Parameters
Note => The updated note for the finding.
RecordState => The updated record state for the finding.
"""
UpdateFindings(Filters) = securityhub("PATCH", "/findings", Dict{String, Any}("Filters"=>Filters))
UpdateFindings(Filters, args::AbstractDict{String, <: Any}) = securityhub("PATCH", "/findings", Dict{String, Any}("Filters"=>Filters, args...))
UpdateFindings(a...; b...) = UpdateFindings(a..., b)

"""
    UpdateInsight()

Updates the Security Hub insight identified by the specified insight ARN.

Required Parameters
InsightArn => The ARN of the insight that you want to update.

Optional Parameters
Filters => The updated filters that define this insight.
GroupByAttribute => The updated GroupBy attribute that defines this insight.
Name => The updated name for the insight.
"""
UpdateInsight(InsightArn) = securityhub("PATCH", "/insights/$(InsightArn)")
UpdateInsight(InsightArn, args::AbstractDict{String, <: Any}) = securityhub("PATCH", "/insights/$(InsightArn)", args)
UpdateInsight(a...; b...) = UpdateInsight(a..., b)

"""
    UpdateStandardsControl()

Used to control whether an individual security standard control is enabled or disabled.

Required Parameters
StandardsControlArn => The ARN of the security standard control to enable or disable.

Optional Parameters
ControlStatus => The updated status of the security standard control.
DisabledReason => A description of the reason why you are disabling a security standard control. If you are disabling a control, then this is required.
"""
UpdateStandardsControl(StandardsControlArn) = securityhub("PATCH", "/standards/control/$(StandardsControlArn)")
UpdateStandardsControl(StandardsControlArn, args::AbstractDict{String, <: Any}) = securityhub("PATCH", "/standards/control/$(StandardsControlArn)", args)
UpdateStandardsControl(a...; b...) = UpdateStandardsControl(a..., b)
