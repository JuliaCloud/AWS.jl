# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: backup
using AWS.Compat
using AWS.UUIDs

"""
    create_backup_plan(backup_plan)
    create_backup_plan(backup_plan, params::Dict{String,<:Any})

Creates a backup plan using a backup plan name and backup rules. A backup plan is a
document that contains information that AWS Backup uses to schedule tasks that create
recovery points for resources. If you call CreateBackupPlan with a plan that already
exists, an AlreadyExistsException is returned.

# Arguments
- `backup_plan`: Specifies the body of a backup plan. Includes a BackupPlanName and one or
  more sets of Rules.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"BackupPlanTags"`: To help organize your resources, you can assign your own metadata to
  the resources that you create. Each tag is a key-value pair. The specified tags are
  assigned to all backups created with this plan.
- `"CreatorRequestId"`: Identifies the request and allows failed requests to be retried
  without the risk of running the operation twice. If the request includes a CreatorRequestId
  that matches an existing backup plan, that plan is returned. This parameter is optional.
"""
function create_backup_plan(BackupPlan; aws_config::AbstractAWSConfig=global_aws_config())
    return backup(
        "PUT",
        "/backup/plans/",
        Dict{String,Any}("BackupPlan" => BackupPlan);
        aws_config=aws_config,
    )
end
function create_backup_plan(
    BackupPlan,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "PUT",
        "/backup/plans/",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("BackupPlan" => BackupPlan), params)
        );
        aws_config=aws_config,
    )
end

"""
    create_backup_selection(backup_selection, backup_plan_id)
    create_backup_selection(backup_selection, backup_plan_id, params::Dict{String,<:Any})

Creates a JSON document that specifies a set of resources to assign to a backup plan.
Resources can be included by specifying patterns for a ListOfTags and selected Resources.
For example, consider the following patterns:    Resources:
\"arn:aws:ec2:region:account-id:volume/volume-id\"     ConditionKey:\"department\"
ConditionValue:\"finance\"   ConditionType:\"StringEquals\"     ConditionKey:\"importance\"
  ConditionValue:\"critical\"   ConditionType:\"StringEquals\"    Using these patterns
would back up all Amazon Elastic Block Store (Amazon EBS) volumes that are tagged as
\"department=finance\", \"importance=critical\", in addition to an EBS volume with the
specified volume ID. Resources and conditions are additive in that all resources that match
the pattern are selected. This shouldn't be confused with a logical AND, where all
conditions must match. The matching patterns are logically put together using the OR
operator. In other words, all patterns that match are selected for backup.

# Arguments
- `backup_selection`: Specifies the body of a request to assign a set of resources to a
  backup plan.
- `backup_plan_id`: Uniquely identifies the backup plan to be associated with the selection
  of resources.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CreatorRequestId"`: A unique string that identifies the request and allows failed
  requests to be retried without the risk of running the operation twice.
"""
function create_backup_selection(
    BackupSelection, backupPlanId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "PUT",
        "/backup/plans/$(backupPlanId)/selections/",
        Dict{String,Any}("BackupSelection" => BackupSelection);
        aws_config=aws_config,
    )
end
function create_backup_selection(
    BackupSelection,
    backupPlanId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "PUT",
        "/backup/plans/$(backupPlanId)/selections/",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("BackupSelection" => BackupSelection), params
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_backup_vault(backup_vault_name)
    create_backup_vault(backup_vault_name, params::Dict{String,<:Any})

Creates a logical container where backups are stored. A CreateBackupVault request includes
a name, optionally one or more resource tags, an encryption key, and a request ID.
Sensitive data, such as passport numbers, should not be included the name of a backup
vault.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of letters, numbers, and hyphens.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"BackupVaultTags"`: Metadata that you can assign to help organize the resources that you
  create. Each tag is a key-value pair.
- `"CreatorRequestId"`: A unique string that identifies the request and allows failed
  requests to be retried without the risk of running the operation twice.
- `"EncryptionKeyArn"`: The server-side encryption key that is used to protect your
  backups; for example,
  arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab.
"""
function create_backup_vault(
    backupVaultName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("PUT", "/backup-vaults/$(backupVaultName)"; aws_config=aws_config)
end
function create_backup_vault(
    backupVaultName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup("PUT", "/backup-vaults/$(backupVaultName)", params; aws_config=aws_config)
end

"""
    delete_backup_plan(backup_plan_id)
    delete_backup_plan(backup_plan_id, params::Dict{String,<:Any})

Deletes a backup plan. A backup plan can only be deleted after all associated selections of
resources have been deleted. Deleting a backup plan deletes the current version of a backup
plan. Previous versions, if any, will still exist.

# Arguments
- `backup_plan_id`: Uniquely identifies a backup plan.

"""
function delete_backup_plan(backupPlanId; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("DELETE", "/backup/plans/$(backupPlanId)"; aws_config=aws_config)
end
function delete_backup_plan(
    backupPlanId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup("DELETE", "/backup/plans/$(backupPlanId)", params; aws_config=aws_config)
end

"""
    delete_backup_selection(backup_plan_id, selection_id)
    delete_backup_selection(backup_plan_id, selection_id, params::Dict{String,<:Any})

Deletes the resource selection associated with a backup plan that is specified by the
SelectionId.

# Arguments
- `backup_plan_id`: Uniquely identifies a backup plan.
- `selection_id`: Uniquely identifies the body of a request to assign a set of resources to
  a backup plan.

"""
function delete_backup_selection(
    backupPlanId, selectionId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "DELETE",
        "/backup/plans/$(backupPlanId)/selections/$(selectionId)";
        aws_config=aws_config,
    )
end
function delete_backup_selection(
    backupPlanId,
    selectionId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "DELETE",
        "/backup/plans/$(backupPlanId)/selections/$(selectionId)",
        params;
        aws_config=aws_config,
    )
end

"""
    delete_backup_vault(backup_vault_name)
    delete_backup_vault(backup_vault_name, params::Dict{String,<:Any})

Deletes the backup vault identified by its name. A vault can be deleted only if it is empty.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.

"""
function delete_backup_vault(
    backupVaultName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("DELETE", "/backup-vaults/$(backupVaultName)"; aws_config=aws_config)
end
function delete_backup_vault(
    backupVaultName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "DELETE", "/backup-vaults/$(backupVaultName)", params; aws_config=aws_config
    )
end

"""
    delete_backup_vault_access_policy(backup_vault_name)
    delete_backup_vault_access_policy(backup_vault_name, params::Dict{String,<:Any})

Deletes the policy document that manages permissions on a backup vault.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.

"""
function delete_backup_vault_access_policy(
    backupVaultName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "DELETE", "/backup-vaults/$(backupVaultName)/access-policy"; aws_config=aws_config
    )
end
function delete_backup_vault_access_policy(
    backupVaultName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "DELETE",
        "/backup-vaults/$(backupVaultName)/access-policy",
        params;
        aws_config=aws_config,
    )
end

"""
    delete_backup_vault_notifications(backup_vault_name)
    delete_backup_vault_notifications(backup_vault_name, params::Dict{String,<:Any})

Deletes event notifications for the specified backup vault.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  Region where they are created. They consist of lowercase letters, numbers, and hyphens.

"""
function delete_backup_vault_notifications(
    backupVaultName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "DELETE",
        "/backup-vaults/$(backupVaultName)/notification-configuration";
        aws_config=aws_config,
    )
end
function delete_backup_vault_notifications(
    backupVaultName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "DELETE",
        "/backup-vaults/$(backupVaultName)/notification-configuration",
        params;
        aws_config=aws_config,
    )
end

"""
    delete_recovery_point(backup_vault_name, recovery_point_arn)
    delete_recovery_point(backup_vault_name, recovery_point_arn, params::Dict{String,<:Any})

Deletes the recovery point specified by a recovery point ID. If the recovery point ID
belongs to a continuous backup, calling this endpoint deletes the existing continuous
backup and stops future continuous backup.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.
- `recovery_point_arn`: An Amazon Resource Name (ARN) that uniquely identifies a recovery
  point; for example,
  arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45.

"""
function delete_recovery_point(
    backupVaultName, recoveryPointArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "DELETE",
        "/backup-vaults/$(backupVaultName)/recovery-points/$(recoveryPointArn)";
        aws_config=aws_config,
    )
end
function delete_recovery_point(
    backupVaultName,
    recoveryPointArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "DELETE",
        "/backup-vaults/$(backupVaultName)/recovery-points/$(recoveryPointArn)",
        params;
        aws_config=aws_config,
    )
end

"""
    describe_backup_job(backup_job_id)
    describe_backup_job(backup_job_id, params::Dict{String,<:Any})

Returns backup job details for the specified BackupJobId.

# Arguments
- `backup_job_id`: Uniquely identifies a request to AWS Backup to back up a resource.

"""
function describe_backup_job(backupJobId; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/backup-jobs/$(backupJobId)"; aws_config=aws_config)
end
function describe_backup_job(
    backupJobId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup("GET", "/backup-jobs/$(backupJobId)", params; aws_config=aws_config)
end

"""
    describe_backup_vault(backup_vault_name)
    describe_backup_vault(backup_vault_name, params::Dict{String,<:Any})

Returns metadata about a backup vault specified by its name.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.

"""
function describe_backup_vault(
    backupVaultName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/backup-vaults/$(backupVaultName)"; aws_config=aws_config)
end
function describe_backup_vault(
    backupVaultName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup("GET", "/backup-vaults/$(backupVaultName)", params; aws_config=aws_config)
end

"""
    describe_copy_job(copy_job_id)
    describe_copy_job(copy_job_id, params::Dict{String,<:Any})

Returns metadata associated with creating a copy of a resource.

# Arguments
- `copy_job_id`: Uniquely identifies a copy job.

"""
function describe_copy_job(copyJobId; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/copy-jobs/$(copyJobId)"; aws_config=aws_config)
end
function describe_copy_job(
    copyJobId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup("GET", "/copy-jobs/$(copyJobId)", params; aws_config=aws_config)
end

"""
    describe_global_settings()
    describe_global_settings(params::Dict{String,<:Any})

Describes the global settings of the AWS account, including whether it is opted in to
cross-account backup.

"""
function describe_global_settings(; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/global-settings"; aws_config=aws_config)
end
function describe_global_settings(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/global-settings", params; aws_config=aws_config)
end

"""
    describe_protected_resource(resource_arn)
    describe_protected_resource(resource_arn, params::Dict{String,<:Any})

Returns information about a saved resource, including the last time it was backed up, its
Amazon Resource Name (ARN), and the AWS service type of the saved resource.

# Arguments
- `resource_arn`: An Amazon Resource Name (ARN) that uniquely identifies a resource. The
  format of the ARN depends on the resource type.

"""
function describe_protected_resource(
    resourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/resources/$(resourceArn)"; aws_config=aws_config)
end
function describe_protected_resource(
    resourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup("GET", "/resources/$(resourceArn)", params; aws_config=aws_config)
end

"""
    describe_recovery_point(backup_vault_name, recovery_point_arn)
    describe_recovery_point(backup_vault_name, recovery_point_arn, params::Dict{String,<:Any})

Returns metadata associated with a recovery point, including ID, status, encryption, and
lifecycle.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.
- `recovery_point_arn`: An Amazon Resource Name (ARN) that uniquely identifies a recovery
  point; for example,
  arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45.

"""
function describe_recovery_point(
    backupVaultName, recoveryPointArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "GET",
        "/backup-vaults/$(backupVaultName)/recovery-points/$(recoveryPointArn)";
        aws_config=aws_config,
    )
end
function describe_recovery_point(
    backupVaultName,
    recoveryPointArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "GET",
        "/backup-vaults/$(backupVaultName)/recovery-points/$(recoveryPointArn)",
        params;
        aws_config=aws_config,
    )
end

"""
    describe_region_settings()
    describe_region_settings(params::Dict{String,<:Any})

Returns the current service opt-in settings for the Region. If service-opt-in is enabled
for a service, AWS Backup tries to protect that service's resources in this Region, when
the resource is included in an on-demand backup or scheduled backup plan. Otherwise, AWS
Backup does not try to protect that service's resources in this Region, AWS Backup does not
try to protect that service's resources in this Region.

"""
function describe_region_settings(; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/account-settings"; aws_config=aws_config)
end
function describe_region_settings(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/account-settings", params; aws_config=aws_config)
end

"""
    describe_restore_job(restore_job_id)
    describe_restore_job(restore_job_id, params::Dict{String,<:Any})

Returns metadata associated with a restore job that is specified by a job ID.

# Arguments
- `restore_job_id`: Uniquely identifies the job that restores a recovery point.

"""
function describe_restore_job(
    restoreJobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/restore-jobs/$(restoreJobId)"; aws_config=aws_config)
end
function describe_restore_job(
    restoreJobId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup("GET", "/restore-jobs/$(restoreJobId)", params; aws_config=aws_config)
end

"""
    disassociate_recovery_point(backup_vault_name, recovery_point_arn)
    disassociate_recovery_point(backup_vault_name, recovery_point_arn, params::Dict{String,<:Any})

Deletes the specified continuous backup recovery point from AWS Backup and releases control
of that continuous backup to the source service, such as Amazon RDS. The source service
will continue to create and retain continuous backups using the lifecycle that you
specified in your original backup plan. Does not support snapshot backup recovery points.

# Arguments
- `backup_vault_name`: The unique name of an AWS Backup vault. Required.
- `recovery_point_arn`: An Amazon Resource Name (ARN) that uniquely identifies an AWS
  Backup recovery point. Required.

"""
function disassociate_recovery_point(
    backupVaultName, recoveryPointArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "POST",
        "/backup-vaults/$(backupVaultName)/recovery-points/$(recoveryPointArn)/disassociate";
        aws_config=aws_config,
    )
end
function disassociate_recovery_point(
    backupVaultName,
    recoveryPointArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "POST",
        "/backup-vaults/$(backupVaultName)/recovery-points/$(recoveryPointArn)/disassociate",
        params;
        aws_config=aws_config,
    )
end

"""
    export_backup_plan_template(backup_plan_id)
    export_backup_plan_template(backup_plan_id, params::Dict{String,<:Any})

Returns the backup plan that is specified by the plan ID as a backup template.

# Arguments
- `backup_plan_id`: Uniquely identifies a backup plan.

"""
function export_backup_plan_template(
    backupPlanId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/backup/plans/$(backupPlanId)/toTemplate/"; aws_config=aws_config)
end
function export_backup_plan_template(
    backupPlanId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "GET", "/backup/plans/$(backupPlanId)/toTemplate/", params; aws_config=aws_config
    )
end

"""
    get_backup_plan(backup_plan_id)
    get_backup_plan(backup_plan_id, params::Dict{String,<:Any})

Returns BackupPlan details for the specified BackupPlanId. The details are the body of a
backup plan in JSON format, in addition to plan metadata.

# Arguments
- `backup_plan_id`: Uniquely identifies a backup plan.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"versionId"`: Unique, randomly generated, Unicode, UTF-8 encoded strings that are at
  most 1,024 bytes long. Version IDs cannot be edited.
"""
function get_backup_plan(backupPlanId; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/backup/plans/$(backupPlanId)/"; aws_config=aws_config)
end
function get_backup_plan(
    backupPlanId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup("GET", "/backup/plans/$(backupPlanId)/", params; aws_config=aws_config)
end

"""
    get_backup_plan_from_json(backup_plan_template_json)
    get_backup_plan_from_json(backup_plan_template_json, params::Dict{String,<:Any})

Returns a valid JSON document specifying a backup plan or an error.

# Arguments
- `backup_plan_template_json`: A customer-supplied backup plan document in JSON format.

"""
function get_backup_plan_from_json(
    BackupPlanTemplateJson; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "POST",
        "/backup/template/json/toPlan",
        Dict{String,Any}("BackupPlanTemplateJson" => BackupPlanTemplateJson);
        aws_config=aws_config,
    )
end
function get_backup_plan_from_json(
    BackupPlanTemplateJson,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "POST",
        "/backup/template/json/toPlan",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("BackupPlanTemplateJson" => BackupPlanTemplateJson),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    get_backup_plan_from_template(template_id)
    get_backup_plan_from_template(template_id, params::Dict{String,<:Any})

Returns the template specified by its templateId as a backup plan.

# Arguments
- `template_id`: Uniquely identifies a stored backup plan template.

"""
function get_backup_plan_from_template(
    templateId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "GET", "/backup/template/plans/$(templateId)/toPlan"; aws_config=aws_config
    )
end
function get_backup_plan_from_template(
    templateId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "GET", "/backup/template/plans/$(templateId)/toPlan", params; aws_config=aws_config
    )
end

"""
    get_backup_selection(backup_plan_id, selection_id)
    get_backup_selection(backup_plan_id, selection_id, params::Dict{String,<:Any})

Returns selection metadata and a document in JSON format that specifies a list of resources
that are associated with a backup plan.

# Arguments
- `backup_plan_id`: Uniquely identifies a backup plan.
- `selection_id`: Uniquely identifies the body of a request to assign a set of resources to
  a backup plan.

"""
function get_backup_selection(
    backupPlanId, selectionId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "GET",
        "/backup/plans/$(backupPlanId)/selections/$(selectionId)";
        aws_config=aws_config,
    )
end
function get_backup_selection(
    backupPlanId,
    selectionId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "GET",
        "/backup/plans/$(backupPlanId)/selections/$(selectionId)",
        params;
        aws_config=aws_config,
    )
end

"""
    get_backup_vault_access_policy(backup_vault_name)
    get_backup_vault_access_policy(backup_vault_name, params::Dict{String,<:Any})

Returns the access policy document that is associated with the named backup vault.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.

"""
function get_backup_vault_access_policy(
    backupVaultName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "GET", "/backup-vaults/$(backupVaultName)/access-policy"; aws_config=aws_config
    )
end
function get_backup_vault_access_policy(
    backupVaultName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "GET",
        "/backup-vaults/$(backupVaultName)/access-policy",
        params;
        aws_config=aws_config,
    )
end

"""
    get_backup_vault_notifications(backup_vault_name)
    get_backup_vault_notifications(backup_vault_name, params::Dict{String,<:Any})

Returns event notifications for the specified backup vault.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.

"""
function get_backup_vault_notifications(
    backupVaultName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "GET",
        "/backup-vaults/$(backupVaultName)/notification-configuration";
        aws_config=aws_config,
    )
end
function get_backup_vault_notifications(
    backupVaultName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "GET",
        "/backup-vaults/$(backupVaultName)/notification-configuration",
        params;
        aws_config=aws_config,
    )
end

"""
    get_recovery_point_restore_metadata(backup_vault_name, recovery_point_arn)
    get_recovery_point_restore_metadata(backup_vault_name, recovery_point_arn, params::Dict{String,<:Any})

Returns a set of metadata key-value pairs that were used to create the backup.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.
- `recovery_point_arn`: An Amazon Resource Name (ARN) that uniquely identifies a recovery
  point; for example,
  arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45.

"""
function get_recovery_point_restore_metadata(
    backupVaultName, recoveryPointArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "GET",
        "/backup-vaults/$(backupVaultName)/recovery-points/$(recoveryPointArn)/restore-metadata";
        aws_config=aws_config,
    )
end
function get_recovery_point_restore_metadata(
    backupVaultName,
    recoveryPointArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "GET",
        "/backup-vaults/$(backupVaultName)/recovery-points/$(recoveryPointArn)/restore-metadata",
        params;
        aws_config=aws_config,
    )
end

"""
    get_supported_resource_types()
    get_supported_resource_types(params::Dict{String,<:Any})

Returns the AWS resource types supported by AWS Backup.

"""
function get_supported_resource_types(; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/supported-resource-types"; aws_config=aws_config)
end
function get_supported_resource_types(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/supported-resource-types", params; aws_config=aws_config)
end

"""
    list_backup_jobs()
    list_backup_jobs(params::Dict{String,<:Any})

Returns a list of existing backup jobs for an authenticated account for the last 30 days.
For a longer period of time, consider using these monitoring tools.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"accountId"`: The account ID to list the jobs from. Returns only backup jobs associated
  with the specified account ID. If used from an AWS Organizations management account,
  passing * returns all jobs across the organization.
- `"backupVaultName"`: Returns only backup jobs that will be stored in the specified backup
  vault. Backup vaults are identified by names that are unique to the account used to create
  them and the AWS Region where they are created. They consist of lowercase letters, numbers,
  and hyphens.
- `"createdAfter"`: Returns only backup jobs that were created after the specified date.
- `"createdBefore"`: Returns only backup jobs that were created before the specified date.
- `"maxResults"`: The maximum number of items to be returned.
- `"nextToken"`: The next item following a partial list of returned items. For example, if
  a request is made to return maxResults number of items, NextToken allows you to return more
  items in your list starting at the location pointed to by the next token.
- `"resourceArn"`: Returns only backup jobs that match the specified resource Amazon
  Resource Name (ARN).
- `"resourceType"`: Returns only backup jobs for the specified resources:    DynamoDB for
  Amazon DynamoDB    EBS for Amazon Elastic Block Store    EC2 for Amazon Elastic Compute
  Cloud    EFS for Amazon Elastic File System    RDS for Amazon Relational Database Service
   Aurora for Amazon Aurora    Storage Gateway for AWS Storage Gateway
- `"state"`: Returns only backup jobs that are in the specified state.
"""
function list_backup_jobs(; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/backup-jobs/"; aws_config=aws_config)
end
function list_backup_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/backup-jobs/", params; aws_config=aws_config)
end

"""
    list_backup_plan_templates()
    list_backup_plan_templates(params::Dict{String,<:Any})

Returns metadata of your saved backup plan templates, including the template ID, name, and
the creation and deletion dates.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of items to be returned.
- `"nextToken"`: The next item following a partial list of returned items. For example, if
  a request is made to return maxResults number of items, NextToken allows you to return more
  items in your list starting at the location pointed to by the next token.
"""
function list_backup_plan_templates(; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/backup/template/plans"; aws_config=aws_config)
end
function list_backup_plan_templates(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/backup/template/plans", params; aws_config=aws_config)
end

"""
    list_backup_plan_versions(backup_plan_id)
    list_backup_plan_versions(backup_plan_id, params::Dict{String,<:Any})

Returns version metadata of your backup plans, including Amazon Resource Names (ARNs),
backup plan IDs, creation and deletion dates, plan names, and version IDs.

# Arguments
- `backup_plan_id`: Uniquely identifies a backup plan.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of items to be returned.
- `"nextToken"`: The next item following a partial list of returned items. For example, if
  a request is made to return maxResults number of items, NextToken allows you to return more
  items in your list starting at the location pointed to by the next token.
"""
function list_backup_plan_versions(
    backupPlanId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/backup/plans/$(backupPlanId)/versions/"; aws_config=aws_config)
end
function list_backup_plan_versions(
    backupPlanId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "GET", "/backup/plans/$(backupPlanId)/versions/", params; aws_config=aws_config
    )
end

"""
    list_backup_plans()
    list_backup_plans(params::Dict{String,<:Any})

Returns a list of existing backup plans for an authenticated account. The list is populated
only if the advanced option is set for the backup plan. The list contains information such
as Amazon Resource Names (ARNs), plan IDs, creation and deletion dates, version IDs, plan
names, and creator request IDs.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"includeDeleted"`: A Boolean value with a default value of FALSE that returns deleted
  backup plans when set to TRUE.
- `"maxResults"`: The maximum number of items to be returned.
- `"nextToken"`: The next item following a partial list of returned items. For example, if
  a request is made to return maxResults number of items, NextToken allows you to return more
  items in your list starting at the location pointed to by the next token.
"""
function list_backup_plans(; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/backup/plans/"; aws_config=aws_config)
end
function list_backup_plans(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/backup/plans/", params; aws_config=aws_config)
end

"""
    list_backup_selections(backup_plan_id)
    list_backup_selections(backup_plan_id, params::Dict{String,<:Any})

Returns an array containing metadata of the resources associated with the target backup
plan.

# Arguments
- `backup_plan_id`: Uniquely identifies a backup plan.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of items to be returned.
- `"nextToken"`: The next item following a partial list of returned items. For example, if
  a request is made to return maxResults number of items, NextToken allows you to return more
  items in your list starting at the location pointed to by the next token.
"""
function list_backup_selections(
    backupPlanId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/backup/plans/$(backupPlanId)/selections/"; aws_config=aws_config)
end
function list_backup_selections(
    backupPlanId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "GET", "/backup/plans/$(backupPlanId)/selections/", params; aws_config=aws_config
    )
end

"""
    list_backup_vaults()
    list_backup_vaults(params::Dict{String,<:Any})

Returns a list of recovery point storage containers along with information about them.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of items to be returned.
- `"nextToken"`: The next item following a partial list of returned items. For example, if
  a request is made to return maxResults number of items, NextToken allows you to return more
  items in your list starting at the location pointed to by the next token.
"""
function list_backup_vaults(; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/backup-vaults/"; aws_config=aws_config)
end
function list_backup_vaults(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/backup-vaults/", params; aws_config=aws_config)
end

"""
    list_copy_jobs()
    list_copy_jobs(params::Dict{String,<:Any})

Returns metadata about your copy jobs.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"accountId"`: The account ID to list the jobs from. Returns only copy jobs associated
  with the specified account ID.
- `"createdAfter"`: Returns only copy jobs that were created after the specified date.
- `"createdBefore"`: Returns only copy jobs that were created before the specified date.
- `"destinationVaultArn"`: An Amazon Resource Name (ARN) that uniquely identifies a source
  backup vault to copy from; for example,
  arn:aws:backup:us-east-1:123456789012:vault:aBackupVault.
- `"maxResults"`: The maximum number of items to be returned.
- `"nextToken"`: The next item following a partial list of returned items. For example, if
  a request is made to return maxResults number of items, NextToken allows you to return more
  items in your list starting at the location pointed to by the next token.
- `"resourceArn"`: Returns only copy jobs that match the specified resource Amazon Resource
  Name (ARN).
- `"resourceType"`: Returns only backup jobs for the specified resources:    DynamoDB for
  Amazon DynamoDB    EBS for Amazon Elastic Block Store    EC2 for Amazon Elastic Compute
  Cloud    EFS for Amazon Elastic File System    RDS for Amazon Relational Database Service
   Aurora for Amazon Aurora    Storage Gateway for AWS Storage Gateway
- `"state"`: Returns only copy jobs that are in the specified state.
"""
function list_copy_jobs(; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/copy-jobs/"; aws_config=aws_config)
end
function list_copy_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/copy-jobs/", params; aws_config=aws_config)
end

"""
    list_protected_resources()
    list_protected_resources(params::Dict{String,<:Any})

Returns an array of resources successfully backed up by AWS Backup, including the time the
resource was saved, an Amazon Resource Name (ARN) of the resource, and a resource type.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of items to be returned.
- `"nextToken"`: The next item following a partial list of returned items. For example, if
  a request is made to return maxResults number of items, NextToken allows you to return more
  items in your list starting at the location pointed to by the next token.
"""
function list_protected_resources(; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/resources/"; aws_config=aws_config)
end
function list_protected_resources(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/resources/", params; aws_config=aws_config)
end

"""
    list_recovery_points_by_backup_vault(backup_vault_name)
    list_recovery_points_by_backup_vault(backup_vault_name, params::Dict{String,<:Any})

Returns detailed information about the recovery points stored in a backup vault.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"backupPlanId"`: Returns only recovery points that match the specified backup plan ID.
- `"createdAfter"`: Returns only recovery points that were created after the specified
  timestamp.
- `"createdBefore"`: Returns only recovery points that were created before the specified
  timestamp.
- `"maxResults"`: The maximum number of items to be returned.
- `"nextToken"`: The next item following a partial list of returned items. For example, if
  a request is made to return maxResults number of items, NextToken allows you to return more
  items in your list starting at the location pointed to by the next token.
- `"resourceArn"`: Returns only recovery points that match the specified resource Amazon
  Resource Name (ARN).
- `"resourceType"`: Returns only recovery points that match the specified resource type.
"""
function list_recovery_points_by_backup_vault(
    backupVaultName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "GET", "/backup-vaults/$(backupVaultName)/recovery-points/"; aws_config=aws_config
    )
end
function list_recovery_points_by_backup_vault(
    backupVaultName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "GET",
        "/backup-vaults/$(backupVaultName)/recovery-points/",
        params;
        aws_config=aws_config,
    )
end

"""
    list_recovery_points_by_resource(resource_arn)
    list_recovery_points_by_resource(resource_arn, params::Dict{String,<:Any})

Returns detailed information about recovery points of the type specified by a resource
Amazon Resource Name (ARN).

# Arguments
- `resource_arn`: An ARN that uniquely identifies a resource. The format of the ARN depends
  on the resource type.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of items to be returned.
- `"nextToken"`: The next item following a partial list of returned items. For example, if
  a request is made to return maxResults number of items, NextToken allows you to return more
  items in your list starting at the location pointed to by the next token.
"""
function list_recovery_points_by_resource(
    resourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "GET", "/resources/$(resourceArn)/recovery-points/"; aws_config=aws_config
    )
end
function list_recovery_points_by_resource(
    resourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "GET", "/resources/$(resourceArn)/recovery-points/", params; aws_config=aws_config
    )
end

"""
    list_restore_jobs()
    list_restore_jobs(params::Dict{String,<:Any})

Returns a list of jobs that AWS Backup initiated to restore a saved resource, including
metadata about the recovery process.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"accountId"`: The account ID to list the jobs from. Returns only restore jobs associated
  with the specified account ID.
- `"createdAfter"`: Returns only restore jobs that were created after the specified date.
- `"createdBefore"`: Returns only restore jobs that were created before the specified date.
- `"maxResults"`: The maximum number of items to be returned.
- `"nextToken"`: The next item following a partial list of returned items. For example, if
  a request is made to return maxResults number of items, NextToken allows you to return more
  items in your list starting at the location pointed to by the next token.
- `"status"`: Returns only restore jobs associated with the specified job status.
"""
function list_restore_jobs(; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/restore-jobs/"; aws_config=aws_config)
end
function list_restore_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("GET", "/restore-jobs/", params; aws_config=aws_config)
end

"""
    list_tags(resource_arn)
    list_tags(resource_arn, params::Dict{String,<:Any})

Returns a list of key-value pairs assigned to a target recovery point, backup plan, or
backup vault.   ListTags are currently only supported with Amazon EFS backups.

# Arguments
- `resource_arn`: An Amazon Resource Name (ARN) that uniquely identifies a resource. The
  format of the ARN depends on the type of resource. Valid targets for ListTags are recovery
  points, backup plans, and backup vaults.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of items to be returned.
- `"nextToken"`: The next item following a partial list of returned items. For example, if
  a request is made to return maxResults number of items, NextToken allows you to return more
  items in your list starting at the location pointed to by the next token.
"""
function list_tags(resourceArn; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("GET", "/tags/$(resourceArn)/"; aws_config=aws_config)
end
function list_tags(
    resourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup("GET", "/tags/$(resourceArn)/", params; aws_config=aws_config)
end

"""
    put_backup_vault_access_policy(backup_vault_name)
    put_backup_vault_access_policy(backup_vault_name, params::Dict{String,<:Any})

Sets a resource-based policy that is used to manage access permissions on the target backup
vault. Requires a backup vault name and an access policy document in JSON format.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Policy"`: The backup vault access policy document in JSON format.
"""
function put_backup_vault_access_policy(
    backupVaultName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "PUT", "/backup-vaults/$(backupVaultName)/access-policy"; aws_config=aws_config
    )
end
function put_backup_vault_access_policy(
    backupVaultName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "PUT",
        "/backup-vaults/$(backupVaultName)/access-policy",
        params;
        aws_config=aws_config,
    )
end

"""
    put_backup_vault_notifications(backup_vault_events, snstopic_arn, backup_vault_name)
    put_backup_vault_notifications(backup_vault_events, snstopic_arn, backup_vault_name, params::Dict{String,<:Any})

Turns on notifications on a backup vault for the specified topic and events.

# Arguments
- `backup_vault_events`: An array of events that indicate the status of jobs to back up
  resources to the backup vault.
- `snstopic_arn`: The Amazon Resource Name (ARN) that specifies the topic for a backup
  vault’s events; for example, arn:aws:sns:us-west-2:111122223333:MyVaultTopic.
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.

"""
function put_backup_vault_notifications(
    BackupVaultEvents,
    SNSTopicArn,
    backupVaultName;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "PUT",
        "/backup-vaults/$(backupVaultName)/notification-configuration",
        Dict{String,Any}(
            "BackupVaultEvents" => BackupVaultEvents, "SNSTopicArn" => SNSTopicArn
        );
        aws_config=aws_config,
    )
end
function put_backup_vault_notifications(
    BackupVaultEvents,
    SNSTopicArn,
    backupVaultName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "PUT",
        "/backup-vaults/$(backupVaultName)/notification-configuration",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "BackupVaultEvents" => BackupVaultEvents, "SNSTopicArn" => SNSTopicArn
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    start_backup_job(backup_vault_name, iam_role_arn, resource_arn)
    start_backup_job(backup_vault_name, iam_role_arn, resource_arn, params::Dict{String,<:Any})

Starts an on-demand backup job for the specified resource.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.
- `iam_role_arn`: Specifies the IAM role ARN used to create the target recovery point; for
  example, arn:aws:iam::123456789012:role/S3Access.
- `resource_arn`: An Amazon Resource Name (ARN) that uniquely identifies a resource. The
  format of the ARN depends on the resource type.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"BackupOptions"`: Specifies the backup option for a selected resource. This option is
  only available for Windows VSS backup jobs. Valid values: Set to
  \"WindowsVSS”:“enabled\" to enable WindowsVSS backup option and create a VSS Windows
  backup. Set to “WindowsVSS”:”disabled” to create a regular backup. The WindowsVSS
  option is not enabled by default.
- `"CompleteWindowMinutes"`: A value in minutes during which a successfully started backup
  must complete, or else AWS Backup will cancel the job. This value is optional. This value
  begins counting down from when the backup was scheduled. It does not add additional time
  for StartWindowMinutes, or if the backup started later than scheduled.
- `"IdempotencyToken"`: A customer chosen string that can be used to distinguish between
  calls to StartBackupJob.
- `"Lifecycle"`: The lifecycle defines when a protected resource is transitioned to cold
  storage and when it expires. AWS Backup will transition and expire backups automatically
  according to the lifecycle that you define.  Backups transitioned to cold storage must be
  stored in cold storage for a minimum of 90 days. Therefore, the “expire after days”
  setting must be 90 days greater than the “transition to cold after days” setting. The
  “transition to cold after days” setting cannot be changed after a backup has been
  transitioned to cold.  Only Amazon EFS file system backups can be transitioned to cold
  storage.
- `"RecoveryPointTags"`: To help organize your resources, you can assign your own metadata
  to the resources that you create. Each tag is a key-value pair.
- `"StartWindowMinutes"`: A value in minutes after a backup is scheduled before a job will
  be canceled if it doesn't start successfully. This value is optional, and the default is 8
  hours.
"""
function start_backup_job(
    BackupVaultName,
    IamRoleArn,
    ResourceArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "PUT",
        "/backup-jobs",
        Dict{String,Any}(
            "BackupVaultName" => BackupVaultName,
            "IamRoleArn" => IamRoleArn,
            "ResourceArn" => ResourceArn,
        );
        aws_config=aws_config,
    )
end
function start_backup_job(
    BackupVaultName,
    IamRoleArn,
    ResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "PUT",
        "/backup-jobs",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "BackupVaultName" => BackupVaultName,
                    "IamRoleArn" => IamRoleArn,
                    "ResourceArn" => ResourceArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    start_copy_job(destination_backup_vault_arn, iam_role_arn, recovery_point_arn, source_backup_vault_name)
    start_copy_job(destination_backup_vault_arn, iam_role_arn, recovery_point_arn, source_backup_vault_name, params::Dict{String,<:Any})

Starts a job to create a one-time copy of the specified resource. Does not support
continuous backups.

# Arguments
- `destination_backup_vault_arn`: An Amazon Resource Name (ARN) that uniquely identifies a
  destination backup vault to copy to; for example,
  arn:aws:backup:us-east-1:123456789012:vault:aBackupVault.
- `iam_role_arn`: Specifies the IAM role ARN used to copy the target recovery point; for
  example, arn:aws:iam::123456789012:role/S3Access.
- `recovery_point_arn`: An ARN that uniquely identifies a recovery point to use for the
  copy job; for example,
  arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45.
- `source_backup_vault_name`: The name of a logical source container where backups are
  stored. Backup vaults are identified by names that are unique to the account used to create
  them and the AWS Region where they are created. They consist of lowercase letters, numbers,
  and hyphens.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"IdempotencyToken"`: A customer chosen string that can be used to distinguish between
  calls to StartCopyJob.
- `"Lifecycle"`:
"""
function start_copy_job(
    DestinationBackupVaultArn,
    IamRoleArn,
    RecoveryPointArn,
    SourceBackupVaultName;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "PUT",
        "/copy-jobs",
        Dict{String,Any}(
            "DestinationBackupVaultArn" => DestinationBackupVaultArn,
            "IamRoleArn" => IamRoleArn,
            "RecoveryPointArn" => RecoveryPointArn,
            "SourceBackupVaultName" => SourceBackupVaultName,
        );
        aws_config=aws_config,
    )
end
function start_copy_job(
    DestinationBackupVaultArn,
    IamRoleArn,
    RecoveryPointArn,
    SourceBackupVaultName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "PUT",
        "/copy-jobs",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DestinationBackupVaultArn" => DestinationBackupVaultArn,
                    "IamRoleArn" => IamRoleArn,
                    "RecoveryPointArn" => RecoveryPointArn,
                    "SourceBackupVaultName" => SourceBackupVaultName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    start_restore_job(iam_role_arn, metadata, recovery_point_arn)
    start_restore_job(iam_role_arn, metadata, recovery_point_arn, params::Dict{String,<:Any})

Recovers the saved resource identified by an Amazon Resource Name (ARN).

# Arguments
- `iam_role_arn`: The Amazon Resource Name (ARN) of the IAM role that AWS Backup uses to
  create the target recovery point; for example, arn:aws:iam::123456789012:role/S3Access.
- `metadata`: A set of metadata key-value pairs. Contains information, such as a resource
  name, required to restore a recovery point.  You can get configuration metadata about a
  resource at the time it was backed up by calling GetRecoveryPointRestoreMetadata. However,
  values in addition to those provided by GetRecoveryPointRestoreMetadata might be required
  to restore a resource. For example, you might need to provide a new resource name if the
  original already exists. You need to specify specific metadata to restore an Amazon Elastic
  File System (Amazon EFS) instance:    file-system-id: The ID of the Amazon EFS file system
  that is backed up by AWS Backup. Returned in GetRecoveryPointRestoreMetadata.    Encrypted:
  A Boolean value that, if true, specifies that the file system is encrypted. If KmsKeyId is
  specified, Encrypted must be set to true.    KmsKeyId: Specifies the AWS KMS key that is
  used to encrypt the restored file system. You can specify a key from another AWS account
  provided that key it is properly shared with your account via AWS KMS.    PerformanceMode:
  Specifies the throughput mode of the file system.    CreationToken: A user-supplied value
  that ensures the uniqueness (idempotency) of the request.    newFileSystem: A Boolean value
  that, if true, specifies that the recovery point is restored to a new Amazon EFS file
  system.    ItemsToRestore : An array of one to five strings where each string is a file
  path. Use ItemsToRestore to restore specific files or directories rather than the entire
  file system. This parameter is optional. For example,
  \"itemsToRestore\":\"[\"/my.test\"]\".
- `recovery_point_arn`: An ARN that uniquely identifies a recovery point; for example,
  arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"IdempotencyToken"`: A customer chosen string that can be used to distinguish between
  calls to StartRestoreJob.
- `"ResourceType"`: Starts a job to restore a recovery point for one of the following
  resources:    DynamoDB for Amazon DynamoDB    EBS for Amazon Elastic Block Store    EC2 for
  Amazon Elastic Compute Cloud    EFS for Amazon Elastic File System    RDS for Amazon
  Relational Database Service    Aurora for Amazon Aurora    Storage Gateway for AWS Storage
  Gateway
"""
function start_restore_job(
    IamRoleArn,
    Metadata,
    RecoveryPointArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "PUT",
        "/restore-jobs",
        Dict{String,Any}(
            "IamRoleArn" => IamRoleArn,
            "Metadata" => Metadata,
            "RecoveryPointArn" => RecoveryPointArn,
        );
        aws_config=aws_config,
    )
end
function start_restore_job(
    IamRoleArn,
    Metadata,
    RecoveryPointArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "PUT",
        "/restore-jobs",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "IamRoleArn" => IamRoleArn,
                    "Metadata" => Metadata,
                    "RecoveryPointArn" => RecoveryPointArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    stop_backup_job(backup_job_id)
    stop_backup_job(backup_job_id, params::Dict{String,<:Any})

Attempts to cancel a job to create a one-time backup of a resource.

# Arguments
- `backup_job_id`: Uniquely identifies a request to AWS Backup to back up a resource.

"""
function stop_backup_job(backupJobId; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("POST", "/backup-jobs/$(backupJobId)"; aws_config=aws_config)
end
function stop_backup_job(
    backupJobId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup("POST", "/backup-jobs/$(backupJobId)", params; aws_config=aws_config)
end

"""
    tag_resource(tags, resource_arn)
    tag_resource(tags, resource_arn, params::Dict{String,<:Any})

Assigns a set of key-value pairs to a recovery point, backup plan, or backup vault
identified by an Amazon Resource Name (ARN).

# Arguments
- `tags`: Key-value pairs that are used to help organize your resources. You can assign
  your own metadata to the resources you create.
- `resource_arn`: An ARN that uniquely identifies a resource. The format of the ARN depends
  on the type of the tagged resource.

"""
function tag_resource(Tags, resourceArn; aws_config::AbstractAWSConfig=global_aws_config())
    return backup(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}("Tags" => Tags);
        aws_config=aws_config,
    )
end
function tag_resource(
    Tags,
    resourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Tags" => Tags), params));
        aws_config=aws_config,
    )
end

"""
    untag_resource(tag_key_list, resource_arn)
    untag_resource(tag_key_list, resource_arn, params::Dict{String,<:Any})

Removes a set of key-value pairs from a recovery point, backup plan, or backup vault
identified by an Amazon Resource Name (ARN)

# Arguments
- `tag_key_list`: A list of keys to identify which key-value tags to remove from a resource.
- `resource_arn`: An ARN that uniquely identifies a resource. The format of the ARN depends
  on the type of the tagged resource.

"""
function untag_resource(
    TagKeyList, resourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "POST",
        "/untag/$(resourceArn)",
        Dict{String,Any}("TagKeyList" => TagKeyList);
        aws_config=aws_config,
    )
end
function untag_resource(
    TagKeyList,
    resourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "POST",
        "/untag/$(resourceArn)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("TagKeyList" => TagKeyList), params)
        );
        aws_config=aws_config,
    )
end

"""
    update_backup_plan(backup_plan, backup_plan_id)
    update_backup_plan(backup_plan, backup_plan_id, params::Dict{String,<:Any})

Updates an existing backup plan identified by its backupPlanId with the input document in
JSON format. The new version is uniquely identified by a VersionId.

# Arguments
- `backup_plan`: Specifies the body of a backup plan. Includes a BackupPlanName and one or
  more sets of Rules.
- `backup_plan_id`: Uniquely identifies a backup plan.

"""
function update_backup_plan(
    BackupPlan, backupPlanId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "POST",
        "/backup/plans/$(backupPlanId)",
        Dict{String,Any}("BackupPlan" => BackupPlan);
        aws_config=aws_config,
    )
end
function update_backup_plan(
    BackupPlan,
    backupPlanId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "POST",
        "/backup/plans/$(backupPlanId)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("BackupPlan" => BackupPlan), params)
        );
        aws_config=aws_config,
    )
end

"""
    update_global_settings()
    update_global_settings(params::Dict{String,<:Any})

Updates the current global settings for the AWS account. Use the DescribeGlobalSettings API
to determine the current settings.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"GlobalSettings"`: A list of resources along with the opt-in preferences for the account.
"""
function update_global_settings(; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("PUT", "/global-settings"; aws_config=aws_config)
end
function update_global_settings(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("PUT", "/global-settings", params; aws_config=aws_config)
end

"""
    update_recovery_point_lifecycle(backup_vault_name, recovery_point_arn)
    update_recovery_point_lifecycle(backup_vault_name, recovery_point_arn, params::Dict{String,<:Any})

Sets the transition lifecycle of a recovery point. The lifecycle defines when a protected
resource is transitioned to cold storage and when it expires. AWS Backup transitions and
expires backups automatically according to the lifecycle that you define. Backups
transitioned to cold storage must be stored in cold storage for a minimum of 90 days.
Therefore, the “expire after days” setting must be 90 days greater than the
“transition to cold after days” setting. The “transition to cold after days”
setting cannot be changed after a backup has been transitioned to cold. Only Amazon EFS
file system backups can be transitioned to cold storage. Does not support continuous
backups.

# Arguments
- `backup_vault_name`: The name of a logical container where backups are stored. Backup
  vaults are identified by names that are unique to the account used to create them and the
  AWS Region where they are created. They consist of lowercase letters, numbers, and hyphens.
- `recovery_point_arn`: An Amazon Resource Name (ARN) that uniquely identifies a recovery
  point; for example,
  arn:aws:backup:us-east-1:123456789012:recovery-point:1EB3B5E7-9EB0-435A-A80B-108B488B0D45.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Lifecycle"`: The lifecycle defines when a protected resource is transitioned to cold
  storage and when it expires. AWS Backup transitions and expires backups automatically
  according to the lifecycle that you define.  Backups transitioned to cold storage must be
  stored in cold storage for a minimum of 90 days. Therefore, the “expire after days”
  setting must be 90 days greater than the “transition to cold after days” setting. The
  “transition to cold after days” setting cannot be changed after a backup has been
  transitioned to cold.
"""
function update_recovery_point_lifecycle(
    backupVaultName, recoveryPointArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup(
        "POST",
        "/backup-vaults/$(backupVaultName)/recovery-points/$(recoveryPointArn)";
        aws_config=aws_config,
    )
end
function update_recovery_point_lifecycle(
    backupVaultName,
    recoveryPointArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backup(
        "POST",
        "/backup-vaults/$(backupVaultName)/recovery-points/$(recoveryPointArn)",
        params;
        aws_config=aws_config,
    )
end

"""
    update_region_settings()
    update_region_settings(params::Dict{String,<:Any})

Updates the current service opt-in settings for the Region. If service-opt-in is enabled
for a service, AWS Backup tries to protect that service's resources in this Region, when
the resource is included in an on-demand backup or scheduled backup plan. Otherwise, AWS
Backup does not try to protect that service's resources in this Region. Use the
DescribeRegionSettings API to determine the resource types that are supported.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ResourceTypeOptInPreference"`: Updates the list of services along with the opt-in
  preferences for the Region.
"""
function update_region_settings(; aws_config::AbstractAWSConfig=global_aws_config())
    return backup("PUT", "/account-settings"; aws_config=aws_config)
end
function update_region_settings(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backup("PUT", "/account-settings", params; aws_config=aws_config)
end
