# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: ram
using AWS.Compat
using AWS.UUIDs

"""
    accept_resource_share_invitation(resource_share_invitation_arn)
    accept_resource_share_invitation(resource_share_invitation_arn, params::Dict{String,<:Any})

Accepts an invitation to a resource share from another Amazon Web Services account. After
you accept the invitation, the resources included in the resource share are available to
interact with in the relevant Amazon Web Services Management Consoles and tools.

# Arguments
- `resource_share_invitation_arn`: The Amazon Resoure Name (ARN) of the invitation that you
  want to accept.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: Specifies a unique, case-sensitive identifier that you provide to ensure
  the idempotency of the request. This lets you safely retry the request without accidentally
  performing the same operation a second time. Passing the same value to a later call to an
  operation requires that you also pass the same value for all other parameters. We recommend
  that you use a UUID type of value.. If you don't provide this value, then Amazon Web
  Services generates a random one for you.
"""
function accept_resource_share_invitation(
    resourceShareInvitationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/acceptresourceshareinvitation",
        Dict{String,Any}("resourceShareInvitationArn" => resourceShareInvitationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function accept_resource_share_invitation(
    resourceShareInvitationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/acceptresourceshareinvitation",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "resourceShareInvitationArn" => resourceShareInvitationArn
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    associate_resource_share(resource_share_arn)
    associate_resource_share(resource_share_arn, params::Dict{String,<:Any})

Adds the specified list of principals and list of resources to a resource share. Principals
that already have access to this resource share immediately receive access to the added
resources. Newly added principals immediately receive access to the resources shared in
this resource share.

# Arguments
- `resource_share_arn`: Specifies the Amazon Resoure Name (ARN) of the resource share that
  you want to add principals or resources to.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: Specifies a unique, case-sensitive identifier that you provide to ensure
  the idempotency of the request. This lets you safely retry the request without accidentally
  performing the same operation a second time. Passing the same value to a later call to an
  operation requires that you also pass the same value for all other parameters. We recommend
  that you use a UUID type of value.. If you don't provide this value, then Amazon Web
  Services generates a random one for you.
- `"principals"`: Specifies a list of principals to whom you want to the resource share.
  This can be null if you want to add only resources. What the principals can do with the
  resources in the share is determined by the RAM permissions that you associate with the
  resource share. See AssociateResourceSharePermission. You can include the following values:
    An Amazon Web Services account ID, for example: 123456789012    An Amazon Resoure Name
  (ARN) of an organization in Organizations, for example:
  organizations::123456789012:organization/o-exampleorgid    An ARN of an organizational unit
  (OU) in Organizations, for example:
  organizations::123456789012:ou/o-exampleorgid/ou-examplerootid-exampleouid123    An ARN of
  an IAM role, for example: iam::123456789012:role/rolename    An ARN of an IAM user, for
  example: iam::123456789012user/username     Not all resource types can be shared with IAM
  roles and users. For more information, see Sharing with IAM roles and users in the Resource
  Access Manager User Guide.
- `"resourceArns"`: Specifies a list of Amazon Resource Names (ARNs) of the resources that
  you want to share. This can be null if you want to add only principals.
"""
function associate_resource_share(
    resourceShareArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/associateresourceshare",
        Dict{String,Any}("resourceShareArn" => resourceShareArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function associate_resource_share(
    resourceShareArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/associateresourceshare",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("resourceShareArn" => resourceShareArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    associate_resource_share_permission(permission_arn, resource_share_arn)
    associate_resource_share_permission(permission_arn, resource_share_arn, params::Dict{String,<:Any})

Adds or replaces the RAM permission for a resource type included in a resource share. You
can have exactly one permission associated with each resource type in the resource share.
You can add a new RAM permission only if there are currently no resources of that resource
type currently in the resource share.

# Arguments
- `permission_arn`: Specifies the Amazon Resoure Name (ARN) of the RAM permission to
  associate with the resource share. To find the ARN for a permission, use either the
  ListPermissions operation or go to the Permissions library page in the RAM console and then
  choose the name of the permission. The ARN is displayed on the detail page.
- `resource_share_arn`: Specifies the Amazon Resoure Name (ARN) of the resource share to
  which you want to add or replace permissions.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: Specifies a unique, case-sensitive identifier that you provide to ensure
  the idempotency of the request. This lets you safely retry the request without accidentally
  performing the same operation a second time. Passing the same value to a later call to an
  operation requires that you also pass the same value for all other parameters. We recommend
  that you use a UUID type of value.. If you don't provide this value, then Amazon Web
  Services generates a random one for you.
- `"permissionVersion"`: Specifies the version of the RAM permission to associate with the
  resource share. If you don't specify this parameter, the operation uses the version
  designated as the default. You can use the ListPermissionVersions operation to discover the
  available versions of a permission.
- `"replace"`: Specifies whether the specified permission should replace or add to the
  existing permission associated with the resource share. Use true to replace the current
  permissions. Use false to add the permission to the current permission. The default value
  is false.  A resource share can have only one permission per resource type. If a resource
  share already has a permission for the specified resource type and you don't set replace to
  true then the operation returns an error. This helps prevent accidental overwriting of a
  permission.
"""
function associate_resource_share_permission(
    permissionArn, resourceShareArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/associateresourcesharepermission",
        Dict{String,Any}(
            "permissionArn" => permissionArn, "resourceShareArn" => resourceShareArn
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function associate_resource_share_permission(
    permissionArn,
    resourceShareArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/associateresourcesharepermission",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "permissionArn" => permissionArn, "resourceShareArn" => resourceShareArn
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_resource_share(name)
    create_resource_share(name, params::Dict{String,<:Any})

Creates a resource share. You can provide a list of the Amazon Resource Names (ARNs) for
the resources that you want to share, a list of principals you want to share the resources
with, and the permissions to grant those principals.  Sharing a resource makes it available
for use by principals outside of the Amazon Web Services account that created the resource.
Sharing doesn't change any permissions or quotas that apply to the resource in the account
that created it.

# Arguments
- `name`: Specifies the name of the resource share.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"allowExternalPrincipals"`: Specifies whether principals outside your organization in
  Organizations can be associated with a resource share. A value of true lets you share with
  individual Amazon Web Services accounts that are not in your organization. A value of false
  only has meaning if your account is a member of an Amazon Web Services Organization. The
  default value is true.
- `"clientToken"`: Specifies a unique, case-sensitive identifier that you provide to ensure
  the idempotency of the request. This lets you safely retry the request without accidentally
  performing the same operation a second time. Passing the same value to a later call to an
  operation requires that you also pass the same value for all other parameters. We recommend
  that you use a UUID type of value.. If you don't provide this value, then Amazon Web
  Services generates a random one for you.
- `"permissionArns"`: Specifies the Amazon Resource Names (ARNs) of the RAM permission to
  associate with the resource share. If you do not specify an ARN for the permission, RAM
  automatically attaches the default version of the permission for each resource type. You
  can associate only one permission with each resource type included in the resource share.
- `"principals"`: Specifies a list of one or more principals to associate with the resource
  share. You can include the following values:   An Amazon Web Services account ID, for
  example: 123456789012    An Amazon Resoure Name (ARN) of an organization in Organizations,
  for example: organizations::123456789012:organization/o-exampleorgid    An ARN of an
  organizational unit (OU) in Organizations, for example:
  organizations::123456789012:ou/o-exampleorgid/ou-examplerootid-exampleouid123    An ARN of
  an IAM role, for example: iam::123456789012:role/rolename    An ARN of an IAM user, for
  example: iam::123456789012user/username     Not all resource types can be shared with IAM
  roles and users. For more information, see Sharing with IAM roles and users in the Resource
  Access Manager User Guide.
- `"resourceArns"`: Specifies a list of one or more ARNs of the resources to associate with
  the resource share.
- `"tags"`: Specifies one or more tags to attach to the resource share itself. It doesn't
  attach the tags to the resources associated with the resource share.
"""
function create_resource_share(name; aws_config::AbstractAWSConfig=global_aws_config())
    return ram(
        "POST",
        "/createresourceshare",
        Dict{String,Any}("name" => name);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_resource_share(
    name, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/createresourceshare",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_resource_share(resource_share_arn)
    delete_resource_share(resource_share_arn, params::Dict{String,<:Any})

Deletes the specified resource share. This doesn't delete any of the resources that were
associated with the resource share; it only stops the sharing of those resources outside of
the Amazon Web Services account that created them.

# Arguments
- `resource_share_arn`: Specifies the Amazon Resoure Name (ARN) of the resource share to
  delete.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: Specifies a unique, case-sensitive identifier that you provide to ensure
  the idempotency of the request. This lets you safely retry the request without accidentally
  performing the same operation a second time. Passing the same value to a later call to an
  operation requires that you also pass the same value for all other parameters. We recommend
  that you use a UUID type of value.. If you don't provide this value, then Amazon Web
  Services generates a random one for you.
"""
function delete_resource_share(
    resourceShareArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "DELETE",
        "/deleteresourceshare",
        Dict{String,Any}("resourceShareArn" => resourceShareArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_resource_share(
    resourceShareArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "DELETE",
        "/deleteresourceshare",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("resourceShareArn" => resourceShareArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    disassociate_resource_share(resource_share_arn)
    disassociate_resource_share(resource_share_arn, params::Dict{String,<:Any})

Disassociates the specified principals or resources from the specified resource share.

# Arguments
- `resource_share_arn`: Specifies Amazon Resoure Name (ARN) of the resource share that you
  want to remove resources from.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: Specifies a unique, case-sensitive identifier that you provide to ensure
  the idempotency of the request. This lets you safely retry the request without accidentally
  performing the same operation a second time. Passing the same value to a later call to an
  operation requires that you also pass the same value for all other parameters. We recommend
  that you use a UUID type of value.. If you don't provide this value, then Amazon Web
  Services generates a random one for you.
- `"principals"`: Specifies a list of one or more principals that no longer are to have
  access to the resources in this resource share. You can include the following values:   An
  Amazon Web Services account ID, for example: 123456789012    An Amazon Resoure Name (ARN)
  of an organization in Organizations, for example:
  organizations::123456789012:organization/o-exampleorgid    An ARN of an organizational unit
  (OU) in Organizations, for example:
  organizations::123456789012:ou/o-exampleorgid/ou-examplerootid-exampleouid123    An ARN of
  an IAM role, for example: iam::123456789012:role/rolename    An ARN of an IAM user, for
  example: iam::123456789012user/username     Not all resource types can be shared with IAM
  roles and users. For more information, see Sharing with IAM roles and users in the Resource
  Access Manager User Guide.
- `"resourceArns"`: Specifies a list of Amazon Resource Names (ARNs) for one or more
  resources that you want to remove from the resource share. After the operation runs, these
  resources are no longer shared with principals outside of the Amazon Web Services account
  that created the resources.
"""
function disassociate_resource_share(
    resourceShareArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/disassociateresourceshare",
        Dict{String,Any}("resourceShareArn" => resourceShareArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function disassociate_resource_share(
    resourceShareArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/disassociateresourceshare",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("resourceShareArn" => resourceShareArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    disassociate_resource_share_permission(permission_arn, resource_share_arn)
    disassociate_resource_share_permission(permission_arn, resource_share_arn, params::Dict{String,<:Any})

Disassociates an RAM permission from a resource share. Permission changes take effect
immediately. You can remove a RAM permission from a resource share only if there are
currently no resources of the relevant resource type currently attached to the resource
share.

# Arguments
- `permission_arn`: The Amazon Resoure Name (ARN) of the permission to disassociate from
  the resource share. Changes to permissions take effect immediately.
- `resource_share_arn`: The Amazon Resoure Name (ARN) of the resource share from which you
  want to disassociate a permission.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: Specifies a unique, case-sensitive identifier that you provide to ensure
  the idempotency of the request. This lets you safely retry the request without accidentally
  performing the same operation a second time. Passing the same value to a later call to an
  operation requires that you also pass the same value for all other parameters. We recommend
  that you use a UUID type of value.. If you don't provide this value, then Amazon Web
  Services generates a random one for you.
"""
function disassociate_resource_share_permission(
    permissionArn, resourceShareArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/disassociateresourcesharepermission",
        Dict{String,Any}(
            "permissionArn" => permissionArn, "resourceShareArn" => resourceShareArn
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function disassociate_resource_share_permission(
    permissionArn,
    resourceShareArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/disassociateresourcesharepermission",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "permissionArn" => permissionArn, "resourceShareArn" => resourceShareArn
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    enable_sharing_with_aws_organization()
    enable_sharing_with_aws_organization(params::Dict{String,<:Any})

Enables resource sharing within your organization in Organizations. Calling this operation
enables RAM to retrieve information about the organization and its structure. This lets you
share resources with all of the accounts in an organization by specifying the
organization's ID, or all of the accounts in an organizational unit (OU) by specifying the
OU's ID. Until you enable sharing within the organization, you can specify only individual
Amazon Web Services accounts, or for supported resource types, IAM users and roles. You
must call this operation from an IAM user or role in the organization's management account.

"""
function enable_sharing_with_aws_organization(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/enablesharingwithawsorganization";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function enable_sharing_with_aws_organization(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/enablesharingwithawsorganization",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_permission(permission_arn)
    get_permission(permission_arn, params::Dict{String,<:Any})

Gets the contents of an RAM permission in JSON format.

# Arguments
- `permission_arn`: Specifies the Amazon Resoure Name (ARN) of the permission whose
  contents you want to retrieve. To find the ARN for a permission, use either the
  ListPermissions operation or go to the Permissions library page in the RAM console and then
  choose the name of the permission. The ARN is displayed on the detail page.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"permissionVersion"`: Specifies identifier for the version of the RAM permission to
  retrieve. If you don't specify this parameter, the operation retrieves the default version.
"""
function get_permission(permissionArn; aws_config::AbstractAWSConfig=global_aws_config())
    return ram(
        "POST",
        "/getpermission",
        Dict{String,Any}("permissionArn" => permissionArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_permission(
    permissionArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/getpermission",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("permissionArn" => permissionArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_resource_policies(resource_arns)
    get_resource_policies(resource_arns, params::Dict{String,<:Any})

Retrieves the resource policies for the specified resources that you own and have shared.

# Arguments
- `resource_arns`: Specifies the Amazon Resource Names (ARNs) of the resources whose
  policies you want to retrieve.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: Specifies the total number of results that you want included on each page
  of the response. If you do not include this parameter, it defaults to a value that is
  specific to the operation. If additional items exist beyond the number you specify, the
  NextToken response element is returned with a value (not null). Include the specified value
  as the NextToken request parameter in the next call to the operation to get the next part
  of the results. Note that the service might return fewer results than the maximum even when
  there are more results available. You should check NextToken after every operation to
  ensure that you receive all of the results.
- `"nextToken"`: Specifies that you want to receive the next page of results. Valid only if
  you received a NextToken response in the previous request. If you did, it indicates that
  more output is available. Set this parameter to the value provided by the previous call's
  NextToken response to request the next page of results.
- `"principal"`: Specifies the principal.
"""
function get_resource_policies(
    resourceArns; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/getresourcepolicies",
        Dict{String,Any}("resourceArns" => resourceArns);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_resource_policies(
    resourceArns,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/getresourcepolicies",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("resourceArns" => resourceArns), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_resource_share_associations(association_type)
    get_resource_share_associations(association_type, params::Dict{String,<:Any})

Retrieves the resource and principal associations for resource shares that you own.

# Arguments
- `association_type`: Specifies whether you want to retrieve the associations that involve
  a specified resource or principal.    PRINCIPAL – list the principals that are associated
  with the specified resource share.    RESOURCE – list the resources that are associated
  with the specified resource share.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"associationStatus"`: Specifies that you want to retrieve only associations with this
  status.
- `"maxResults"`: Specifies the total number of results that you want included on each page
  of the response. If you do not include this parameter, it defaults to a value that is
  specific to the operation. If additional items exist beyond the number you specify, the
  NextToken response element is returned with a value (not null). Include the specified value
  as the NextToken request parameter in the next call to the operation to get the next part
  of the results. Note that the service might return fewer results than the maximum even when
  there are more results available. You should check NextToken after every operation to
  ensure that you receive all of the results.
- `"nextToken"`: Specifies that you want to receive the next page of results. Valid only if
  you received a NextToken response in the previous request. If you did, it indicates that
  more output is available. Set this parameter to the value provided by the previous call's
  NextToken response to request the next page of results.
- `"principal"`: Specifies the ID of the principal whose resource shares you want to
  retrieve. This can be an Amazon Web Services account ID, an organization ID, an
  organizational unit ID, or the Amazon Resoure Name (ARN) of an individual IAM user or role.
  You cannot specify this parameter if the association type is RESOURCE.
- `"resourceArn"`: Specifies the Amazon Resoure Name (ARN) of the resource whose resource
  shares you want to retrieve. You cannot specify this parameter if the association type is
  PRINCIPAL.
- `"resourceShareArns"`: Specifies a list of Amazon Resource Names (ARNs) of the resource
  share whose associations you want to retrieve.
"""
function get_resource_share_associations(
    associationType; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/getresourceshareassociations",
        Dict{String,Any}("associationType" => associationType);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_resource_share_associations(
    associationType,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/getresourceshareassociations",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("associationType" => associationType), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_resource_share_invitations()
    get_resource_share_invitations(params::Dict{String,<:Any})

Retrieves details about invitations that you have received for resource shares.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: Specifies the total number of results that you want included on each page
  of the response. If you do not include this parameter, it defaults to a value that is
  specific to the operation. If additional items exist beyond the number you specify, the
  NextToken response element is returned with a value (not null). Include the specified value
  as the NextToken request parameter in the next call to the operation to get the next part
  of the results. Note that the service might return fewer results than the maximum even when
  there are more results available. You should check NextToken after every operation to
  ensure that you receive all of the results.
- `"nextToken"`: Specifies that you want to receive the next page of results. Valid only if
  you received a NextToken response in the previous request. If you did, it indicates that
  more output is available. Set this parameter to the value provided by the previous call's
  NextToken response to request the next page of results.
- `"resourceShareArns"`: Specifies that you want details about invitations only for the
  resource shares described by this list of Amazon Resource Names (ARNs)
- `"resourceShareInvitationArns"`: Specifies the Amazon Resource Names (ARNs) of the
  resource share invitations you want information about.
"""
function get_resource_share_invitations(; aws_config::AbstractAWSConfig=global_aws_config())
    return ram(
        "POST",
        "/getresourceshareinvitations";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_resource_share_invitations(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/getresourceshareinvitations",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_resource_shares(resource_owner)
    get_resource_shares(resource_owner, params::Dict{String,<:Any})

Retrieves details about the resource shares that you own or that are shared with you.

# Arguments
- `resource_owner`: Specifies that you want to retrieve details of only those resource
  shares that match the following:     SELF  – resource shares that your account shares
  with other accounts     OTHER-ACCOUNTS  – resource shares that other accounts share with
  your account

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: Specifies the total number of results that you want included on each page
  of the response. If you do not include this parameter, it defaults to a value that is
  specific to the operation. If additional items exist beyond the number you specify, the
  NextToken response element is returned with a value (not null). Include the specified value
  as the NextToken request parameter in the next call to the operation to get the next part
  of the results. Note that the service might return fewer results than the maximum even when
  there are more results available. You should check NextToken after every operation to
  ensure that you receive all of the results.
- `"name"`: Specifies the name of an individual resource share that you want to retrieve
  details about.
- `"nextToken"`: Specifies that you want to receive the next page of results. Valid only if
  you received a NextToken response in the previous request. If you did, it indicates that
  more output is available. Set this parameter to the value provided by the previous call's
  NextToken response to request the next page of results.
- `"permissionArn"`: Specifies that you want to retrieve details of only those resource
  shares that use the RAM permission with this Amazon Resoure Name (ARN).
- `"resourceShareArns"`: Specifies the Amazon Resource Names (ARNs) of individual resource
  shares that you want information about.
- `"resourceShareStatus"`: Specifies that you want to retrieve details of only those
  resource shares that have this status.
- `"tagFilters"`: Specifies that you want to retrieve details of only those resource shares
  that match the specified tag keys and values.
"""
function get_resource_shares(
    resourceOwner; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/getresourceshares",
        Dict{String,Any}("resourceOwner" => resourceOwner);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_resource_shares(
    resourceOwner,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/getresourceshares",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("resourceOwner" => resourceOwner), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_pending_invitation_resources(resource_share_invitation_arn)
    list_pending_invitation_resources(resource_share_invitation_arn, params::Dict{String,<:Any})

Lists the resources in a resource share that is shared with you but for which the
invitation is still PENDING. That means that you haven't accepted or rejected the
invitation and the invitation hasn't expired.

# Arguments
- `resource_share_invitation_arn`: Specifies the Amazon Resoure Name (ARN) of the
  invitation. You can use GetResourceShareInvitations to find the ARN of the invitation.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: Specifies the total number of results that you want included on each page
  of the response. If you do not include this parameter, it defaults to a value that is
  specific to the operation. If additional items exist beyond the number you specify, the
  NextToken response element is returned with a value (not null). Include the specified value
  as the NextToken request parameter in the next call to the operation to get the next part
  of the results. Note that the service might return fewer results than the maximum even when
  there are more results available. You should check NextToken after every operation to
  ensure that you receive all of the results.
- `"nextToken"`: Specifies that you want to receive the next page of results. Valid only if
  you received a NextToken response in the previous request. If you did, it indicates that
  more output is available. Set this parameter to the value provided by the previous call's
  NextToken response to request the next page of results.
- `"resourceRegionScope"`: Specifies that you want the results to include only resources
  that have the specified scope.    ALL – the results include both global and regional
  resources or resource types.    GLOBAL – the results include only global resources or
  resource types.    REGIONAL – the results include only regional resources or resource
  types.   The default value is ALL.
"""
function list_pending_invitation_resources(
    resourceShareInvitationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/listpendinginvitationresources",
        Dict{String,Any}("resourceShareInvitationArn" => resourceShareInvitationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_pending_invitation_resources(
    resourceShareInvitationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/listpendinginvitationresources",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "resourceShareInvitationArn" => resourceShareInvitationArn
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_permission_versions(permission_arn)
    list_permission_versions(permission_arn, params::Dict{String,<:Any})

Lists the available versions of the specified RAM permission.

# Arguments
- `permission_arn`: Specifies the Amazon Resoure Name (ARN) of the RAM permission whose
  versions you want to list. You can use the permissionVersion parameter on the
  AssociateResourceSharePermission operation to specify a non-default version to attach.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: Specifies the total number of results that you want included on each page
  of the response. If you do not include this parameter, it defaults to a value that is
  specific to the operation. If additional items exist beyond the number you specify, the
  NextToken response element is returned with a value (not null). Include the specified value
  as the NextToken request parameter in the next call to the operation to get the next part
  of the results. Note that the service might return fewer results than the maximum even when
  there are more results available. You should check NextToken after every operation to
  ensure that you receive all of the results.
- `"nextToken"`: Specifies that you want to receive the next page of results. Valid only if
  you received a NextToken response in the previous request. If you did, it indicates that
  more output is available. Set this parameter to the value provided by the previous call's
  NextToken response to request the next page of results.
"""
function list_permission_versions(
    permissionArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/listpermissionversions",
        Dict{String,Any}("permissionArn" => permissionArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_permission_versions(
    permissionArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/listpermissionversions",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("permissionArn" => permissionArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_permissions()
    list_permissions(params::Dict{String,<:Any})

Retrieves a list of available RAM permissions that you can use for the supported resource
types.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: Specifies the total number of results that you want included on each page
  of the response. If you do not include this parameter, it defaults to a value that is
  specific to the operation. If additional items exist beyond the number you specify, the
  NextToken response element is returned with a value (not null). Include the specified value
  as the NextToken request parameter in the next call to the operation to get the next part
  of the results. Note that the service might return fewer results than the maximum even when
  there are more results available. You should check NextToken after every operation to
  ensure that you receive all of the results.
- `"nextToken"`: Specifies that you want to receive the next page of results. Valid only if
  you received a NextToken response in the previous request. If you did, it indicates that
  more output is available. Set this parameter to the value provided by the previous call's
  NextToken response to request the next page of results.
- `"resourceType"`: Specifies that you want to list permissions for only the specified
  resource type. For example, to list only permissions that apply to EC2 subnets, specify
  ec2:Subnet. You can use the ListResourceTypes operation to get the specific string required.
"""
function list_permissions(; aws_config::AbstractAWSConfig=global_aws_config())
    return ram(
        "POST", "/listpermissions"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_permissions(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/listpermissions",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_principals(resource_owner)
    list_principals(resource_owner, params::Dict{String,<:Any})

Lists the principals that you are sharing resources with or that are sharing resources with
you.

# Arguments
- `resource_owner`: Specifies that you want to list information for only resource shares
  that match the following:     SELF  – principals that your account is sharing resources
  with     OTHER-ACCOUNTS  – principals that are sharing resources with your account

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: Specifies the total number of results that you want included on each page
  of the response. If you do not include this parameter, it defaults to a value that is
  specific to the operation. If additional items exist beyond the number you specify, the
  NextToken response element is returned with a value (not null). Include the specified value
  as the NextToken request parameter in the next call to the operation to get the next part
  of the results. Note that the service might return fewer results than the maximum even when
  there are more results available. You should check NextToken after every operation to
  ensure that you receive all of the results.
- `"nextToken"`: Specifies that you want to receive the next page of results. Valid only if
  you received a NextToken response in the previous request. If you did, it indicates that
  more output is available. Set this parameter to the value provided by the previous call's
  NextToken response to request the next page of results.
- `"principals"`: Specifies that you want to list information for only the listed
  principals. You can include the following values:   An Amazon Web Services account ID, for
  example: 123456789012    An Amazon Resoure Name (ARN) of an organization in Organizations,
  for example: organizations::123456789012:organization/o-exampleorgid    An ARN of an
  organizational unit (OU) in Organizations, for example:
  organizations::123456789012:ou/o-exampleorgid/ou-examplerootid-exampleouid123    An ARN of
  an IAM role, for example: iam::123456789012:role/rolename    An ARN of an IAM user, for
  example: iam::123456789012user/username     Not all resource types can be shared with IAM
  roles and users. For more information, see Sharing with IAM roles and users in the Resource
  Access Manager User Guide.
- `"resourceArn"`: Specifies that you want to list principal information for the resource
  share with the specified Amazon Resoure Name (ARN).
- `"resourceShareArns"`: Specifies that you want to list information for only principals
  associated with the resource shares specified by a list the Amazon Resource Names (ARNs).
- `"resourceType"`: Specifies that you want to list information for only principals
  associated with resource shares that include the specified resource type. For a list of
  valid values, query the ListResourceTypes operation.
"""
function list_principals(resourceOwner; aws_config::AbstractAWSConfig=global_aws_config())
    return ram(
        "POST",
        "/listprincipals",
        Dict{String,Any}("resourceOwner" => resourceOwner);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_principals(
    resourceOwner,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/listprincipals",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("resourceOwner" => resourceOwner), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_resource_share_permissions(resource_share_arn)
    list_resource_share_permissions(resource_share_arn, params::Dict{String,<:Any})

Lists the RAM permissions that are associated with a resource share.

# Arguments
- `resource_share_arn`: Specifies the Amazon Resoure Name (ARN) of the resource share for
  which you want to retrieve the associated permissions.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: Specifies the total number of results that you want included on each page
  of the response. If you do not include this parameter, it defaults to a value that is
  specific to the operation. If additional items exist beyond the number you specify, the
  NextToken response element is returned with a value (not null). Include the specified value
  as the NextToken request parameter in the next call to the operation to get the next part
  of the results. Note that the service might return fewer results than the maximum even when
  there are more results available. You should check NextToken after every operation to
  ensure that you receive all of the results.
- `"nextToken"`: Specifies that you want to receive the next page of results. Valid only if
  you received a NextToken response in the previous request. If you did, it indicates that
  more output is available. Set this parameter to the value provided by the previous call's
  NextToken response to request the next page of results.
"""
function list_resource_share_permissions(
    resourceShareArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/listresourcesharepermissions",
        Dict{String,Any}("resourceShareArn" => resourceShareArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_resource_share_permissions(
    resourceShareArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/listresourcesharepermissions",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("resourceShareArn" => resourceShareArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_resource_types()
    list_resource_types(params::Dict{String,<:Any})

Lists the resource types that can be shared by RAM.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: Specifies the total number of results that you want included on each page
  of the response. If you do not include this parameter, it defaults to a value that is
  specific to the operation. If additional items exist beyond the number you specify, the
  NextToken response element is returned with a value (not null). Include the specified value
  as the NextToken request parameter in the next call to the operation to get the next part
  of the results. Note that the service might return fewer results than the maximum even when
  there are more results available. You should check NextToken after every operation to
  ensure that you receive all of the results.
- `"nextToken"`: Specifies that you want to receive the next page of results. Valid only if
  you received a NextToken response in the previous request. If you did, it indicates that
  more output is available. Set this parameter to the value provided by the previous call's
  NextToken response to request the next page of results.
- `"resourceRegionScope"`: Specifies that you want the results to include only resources
  that have the specified scope.    ALL – the results include both global and regional
  resources or resource types.    GLOBAL – the results include only global resources or
  resource types.    REGIONAL – the results include only regional resources or resource
  types.   The default value is ALL.
"""
function list_resource_types(; aws_config::AbstractAWSConfig=global_aws_config())
    return ram(
        "POST", "/listresourcetypes"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_resource_types(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/listresourcetypes",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_resources(resource_owner)
    list_resources(resource_owner, params::Dict{String,<:Any})

Lists the resources that you added to a resource share or the resources that are shared
with you.

# Arguments
- `resource_owner`: Specifies that you want to list only the resource shares that match the
  following:     SELF  – resources that your account shares with other accounts
  OTHER-ACCOUNTS  – resources that other accounts share with your account

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: Specifies the total number of results that you want included on each page
  of the response. If you do not include this parameter, it defaults to a value that is
  specific to the operation. If additional items exist beyond the number you specify, the
  NextToken response element is returned with a value (not null). Include the specified value
  as the NextToken request parameter in the next call to the operation to get the next part
  of the results. Note that the service might return fewer results than the maximum even when
  there are more results available. You should check NextToken after every operation to
  ensure that you receive all of the results.
- `"nextToken"`: Specifies that you want to receive the next page of results. Valid only if
  you received a NextToken response in the previous request. If you did, it indicates that
  more output is available. Set this parameter to the value provided by the previous call's
  NextToken response to request the next page of results.
- `"principal"`: Specifies that you want to list only the resource shares that are
  associated with the specified principal.
- `"resourceArns"`: Specifies that you want to list only the resource shares that include
  resources with the specified Amazon Resource Names (ARNs).
- `"resourceRegionScope"`: Specifies that you want the results to include only resources
  that have the specified scope.    ALL – the results include both global and regional
  resources or resource types.    GLOBAL – the results include only global resources or
  resource types.    REGIONAL – the results include only regional resources or resource
  types.   The default value is ALL.
- `"resourceShareArns"`: Specifies that you want to list only resources in the resource
  shares identified by the specified Amazon Resource Names (ARNs).
- `"resourceType"`: Specifies that you want to list only the resource shares that include
  resources of the specified resource type. For valid values, query the ListResourceTypes
  operation.
"""
function list_resources(resourceOwner; aws_config::AbstractAWSConfig=global_aws_config())
    return ram(
        "POST",
        "/listresources",
        Dict{String,Any}("resourceOwner" => resourceOwner);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_resources(
    resourceOwner,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/listresources",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("resourceOwner" => resourceOwner), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    promote_resource_share_created_from_policy(resource_share_arn)
    promote_resource_share_created_from_policy(resource_share_arn, params::Dict{String,<:Any})

When you attach a resource-based permission policy to a resource, it automatically creates
a resource share. However, resource shares created this way are visible only to the
resource share owner, and the resource share can't be modified in RAM. You can use this
operation to promote the resource share to a full RAM resource share. When you promote a
resource share, you can then manage the resource share in RAM and it becomes visible to all
of the principals you shared it with.

# Arguments
- `resource_share_arn`: Specifies the Amazon Resoure Name (ARN) of the resource share to
  promote.

"""
function promote_resource_share_created_from_policy(
    resourceShareArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/promoteresourcesharecreatedfrompolicy",
        Dict{String,Any}("resourceShareArn" => resourceShareArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function promote_resource_share_created_from_policy(
    resourceShareArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/promoteresourcesharecreatedfrompolicy",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("resourceShareArn" => resourceShareArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    reject_resource_share_invitation(resource_share_invitation_arn)
    reject_resource_share_invitation(resource_share_invitation_arn, params::Dict{String,<:Any})

Rejects an invitation to a resource share from another Amazon Web Services account.

# Arguments
- `resource_share_invitation_arn`: Specifies the Amazon Resoure Name (ARN) of the
  invitation that you want to reject.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: Specifies a unique, case-sensitive identifier that you provide to ensure
  the idempotency of the request. This lets you safely retry the request without accidentally
  performing the same operation a second time. Passing the same value to a later call to an
  operation requires that you also pass the same value for all other parameters. We recommend
  that you use a UUID type of value.. If you don't provide this value, then Amazon Web
  Services generates a random one for you.
"""
function reject_resource_share_invitation(
    resourceShareInvitationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/rejectresourceshareinvitation",
        Dict{String,Any}("resourceShareInvitationArn" => resourceShareInvitationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function reject_resource_share_invitation(
    resourceShareInvitationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/rejectresourceshareinvitation",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "resourceShareInvitationArn" => resourceShareInvitationArn
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_share_arn, tags)
    tag_resource(resource_share_arn, tags, params::Dict{String,<:Any})

Adds the specified tag keys and values to the specified resource share. The tags are
attached only to the resource share, not to the resources that are in the resource share.

# Arguments
- `resource_share_arn`: Specifies the Amazon Resoure Name (ARN) of the resource share that
  you want to add tags to.
- `tags`: A list of one or more tag key and value pairs. The tag key must be present and
  not be an empty string. The tag value must be present but can be an empty string.

"""
function tag_resource(
    resourceShareArn, tags; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/tagresource",
        Dict{String,Any}("resourceShareArn" => resourceShareArn, "tags" => tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    resourceShareArn,
    tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/tagresource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("resourceShareArn" => resourceShareArn, "tags" => tags),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_share_arn, tag_keys)
    untag_resource(resource_share_arn, tag_keys, params::Dict{String,<:Any})

Removes the specified tag key and value pairs from the specified resource share.

# Arguments
- `resource_share_arn`: Specifies the Amazon Resoure Name (ARN) of the resource share that
  you want to remove tags from. The tags are removed from the resource share, not the
  resources in the resource share.
- `tag_keys`: Specifies a list of one or more tag keys that you want to remove.

"""
function untag_resource(
    resourceShareArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/untagresource",
        Dict{String,Any}("resourceShareArn" => resourceShareArn, "tagKeys" => tagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    resourceShareArn,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/untagresource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "resourceShareArn" => resourceShareArn, "tagKeys" => tagKeys
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_resource_share(resource_share_arn)
    update_resource_share(resource_share_arn, params::Dict{String,<:Any})

Modifies some of the properties of the specified resource share.

# Arguments
- `resource_share_arn`: Specifies the Amazon Resoure Name (ARN) of the resource share that
  you want to modify.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"allowExternalPrincipals"`: Specifies whether principals outside your organization in
  Organizations can be associated with a resource share.
- `"clientToken"`: Specifies a unique, case-sensitive identifier that you provide to ensure
  the idempotency of the request. This lets you safely retry the request without accidentally
  performing the same operation a second time. Passing the same value to a later call to an
  operation requires that you also pass the same value for all other parameters. We recommend
  that you use a UUID type of value.. If you don't provide this value, then Amazon Web
  Services generates a random one for you.
- `"name"`: If specified, the new name that you want to attach to the resource share.
"""
function update_resource_share(
    resourceShareArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ram(
        "POST",
        "/updateresourceshare",
        Dict{String,Any}("resourceShareArn" => resourceShareArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_resource_share(
    resourceShareArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ram(
        "POST",
        "/updateresourceshare",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("resourceShareArn" => resourceShareArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
