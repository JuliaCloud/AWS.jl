# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: backupstorage
using AWS.Compat
using AWS.UUIDs

"""
    delete_object(job_id, object_name)
    delete_object(job_id, object_name, params::Dict{String,<:Any})

Delete Object from the incremental base Backup.

# Arguments
- `job_id`: Backup job Id for the in-progress backup.
- `object_name`: The name of the Object.

"""
function delete_object(jobId, objectName; aws_config::AbstractAWSConfig=global_aws_config())
    return backupstorage(
        "DELETE",
        "/backup-jobs/$(jobId)/object/$(objectName)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_object(
    jobId,
    objectName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backupstorage(
        "DELETE",
        "/backup-jobs/$(jobId)/object/$(objectName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_chunk(chunk_token, job_id)
    get_chunk(chunk_token, job_id, params::Dict{String,<:Any})

Gets the specified object's chunk.

# Arguments
- `chunk_token`: Chunk token
- `job_id`: Storage job id

"""
function get_chunk(chunkToken, jobId; aws_config::AbstractAWSConfig=global_aws_config())
    return backupstorage(
        "GET",
        "/restore-jobs/$(jobId)/chunk/$(chunkToken)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_chunk(
    chunkToken,
    jobId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backupstorage(
        "GET",
        "/restore-jobs/$(jobId)/chunk/$(chunkToken)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_object_metadata(job_id, object_token)
    get_object_metadata(job_id, object_token, params::Dict{String,<:Any})

Get metadata associated with an Object.

# Arguments
- `job_id`: Backup job id for the in-progress backup.
- `object_token`: Object token.

"""
function get_object_metadata(
    jobId, objectToken; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backupstorage(
        "GET",
        "/restore-jobs/$(jobId)/object/$(objectToken)/metadata";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_object_metadata(
    jobId,
    objectToken,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backupstorage(
        "GET",
        "/restore-jobs/$(jobId)/object/$(objectToken)/metadata",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_chunks(job_id, object_token)
    list_chunks(job_id, object_token, params::Dict{String,<:Any})

List chunks in a given Object

# Arguments
- `job_id`: Storage job id
- `object_token`: Object token

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: Maximum number of chunks
- `"next-token"`: Pagination token
"""
function list_chunks(jobId, objectToken; aws_config::AbstractAWSConfig=global_aws_config())
    return backupstorage(
        "GET",
        "/restore-jobs/$(jobId)/chunks/$(objectToken)/list";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_chunks(
    jobId,
    objectToken,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backupstorage(
        "GET",
        "/restore-jobs/$(jobId)/chunks/$(objectToken)/list",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_objects(job_id)
    list_objects(job_id, params::Dict{String,<:Any})

List all Objects in a given Backup.

# Arguments
- `job_id`: Storage job id

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"created-after"`: (Optional) Created after filter
- `"created-before"`: (Optional) Created before filter
- `"max-results"`: Maximum objects count
- `"next-token"`: Pagination token
- `"starting-object-name"`: Optional, specifies the starting Object name to list from.
  Ignored if NextToken is not NULL
- `"starting-object-prefix"`: Optional, specifies the starting Object prefix to list from.
  Ignored if NextToken is not NULL
"""
function list_objects(jobId; aws_config::AbstractAWSConfig=global_aws_config())
    return backupstorage(
        "GET",
        "/restore-jobs/$(jobId)/objects/list";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_objects(
    jobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return backupstorage(
        "GET",
        "/restore-jobs/$(jobId)/objects/list",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    notify_object_complete(checksum, checksum-algorithm, job_id, upload_id)
    notify_object_complete(checksum, checksum-algorithm, job_id, upload_id, params::Dict{String,<:Any})

Complete upload

# Arguments
- `checksum`: Object checksum
- `checksum-algorithm`: Checksum algorithm
- `job_id`: Backup job Id for the in-progress backup
- `upload_id`: Upload Id for the in-progress upload

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MetadataBlob"`: Optional metadata associated with an Object. Maximum length is 4MB.
- `"metadata-blob-length"`: The size of MetadataBlob.
- `"metadata-checksum"`: Checksum of MetadataBlob.
- `"metadata-checksum-algorithm"`: Checksum algorithm.
- `"metadata-string"`: Optional metadata associated with an Object. Maximum string length
  is 256 bytes.
"""
function notify_object_complete(
    checksum,
    checksum_algorithm,
    jobId,
    uploadId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backupstorage(
        "PUT",
        "/backup-jobs/$(jobId)/object/$(uploadId)/complete",
        Dict{String,Any}(
            "checksum" => checksum, "checksum-algorithm" => checksum_algorithm
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function notify_object_complete(
    checksum,
    checksum_algorithm,
    jobId,
    uploadId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backupstorage(
        "PUT",
        "/backup-jobs/$(jobId)/object/$(uploadId)/complete",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "checksum" => checksum, "checksum-algorithm" => checksum_algorithm
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_chunk(data, checksum, checksum-algorithm, chunk_index, job_id, length, upload_id)
    put_chunk(data, checksum, checksum-algorithm, chunk_index, job_id, length, upload_id, params::Dict{String,<:Any})

Upload chunk.

# Arguments
- `data`: Data to be uploaded
- `checksum`: Data checksum
- `checksum-algorithm`: Checksum algorithm
- `chunk_index`: Describes this chunk's position relative to the other chunks
- `job_id`: Backup job Id for the in-progress backup.
- `length`: Data length
- `upload_id`: Upload Id for the in-progress upload.

"""
function put_chunk(
    Data,
    checksum,
    checksum_algorithm,
    chunkIndex,
    jobId,
    length,
    uploadId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backupstorage(
        "PUT",
        "/backup-jobs/$(jobId)/chunk/$(uploadId)/$(chunkIndex)",
        Dict{String,Any}(
            "Data" => Data,
            "checksum" => checksum,
            "checksum-algorithm" => checksum_algorithm,
            "length" => length,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_chunk(
    Data,
    checksum,
    checksum_algorithm,
    chunkIndex,
    jobId,
    length,
    uploadId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backupstorage(
        "PUT",
        "/backup-jobs/$(jobId)/chunk/$(uploadId)/$(chunkIndex)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Data" => Data,
                    "checksum" => checksum,
                    "checksum-algorithm" => checksum_algorithm,
                    "length" => length,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_object(job_id, object_name)
    put_object(job_id, object_name, params::Dict{String,<:Any})

Upload object that can store object metadata String and data blob in single API call using
inline chunk field.

# Arguments
- `job_id`: Backup job Id for the in-progress backup.
- `object_name`: The name of the Object to be uploaded.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"InlineChunk"`: Inline chunk data to be uploaded.
- `"checksum"`: Inline chunk checksum
- `"checksum-algorithm"`: Inline chunk checksum algorithm
- `"length"`: Length of the inline chunk data.
- `"metadata-string"`: Store user defined metadata like backup checksum, disk ids, restore
  metadata etc.
- `"object-checksum"`: object checksum
- `"object-checksum-algorithm"`: object checksum algorithm
- `"throwOnDuplicate"`: Throw an exception if Object name is already exist.
"""
function put_object(jobId, objectName; aws_config::AbstractAWSConfig=global_aws_config())
    return backupstorage(
        "PUT",
        "/backup-jobs/$(jobId)/object/$(objectName)/put-object";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_object(
    jobId,
    objectName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backupstorage(
        "PUT",
        "/backup-jobs/$(jobId)/object/$(objectName)/put-object",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_object(job_id, object_name)
    start_object(job_id, object_name, params::Dict{String,<:Any})

Start upload containing one or many chunks.

# Arguments
- `job_id`: Backup job Id for the in-progress backup
- `object_name`: Name for the object.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ThrowOnDuplicate"`: Throw an exception if Object name is already exist.
"""
function start_object(jobId, objectName; aws_config::AbstractAWSConfig=global_aws_config())
    return backupstorage(
        "PUT",
        "/backup-jobs/$(jobId)/object/$(objectName)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_object(
    jobId,
    objectName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return backupstorage(
        "PUT",
        "/backup-jobs/$(jobId)/object/$(objectName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
