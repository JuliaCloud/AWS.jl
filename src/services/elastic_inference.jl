# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
using Compat
using .AWSServices: elastic_inference

"""
    DescribeAcceleratorOfferings()

 Describes the locations in which a given accelerator type or set of types is present in a given region. 

Required Parameters
locationType =>  The location type that you want to describe accelerator type offerings for. It can assume the following values: region: will return the accelerator type offering at the regional level. availability-zone: will return the accelerator type offering at the availability zone level. availability-zone-id: will return the accelerator type offering at the availability zone level returning the availability zone id. 

Optional Parameters
acceleratorTypes =>  The list of accelerator types to describe. 
"""
DescribeAcceleratorOfferings(locationType) = elastic_inference("POST", "/describe-accelerator-offerings", Dict{String, Any}("locationType"=>locationType))
DescribeAcceleratorOfferings(locationType, args::AbstractDict{String, <: Any}) = elastic_inference("POST", "/describe-accelerator-offerings", Dict{String, Any}("locationType"=>locationType, args...))
DescribeAcceleratorOfferings(a...; b...) = DescribeAcceleratorOfferings(a..., b)

"""
    DescribeAcceleratorTypes()

 Describes the accelerator types available in a given region, as well as their characteristics, such as memory and throughput. 

"""
DescribeAcceleratorTypes() = elastic_inference("GET", "/describe-accelerator-types")
DescribeAcceleratorTypes(args::AbstractDict{String, Any}) = elastic_inference("GET", "/describe-accelerator-types", args)
DescribeAcceleratorTypes(a...; b...) = DescribeAcceleratorTypes(a..., b)

"""
    DescribeAccelerators()

 Describes information over a provided set of accelerators belonging to an account. 

Optional Parameters
acceleratorIds =>  The IDs of the accelerators to describe. 
filters =>  One or more filters. Filter names and values are case-sensitive. Valid filter names are: accelerator-types: can provide a list of accelerator type names to filter for. instance-id: can provide a list of EC2 instance ids to filter for. 
maxResults =>  The total number of items to return in the command's output. If the total number of items available is more than the value specified, a NextToken is provided in the command's output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI. 
nextToken =>  A token to specify where to start paginating. This is the NextToken from a previously truncated response. 
"""
DescribeAccelerators() = elastic_inference("POST", "/describe-accelerators")
DescribeAccelerators(args::AbstractDict{String, Any}) = elastic_inference("POST", "/describe-accelerators", args)
DescribeAccelerators(a...; b...) = DescribeAccelerators(a..., b)

"""
    ListTagsForResource()

 Returns all tags of an Elastic Inference Accelerator. 

Required Parameters
resourceArn =>  The ARN of the Elastic Inference Accelerator to list the tags for. 

"""
ListTagsForResource(resourceArn) = elastic_inference("GET", "/tags/$(resourceArn)")
ListTagsForResource(resourceArn, args::AbstractDict{String, <: Any}) = elastic_inference("GET", "/tags/$(resourceArn)", args)
ListTagsForResource(a...; b...) = ListTagsForResource(a..., b)

"""
    TagResource()

 Adds the specified tags to an Elastic Inference Accelerator. 

Required Parameters
resourceArn =>  The ARN of the Elastic Inference Accelerator to tag. 
tags =>  The tags to add to the Elastic Inference Accelerator. 

"""
TagResource(resourceArn, tags) = elastic_inference("POST", "/tags/$(resourceArn)", Dict{String, Any}("tags"=>tags))
TagResource(resourceArn, tags, args::AbstractDict{String, <: Any}) = elastic_inference("POST", "/tags/$(resourceArn)", Dict{String, Any}("tags"=>tags, args...))
TagResource(a...; b...) = TagResource(a..., b)

"""
    UntagResource()

 Removes the specified tags from an Elastic Inference Accelerator. 

Required Parameters
resourceArn =>  The ARN of the Elastic Inference Accelerator to untag. 
tagKeys =>  The list of tags to remove from the Elastic Inference Accelerator. 

"""
UntagResource(resourceArn, tagKeys) = elastic_inference("DELETE", "/tags/$(resourceArn)", Dict{String, Any}("tagKeys"=>tagKeys))
UntagResource(resourceArn, tagKeys, args::AbstractDict{String, <: Any}) = elastic_inference("DELETE", "/tags/$(resourceArn)", Dict{String, Any}("tagKeys"=>tagKeys, args...))
UntagResource(a...; b...) = UntagResource(a..., b)
