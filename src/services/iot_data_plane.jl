# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: iot_data_plane

using Compat
using UUIDs
"""
    DeleteThingShadow()

Deletes the shadow for the specified thing. For more information, see DeleteThingShadow in the AWS IoT Developer Guide.

# Required Parameters
- `thingName`: The name of the thing.

# Optional Parameters
- `name`: The name of the shadow.
"""
DeleteThingShadow(thingName; aws::AWSConfig=AWSConfig()) = iot_data_plane("DELETE", "/things/$(thingName)/shadow"; aws=aws)
DeleteThingShadow(thingName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iot_data_plane("DELETE", "/things/$(thingName)/shadow", args; aws=aws)

"""
    GetThingShadow()

Gets the shadow for the specified thing. For more information, see GetThingShadow in the AWS IoT Developer Guide.

# Required Parameters
- `thingName`: The name of the thing.

# Optional Parameters
- `name`: The name of the shadow.
"""
GetThingShadow(thingName; aws::AWSConfig=AWSConfig()) = iot_data_plane("GET", "/things/$(thingName)/shadow"; aws=aws)
GetThingShadow(thingName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iot_data_plane("GET", "/things/$(thingName)/shadow", args; aws=aws)

"""
    ListNamedShadowsForThing()

Lists the shadows for the specified thing.

# Required Parameters
- `thingName`: The name of the thing.

# Optional Parameters
- `nextToken`: The token to retrieve the next set of results.
- `pageSize`: The result page size.
"""
ListNamedShadowsForThing(thingName; aws::AWSConfig=AWSConfig()) = iot_data_plane("GET", "/api/things/shadow/ListNamedShadowsForThing/$(thingName)"; aws=aws)
ListNamedShadowsForThing(thingName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iot_data_plane("GET", "/api/things/shadow/ListNamedShadowsForThing/$(thingName)", args; aws=aws)

"""
    Publish()

Publishes state information. For more information, see HTTP Protocol in the AWS IoT Developer Guide.

# Required Parameters
- `topic`: The name of the MQTT topic.

# Optional Parameters
- `payload`: The state information, in JSON format.
- `qos`: The Quality of Service (QoS) level.
"""
Publish(topic; aws::AWSConfig=AWSConfig()) = iot_data_plane("POST", "/topics/$(topic)"; aws=aws)
Publish(topic, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iot_data_plane("POST", "/topics/$(topic)", args; aws=aws)

"""
    UpdateThingShadow()

Updates the shadow for the specified thing. For more information, see UpdateThingShadow in the AWS IoT Developer Guide.

# Required Parameters
- `payload`: The state information, in JSON format.
- `thingName`: The name of the thing.

# Optional Parameters
- `name`: The name of the shadow.
"""
UpdateThingShadow(payload, thingName; aws::AWSConfig=AWSConfig()) = iot_data_plane("POST", "/things/$(thingName)/shadow", Dict{String, Any}("payload"=>payload))
UpdateThingShadow(payload, thingName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iot_data_plane("POST", "/things/$(thingName)/shadow", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("payload"=>payload), args)); aws=aws)
