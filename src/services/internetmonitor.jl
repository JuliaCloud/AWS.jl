# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: internetmonitor
using AWS.Compat
using AWS.UUIDs

"""
    create_monitor(max_city_networks_to_monitor, monitor_name)
    create_monitor(max_city_networks_to_monitor, monitor_name, params::Dict{String,<:Any})

Creates a monitor in Amazon CloudWatch Internet Monitor. A monitor is built based on
information from the application resources that you add: Virtual Private Clouds (VPCs),
Amazon CloudFront distributions, and WorkSpaces directories.  After you create a monitor,
you can view the internet performance for your application, scoped to a location, as well
as any health events that are impairing traffic. Internet Monitor can also diagnose whether
the impairment is on the Amazon Web Services network or is an issue with an internet
service provider (ISP).

# Arguments
- `max_city_networks_to_monitor`: The maximum number of city-network combinations (that is,
  combinations of a city location and network, such as an ISP) to be monitored for your
  resources.
- `monitor_name`: The name of the monitor.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientToken"`: A unique, case-sensitive string of up to 64 ASCII characters that you
  specify to make an idempotent API request. Don't reuse the same client token for other API
  requests.
- `"Resources"`: The resources to include in a monitor, which you provide as a set of
  Amazon Resource Names (ARNs). You can add a combination of Amazon Virtual Private Clouds
  (VPCs) and Amazon CloudFront distributions, or you can add Amazon WorkSpaces directories.
  You can't add all three types of resources.  If you add only VPC resources, at least one
  VPC must have an Internet Gateway attached to it, to make sure that it has internet
  connectivity.
- `"Tags"`: The tags for a monitor. You can add a maximum of 50 tags in Internet Monitor.
"""
function create_monitor(
    MaxCityNetworksToMonitor, MonitorName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return internetmonitor(
        "POST",
        "/v20210603/Monitors",
        Dict{String,Any}(
            "MaxCityNetworksToMonitor" => MaxCityNetworksToMonitor,
            "MonitorName" => MonitorName,
            "ClientToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_monitor(
    MaxCityNetworksToMonitor,
    MonitorName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return internetmonitor(
        "POST",
        "/v20210603/Monitors",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "MaxCityNetworksToMonitor" => MaxCityNetworksToMonitor,
                    "MonitorName" => MonitorName,
                    "ClientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_monitor(monitor_name)
    delete_monitor(monitor_name, params::Dict{String,<:Any})

Deletes a monitor in Amazon CloudWatch Internet Monitor.

# Arguments
- `monitor_name`: The name of the monitor to delete.

"""
function delete_monitor(MonitorName; aws_config::AbstractAWSConfig=global_aws_config())
    return internetmonitor(
        "DELETE",
        "/v20210603/Monitors/$(MonitorName)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_monitor(
    MonitorName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return internetmonitor(
        "DELETE",
        "/v20210603/Monitors/$(MonitorName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_health_event(event_id, monitor_name)
    get_health_event(event_id, monitor_name, params::Dict{String,<:Any})

Gets information the Amazon CloudWatch Internet Monitor has created and stored about a
health event for a specified monitor. This information includes the impacted locations, and
all of the information related to the event by location. The information returned includes
the performance, availability, and round-trip time impact, information about the network
providers, the event type, and so on. Information rolled up at the global traffic level is
also returned, including the impact type and total traffic impact.

# Arguments
- `event_id`: The internally generated identifier of a health event. Because EventID
  contains the forward slash (“/”) character, you must URL-encode the EventID field in
  the request URL.
- `monitor_name`: The name of the monitor.

"""
function get_health_event(
    EventId, MonitorName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return internetmonitor(
        "GET",
        "/v20210603/Monitors/$(MonitorName)/HealthEvents/$(EventId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_health_event(
    EventId,
    MonitorName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return internetmonitor(
        "GET",
        "/v20210603/Monitors/$(MonitorName)/HealthEvents/$(EventId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_monitor(monitor_name)
    get_monitor(monitor_name, params::Dict{String,<:Any})

Gets information about a monitor in Amazon CloudWatch Internet Monitor based on a monitor
name. The information returned includes the Amazon Resource Name (ARN), create time,
modified time, resources included in the monitor, and status information.

# Arguments
- `monitor_name`: The name of the monitor.

"""
function get_monitor(MonitorName; aws_config::AbstractAWSConfig=global_aws_config())
    return internetmonitor(
        "GET",
        "/v20210603/Monitors/$(MonitorName)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_monitor(
    MonitorName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return internetmonitor(
        "GET",
        "/v20210603/Monitors/$(MonitorName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_health_events(monitor_name)
    list_health_events(monitor_name, params::Dict{String,<:Any})

Lists all health events for a monitor in Amazon CloudWatch Internet Monitor. Returns all
information for health events including the client location information the network cause
and status, event start and end time, percentage of total traffic impacted, and status.
Health events that have start times during the time frame that is requested are not
included in the list of health events.

# Arguments
- `monitor_name`: The name of the monitor.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"EndTime"`: The time when a health event ended. If the health event is still ongoing,
  then the end time is not set.
- `"EventStatus"`: The status of a health event.
- `"MaxResults"`: The number of health event objects that you want to return with this
  call.
- `"NextToken"`: The token for the next set of results. You receive this token from a
  previous call.
- `"StartTime"`: The time when a health event started.
"""
function list_health_events(MonitorName; aws_config::AbstractAWSConfig=global_aws_config())
    return internetmonitor(
        "GET",
        "/v20210603/Monitors/$(MonitorName)/HealthEvents";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_health_events(
    MonitorName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return internetmonitor(
        "GET",
        "/v20210603/Monitors/$(MonitorName)/HealthEvents",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_monitors()
    list_monitors(params::Dict{String,<:Any})

Lists all of your monitors for Amazon CloudWatch Internet Monitor and their statuses, along
with the Amazon Resource Name (ARN) and name of each monitor.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The number of monitor objects that you want to return with this call.
- `"MonitorStatus"`: The status of a monitor. This includes the status of the data
  processing for the monitor and the status of the monitor itself. For information about the
  statuses for a monitor, see  Monitor.
- `"NextToken"`: The token for the next set of results. You receive this token from a
  previous call.
"""
function list_monitors(; aws_config::AbstractAWSConfig=global_aws_config())
    return internetmonitor(
        "GET", "/v20210603/Monitors"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_monitors(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return internetmonitor(
        "GET",
        "/v20210603/Monitors",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Lists the tags for a resource. Tags are supported only for monitors in Amazon CloudWatch
Internet Monitor.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) for a resource.

"""
function list_tags_for_resource(
    ResourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return internetmonitor(
        "GET",
        "/tags/$(ResourceArn)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    ResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return internetmonitor(
        "GET",
        "/tags/$(ResourceArn)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Adds a tag to a resource. Tags are supported only for monitors in Amazon CloudWatch
Internet Monitor. You can add a maximum of 50 tags in Internet Monitor. A minimum of one
tag is required for this call. It returns an error if you use the TagResource request with
0 tags.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) for a tag that you add to a resource. Tags
  are supported only for monitors in Amazon CloudWatch Internet Monitor.
- `tags`: Tags that you add to a resource. You can add a maximum of 50 tags in Internet
  Monitor.

"""
function tag_resource(ResourceArn, Tags; aws_config::AbstractAWSConfig=global_aws_config())
    return internetmonitor(
        "POST",
        "/tags/$(ResourceArn)",
        Dict{String,Any}("Tags" => Tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    ResourceArn,
    Tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return internetmonitor(
        "POST",
        "/tags/$(ResourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Tags" => Tags), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Removes a tag from a resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) for a tag you remove a resource from.
- `tag_keys`: Tag keys that you remove from a resource.

"""
function untag_resource(
    ResourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return internetmonitor(
        "DELETE",
        "/tags/$(ResourceArn)",
        Dict{String,Any}("tagKeys" => tagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    ResourceArn,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return internetmonitor(
        "DELETE",
        "/tags/$(ResourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tagKeys" => tagKeys), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_monitor(monitor_name)
    update_monitor(monitor_name, params::Dict{String,<:Any})

Updates a monitor. You can update a monitor to add or remove resources, or to change the
status of the monitor. You can't change the name of a monitor.

# Arguments
- `monitor_name`: The name of the monitor.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientToken"`: A unique, case-sensitive string of up to 64 ASCII characters that you
  specify to make an idempotent API request. You should not reuse the same client token for
  other API requests.
- `"MaxCityNetworksToMonitor"`: The maximum number of city-network combinations (that is,
  combinations of a city location and network, such as an ISP) to be monitored for your
  resources.
- `"ResourcesToAdd"`: The resources to include in a monitor, which you provide as a set of
  Amazon Resource Names (ARNs). You can add a combination of Amazon Virtual Private Clouds
  (VPCs) and Amazon CloudFront distributions, or you can add Amazon WorkSpaces directories.
  You can't add all three types of resources.  If you add only VPC resources, at least one
  VPC must have an Internet Gateway attached to it, to make sure that it has internet
  connectivity.
- `"ResourcesToRemove"`: The resources to remove from a monitor, which you provide as a set
  of Amazon Resource Names (ARNs).
- `"Status"`: The status for a monitor. The accepted values for Status with the
  UpdateMonitor API call are the following: ACTIVE and INACTIVE. The following values are not
  accepted: PENDING, and ERROR.
"""
function update_monitor(MonitorName; aws_config::AbstractAWSConfig=global_aws_config())
    return internetmonitor(
        "PATCH",
        "/v20210603/Monitors/$(MonitorName)",
        Dict{String,Any}("ClientToken" => string(uuid4()));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_monitor(
    MonitorName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return internetmonitor(
        "PATCH",
        "/v20210603/Monitors/$(MonitorName)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ClientToken" => string(uuid4())), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
