# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: rds
using AWS.Compat
using AWS.UUIDs

"""
    add_role_to_dbcluster(dbcluster_identifier, role_arn)
    add_role_to_dbcluster(dbcluster_identifier, role_arn, params::Dict{String,<:Any})

Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster.
For more information, see Authorizing Amazon Aurora MySQL to Access Other Amazon Web
Services Services on Your Behalf in the Amazon Aurora User Guide.  This action only applies
to Aurora DB clusters.

# Arguments
- `dbcluster_identifier`: The name of the DB cluster to associate the IAM role with.
- `role_arn`: The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora
  DB cluster, for example, arn:aws:iam::123456789012:role/AuroraAccessRole.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"FeatureName"`: The name of the feature for the DB cluster that the IAM role is to be
  associated with. For the list of supported feature names, see DBEngineVersion.
"""
function add_role_to_dbcluster(
    DBClusterIdentifier, RoleArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "AddRoleToDBCluster",
        Dict{String,Any}(
            "DBClusterIdentifier" => DBClusterIdentifier, "RoleArn" => RoleArn
        );
        aws_config=aws_config,
    )
end
function add_role_to_dbcluster(
    DBClusterIdentifier,
    RoleArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "AddRoleToDBCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterIdentifier" => DBClusterIdentifier, "RoleArn" => RoleArn
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    add_role_to_dbinstance(dbinstance_identifier, feature_name, role_arn)
    add_role_to_dbinstance(dbinstance_identifier, feature_name, role_arn, params::Dict{String,<:Any})

Associates an Amazon Web Services Identity and Access Management (IAM) role with a DB
instance.  To add a role to a DB instance, the status of the DB instance must be available.

# Arguments
- `dbinstance_identifier`: The name of the DB instance to associate the IAM role with.
- `feature_name`: The name of the feature for the DB instance that the IAM role is to be
  associated with. For the list of supported feature names, see DBEngineVersion.
- `role_arn`: The Amazon Resource Name (ARN) of the IAM role to associate with the DB
  instance, for example arn:aws:iam::123456789012:role/AccessRole.

"""
function add_role_to_dbinstance(
    DBInstanceIdentifier,
    FeatureName,
    RoleArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "AddRoleToDBInstance",
        Dict{String,Any}(
            "DBInstanceIdentifier" => DBInstanceIdentifier,
            "FeatureName" => FeatureName,
            "RoleArn" => RoleArn,
        );
        aws_config=aws_config,
    )
end
function add_role_to_dbinstance(
    DBInstanceIdentifier,
    FeatureName,
    RoleArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "AddRoleToDBInstance",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBInstanceIdentifier" => DBInstanceIdentifier,
                    "FeatureName" => FeatureName,
                    "RoleArn" => RoleArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    add_source_identifier_to_subscription(source_identifier, subscription_name)
    add_source_identifier_to_subscription(source_identifier, subscription_name, params::Dict{String,<:Any})

Adds a source identifier to an existing RDS event notification subscription.

# Arguments
- `source_identifier`: The identifier of the event source to be added. Constraints:   If
  the source type is a DB instance, a DBInstanceIdentifier value must be supplied.   If the
  source type is a DB cluster, a DBClusterIdentifier value must be supplied.   If the source
  type is a DB parameter group, a DBParameterGroupName value must be supplied.   If the
  source type is a DB security group, a DBSecurityGroupName value must be supplied.   If the
  source type is a DB snapshot, a DBSnapshotIdentifier value must be supplied.   If the
  source type is a DB cluster snapshot, a DBClusterSnapshotIdentifier value must be supplied.
  
- `subscription_name`: The name of the RDS event notification subscription you want to add
  a source identifier to.

"""
function add_source_identifier_to_subscription(
    SourceIdentifier, SubscriptionName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "AddSourceIdentifierToSubscription",
        Dict{String,Any}(
            "SourceIdentifier" => SourceIdentifier, "SubscriptionName" => SubscriptionName
        );
        aws_config=aws_config,
    )
end
function add_source_identifier_to_subscription(
    SourceIdentifier,
    SubscriptionName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "AddSourceIdentifierToSubscription",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "SourceIdentifier" => SourceIdentifier,
                    "SubscriptionName" => SubscriptionName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    add_tags_to_resource(resource_name, tag)
    add_tags_to_resource(resource_name, tag, params::Dict{String,<:Any})

Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost
allocation reporting to track cost associated with Amazon RDS resources, or used in a
Condition statement in an IAM policy for Amazon RDS. For an overview on tagging Amazon RDS
resources, see Tagging Amazon RDS Resources.

# Arguments
- `resource_name`: The Amazon RDS resource that the tags are added to. This value is an
  Amazon Resource Name (ARN). For information about creating an ARN, see  Constructing an RDS
  Amazon Resource Name (ARN).
- `tag`: The tags to be assigned to the Amazon RDS resource.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`: The tags to be assigned to the Amazon RDS resource.
"""
function add_tags_to_resource(
    ResourceName, Tag; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "AddTagsToResource",
        Dict{String,Any}("ResourceName" => ResourceName, "Tag" => Tag);
        aws_config=aws_config,
    )
end
function add_tags_to_resource(
    ResourceName,
    Tag,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "AddTagsToResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceName" => ResourceName, "Tag" => Tag),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    apply_pending_maintenance_action(apply_action, opt_in_type, resource_identifier)
    apply_pending_maintenance_action(apply_action, opt_in_type, resource_identifier, params::Dict{String,<:Any})

Applies a pending maintenance action to a resource (for example, to a DB instance).

# Arguments
- `apply_action`: The pending maintenance action to apply to this resource. Valid values:
  system-update, db-upgrade, hardware-maintenance, ca-certificate-rotation
- `opt_in_type`: A value that specifies the type of opt-in request, or undoes an opt-in
  request. An opt-in request of type immediate can't be undone. Valid values:    immediate -
  Apply the maintenance action immediately.    next-maintenance - Apply the maintenance
  action during the next maintenance window for the resource.    undo-opt-in - Cancel any
  existing next-maintenance opt-in requests.
- `resource_identifier`: The RDS Amazon Resource Name (ARN) of the resource that the
  pending maintenance action applies to. For information about creating an ARN, see
  Constructing an RDS Amazon Resource Name (ARN).

"""
function apply_pending_maintenance_action(
    ApplyAction,
    OptInType,
    ResourceIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ApplyPendingMaintenanceAction",
        Dict{String,Any}(
            "ApplyAction" => ApplyAction,
            "OptInType" => OptInType,
            "ResourceIdentifier" => ResourceIdentifier,
        );
        aws_config=aws_config,
    )
end
function apply_pending_maintenance_action(
    ApplyAction,
    OptInType,
    ResourceIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ApplyPendingMaintenanceAction",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ApplyAction" => ApplyAction,
                    "OptInType" => OptInType,
                    "ResourceIdentifier" => ResourceIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    authorize_dbsecurity_group_ingress(dbsecurity_group_name)
    authorize_dbsecurity_group_ingress(dbsecurity_group_name, params::Dict{String,<:Any})

Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or
VPC security groups can be added to the DBSecurityGroup if the application using the
database is running on EC2 or VPC instances. Second, IP ranges are available if the
application accessing your database is running on the Internet. Required parameters for
this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and
either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).  You can't authorize
ingress from an EC2 security group in one Amazon Web Services Region to an Amazon RDS DB
instance in another. You can't authorize ingress from a VPC security group in one VPC to an
Amazon RDS DB instance in another.  For an overview of CIDR ranges, go to the Wikipedia
Tutorial.

# Arguments
- `dbsecurity_group_name`: The name of the DB security group to add authorization to.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CIDRIP"`: The IP range to authorize.
- `"EC2SecurityGroupId"`:  Id of the EC2 security group to authorize. For VPC DB security
  groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either
  EC2SecurityGroupName or EC2SecurityGroupId must be provided.
- `"EC2SecurityGroupName"`:  Name of the EC2 security group to authorize. For VPC DB
  security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId
  and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
- `"EC2SecurityGroupOwnerId"`:  Amazon Web Services account number of the owner of the EC2
  security group specified in the EC2SecurityGroupName parameter. The Amazon Web Services
  access key ID isn't an acceptable value. For VPC DB security groups, EC2SecurityGroupId
  must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or
  EC2SecurityGroupId must be provided.
"""
function authorize_dbsecurity_group_ingress(
    DBSecurityGroupName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "AuthorizeDBSecurityGroupIngress",
        Dict{String,Any}("DBSecurityGroupName" => DBSecurityGroupName);
        aws_config=aws_config,
    )
end
function authorize_dbsecurity_group_ingress(
    DBSecurityGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "AuthorizeDBSecurityGroupIngress",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBSecurityGroupName" => DBSecurityGroupName),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    backtrack_dbcluster(backtrack_to, dbcluster_identifier)
    backtrack_dbcluster(backtrack_to, dbcluster_identifier, params::Dict{String,<:Any})

Backtracks a DB cluster to a specific time, without creating a new DB cluster. For more
information on backtracking, see  Backtracking an Aurora DB Cluster in the Amazon Aurora
User Guide.   This action only applies to Aurora MySQL DB clusters.

# Arguments
- `backtrack_to`: The timestamp of the time to backtrack the DB cluster to, specified in
  ISO 8601 format. For more information about ISO 8601, see the ISO8601 Wikipedia page.   If
  the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses
  the nearest possible consistent time for the DB cluster.  Constraints:   Must contain a
  valid ISO 8601 timestamp.   Can't contain a timestamp set in the future.   Example:
  2017-07-08T18:00Z
- `dbcluster_identifier`: The DB cluster identifier of the DB cluster to be backtracked.
  This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63
  alphanumeric characters or hyphens.   First character must be a letter.   Can't end with a
  hyphen or contain two consecutive hyphens.   Example: my-cluster1

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Force"`: A value that indicates whether to force the DB cluster to backtrack when
  binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
- `"UseEarliestTimeOnPointInTimeUnavailable"`: A value that indicates whether to backtrack
  the DB cluster to the earliest possible backtrack time when BacktrackTo is set to a
  timestamp earlier than the earliest backtrack time. When this parameter is disabled and
  BacktrackTo is set to a timestamp earlier than the earliest backtrack time, an error occurs.
"""
function backtrack_dbcluster(
    BacktrackTo, DBClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "BacktrackDBCluster",
        Dict{String,Any}(
            "BacktrackTo" => BacktrackTo, "DBClusterIdentifier" => DBClusterIdentifier
        );
        aws_config=aws_config,
    )
end
function backtrack_dbcluster(
    BacktrackTo,
    DBClusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "BacktrackDBCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "BacktrackTo" => BacktrackTo,
                    "DBClusterIdentifier" => DBClusterIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    cancel_export_task(export_task_identifier)
    cancel_export_task(export_task_identifier, params::Dict{String,<:Any})

Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that
has already been written to the S3 bucket isn't removed.

# Arguments
- `export_task_identifier`: The identifier of the snapshot export task to cancel.

"""
function cancel_export_task(
    ExportTaskIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "CancelExportTask",
        Dict{String,Any}("ExportTaskIdentifier" => ExportTaskIdentifier);
        aws_config=aws_config,
    )
end
function cancel_export_task(
    ExportTaskIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CancelExportTask",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ExportTaskIdentifier" => ExportTaskIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    copy_dbcluster_parameter_group(source_dbcluster_parameter_group_identifier, target_dbcluster_parameter_group_description, target_dbcluster_parameter_group_identifier)
    copy_dbcluster_parameter_group(source_dbcluster_parameter_group_identifier, target_dbcluster_parameter_group_description, target_dbcluster_parameter_group_identifier, params::Dict{String,<:Any})

Copies the specified DB cluster parameter group.  This action only applies to Aurora DB
clusters.

# Arguments
- `source_dbcluster_parameter_group_identifier`: The identifier or Amazon Resource Name
  (ARN) for the source DB cluster parameter group. For information about creating an ARN, see
   Constructing an ARN for Amazon RDS in the Amazon Aurora User Guide.  Constraints:   Must
  specify a valid DB cluster parameter group.
- `target_dbcluster_parameter_group_description`: A description for the copied DB cluster
  parameter group.
- `target_dbcluster_parameter_group_identifier`: The identifier for the copied DB cluster
  parameter group. Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255
  letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen
  or contain two consecutive hyphens   Example: my-cluster-param-group1

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`:
"""
function copy_dbcluster_parameter_group(
    SourceDBClusterParameterGroupIdentifier,
    TargetDBClusterParameterGroupDescription,
    TargetDBClusterParameterGroupIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CopyDBClusterParameterGroup",
        Dict{String,Any}(
            "SourceDBClusterParameterGroupIdentifier" =>
                SourceDBClusterParameterGroupIdentifier,
            "TargetDBClusterParameterGroupDescription" =>
                TargetDBClusterParameterGroupDescription,
            "TargetDBClusterParameterGroupIdentifier" =>
                TargetDBClusterParameterGroupIdentifier,
        );
        aws_config=aws_config,
    )
end
function copy_dbcluster_parameter_group(
    SourceDBClusterParameterGroupIdentifier,
    TargetDBClusterParameterGroupDescription,
    TargetDBClusterParameterGroupIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CopyDBClusterParameterGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "SourceDBClusterParameterGroupIdentifier" =>
                        SourceDBClusterParameterGroupIdentifier,
                    "TargetDBClusterParameterGroupDescription" =>
                        TargetDBClusterParameterGroupDescription,
                    "TargetDBClusterParameterGroupIdentifier" =>
                        TargetDBClusterParameterGroupIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    copy_dbcluster_snapshot(source_dbcluster_snapshot_identifier, target_dbcluster_snapshot_identifier)
    copy_dbcluster_snapshot(source_dbcluster_snapshot_identifier, target_dbcluster_snapshot_identifier, params::Dict{String,<:Any})

Copies a snapshot of a DB cluster. To copy a DB cluster snapshot from a shared manual DB
cluster snapshot, SourceDBClusterSnapshotIdentifier must be the Amazon Resource Name (ARN)
of the shared DB cluster snapshot. You can copy an encrypted DB cluster snapshot from
another Amazon Web Services Region. In that case, the Amazon Web Services Region where you
call the CopyDBClusterSnapshot action is the destination Amazon Web Services Region for the
encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot
from another Amazon Web Services Region, you must provide the following values:    KmsKeyId
- The Amazon Web Services Key Management System (Amazon Web Services KMS) key identifier
for the key to use to encrypt the copy of the DB cluster snapshot in the destination Amazon
Web Services Region.    PreSignedUrl - A URL that contains a Signature Version 4 signed
request for the CopyDBClusterSnapshot action to be called in the source Amazon Web Services
Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid
request for the CopyDBClusterSnapshot API action that can be executed in the source Amazon
Web Services Region that contains the encrypted DB cluster snapshot to be copied. The
pre-signed URL request must contain the following parameter values:    KmsKeyId - The
Amazon Web Services KMS key identifier for the customer master key (CMK) to use to encrypt
the copy of the DB cluster snapshot in the destination Amazon Web Services Region. This is
the same identifier for both the CopyDBClusterSnapshot action that is called in the
destination Amazon Web Services Region, and the action contained in the pre-signed URL.
DestinationRegion - The name of the Amazon Web Services Region that the DB cluster snapshot
is to be created in.    SourceDBClusterSnapshotIdentifier - The DB cluster snapshot
identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in
the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For
example, if you are copying an encrypted DB cluster snapshot from the us-west-2 Amazon Web
Services Region, then your SourceDBClusterSnapshotIdentifier looks like the following
example:
arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115.   To
learn how to generate a Signature Version 4 signed request, see  Authenticating Requests:
Using Query Parameters (Amazon Web Services Signature Version 4) and  Signature Version 4
Signing Process.  If you are using an Amazon Web Services SDK tool or the CLI, you can
specify SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl
manually. Specifying SourceRegion autogenerates a pre-signed URL that is a valid request
for the operation that can be executed in the source Amazon Web Services Region.
TargetDBClusterSnapshotIdentifier - The identifier for the new copy of the DB cluster
snapshot in the destination Amazon Web Services Region.
SourceDBClusterSnapshotIdentifier - The DB cluster snapshot identifier for the encrypted DB
cluster snapshot to be copied. This identifier must be in the ARN format for the source
Amazon Web Services Region and is the same value as the SourceDBClusterSnapshotIdentifier
in the pre-signed URL.    To cancel the copy operation once it is in progress, delete the
target DB cluster snapshot identified by TargetDBClusterSnapshotIdentifier while that DB
cluster snapshot is in \"copying\" status. For more information on copying encrypted DB
cluster snapshots from one Amazon Web Services Region to another, see  Copying a Snapshot
in the Amazon Aurora User Guide.  For more information on Amazon Aurora, see  What Is
Amazon Aurora? in the Amazon Aurora User Guide.   This action only applies to Aurora DB
clusters.

# Arguments
- `source_dbcluster_snapshot_identifier`: The identifier of the DB cluster snapshot to
  copy. This parameter isn't case-sensitive. You can't copy an encrypted, shared DB cluster
  snapshot from one Amazon Web Services Region to another. Constraints:   Must specify a
  valid system snapshot in the \"available\" state.   If the source snapshot is in the same
  Amazon Web Services Region as the copy, specify a valid DB snapshot identifier.   If the
  source snapshot is in a different Amazon Web Services Region than the copy, specify a valid
  DB cluster snapshot ARN. For more information, go to  Copying Snapshots Across Amazon Web
  Services Regions in the Amazon Aurora User Guide.    Example: my-cluster-snapshot1
- `target_dbcluster_snapshot_identifier`: The identifier of the new DB cluster snapshot to
  create from the source DB cluster snapshot. This parameter isn't case-sensitive.
  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character
  must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example:
  my-cluster-snapshot2

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CopyTags"`: A value that indicates whether to copy all tags from the source DB cluster
  snapshot to the target DB cluster snapshot. By default, tags are not copied.
- `"KmsKeyId"`: The Amazon Web Services KMS key identifier for an encrypted DB cluster
  snapshot. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or
  alias name for the Amazon Web Services KMS customer master key (CMK). If you copy an
  encrypted DB cluster snapshot from your Amazon Web Services account, you can specify a
  value for KmsKeyId to encrypt the copy with a new Amazon Web Services KMS CMK. If you don't
  specify a value for KmsKeyId, then the copy of the DB cluster snapshot is encrypted with
  the same Amazon Web Services KMS key as the source DB cluster snapshot.  If you copy an
  encrypted DB cluster snapshot that is shared from another Amazon Web Services account, then
  you must specify a value for KmsKeyId.  To copy an encrypted DB cluster snapshot to another
  Amazon Web Services Region, you must set KmsKeyId to the Amazon Web Services KMS key
  identifier you want to use to encrypt the copy of the DB cluster snapshot in the
  destination Amazon Web Services Region. Amazon Web Services KMS CMKs are specific to the
  Amazon Web Services Region that they are created in, and you can't use CMKs from one Amazon
  Web Services Region in another Amazon Web Services Region. If you copy an unencrypted DB
  cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.
- `"PreSignedUrl"`: The URL that contains a Signature Version 4 signed request for the
  CopyDBClusterSnapshot API action in the Amazon Web Services Region that contains the source
  DB cluster snapshot to copy. The PreSignedUrl parameter must be used when copying an
  encrypted DB cluster snapshot from another Amazon Web Services Region. Don't specify
  PreSignedUrl when you are copying an encrypted DB cluster snapshot in the same Amazon Web
  Services Region. The pre-signed URL must be a valid request for the CopyDBClusterSnapshot
  API action that can be executed in the source Amazon Web Services Region that contains the
  encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the
  following parameter values:    KmsKeyId - The Amazon Web Services KMS key identifier for
  the customer master key (CMK) to use to encrypt the copy of the DB cluster snapshot in the
  destination Amazon Web Services Region. This is the same identifier for both the
  CopyDBClusterSnapshot action that is called in the destination Amazon Web Services Region,
  and the action contained in the pre-signed URL.    DestinationRegion - The name of the
  Amazon Web Services Region that the DB cluster snapshot is to be created in.
  SourceDBClusterSnapshotIdentifier - The DB cluster snapshot identifier for the encrypted DB
  cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN)
  format for the source Amazon Web Services Region. For example, if you are copying an
  encrypted DB cluster snapshot from the us-west-2 Amazon Web Services Region, then your
  SourceDBClusterSnapshotIdentifier looks like the following example:
  arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115.   To
  learn how to generate a Signature Version 4 signed request, see  Authenticating Requests:
  Using Query Parameters (Amazon Web Services Signature Version 4) and  Signature Version 4
  Signing Process.  If you are using an Amazon Web Services SDK tool or the CLI, you can
  specify SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl
  manually. Specifying SourceRegion autogenerates a pre-signed URL that is a valid request
  for the operation that can be executed in the source Amazon Web Services Region. If you
  supply a value for this operation's SourceRegion parameter, a pre-signed URL will be
  calculated on your behalf.
- `"SourceRegion"`: The ID of the region that contains the snapshot to be copied.
- `"Tags"`:
"""
function copy_dbcluster_snapshot(
    SourceDBClusterSnapshotIdentifier,
    TargetDBClusterSnapshotIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CopyDBClusterSnapshot",
        Dict{String,Any}(
            "SourceDBClusterSnapshotIdentifier" => SourceDBClusterSnapshotIdentifier,
            "TargetDBClusterSnapshotIdentifier" => TargetDBClusterSnapshotIdentifier,
        );
        aws_config=aws_config,
    )
end
function copy_dbcluster_snapshot(
    SourceDBClusterSnapshotIdentifier,
    TargetDBClusterSnapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CopyDBClusterSnapshot",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "SourceDBClusterSnapshotIdentifier" =>
                        SourceDBClusterSnapshotIdentifier,
                    "TargetDBClusterSnapshotIdentifier" =>
                        TargetDBClusterSnapshotIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    copy_dbparameter_group(source_dbparameter_group_identifier, target_dbparameter_group_description, target_dbparameter_group_identifier)
    copy_dbparameter_group(source_dbparameter_group_identifier, target_dbparameter_group_description, target_dbparameter_group_identifier, params::Dict{String,<:Any})

Copies the specified DB parameter group.

# Arguments
- `source_dbparameter_group_identifier`:  The identifier or ARN for the source DB parameter
  group. For information about creating an ARN, see  Constructing an ARN for Amazon RDS in
  the Amazon RDS User Guide.  Constraints:   Must specify a valid DB parameter group.
- `target_dbparameter_group_description`: A description for the copied DB parameter group.
- `target_dbparameter_group_identifier`: The identifier for the copied DB parameter group.
  Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255 letters,
  numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain
  two consecutive hyphens   Example: my-db-parameter-group

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`:
"""
function copy_dbparameter_group(
    SourceDBParameterGroupIdentifier,
    TargetDBParameterGroupDescription,
    TargetDBParameterGroupIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CopyDBParameterGroup",
        Dict{String,Any}(
            "SourceDBParameterGroupIdentifier" => SourceDBParameterGroupIdentifier,
            "TargetDBParameterGroupDescription" => TargetDBParameterGroupDescription,
            "TargetDBParameterGroupIdentifier" => TargetDBParameterGroupIdentifier,
        );
        aws_config=aws_config,
    )
end
function copy_dbparameter_group(
    SourceDBParameterGroupIdentifier,
    TargetDBParameterGroupDescription,
    TargetDBParameterGroupIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CopyDBParameterGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "SourceDBParameterGroupIdentifier" => SourceDBParameterGroupIdentifier,
                    "TargetDBParameterGroupDescription" =>
                        TargetDBParameterGroupDescription,
                    "TargetDBParameterGroupIdentifier" => TargetDBParameterGroupIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    copy_dbsnapshot(source_dbsnapshot_identifier, target_dbsnapshot_identifier)
    copy_dbsnapshot(source_dbsnapshot_identifier, target_dbsnapshot_identifier, params::Dict{String,<:Any})

Copies the specified DB snapshot. The source DB snapshot must be in the available state.
You can copy a snapshot from one Amazon Web Services Region to another. In that case, the
Amazon Web Services Region where you call the CopyDBSnapshot action is the destination
Amazon Web Services Region for the DB snapshot copy.  For more information about copying
snapshots, see Copying a DB Snapshot in the Amazon RDS User Guide.

# Arguments
- `source_dbsnapshot_identifier`: The identifier for the source DB snapshot. If the source
  snapshot is in the same Amazon Web Services Region as the copy, specify a valid DB snapshot
  identifier. For example, you might specify rds:mysql-instance1-snapshot-20130805.  If the
  source snapshot is in a different Amazon Web Services Region than the copy, specify a valid
  DB snapshot ARN. For example, you might specify
  arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805.  If you are
  copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name
  (ARN) of the shared DB snapshot.  If you are copying an encrypted snapshot this parameter
  must be in the ARN format for the source Amazon Web Services Region, and must match the
  SourceDBSnapshotIdentifier in the PreSignedUrl parameter.  Constraints:   Must specify a
  valid system snapshot in the \"available\" state.   Example: rds:mydb-2012-04-02-00-01
  Example: arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805
- `target_dbsnapshot_identifier`: The identifier for the copy of the snapshot.
  Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255 letters,
  numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain
  two consecutive hyphens   Example: my-db-snapshot

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CopyTags"`: A value that indicates whether to copy all tags from the source DB snapshot
  to the target DB snapshot. By default, tags are not copied.
- `"KmsKeyId"`: The Amazon Web Services KMS key identifier for an encrypted DB snapshot.
  The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name
  for the Amazon Web Services KMS customer master key (CMK).  If you copy an encrypted DB
  snapshot from your Amazon Web Services account, you can specify a value for this parameter
  to encrypt the copy with a new Amazon Web Services KMS CMK. If you don't specify a value
  for this parameter, then the copy of the DB snapshot is encrypted with the same Amazon Web
  Services KMS key as the source DB snapshot.  If you copy an encrypted DB snapshot that is
  shared from another Amazon Web Services account, then you must specify a value for this
  parameter.  If you specify this parameter when you copy an unencrypted snapshot, the copy
  is encrypted.  If you copy an encrypted snapshot to a different Amazon Web Services Region,
  then you must specify a Amazon Web Services KMS key identifier for the destination Amazon
  Web Services Region. Amazon Web Services KMS CMKs are specific to the Amazon Web Services
  Region that they are created in, and you can't use CMKs from one Amazon Web Services Region
  in another Amazon Web Services Region.
- `"OptionGroupName"`: The name of an option group to associate with the copy of the
  snapshot. Specify this option if you are copying a snapshot from one Amazon Web Services
  Region to another, and your DB instance uses a nondefault option group. If your source DB
  instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must
  specify this option when copying across Amazon Web Services Regions. For more information,
  see Option group considerations in the Amazon RDS User Guide.
- `"PreSignedUrl"`: The URL that contains a Signature Version 4 signed request for the
  CopyDBSnapshot API action in the source Amazon Web Services Region that contains the source
  DB snapshot to copy.  You must specify this parameter when you copy an encrypted DB
  snapshot from another Amazon Web Services Region by using the Amazon RDS API. Don't specify
  PreSignedUrl when you are copying an encrypted DB snapshot in the same Amazon Web Services
  Region. The presigned URL must be a valid request for the CopyDBSnapshot API action that
  can be executed in the source Amazon Web Services Region that contains the encrypted DB
  snapshot to be copied. The presigned URL request must contain the following parameter
  values:     DestinationRegion - The Amazon Web Services Region that the encrypted DB
  snapshot is copied to. This Amazon Web Services Region is the same one where the
  CopyDBSnapshot action is called that contains this presigned URL.  For example, if you copy
  an encrypted DB snapshot from the us-west-2 Amazon Web Services Region to the us-east-1
  Amazon Web Services Region, then you call the CopyDBSnapshot action in the us-east-1 Amazon
  Web Services Region and provide a presigned URL that contains a call to the CopyDBSnapshot
  action in the us-west-2 Amazon Web Services Region. For this example, the DestinationRegion
  in the presigned URL must be set to the us-east-1 Amazon Web Services Region.     KmsKeyId
  - The Amazon Web Services KMS key identifier for the customer master key (CMK) to use to
  encrypt the copy of the DB snapshot in the destination Amazon Web Services Region. This is
  the same identifier for both the CopyDBSnapshot action that is called in the destination
  Amazon Web Services Region, and the action contained in the presigned URL.
  SourceDBSnapshotIdentifier - The DB snapshot identifier for the encrypted snapshot to be
  copied. This identifier must be in the Amazon Resource Name (ARN) format for the source
  Amazon Web Services Region. For example, if you are copying an encrypted DB snapshot from
  the us-west-2 Amazon Web Services Region, then your SourceDBSnapshotIdentifier looks like
  the following example:
  arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115.    To learn
  how to generate a Signature Version 4 signed request, see Authenticating Requests: Using
  Query Parameters (Amazon Web Services Signature Version 4) and Signature Version 4 Signing
  Process.   If you are using an Amazon Web Services SDK tool or the CLI, you can specify
  SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually.
  Specifying SourceRegion autogenerates a pre-signed URL that is a valid request for the
  operation that can be executed in the source Amazon Web Services Region. If you supply a
  value for this operation's SourceRegion parameter, a pre-signed URL will be calculated on
  your behalf.
- `"SourceRegion"`: The ID of the region that contains the snapshot to be copied.
- `"Tags"`:
- `"TargetCustomAvailabilityZone"`: The external custom Availability Zone (CAZ) identifier
  for the target CAZ. Example: rds-caz-aiqhTgQv.
"""
function copy_dbsnapshot(
    SourceDBSnapshotIdentifier,
    TargetDBSnapshotIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CopyDBSnapshot",
        Dict{String,Any}(
            "SourceDBSnapshotIdentifier" => SourceDBSnapshotIdentifier,
            "TargetDBSnapshotIdentifier" => TargetDBSnapshotIdentifier,
        );
        aws_config=aws_config,
    )
end
function copy_dbsnapshot(
    SourceDBSnapshotIdentifier,
    TargetDBSnapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CopyDBSnapshot",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "SourceDBSnapshotIdentifier" => SourceDBSnapshotIdentifier,
                    "TargetDBSnapshotIdentifier" => TargetDBSnapshotIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    copy_option_group(source_option_group_identifier, target_option_group_description, target_option_group_identifier)
    copy_option_group(source_option_group_identifier, target_option_group_description, target_option_group_identifier, params::Dict{String,<:Any})

Copies the specified option group.

# Arguments
- `source_option_group_identifier`: The identifier for the source option group.
  Constraints:   Must specify a valid option group.
- `target_option_group_description`: The description for the copied option group.
- `target_option_group_identifier`: The identifier for the copied option group.
  Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255 letters,
  numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain
  two consecutive hyphens   Example: my-option-group

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`:
"""
function copy_option_group(
    SourceOptionGroupIdentifier,
    TargetOptionGroupDescription,
    TargetOptionGroupIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CopyOptionGroup",
        Dict{String,Any}(
            "SourceOptionGroupIdentifier" => SourceOptionGroupIdentifier,
            "TargetOptionGroupDescription" => TargetOptionGroupDescription,
            "TargetOptionGroupIdentifier" => TargetOptionGroupIdentifier,
        );
        aws_config=aws_config,
    )
end
function copy_option_group(
    SourceOptionGroupIdentifier,
    TargetOptionGroupDescription,
    TargetOptionGroupIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CopyOptionGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "SourceOptionGroupIdentifier" => SourceOptionGroupIdentifier,
                    "TargetOptionGroupDescription" => TargetOptionGroupDescription,
                    "TargetOptionGroupIdentifier" => TargetOptionGroupIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_custom_availability_zone(custom_availability_zone_name)
    create_custom_availability_zone(custom_availability_zone_name, params::Dict{String,<:Any})

Creates a custom Availability Zone (AZ). A custom AZ is an on-premises AZ that is
integrated with a VMware vSphere cluster. For more information about RDS on VMware, see the
 RDS on VMware User Guide.

# Arguments
- `custom_availability_zone_name`: The name of the custom Availability Zone (AZ).

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ExistingVpnId"`: The ID of an existing virtual private network (VPN) between the Amazon
  RDS website and the VMware vSphere cluster.
- `"NewVpnTunnelName"`: The name of a new VPN tunnel between the Amazon RDS website and the
  VMware vSphere cluster. Specify this parameter only if ExistingVpnId isn't specified.
- `"VpnTunnelOriginatorIP"`: The IP address of network traffic from your on-premises data
  center. A custom AZ receives the network traffic. Specify this parameter only if
  ExistingVpnId isn't specified.
"""
function create_custom_availability_zone(
    CustomAvailabilityZoneName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "CreateCustomAvailabilityZone",
        Dict{String,Any}("CustomAvailabilityZoneName" => CustomAvailabilityZoneName);
        aws_config=aws_config,
    )
end
function create_custom_availability_zone(
    CustomAvailabilityZoneName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateCustomAvailabilityZone",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "CustomAvailabilityZoneName" => CustomAvailabilityZoneName
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_dbcluster(dbcluster_identifier, engine)
    create_dbcluster(dbcluster_identifier, engine, params::Dict{String,<:Any})

Creates a new Amazon Aurora DB cluster. You can use the ReplicationSourceIdentifier
parameter to create the DB cluster as a read replica of another DB cluster or Amazon RDS
MySQL or PostgreSQL DB instance. For cross-region replication where the DB cluster
identified by ReplicationSourceIdentifier is encrypted, you must also specify the
PreSignedUrl parameter. For more information on Amazon Aurora, see  What Is Amazon Aurora?
in the Amazon Aurora User Guide.   This action only applies to Aurora DB clusters.

# Arguments
- `dbcluster_identifier`: The DB cluster identifier. This parameter is stored as a
  lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.
  First character must be a letter.   Can't end with a hyphen or contain two consecutive
  hyphens.   Example: my-cluster1
- `engine`: The name of the database engine to be used for this DB cluster. Valid Values:
  aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora),
  and aurora-postgresql

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AvailabilityZones"`: A list of Availability Zones (AZs) where instances in the DB
  cluster can be created. For information on Amazon Web Services Regions and Availability
  Zones, see Choosing the Regions and Availability Zones in the Amazon Aurora User Guide.
- `"BacktrackWindow"`: The target backtrack window, in seconds. To disable backtracking,
  set this value to 0.   Currently, Backtrack is only supported for Aurora MySQL DB clusters.
   Default: 0 Constraints:   If specified, this value must be set to a number from 0 to
  259,200 (72 hours).
- `"BackupRetentionPeriod"`: The number of days for which automated backups are retained.
  Default: 1 Constraints:   Must be a value from 1 to 35
- `"CharacterSetName"`: A value that indicates that the DB cluster should be associated
  with the specified CharacterSet.
- `"CopyTagsToSnapshot"`: A value that indicates whether to copy all tags from the DB
  cluster to snapshots of the DB cluster. The default is not to copy them.
- `"DBClusterParameterGroupName"`:  The name of the DB cluster parameter group to associate
  with this DB cluster. If you do not specify a value, then the default DB cluster parameter
  group for the specified DB engine and version is used.  Constraints:   If supplied, must
  match the name of an existing DB cluster parameter group.
- `"DBSubnetGroupName"`: A DB subnet group to associate with this DB cluster. Constraints:
  Must match the name of an existing DBSubnetGroup. Must not be default. Example:
  mySubnetgroup
- `"DatabaseName"`: The name for your database of up to 64 alphanumeric characters. If you
  do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are
  creating.
- `"DeletionProtection"`: A value that indicates whether the DB cluster has deletion
  protection enabled. The database can't be deleted when deletion protection is enabled. By
  default, deletion protection is disabled.
- `"Domain"`: The Active Directory directory ID to create the DB cluster in.  For Amazon
  Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that
  connect to the DB cluster. For more information, see Kerberos Authentication in the Amazon
  Aurora User Guide.
- `"DomainIAMRoleName"`: Specify the name of the IAM role to be used when making API calls
  to the Directory Service.
- `"EnableCloudwatchLogsExports"`: The list of log types that need to be enabled for
  exporting to CloudWatch Logs. The values in the list depend on the DB engine being used.
  For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon
  Aurora User Guide.  Aurora MySQL  Possible values are audit, error, general, and slowquery.
    Aurora PostgreSQL  Possible value is postgresql.
- `"EnableGlobalWriteForwarding"`: A value that indicates whether to enable this DB cluster
  to forward write operations to the primary cluster of an Aurora global database
  (GlobalCluster). By default, write operations are not allowed on Aurora DB clusters that
  are secondary clusters in an Aurora global database. You can set this value only on Aurora
  DB clusters that are members of an Aurora global database. With this parameter enabled, a
  secondary cluster can forward writes to the current primary cluster and the resulting
  changes are replicated back to this cluster. For the primary DB cluster of an Aurora global
  database, this value is used immediately if the primary is demoted by the
  FailoverGlobalCluster API operation, but it does nothing until then.
- `"EnableHttpEndpoint"`: A value that indicates whether to enable the HTTP endpoint for an
  Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled. When enabled, the
  HTTP endpoint provides a connectionless web service API for running SQL queries on the
  Aurora Serverless DB cluster. You can also query your database from inside the RDS console
  with the query editor. For more information, see Using the Data API for Aurora Serverless
  in the Amazon Aurora User Guide.
- `"EnableIAMDatabaseAuthentication"`: A value that indicates whether to enable mapping of
  Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By
  default, mapping is disabled. For more information, see  IAM Database Authentication in the
  Amazon Aurora User Guide.
- `"EngineMode"`: The DB engine mode of the DB cluster, either provisioned, serverless,
  parallelquery, global, or multimaster. The parallelquery engine mode isn't required for
  Aurora MySQL version 1.23 and higher 1.x versions, and version 2.09 and higher 2.x
  versions. The global engine mode isn't required for Aurora MySQL version 1.22 and higher
  1.x versions, and global engine mode isn't required for any 2.x versions. The multimaster
  engine mode only applies for DB clusters created with Aurora MySQL version 5.6.10a. For
  Aurora PostgreSQL, the global engine mode isn't required, and both the parallelquery and
  the multimaster engine modes currently aren't supported. Limitations and requirements apply
  to some DB engine modes. For more information, see the following sections in the Amazon
  Aurora User Guide:     Limitations of Aurora Serverless      Limitations of Parallel Query
      Limitations of Aurora Global Databases      Limitations of Multi-Master Clusters
- `"EngineVersion"`: The version number of the database engine to use. To list all of the
  available engine versions for aurora (for MySQL 5.6-compatible Aurora), use the following
  command:  aws rds describe-db-engine-versions --engine aurora --query
  \"DBEngineVersions[].EngineVersion\"  To list all of the available engine versions for
  aurora-mysql (for MySQL 5.7-compatible Aurora), use the following command:  aws rds
  describe-db-engine-versions --engine aurora-mysql --query
  \"DBEngineVersions[].EngineVersion\"  To list all of the available engine versions for
  aurora-postgresql, use the following command:  aws rds describe-db-engine-versions --engine
  aurora-postgresql --query \"DBEngineVersions[].EngineVersion\"   Aurora MySQL  Example:
  5.6.10a, 5.6.mysql_aurora.1.19.2, 5.7.12, 5.7.mysql_aurora.2.04.5   Aurora PostgreSQL
  Example: 9.6.3, 10.7
- `"GlobalClusterIdentifier"`:  The global cluster ID of an Aurora cluster that becomes the
  primary cluster in the new global database cluster.
- `"KmsKeyId"`: The Amazon Web Services KMS key identifier for an encrypted DB cluster. The
  Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for
  the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon
  Web Services account, specify the key ARN or alias ARN. When a CMK isn't specified in
  KmsKeyId:   If ReplicationSourceIdentifier identifies an encrypted source, then Amazon RDS
  will use the CMK used to encrypt the source. Otherwise, Amazon RDS will use your default
  CMK.    If the StorageEncrypted parameter is enabled and ReplicationSourceIdentifier isn't
  specified, then Amazon RDS will use your default CMK.   There is a default CMK for your
  Amazon Web Services account. Your Amazon Web Services account has a different default CMK
  for each Amazon Web Services Region. If you create a read replica of an encrypted DB
  cluster in another Amazon Web Services Region, you must set KmsKeyId to a Amazon Web
  Services KMS key identifier that is valid in the destination Amazon Web Services Region.
  This CMK is used to encrypt the read replica in that Amazon Web Services Region.
- `"MasterUserPassword"`: The password for the master database user. This password can
  contain any printable ASCII character except \"/\", \"\"\", or \"@\". Constraints: Must
  contain from 8 to 41 characters.
- `"MasterUsername"`: The name of the master user for the DB cluster. Constraints:   Must
  be 1 to 16 letters or numbers.   First character must be a letter.   Can't be a reserved
  word for the chosen database engine.
- `"OptionGroupName"`: A value that indicates that the DB cluster should be associated with
  the specified option group. Permanent options can't be removed from an option group. The
  option group can't be removed from a DB cluster once it is associated with a DB cluster.
- `"Port"`: The port number on which the instances in the DB cluster accept connections.
  Default: 3306 if engine is set as aurora or 5432 if set to aurora-postgresql.
- `"PreSignedUrl"`: A URL that contains a Signature Version 4 signed request for the
  CreateDBCluster action to be called in the source Amazon Web Services Region where the DB
  cluster is replicated from. You only need to specify PreSignedUrl when you are performing
  cross-region replication from an encrypted DB cluster. The pre-signed URL must be a valid
  request for the CreateDBCluster API action that can be executed in the source Amazon Web
  Services Region that contains the encrypted DB cluster to be copied. The pre-signed URL
  request must contain the following parameter values:    KmsKeyId - The Amazon Web Services
  KMS key identifier for the key to use to encrypt the copy of the DB cluster in the
  destination Amazon Web Services Region. This should refer to the same Amazon Web Services
  KMS CMK for both the CreateDBCluster action that is called in the destination Amazon Web
  Services Region, and the action contained in the pre-signed URL.    DestinationRegion - The
  name of the Amazon Web Services Region that Aurora read replica will be created in.
  ReplicationSourceIdentifier - The DB cluster identifier for the encrypted DB cluster to be
  copied. This identifier must be in the Amazon Resource Name (ARN) format for the source
  Amazon Web Services Region. For example, if you are copying an encrypted DB cluster from
  the us-west-2 Amazon Web Services Region, then your ReplicationSourceIdentifier would look
  like Example: arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1.   To learn how to
  generate a Signature Version 4 signed request, see  Authenticating Requests: Using Query
  Parameters (Amazon Web Services Signature Version 4) and  Signature Version 4 Signing
  Process.  If you are using an Amazon Web Services SDK tool or the CLI, you can specify
  SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually.
  Specifying SourceRegion autogenerates a pre-signed URL that is a valid request for the
  operation that can be executed in the source Amazon Web Services Region. If you supply a
  value for this operation's SourceRegion parameter, a pre-signed URL will be calculated on
  your behalf.
- `"PreferredBackupWindow"`: The daily time range during which automated backups are
  created if automated backups are enabled using the BackupRetentionPeriod parameter.  The
  default is a 30-minute window selected at random from an 8-hour block of time for each
  Amazon Web Services Region. To view the time blocks available, see  Backup window in the
  Amazon Aurora User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be
  in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance
  window.   Must be at least 30 minutes.
- `"PreferredMaintenanceWindow"`: The weekly time range during which system maintenance can
  occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is
  a 30-minute window selected at random from an 8-hour block of time for each Amazon Web
  Services Region, occurring on a random day of the week. To see the time blocks available,
  see  Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.
   Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
- `"ReplicationSourceIdentifier"`: The Amazon Resource Name (ARN) of the source DB instance
  or DB cluster if this DB cluster is created as a read replica.
- `"ScalingConfiguration"`: For DB clusters in serverless DB engine mode, the scaling
  properties of the DB cluster.
- `"SourceRegion"`: The ID of the region that contains the source for the read replica.
- `"StorageEncrypted"`: A value that indicates whether the DB cluster is encrypted.
- `"Tags"`: Tags to assign to the DB cluster.
- `"VpcSecurityGroupIds"`: A list of EC2 VPC security groups to associate with this DB
  cluster.
"""
function create_dbcluster(
    DBClusterIdentifier, Engine; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "CreateDBCluster",
        Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier, "Engine" => Engine);
        aws_config=aws_config,
    )
end
function create_dbcluster(
    DBClusterIdentifier,
    Engine,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterIdentifier" => DBClusterIdentifier, "Engine" => Engine
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_dbcluster_endpoint(dbcluster_endpoint_identifier, dbcluster_identifier, endpoint_type)
    create_dbcluster_endpoint(dbcluster_endpoint_identifier, dbcluster_identifier, endpoint_type, params::Dict{String,<:Any})

Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.  This
action only applies to Aurora DB clusters.

# Arguments
- `dbcluster_endpoint_identifier`: The identifier to use for the new endpoint. This
  parameter is stored as a lowercase string.
- `dbcluster_identifier`: The DB cluster identifier of the DB cluster associated with the
  endpoint. This parameter is stored as a lowercase string.
- `endpoint_type`: The type of the endpoint. One of: READER, WRITER, ANY.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ExcludedMembers"`: List of DB instance identifiers that aren't part of the custom
  endpoint group. All other eligible instances are reachable through the custom endpoint.
  Only relevant if the list of static members is empty.
- `"StaticMembers"`: List of DB instance identifiers that are part of the custom endpoint
  group.
- `"Tags"`: The tags to be assigned to the Amazon RDS resource.
"""
function create_dbcluster_endpoint(
    DBClusterEndpointIdentifier,
    DBClusterIdentifier,
    EndpointType;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBClusterEndpoint",
        Dict{String,Any}(
            "DBClusterEndpointIdentifier" => DBClusterEndpointIdentifier,
            "DBClusterIdentifier" => DBClusterIdentifier,
            "EndpointType" => EndpointType,
        );
        aws_config=aws_config,
    )
end
function create_dbcluster_endpoint(
    DBClusterEndpointIdentifier,
    DBClusterIdentifier,
    EndpointType,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBClusterEndpoint",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterEndpointIdentifier" => DBClusterEndpointIdentifier,
                    "DBClusterIdentifier" => DBClusterIdentifier,
                    "EndpointType" => EndpointType,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_dbcluster_parameter_group(dbcluster_parameter_group_name, dbparameter_group_family, description)
    create_dbcluster_parameter_group(dbcluster_parameter_group_name, dbparameter_group_family, description, params::Dict{String,<:Any})

Creates a new DB cluster parameter group. Parameters in a DB cluster parameter group apply
to all of the instances in a DB cluster.  A DB cluster parameter group is initially created
with the default parameters for the database engine used by instances in the DB cluster. To
provide custom values for any of the parameters, you must modify the group after creating
it using ModifyDBClusterParameterGroup. Once you've created a DB cluster parameter group,
you need to associate it with your DB cluster using ModifyDBCluster. When you associate a
new DB cluster parameter group with a running DB cluster, you need to reboot the DB
instances in the DB cluster without failover for the new DB cluster parameter group and
associated settings to take effect.   After you create a DB cluster parameter group, you
should wait at least 5 minutes before creating your first DB cluster that uses that DB
cluster parameter group as the default parameter group. This allows Amazon RDS to fully
complete the create action before the DB cluster parameter group is used as the default for
a new DB cluster. This is especially important for parameters that are critical when
creating the default database for a DB cluster, such as the character set for the default
database defined by the character_set_database parameter. You can use the Parameter Groups
option of the Amazon RDS console or the DescribeDBClusterParameters action to verify that
your DB cluster parameter group has been created or modified.  For more information on
Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User Guide.   This action
only applies to Aurora DB clusters.

# Arguments
- `dbcluster_parameter_group_name`: The name of the DB cluster parameter group.
  Constraints:   Must match the name of an existing DB cluster parameter group.    This value
  is stored as a lowercase string.
- `dbparameter_group_family`: The DB cluster parameter group family name. A DB cluster
  parameter group can be associated with one and only one DB cluster parameter group family,
  and can be applied only to a DB cluster running a database engine and engine version
  compatible with that DB cluster parameter group family.  Aurora MySQL  Example: aurora5.6,
  aurora-mysql5.7   Aurora PostgreSQL  Example: aurora-postgresql9.6  To list all of the
  available parameter group families for a DB engine, use the following command:  aws rds
  describe-db-engine-versions --query \"DBEngineVersions[].DBParameterGroupFamily\" --engine
  &lt;engine&gt;  For example, to list all of the available parameter group families for the
  Aurora PostgreSQL DB engine, use the following command:  aws rds
  describe-db-engine-versions --query \"DBEngineVersions[].DBParameterGroupFamily\" --engine
  aurora-postgresql   The output contains duplicates.  The following are the valid DB engine
  values:    aurora (for MySQL 5.6-compatible Aurora)    aurora-mysql (for MySQL
  5.7-compatible Aurora)    aurora-postgresql
- `description`: The description for the DB cluster parameter group.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`: Tags to assign to the DB cluster parameter group.
"""
function create_dbcluster_parameter_group(
    DBClusterParameterGroupName,
    DBParameterGroupFamily,
    Description;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBClusterParameterGroup",
        Dict{String,Any}(
            "DBClusterParameterGroupName" => DBClusterParameterGroupName,
            "DBParameterGroupFamily" => DBParameterGroupFamily,
            "Description" => Description,
        );
        aws_config=aws_config,
    )
end
function create_dbcluster_parameter_group(
    DBClusterParameterGroupName,
    DBParameterGroupFamily,
    Description,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBClusterParameterGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterParameterGroupName" => DBClusterParameterGroupName,
                    "DBParameterGroupFamily" => DBParameterGroupFamily,
                    "Description" => Description,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_dbcluster_snapshot(dbcluster_identifier, dbcluster_snapshot_identifier)
    create_dbcluster_snapshot(dbcluster_identifier, dbcluster_snapshot_identifier, params::Dict{String,<:Any})

Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see  What Is
Amazon Aurora? in the Amazon Aurora User Guide.   This action only applies to Aurora DB
clusters.

# Arguments
- `dbcluster_identifier`: The identifier of the DB cluster to create a snapshot for. This
  parameter isn't case-sensitive. Constraints:   Must match the identifier of an existing
  DBCluster.   Example: my-cluster1
- `dbcluster_snapshot_identifier`: The identifier of the DB cluster snapshot. This
  parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63
  letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen
  or contain two consecutive hyphens.   Example: my-cluster1-snapshot1

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`: The tags to be assigned to the DB cluster snapshot.
"""
function create_dbcluster_snapshot(
    DBClusterIdentifier,
    DBClusterSnapshotIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBClusterSnapshot",
        Dict{String,Any}(
            "DBClusterIdentifier" => DBClusterIdentifier,
            "DBClusterSnapshotIdentifier" => DBClusterSnapshotIdentifier,
        );
        aws_config=aws_config,
    )
end
function create_dbcluster_snapshot(
    DBClusterIdentifier,
    DBClusterSnapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBClusterSnapshot",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterIdentifier" => DBClusterIdentifier,
                    "DBClusterSnapshotIdentifier" => DBClusterSnapshotIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_dbinstance(dbinstance_class, dbinstance_identifier, engine)
    create_dbinstance(dbinstance_class, dbinstance_identifier, engine, params::Dict{String,<:Any})

Creates a new DB instance.

# Arguments
- `dbinstance_class`: The compute and memory capacity of the DB instance, for example,
  db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions,
  or for all database engines. For the full list of DB instance classes, and availability for
  your engine, see DB Instance Class in the Amazon RDS User Guide.
- `dbinstance_identifier`: The DB instance identifier. This parameter is stored as a
  lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.
  First character must be a letter.   Can't end with a hyphen or contain two consecutive
  hyphens.   Example: mydbinstance
- `engine`: The name of the database engine to be used for this instance.  Not every
  database engine is available for every Amazon Web Services Region.  Valid Values:
  aurora (for MySQL 5.6-compatible Aurora)    aurora-mysql (for MySQL 5.7-compatible Aurora)
    aurora-postgresql     mariadb     mysql     oracle-ee     oracle-ee-cdb     oracle-se2
   oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex
  sqlserver-web

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AllocatedStorage"`: The amount of storage in gibibytes (GiB) to allocate for the DB
  instance. Type: Integer  Amazon Aurora  Not applicable. Aurora cluster volumes
  automatically grow as the amount of data in your database increases, though you are only
  charged for the space that you use in an Aurora cluster volume.  MySQL  Constraints to the
  amount of storage for each storage type are the following:    General Purpose (SSD) storage
  (gp2): Must be an integer from 20 to 65536.   Provisioned IOPS storage (io1): Must be an
  integer from 100 to 65536.   Magnetic storage (standard): Must be an integer from 5 to
  3072.    MariaDB  Constraints to the amount of storage for each storage type are the
  following:    General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.
  Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.   Magnetic storage
  (standard): Must be an integer from 5 to 3072.    PostgreSQL  Constraints to the amount of
  storage for each storage type are the following:    General Purpose (SSD) storage (gp2):
  Must be an integer from 20 to 65536.   Provisioned IOPS storage (io1): Must be an integer
  from 100 to 65536.   Magnetic storage (standard): Must be an integer from 5 to 3072.
  Oracle  Constraints to the amount of storage for each storage type are the following:
  General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.   Provisioned
  IOPS storage (io1): Must be an integer from 100 to 65536.   Magnetic storage (standard):
  Must be an integer from 10 to 3072.    SQL Server  Constraints to the amount of storage for
  each storage type are the following:    General Purpose (SSD) storage (gp2):   Enterprise
  and Standard editions: Must be an integer from 200 to 16384.   Web and Express editions:
  Must be an integer from 20 to 16384.     Provisioned IOPS storage (io1):   Enterprise and
  Standard editions: Must be an integer from 200 to 16384.   Web and Express editions: Must
  be an integer from 100 to 16384.     Magnetic storage (standard):   Enterprise and Standard
  editions: Must be an integer from 200 to 1024.   Web and Express editions: Must be an
  integer from 20 to 1024.
- `"AutoMinorVersionUpgrade"`: A value that indicates whether minor engine upgrades are
  applied automatically to the DB instance during the maintenance window. By default, minor
  engine upgrades are applied automatically.
- `"AvailabilityZone"`:  The Availability Zone (AZ) where the database will be created. For
  information on Amazon Web Services Regions and Availability Zones, see Regions and
  Availability Zones.  Default: A random, system-chosen Availability Zone in the endpoint's
  Amazon Web Services Region.  Example: us-east-1d   Constraint: The AvailabilityZone
  parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified
  Availability Zone must be in the same Amazon Web Services Region as the current endpoint.
  If you're creating a DB instance in an RDS on VMware environment, specify the identifier of
  the custom Availability Zone to create the DB instance in. For more information about RDS
  on VMware, see the  RDS on VMware User Guide.
- `"BackupRetentionPeriod"`: The number of days for which automated backups are retained.
  Setting this parameter to a positive number enables backups. Setting this parameter to 0
  disables automated backups.  Amazon Aurora  Not applicable. The retention period for
  automated backups is managed by the DB cluster. Default: 1 Constraints:   Must be a value
  from 0 to 35   Can't be set to 0 if the DB instance is a source to read replicas
- `"CharacterSetName"`: For supported engines, indicates that the DB instance should be
  associated with the specified CharacterSet.  Amazon Aurora  Not applicable. The character
  set is managed by the DB cluster. For more information, see CreateDBCluster.
- `"CopyTagsToSnapshot"`: A value that indicates whether to copy tags from the DB instance
  to snapshots of the DB instance. By default, tags are not copied.  Amazon Aurora  Not
  applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for
  an Aurora DB instance has no effect on the DB cluster setting.
- `"DBClusterIdentifier"`: The identifier of the DB cluster that the instance will belong
  to.
- `"DBName"`: The meaning of this parameter differs according to the database engine you
  use.  MySQL  The name of the database to create when the DB instance is created. If this
  parameter isn't specified, no database is created in the DB instance. Constraints:   Must
  contain 1 to 64 letters or numbers.   Must begin with a letter. Subsequent characters can
  be letters, underscores, or digits (0-9).   Can't be a word reserved by the specified
  database engine    MariaDB  The name of the database to create when the DB instance is
  created. If this parameter isn't specified, no database is created in the DB instance.
  Constraints:   Must contain 1 to 64 letters or numbers.   Must begin with a letter.
  Subsequent characters can be letters, underscores, or digits (0-9).   Can't be a word
  reserved by the specified database engine    PostgreSQL  The name of the database to create
  when the DB instance is created. If this parameter isn't specified, a database named
  postgres is created in the DB instance. Constraints:   Must contain 1 to 63 letters,
  numbers, or underscores.   Must begin with a letter. Subsequent characters can be letters,
  underscores, or digits (0-9).   Can't be a word reserved by the specified database engine
   Oracle  The Oracle System ID (SID) of the created DB instance. If you specify null, the
  default value ORCL is used. You can't specify the string NULL, or any other reserved word,
  for DBName.  Default: ORCL  Constraints:   Can't be longer than 8 characters    SQL Server
  Not applicable. Must be null.  Amazon Aurora MySQL  The name of the database to create when
  the primary DB instance of the Aurora MySQL DB cluster is created. If this parameter isn't
  specified for an Aurora MySQL DB cluster, no database is created in the DB cluster.
  Constraints:   It must contain 1 to 64 alphanumeric characters.   It can't be a word
  reserved by the database engine.    Amazon Aurora PostgreSQL  The name of the database to
  create when the primary DB instance of the Aurora PostgreSQL DB cluster is created. If this
  parameter isn't specified for an Aurora PostgreSQL DB cluster, a database named postgres is
  created in the DB cluster. Constraints:   It must contain 1 to 63 alphanumeric characters.
   It must begin with a letter or an underscore. Subsequent characters can be letters,
  underscores, or digits (0 to 9).   It can't be a word reserved by the database engine.
- `"DBParameterGroupName"`: The name of the DB parameter group to associate with this DB
  instance. If you do not specify a value, then the default DB parameter group for the
  specified DB engine and version is used. Constraints:   Must be 1 to 255 letters, numbers,
  or hyphens.   First character must be a letter   Can't end with a hyphen or contain two
  consecutive hyphens
- `"DBSecurityGroups"`: A list of DB security groups to associate with this DB instance.
  Default: The default DB security group for the database engine.
- `"DBSubnetGroupName"`: A DB subnet group to associate with this DB instance. If there is
  no DB subnet group, then it is a non-VPC DB instance.
- `"DeletionProtection"`: A value that indicates whether the DB instance has deletion
  protection enabled. The database can't be deleted when deletion protection is enabled. By
  default, deletion protection is disabled. For more information, see  Deleting a DB
  Instance.   Amazon Aurora  Not applicable. You can enable or disable deletion protection
  for the DB cluster. For more information, see CreateDBCluster. DB instances in a DB cluster
  can be deleted even when deletion protection is enabled for the DB cluster.
- `"Domain"`: The Active Directory directory ID to create the DB instance in. Currently,
  only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an
  Active Directory Domain. For more information, see  Kerberos Authentication in the Amazon
  RDS User Guide.
- `"DomainIAMRoleName"`: Specify the name of the IAM role to be used when making API calls
  to the Directory Service.
- `"EnableCloudwatchLogsExports"`: The list of log types that need to be enabled for
  exporting to CloudWatch Logs. The values in the list depend on the DB engine being used.
  For more information, see Publishing Database Logs to Amazon CloudWatch Logs  in the Amazon
  Relational Database Service User Guide.  Amazon Aurora  Not applicable. CloudWatch Logs
  exports are managed by the DB cluster.   MariaDB  Possible values are audit, error,
  general, and slowquery.   Microsoft SQL Server  Possible values are agent and error.
  MySQL  Possible values are audit, error, general, and slowquery.   Oracle  Possible values
  are alert, audit, listener, trace, and oemagent.   PostgreSQL  Possible values are
  postgresql and upgrade.
- `"EnableCustomerOwnedIp"`: A value that indicates whether to enable a customer-owned IP
  address (CoIP) for an RDS on Outposts DB instance. A CoIP provides local or external
  connectivity to resources in your Outpost subnets through your on-premises network. For
  some use cases, a CoIP can provide lower latency for connections to the DB instance from
  outside of its virtual private cloud (VPC) on your local network. For more information
  about RDS on Outposts, see Working with Amazon RDS on Amazon Web Services Outposts in the
  Amazon RDS User Guide. For more information about CoIPs, see Customer-owned IP addresses in
  the Amazon Web Services Outposts User Guide.
- `"EnableIAMDatabaseAuthentication"`: A value that indicates whether to enable mapping of
  Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By
  default, mapping is disabled. This setting doesn't apply to Amazon Aurora. Mapping Amazon
  Web Services IAM accounts to database accounts is managed by the DB cluster. For more
  information, see  IAM Database Authentication for MySQL and PostgreSQL in the Amazon RDS
  User Guide.
- `"EnablePerformanceInsights"`: A value that indicates whether to enable Performance
  Insights for the DB instance.  For more information, see Using Amazon Performance Insights
  in the Amazon Relational Database Service User Guide.
- `"EngineVersion"`: The version number of the database engine to use. For a list of valid
  engine versions, use the DescribeDBEngineVersions action. The following are the database
  engines and links to information about the major and minor versions that are available with
  Amazon RDS. Not every database engine is available for every Amazon Web Services Region.
  Amazon Aurora  Not applicable. The version number of the database engine to be used by the
  DB instance is managed by the DB cluster.  MariaDB  See MariaDB on Amazon RDS Versions in
  the Amazon RDS User Guide.   Microsoft SQL Server  See Microsoft SQL Server Versions on
  Amazon RDS in the Amazon RDS User Guide.   MySQL  See MySQL on Amazon RDS Versions in the
  Amazon RDS User Guide.   Oracle  See Oracle Database Engine Release Notes in the Amazon RDS
  User Guide.   PostgreSQL  See Amazon RDS for PostgreSQL versions and extensions in the
  Amazon RDS User Guide.
- `"Iops"`: The amount of Provisioned IOPS (input/output operations per second) to be
  initially allocated for the DB instance. For information about valid Iops values, see
  Amazon RDS Provisioned IOPS Storage to Improve Performance in the Amazon RDS User Guide.
  Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple
  between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances,
  must be a multiple between 1 and 50 of the storage amount for the DB instance.
- `"KmsKeyId"`: The Amazon Web Services KMS key identifier for an encrypted DB instance.
  The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name
  for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different
  Amazon Web Services account, specify the key ARN or alias ARN.  Amazon Aurora  Not
  applicable. The Amazon Web Services KMS key identifier is managed by the DB cluster. For
  more information, see CreateDBCluster. If StorageEncrypted is enabled, and you do not
  specify a value for the KmsKeyId parameter, then Amazon RDS uses your default CMK. There is
  a default CMK for your Amazon Web Services account. Your Amazon Web Services account has a
  different default CMK for each Amazon Web Services Region.
- `"LicenseModel"`: License model information for this DB instance.  Valid values:
  license-included | bring-your-own-license | general-public-license
- `"MasterUserPassword"`: The password for the master user. The password can include any
  printable ASCII character except \"/\", \"\"\", or \"@\".  Amazon Aurora  Not applicable.
  The password for the master user is managed by the DB cluster.  MariaDB  Constraints: Must
  contain from 8 to 41 characters.  Microsoft SQL Server  Constraints: Must contain from 8 to
  128 characters.  MySQL  Constraints: Must contain from 8 to 41 characters.  Oracle
  Constraints: Must contain from 8 to 30 characters.  PostgreSQL  Constraints: Must contain
  from 8 to 128 characters.
- `"MasterUsername"`: The name for the master user.  Amazon Aurora  Not applicable. The
  name for the master user is managed by the DB cluster.   MariaDB  Constraints:   Required
  for MariaDB.   Must be 1 to 16 letters or numbers.   Can't be a reserved word for the
  chosen database engine.    Microsoft SQL Server  Constraints:   Required for SQL Server.
  Must be 1 to 128 letters or numbers.   The first character must be a letter.   Can't be a
  reserved word for the chosen database engine.    MySQL  Constraints:   Required for MySQL.
   Must be 1 to 16 letters or numbers.   First character must be a letter.   Can't be a
  reserved word for the chosen database engine.    Oracle  Constraints:   Required for
  Oracle.   Must be 1 to 30 letters or numbers.   First character must be a letter.   Can't
  be a reserved word for the chosen database engine.    PostgreSQL  Constraints:   Required
  for PostgreSQL.   Must be 1 to 63 letters or numbers.   First character must be a letter.
  Can't be a reserved word for the chosen database engine.
- `"MaxAllocatedStorage"`: The upper limit in gibibytes (GiB) to which Amazon RDS can
  automatically scale the storage of the DB instance. For more information about this
  setting, including limitations that apply to it, see  Managing capacity automatically with
  Amazon RDS storage autoscaling in the Amazon RDS User Guide.
- `"MonitoringInterval"`: The interval, in seconds, between points when Enhanced Monitoring
  metrics are collected for the DB instance. To disable collecting Enhanced Monitoring
  metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also
  set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60
- `"MonitoringRoleArn"`: The ARN for the IAM role that permits RDS to send enhanced
  monitoring metrics to Amazon CloudWatch Logs. For example,
  arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go
  to Setting Up and Enabling Enhanced Monitoring in the Amazon RDS User Guide. If
  MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn
  value.
- `"MultiAZ"`: A value that indicates whether the DB instance is a Multi-AZ deployment. You
  can't set the AvailabilityZone parameter if the DB instance is a Multi-AZ deployment.
- `"NcharCharacterSetName"`: The name of the NCHAR character set for the Oracle DB instance.
- `"OptionGroupName"`: A value that indicates that the DB instance should be associated
  with the specified option group. Permanent options, such as the TDE option for Oracle
  Advanced Security TDE, can't be removed from an option group. Also, that option group can't
  be removed from a DB instance once it is associated with a DB instance
- `"PerformanceInsightsKMSKeyId"`: The Amazon Web Services KMS key identifier for
  encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the
  key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master
  key (CMK). If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS
  uses your default CMK. There is a default CMK for your Amazon Web Services account. Your
  Amazon Web Services account has a different default CMK for each Amazon Web Services Region.
- `"PerformanceInsightsRetentionPeriod"`: The amount of time, in days, to retain
  Performance Insights data. Valid values are 7 or 731 (2 years).
- `"Port"`: The port number on which the database accepts connections.  MySQL   Default:
  3306   Valid values: 1150-65535  Type: Integer  MariaDB   Default: 3306   Valid values:
  1150-65535  Type: Integer  PostgreSQL   Default: 5432   Valid values: 1150-65535  Type:
  Integer  Oracle   Default: 1521   Valid values: 1150-65535   SQL Server   Default: 1433
  Valid values: 1150-65535 except 1234, 1434, 3260, 3343, 3389, 47001, and 49152-49156.
  Amazon Aurora   Default: 3306   Valid values: 1150-65535  Type: Integer
- `"PreferredBackupWindow"`:  The daily time range during which automated backups are
  created if automated backups are enabled, using the BackupRetentionPeriod parameter. The
  default is a 30-minute window selected at random from an 8-hour block of time for each
  Amazon Web Services Region. For more information, see Backup window in the Amazon RDS User
  Guide.   Amazon Aurora  Not applicable. The daily time range for creating automated backups
  is managed by the DB cluster. Constraints:   Must be in the format hh24:mi-hh24:mi.   Must
  be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance
  window.   Must be at least 30 minutes.
- `"PreferredMaintenanceWindow"`: The time range each week during which system maintenance
  can occur, in Universal Coordinated Time (UTC). For more information, see Amazon RDS
  Maintenance Window.   Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window
  selected at random from an 8-hour block of time for each Amazon Web Services Region,
  occurring on a random day of the week.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
  Constraints: Minimum 30-minute window.
- `"ProcessorFeatures"`: The number of CPU cores and the number of threads per core for the
  DB instance class of the DB instance.
- `"PromotionTier"`: A value that specifies the order in which an Aurora Replica is
  promoted to the primary instance after a failure of the existing primary instance. For more
  information, see  Fault Tolerance for an Aurora DB Cluster in the Amazon Aurora User Guide.
   Default: 1 Valid Values: 0 - 15
- `"PubliclyAccessible"`: A value that indicates whether the DB instance is publicly
  accessible. When the DB instance is publicly accessible, its DNS endpoint resolves to the
  private IP address from within the DB instance's VPC, and to the public IP address from
  outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the
  security group it uses, and that public access is not permitted if the security group
  assigned to the DB instance doesn't permit it. When the DB instance isn't publicly
  accessible, it is an internal DB instance with a DNS name that resolves to a private IP
  address. Default: The default behavior varies depending on whether DBSubnetGroupName is
  specified. If DBSubnetGroupName isn't specified, and PubliclyAccessible isn't specified,
  the following applies:   If the default VPC in the target region doesn’t have an Internet
  gateway attached to it, the DB instance is private.   If the default VPC in the target
  region has an Internet gateway attached to it, the DB instance is public.   If
  DBSubnetGroupName is specified, and PubliclyAccessible isn't specified, the following
  applies:   If the subnets are part of a VPC that doesn’t have an Internet gateway
  attached to it, the DB instance is private.   If the subnets are part of a VPC that has an
  Internet gateway attached to it, the DB instance is public.
- `"StorageEncrypted"`: A value that indicates whether the DB instance is encrypted. By
  default, it isn't encrypted.  Amazon Aurora  Not applicable. The encryption for DB
  instances is managed by the DB cluster.
- `"StorageType"`: Specifies the storage type to be associated with the DB instance.  Valid
  values: standard | gp2 | io1   If you specify io1, you must also include a value for the
  Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise gp2
- `"Tags"`: Tags to assign to the DB instance.
- `"TdeCredentialArn"`: The ARN from the key store with which to associate the instance for
  TDE encryption.
- `"TdeCredentialPassword"`: The password for the given ARN from the key store in order to
  access the device.
- `"Timezone"`: The time zone of the DB instance. The time zone parameter is currently
  supported only by Microsoft SQL Server.
- `"VpcSecurityGroupIds"`: A list of Amazon EC2 VPC security groups to associate with this
  DB instance.  Amazon Aurora  Not applicable. The associated list of EC2 VPC security groups
  is managed by the DB cluster. Default: The default EC2 VPC security group for the DB subnet
  group's VPC.
"""
function create_dbinstance(
    DBInstanceClass,
    DBInstanceIdentifier,
    Engine;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBInstance",
        Dict{String,Any}(
            "DBInstanceClass" => DBInstanceClass,
            "DBInstanceIdentifier" => DBInstanceIdentifier,
            "Engine" => Engine,
        );
        aws_config=aws_config,
    )
end
function create_dbinstance(
    DBInstanceClass,
    DBInstanceIdentifier,
    Engine,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBInstance",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBInstanceClass" => DBInstanceClass,
                    "DBInstanceIdentifier" => DBInstanceIdentifier,
                    "Engine" => Engine,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_dbinstance_read_replica(dbinstance_identifier, source_dbinstance_identifier)
    create_dbinstance_read_replica(dbinstance_identifier, source_dbinstance_identifier, params::Dict{String,<:Any})

Creates a new DB instance that acts as a read replica for an existing source DB instance.
You can create a read replica for a DB instance running MySQL, MariaDB, Oracle, PostgreSQL,
or SQL Server. For more information, see Working with Read Replicas in the Amazon RDS User
Guide.  Amazon Aurora doesn't support this action. Call the CreateDBInstance action to
create a DB instance for an Aurora DB cluster. All read replica DB instances are created
with backups disabled. All other DB instance attributes (including DB security groups and
DB parameter groups) are inherited from the source DB instance, except as specified.  Your
source DB instance must have backup retention enabled.

# Arguments
- `dbinstance_identifier`: The DB instance identifier of the read replica. This identifier
  is the unique key that identifies a DB instance. This parameter is stored as a lowercase
  string.
- `source_dbinstance_identifier`: The identifier of the DB instance that will act as the
  source for the read replica. Each DB instance can have up to five read replicas.
  Constraints:   Must be the identifier of an existing MySQL, MariaDB, Oracle, PostgreSQL, or
  SQL Server DB instance.   Can specify a DB instance that is a MySQL read replica only if
  the source is running MySQL 5.6 or later.   For the limitations of Oracle read replicas,
  see Read Replica Limitations with Oracle in the Amazon RDS User Guide.   For the
  limitations of SQL Server read replicas, see Read Replica Limitations with Microsoft SQL
  Server in the Amazon RDS User Guide.   Can specify a PostgreSQL DB instance only if the
  source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region
  replication).   The specified DB instance must have automatic backups enabled, that is, its
  backup retention period must be greater than 0.   If the source DB instance is in the same
  Amazon Web Services Region as the read replica, specify a valid DB instance identifier.
  If the source DB instance is in a different Amazon Web Services Region from the read
  replica, specify a valid DB instance ARN. For more information, see Constructing an ARN for
  Amazon RDS in the Amazon RDS User Guide. This doesn't apply to SQL Server, which doesn't
  support cross-region replicas.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AutoMinorVersionUpgrade"`: A value that indicates whether minor engine upgrades are
  applied automatically to the read replica during the maintenance window. Default: Inherits
  from the source DB instance
- `"AvailabilityZone"`: The Availability Zone (AZ) where the read replica will be created.
  Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services
  Region.  Example: us-east-1d
- `"CopyTagsToSnapshot"`: A value that indicates whether to copy all tags from the read
  replica to snapshots of the read replica. By default, tags are not copied.
- `"DBInstanceClass"`: The compute and memory capacity of the read replica, for example,
  db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions,
  or for all database engines. For the full list of DB instance classes, and availability for
  your engine, see DB Instance Class in the Amazon RDS User Guide.  Default: Inherits from
  the source DB instance.
- `"DBParameterGroupName"`: The name of the DB parameter group to associate with this DB
  instance. If you do not specify a value for DBParameterGroupName, then Amazon RDS uses the
  DBParameterGroup of source DB instance for a same region read replica, or the default
  DBParameterGroup for the specified DB engine for a cross region read replica.  Currently,
  specifying a parameter group for this operation is only supported for Oracle DB instances.
  Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a
  letter   Can't end with a hyphen or contain two consecutive hyphens
- `"DBSubnetGroupName"`: Specifies a DB subnet group for the DB instance. The new DB
  instance is created in the VPC associated with the DB subnet group. If no DB subnet group
  is specified, then the new DB instance isn't created in a VPC. Constraints:   Can only be
  specified if the source DB instance identifier specifies a DB instance in another Amazon
  Web Services Region.   If supplied, must match the name of an existing DBSubnetGroup.   The
  specified DB subnet group must be in the same Amazon Web Services Region in which the
  operation is running.   All read replicas in one Amazon Web Services Region that are
  created from the same source DB instance must either:&gt;   Specify DB subnet groups from
  the same VPC. All these read replicas are created in the same VPC.   Not specify a DB
  subnet group. All these read replicas are created outside of any VPC.     Example:
  mySubnetgroup
- `"DeletionProtection"`: A value that indicates whether the DB instance has deletion
  protection enabled. The database can't be deleted when deletion protection is enabled. By
  default, deletion protection is disabled. For more information, see  Deleting a DB
  Instance.
- `"Domain"`: The Active Directory directory ID to create the DB instance in. Currently,
  only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an
  Active Directory Domain. For more information, see  Kerberos Authentication in the Amazon
  RDS User Guide.
- `"DomainIAMRoleName"`: Specify the name of the IAM role to be used when making API calls
  to the Directory Service.
- `"EnableCloudwatchLogsExports"`: The list of logs that the new DB instance is to export
  to CloudWatch Logs. The values in the list depend on the DB engine being used. For more
  information, see Publishing Database Logs to Amazon CloudWatch Logs  in the Amazon RDS User
  Guide.
- `"EnableIAMDatabaseAuthentication"`: A value that indicates whether to enable mapping of
  Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By
  default, mapping is disabled. For more information about IAM database authentication, see
  IAM Database Authentication for MySQL and PostgreSQL in the Amazon RDS User Guide.
- `"EnablePerformanceInsights"`: A value that indicates whether to enable Performance
  Insights for the read replica.  For more information, see Using Amazon Performance Insights
  in the Amazon RDS User Guide.
- `"Iops"`: The amount of Provisioned IOPS (input/output operations per second) to be
  initially allocated for the DB instance.
- `"KmsKeyId"`: The Amazon Web Services KMS key identifier for an encrypted read replica.
  The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name
  for the Amazon Web Services KMS CMK. If you create an encrypted read replica in the same
  Amazon Web Services Region as the source DB instance, then do not specify a value for this
  parameter. A read replica in the same Region is always encrypted with the same Amazon Web
  Services KMS CMK as the source DB instance. If you create an encrypted read replica in a
  different Amazon Web Services Region, then you must specify a Amazon Web Services KMS key
  identifier for the destination Amazon Web Services Region. Amazon Web Services KMS CMKs are
  specific to the Amazon Web Services Region that they are created in, and you can't use CMKs
  from one Amazon Web Services Region in another Amazon Web Services Region. You can't create
  an encrypted read replica from an unencrypted DB instance.
- `"MaxAllocatedStorage"`: The upper limit in gibibytes (GiB) to which Amazon RDS can
  automatically scale the storage of the DB instance. For more information about this
  setting, including limitations that apply to it, see  Managing capacity automatically with
  Amazon RDS storage autoscaling in the Amazon RDS User Guide.
- `"MonitoringInterval"`: The interval, in seconds, between points when Enhanced Monitoring
  metrics are collected for the read replica. To disable collecting Enhanced Monitoring
  metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also
  set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60
- `"MonitoringRoleArn"`: The ARN for the IAM role that permits RDS to send enhanced
  monitoring metrics to Amazon CloudWatch Logs. For example,
  arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go
  to To create an IAM role for Amazon RDS Enhanced Monitoring in the Amazon RDS User Guide.
  If MonitoringInterval is set to a value other than 0, then you must supply a
  MonitoringRoleArn value.
- `"MultiAZ"`: A value that indicates whether the read replica is in a Multi-AZ deployment.
   You can create a read replica as a Multi-AZ DB instance. RDS creates a standby of your
  replica in another Availability Zone for failover support for the replica. Creating your
  read replica as a Multi-AZ DB instance is independent of whether the source database is a
  Multi-AZ DB instance.
- `"OptionGroupName"`: The option group the DB instance is associated with. If omitted, the
  option group associated with the source instance is used.  For SQL Server, you must use the
  option group associated with the source instance.
- `"PerformanceInsightsKMSKeyId"`: The Amazon Web Services KMS key identifier for
  encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the
  key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master
  key (CMK). If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS
  uses your default CMK. There is a default CMK for your Amazon Web Services account. Your
  Amazon Web Services account has a different default CMK for each Amazon Web Services Region.
- `"PerformanceInsightsRetentionPeriod"`: The amount of time, in days, to retain
  Performance Insights data. Valid values are 7 or 731 (2 years).
- `"Port"`: The port number that the DB instance uses for connections. Default: Inherits
  from the source DB instance Valid Values: 1150-65535
- `"PreSignedUrl"`: The URL that contains a Signature Version 4 signed request for the
  CreateDBInstanceReadReplica API action in the source Amazon Web Services Region that
  contains the source DB instance.  You must specify this parameter when you create an
  encrypted read replica from another Amazon Web Services Region by using the Amazon RDS API.
  Don't specify PreSignedUrl when you are creating an encrypted read replica in the same
  Amazon Web Services Region. The presigned URL must be a valid request for the
  CreateDBInstanceReadReplica API action that can be executed in the source Amazon Web
  Services Region that contains the encrypted source DB instance. The presigned URL request
  must contain the following parameter values:     DestinationRegion - The Amazon Web
  Services Region that the encrypted read replica is created in. This Amazon Web Services
  Region is the same one where the CreateDBInstanceReadReplica action is called that contains
  this presigned URL. For example, if you create an encrypted DB instance in the us-west-1
  Amazon Web Services Region, from a source DB instance in the us-east-2 Amazon Web Services
  Region, then you call the CreateDBInstanceReadReplica action in the us-east-1 Amazon Web
  Services Region and provide a presigned URL that contains a call to the
  CreateDBInstanceReadReplica action in the us-west-2 Amazon Web Services Region. For this
  example, the DestinationRegion in the presigned URL must be set to the us-east-1 Amazon Web
  Services Region.     KmsKeyId - The Amazon Web Services KMS key identifier for the key to
  use to encrypt the read replica in the destination Amazon Web Services Region. This is the
  same identifier for both the CreateDBInstanceReadReplica action that is called in the
  destination Amazon Web Services Region, and the action contained in the presigned URL.
  SourceDBInstanceIdentifier - The DB instance identifier for the encrypted DB instance to be
  replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source
  Amazon Web Services Region. For example, if you are creating an encrypted read replica from
  a DB instance in the us-west-2 Amazon Web Services Region, then your
  SourceDBInstanceIdentifier looks like the following example:
  arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115.    To learn how to
  generate a Signature Version 4 signed request, see Authenticating Requests: Using Query
  Parameters (Amazon Web Services Signature Version 4) and Signature Version 4 Signing
  Process.   If you are using an Amazon Web Services SDK tool or the CLI, you can specify
  SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl manually.
  Specifying SourceRegion autogenerates a presigned URL that is a valid request for the
  operation that can be executed in the source Amazon Web Services Region.  SourceRegion
  isn't supported for SQL Server, because SQL Server on Amazon RDS doesn't support
  cross-region read replicas. If you supply a value for this operation's SourceRegion
  parameter, a pre-signed URL will be calculated on your behalf.
- `"ProcessorFeatures"`: The number of CPU cores and the number of threads per core for the
  DB instance class of the DB instance.
- `"PubliclyAccessible"`: A value that indicates whether the DB instance is publicly
  accessible. When the DB instance is publicly accessible, its DNS endpoint resolves to the
  private IP address from within the DB instance's VPC, and to the public IP address from
  outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the
  security group it uses, and that public access is not permitted if the security group
  assigned to the DB instance doesn't permit it. When the DB instance isn't publicly
  accessible, it is an internal DB instance with a DNS name that resolves to a private IP
  address. For more information, see CreateDBInstance.
- `"ReplicaMode"`: The open mode of the replica database: mounted or read-only.  This
  parameter is only supported for Oracle DB instances.  Mounted DB replicas are included in
  Oracle Enterprise Edition. The main use case for mounted replicas is cross-Region disaster
  recovery. The primary database doesn't use Active Data Guard to transmit information to the
  mounted replica. Because it doesn't accept user connections, a mounted replica can't serve
  a read-only workload. You can create a combination of mounted and read-only DB replicas for
  the same primary DB instance. For more information, see Working with Oracle Read Replicas
  for Amazon RDS in the Amazon RDS User Guide.
- `"SourceRegion"`: The ID of the region that contains the source for the read replica.
- `"StorageType"`: Specifies the storage type to be associated with the read replica.
  Valid values: standard | gp2 | io1   If you specify io1, you must also include a value for
  the Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise gp2
- `"Tags"`:
- `"UseDefaultProcessorFeatures"`: A value that indicates whether the DB instance class of
  the DB instance uses its default processor features.
- `"VpcSecurityGroupIds"`:  A list of EC2 VPC security groups to associate with the read
  replica.   Default: The default EC2 VPC security group for the DB subnet group's VPC.
"""
function create_dbinstance_read_replica(
    DBInstanceIdentifier,
    SourceDBInstanceIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBInstanceReadReplica",
        Dict{String,Any}(
            "DBInstanceIdentifier" => DBInstanceIdentifier,
            "SourceDBInstanceIdentifier" => SourceDBInstanceIdentifier,
        );
        aws_config=aws_config,
    )
end
function create_dbinstance_read_replica(
    DBInstanceIdentifier,
    SourceDBInstanceIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBInstanceReadReplica",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBInstanceIdentifier" => DBInstanceIdentifier,
                    "SourceDBInstanceIdentifier" => SourceDBInstanceIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_dbparameter_group(dbparameter_group_family, dbparameter_group_name, description)
    create_dbparameter_group(dbparameter_group_family, dbparameter_group_name, description, params::Dict{String,<:Any})

Creates a new DB parameter group.  A DB parameter group is initially created with the
default parameters for the database engine used by the DB instance. To provide custom
values for any of the parameters, you must modify the group after creating it using
ModifyDBParameterGroup. Once you've created a DB parameter group, you need to associate it
with your DB instance using ModifyDBInstance. When you associate a new DB parameter group
with a running DB instance, you need to reboot the DB instance without failover for the new
DB parameter group and associated settings to take effect.   After you create a DB
parameter group, you should wait at least 5 minutes before creating your first DB instance
that uses that DB parameter group as the default parameter group. This allows Amazon RDS to
fully complete the create action before the parameter group is used as the default for a
new DB instance. This is especially important for parameters that are critical when
creating the default database for a DB instance, such as the character set for the default
database defined by the character_set_database parameter. You can use the Parameter Groups
option of the Amazon RDS console or the DescribeDBParameters command to verify that your DB
parameter group has been created or modified.

# Arguments
- `dbparameter_group_family`: The DB parameter group family name. A DB parameter group can
  be associated with one and only one DB parameter group family, and can be applied only to a
  DB instance running a database engine and engine version compatible with that DB parameter
  group family. To list all of the available parameter group families for a DB engine, use
  the following command:  aws rds describe-db-engine-versions --query
  \"DBEngineVersions[].DBParameterGroupFamily\" --engine &lt;engine&gt;  For example, to list
  all of the available parameter group families for the MySQL DB engine, use the following
  command:  aws rds describe-db-engine-versions --query
  \"DBEngineVersions[].DBParameterGroupFamily\" --engine mysql   The output contains
  duplicates.  The following are the valid DB engine values:    aurora (for MySQL
  5.6-compatible Aurora)    aurora-mysql (for MySQL 5.7-compatible Aurora)
  aurora-postgresql     mariadb     mysql     oracle-ee     oracle-ee-cdb     oracle-se2
  oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex
  sqlserver-web
- `dbparameter_group_name`: The name of the DB parameter group. Constraints:   Must be 1 to
  255 letters, numbers, or hyphens.   First character must be a letter   Can't end with a
  hyphen or contain two consecutive hyphens    This value is stored as a lowercase string.
- `description`: The description for the DB parameter group.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`: Tags to assign to the DB parameter group.
"""
function create_dbparameter_group(
    DBParameterGroupFamily,
    DBParameterGroupName,
    Description;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBParameterGroup",
        Dict{String,Any}(
            "DBParameterGroupFamily" => DBParameterGroupFamily,
            "DBParameterGroupName" => DBParameterGroupName,
            "Description" => Description,
        );
        aws_config=aws_config,
    )
end
function create_dbparameter_group(
    DBParameterGroupFamily,
    DBParameterGroupName,
    Description,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBParameterGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBParameterGroupFamily" => DBParameterGroupFamily,
                    "DBParameterGroupName" => DBParameterGroupName,
                    "Description" => Description,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_dbproxy(auth, dbproxy_name, engine_family, role_arn, vpc_subnet_ids)
    create_dbproxy(auth, dbproxy_name, engine_family, role_arn, vpc_subnet_ids, params::Dict{String,<:Any})

Creates a new DB proxy.

# Arguments
- `auth`: The authorization mechanism that the proxy uses.
- `dbproxy_name`: The identifier for the proxy. This name must be unique for all proxies
  owned by your Amazon Web Services account in the specified Amazon Web Services Region. An
  identifier must begin with a letter and must contain only ASCII letters, digits, and
  hyphens; it can't end with a hyphen or contain two consecutive hyphens.
- `engine_family`: The kinds of databases that the proxy can connect to. This value
  determines which database network protocol the proxy recognizes when it interprets network
  traffic to and from the database. The engine family applies to MySQL and PostgreSQL for
  both RDS and Aurora.
- `role_arn`: The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access
  secrets in Amazon Web Services Secrets Manager.
- `vpc_subnet_ids`: One or more VPC subnet IDs to associate with the new proxy.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DebugLogging"`: Whether the proxy includes detailed information about SQL statements in
  its logs. This information helps you to debug issues involving SQL behavior or the
  performance and scalability of the proxy connections. The debug information includes the
  text of SQL statements that you submit through the proxy. Thus, only enable this setting
  when needed for debugging, and only when you have security measures in place to safeguard
  any sensitive information that appears in the logs.
- `"IdleClientTimeout"`: The number of seconds that a connection to the proxy can be
  inactive before the proxy disconnects it. You can set this value higher or lower than the
  connection timeout limit for the associated database.
- `"RequireTLS"`: A Boolean parameter that specifies whether Transport Layer Security (TLS)
  encryption is required for connections to the proxy. By enabling this setting, you can
  enforce encrypted TLS connections to the proxy.
- `"Tags"`: An optional set of key-value pairs to associate arbitrary data of your choosing
  with the proxy.
- `"VpcSecurityGroupIds"`: One or more VPC security group IDs to associate with the new
  proxy.
"""
function create_dbproxy(
    Auth,
    DBProxyName,
    EngineFamily,
    RoleArn,
    VpcSubnetIds;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBProxy",
        Dict{String,Any}(
            "Auth" => Auth,
            "DBProxyName" => DBProxyName,
            "EngineFamily" => EngineFamily,
            "RoleArn" => RoleArn,
            "VpcSubnetIds" => VpcSubnetIds,
        );
        aws_config=aws_config,
    )
end
function create_dbproxy(
    Auth,
    DBProxyName,
    EngineFamily,
    RoleArn,
    VpcSubnetIds,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBProxy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Auth" => Auth,
                    "DBProxyName" => DBProxyName,
                    "EngineFamily" => EngineFamily,
                    "RoleArn" => RoleArn,
                    "VpcSubnetIds" => VpcSubnetIds,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_dbproxy_endpoint(dbproxy_endpoint_name, dbproxy_name, vpc_subnet_ids)
    create_dbproxy_endpoint(dbproxy_endpoint_name, dbproxy_name, vpc_subnet_ids, params::Dict{String,<:Any})

 Creates a DBProxyEndpoint. Only applies to proxies that are associated with Aurora DB
clusters. You can use DB proxy endpoints to specify read/write or read-only access to the
DB cluster. You can also use DB proxy endpoints to access a DB proxy through a different
VPC than the proxy's default VPC.

# Arguments
- `dbproxy_endpoint_name`: The name of the DB proxy endpoint to create.
- `dbproxy_name`: The name of the DB proxy associated with the DB proxy endpoint that you
  create.
- `vpc_subnet_ids`: The VPC subnet IDs for the DB proxy endpoint that you create. You can
  specify a different set of subnet IDs than for the original DB proxy.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`:
- `"TargetRole"`: A value that indicates whether the DB proxy endpoint can be used for
  read/write or read-only operations. The default is READ_WRITE.
- `"VpcSecurityGroupIds"`: The VPC security group IDs for the DB proxy endpoint that you
  create. You can specify a different set of security group IDs than for the original DB
  proxy. The default is the default security group for the VPC.
"""
function create_dbproxy_endpoint(
    DBProxyEndpointName,
    DBProxyName,
    VpcSubnetIds;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBProxyEndpoint",
        Dict{String,Any}(
            "DBProxyEndpointName" => DBProxyEndpointName,
            "DBProxyName" => DBProxyName,
            "VpcSubnetIds" => VpcSubnetIds,
        );
        aws_config=aws_config,
    )
end
function create_dbproxy_endpoint(
    DBProxyEndpointName,
    DBProxyName,
    VpcSubnetIds,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBProxyEndpoint",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBProxyEndpointName" => DBProxyEndpointName,
                    "DBProxyName" => DBProxyName,
                    "VpcSubnetIds" => VpcSubnetIds,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_dbsecurity_group(dbsecurity_group_description, dbsecurity_group_name)
    create_dbsecurity_group(dbsecurity_group_description, dbsecurity_group_name, params::Dict{String,<:Any})

Creates a new DB security group. DB security groups control access to a DB instance.  A DB
security group controls access to EC2-Classic DB instances that are not in a VPC.

# Arguments
- `dbsecurity_group_description`: The description for the DB security group.
- `dbsecurity_group_name`: The name for the DB security group. This value is stored as a
  lowercase string. Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First
  character must be a letter   Can't end with a hyphen or contain two consecutive hyphens
  Must not be \"Default\"   Example: mysecuritygroup

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`: Tags to assign to the DB security group.
"""
function create_dbsecurity_group(
    DBSecurityGroupDescription,
    DBSecurityGroupName;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBSecurityGroup",
        Dict{String,Any}(
            "DBSecurityGroupDescription" => DBSecurityGroupDescription,
            "DBSecurityGroupName" => DBSecurityGroupName,
        );
        aws_config=aws_config,
    )
end
function create_dbsecurity_group(
    DBSecurityGroupDescription,
    DBSecurityGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBSecurityGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBSecurityGroupDescription" => DBSecurityGroupDescription,
                    "DBSecurityGroupName" => DBSecurityGroupName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_dbsnapshot(dbinstance_identifier, dbsnapshot_identifier)
    create_dbsnapshot(dbinstance_identifier, dbsnapshot_identifier, params::Dict{String,<:Any})

Creates a snapshot of a DB instance. The source DB instance must be in the available or
storage-optimization state.

# Arguments
- `dbinstance_identifier`: The identifier of the DB instance that you want to create the
  snapshot of. Constraints:   Must match the identifier of an existing DBInstance.
- `dbsnapshot_identifier`: The identifier for the DB snapshot. Constraints:   Can't be
  null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First
  character must be a letter   Can't end with a hyphen or contain two consecutive hyphens
  Example: my-snapshot-id

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`:
"""
function create_dbsnapshot(
    DBInstanceIdentifier,
    DBSnapshotIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBSnapshot",
        Dict{String,Any}(
            "DBInstanceIdentifier" => DBInstanceIdentifier,
            "DBSnapshotIdentifier" => DBSnapshotIdentifier,
        );
        aws_config=aws_config,
    )
end
function create_dbsnapshot(
    DBInstanceIdentifier,
    DBSnapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBSnapshot",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBInstanceIdentifier" => DBInstanceIdentifier,
                    "DBSnapshotIdentifier" => DBSnapshotIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_dbsubnet_group(dbsubnet_group_description, dbsubnet_group_name, subnet_identifier)
    create_dbsubnet_group(dbsubnet_group_description, dbsubnet_group_name, subnet_identifier, params::Dict{String,<:Any})

Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at
least two AZs in the Amazon Web Services Region.

# Arguments
- `dbsubnet_group_description`: The description for the DB subnet group.
- `dbsubnet_group_name`: The name for the DB subnet group. This value is stored as a
  lowercase string. Constraints: Must contain no more than 255 letters, numbers, periods,
  underscores, spaces, or hyphens. Must not be default. Example: mySubnetgroup
- `subnet_identifier`: The EC2 Subnet IDs for the DB subnet group.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"SubnetIds"`: The EC2 Subnet IDs for the DB subnet group.
- `"Tags"`: Tags to assign to the DB subnet group.
"""
function create_dbsubnet_group(
    DBSubnetGroupDescription,
    DBSubnetGroupName,
    SubnetIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBSubnetGroup",
        Dict{String,Any}(
            "DBSubnetGroupDescription" => DBSubnetGroupDescription,
            "DBSubnetGroupName" => DBSubnetGroupName,
            "SubnetIdentifier" => SubnetIdentifier,
        );
        aws_config=aws_config,
    )
end
function create_dbsubnet_group(
    DBSubnetGroupDescription,
    DBSubnetGroupName,
    SubnetIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateDBSubnetGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBSubnetGroupDescription" => DBSubnetGroupDescription,
                    "DBSubnetGroupName" => DBSubnetGroupName,
                    "SubnetIdentifier" => SubnetIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_event_subscription(sns_topic_arn, subscription_name)
    create_event_subscription(sns_topic_arn, subscription_name, params::Dict{String,<:Any})

Creates an RDS event notification subscription. This action requires a topic Amazon
Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To
obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic.
The ARN is displayed in the SNS console. You can specify the type of source (SourceType)
that you want to be notified of and provide a list of RDS sources (SourceIds) that triggers
the events. You can also provide a list of event categories (EventCategories) for events
that you want to be notified of. For example, you can specify SourceType = db-instance,
SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup. If you
specify both the SourceType and SourceIds, such as SourceType = db-instance and
SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the
specified source. If you specify a SourceType but do not specify a SourceIdentifier, you
receive notice of the events for that source type for all your RDS sources. If you don't
specify either the SourceType or the SourceIdentifier, you are notified of events generated
from all RDS sources belonging to your customer account.  RDS event notification is only
available for unencrypted SNS topics. If you specify an encrypted SNS topic, event
notifications aren't sent for the topic.

# Arguments
- `sns_topic_arn`: The Amazon Resource Name (ARN) of the SNS topic created for event
  notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
- `subscription_name`: The name of the subscription. Constraints: The name must be less
  than 255 characters.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Enabled"`:  A value that indicates whether to activate the subscription. If the event
  notification subscription isn't activated, the subscription is created but not active.
- `"EventCategories"`:  A list of event categories for a particular source type
  (SourceType) that you want to subscribe to. You can see a list of the categories for a
  given source type in Events in the Amazon RDS User Guide or by using the
  DescribeEventCategories operation.
- `"SourceIds"`: The list of identifiers of the event sources for which events are
  returned. If not specified, then all sources are included in the response. An identifier
  must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't
  end with a hyphen or contain two consecutive hyphens. Constraints:   If SourceIds are
  supplied, SourceType must also be provided.   If the source type is a DB instance, a
  DBInstanceIdentifier value must be supplied.   If the source type is a DB cluster, a
  DBClusterIdentifier value must be supplied.   If the source type is a DB parameter group, a
  DBParameterGroupName value must be supplied.   If the source type is a DB security group, a
  DBSecurityGroupName value must be supplied.   If the source type is a DB snapshot, a
  DBSnapshotIdentifier value must be supplied.   If the source type is a DB cluster snapshot,
  a DBClusterSnapshotIdentifier value must be supplied.
- `"SourceType"`: The type of source that is generating the events. For example, if you
  want to be notified of events generated by a DB instance, you set this parameter to
  db-instance. If this value isn't specified, all events are returned. Valid values:
  db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot |
  db-cluster-snapshot
- `"Tags"`:
"""
function create_event_subscription(
    SnsTopicArn, SubscriptionName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "CreateEventSubscription",
        Dict{String,Any}(
            "SnsTopicArn" => SnsTopicArn, "SubscriptionName" => SubscriptionName
        );
        aws_config=aws_config,
    )
end
function create_event_subscription(
    SnsTopicArn,
    SubscriptionName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateEventSubscription",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "SnsTopicArn" => SnsTopicArn, "SubscriptionName" => SubscriptionName
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_global_cluster()
    create_global_cluster(params::Dict{String,<:Any})

 Creates an Aurora global database spread across multiple Amazon Web Services Regions. The
global database contains a single primary cluster with read-write capability, and a
read-only secondary cluster that receives data from the primary cluster through high-speed
replication performed by the Aurora storage subsystem.   You can create a global database
that is initially empty, and then add a primary cluster and a secondary cluster to it. Or
you can specify an existing Aurora cluster during the create operation, and this cluster
becomes the primary cluster of the global database.   This action only applies to Aurora DB
clusters.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DatabaseName"`:  The name for your database of up to 64 alpha-numeric characters. If
  you do not provide a name, Amazon Aurora will not create a database in the global database
  cluster you are creating.
- `"DeletionProtection"`:  The deletion protection setting for the new global database. The
  global database can't be deleted when deletion protection is enabled.
- `"Engine"`: The name of the database engine to be used for this DB cluster.
- `"EngineVersion"`: The engine version of the Aurora global database.
- `"GlobalClusterIdentifier"`: The cluster identifier of the new global database cluster.
- `"SourceDBClusterIdentifier"`:  The Amazon Resource Name (ARN) to use as the primary
  cluster of the global database. This parameter is optional.
- `"StorageEncrypted"`:  The storage encryption setting for the new global database
  cluster.
"""
function create_global_cluster(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("CreateGlobalCluster"; aws_config=aws_config)
end
function create_global_cluster(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("CreateGlobalCluster", params; aws_config=aws_config)
end

"""
    create_option_group(engine_name, major_engine_version, option_group_description, option_group_name)
    create_option_group(engine_name, major_engine_version, option_group_description, option_group_name, params::Dict{String,<:Any})

Creates a new option group. You can create up to 20 option groups.

# Arguments
- `engine_name`: Specifies the name of the engine that this option group should be
  associated with. Valid Values:     mariadb     mysql     oracle-ee     oracle-ee-cdb
  oracle-se2     oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se
  sqlserver-ex     sqlserver-web
- `major_engine_version`: Specifies the major version of the engine that this option group
  should be associated with.
- `option_group_description`: The description of the option group.
- `option_group_name`: Specifies the name of the option group to be created. Constraints:
  Must be 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't
  end with a hyphen or contain two consecutive hyphens   Example: myoptiongroup

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`: Tags to assign to the option group.
"""
function create_option_group(
    EngineName,
    MajorEngineVersion,
    OptionGroupDescription,
    OptionGroupName;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateOptionGroup",
        Dict{String,Any}(
            "EngineName" => EngineName,
            "MajorEngineVersion" => MajorEngineVersion,
            "OptionGroupDescription" => OptionGroupDescription,
            "OptionGroupName" => OptionGroupName,
        );
        aws_config=aws_config,
    )
end
function create_option_group(
    EngineName,
    MajorEngineVersion,
    OptionGroupDescription,
    OptionGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "CreateOptionGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "EngineName" => EngineName,
                    "MajorEngineVersion" => MajorEngineVersion,
                    "OptionGroupDescription" => OptionGroupDescription,
                    "OptionGroupName" => OptionGroupName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_custom_availability_zone(custom_availability_zone_id)
    delete_custom_availability_zone(custom_availability_zone_id, params::Dict{String,<:Any})

Deletes a custom Availability Zone (AZ). A custom AZ is an on-premises AZ that is
integrated with a VMware vSphere cluster. For more information about RDS on VMware, see the
 RDS on VMware User Guide.

# Arguments
- `custom_availability_zone_id`: The custom AZ identifier.

"""
function delete_custom_availability_zone(
    CustomAvailabilityZoneId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteCustomAvailabilityZone",
        Dict{String,Any}("CustomAvailabilityZoneId" => CustomAvailabilityZoneId);
        aws_config=aws_config,
    )
end
function delete_custom_availability_zone(
    CustomAvailabilityZoneId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteCustomAvailabilityZone",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("CustomAvailabilityZoneId" => CustomAvailabilityZoneId),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_dbcluster(dbcluster_identifier)
    delete_dbcluster(dbcluster_identifier, params::Dict{String,<:Any})

The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a
DB cluster, all automated backups for that DB cluster are deleted and can't be recovered.
Manual DB cluster snapshots of the specified DB cluster are not deleted.  For more
information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User Guide.
 This action only applies to Aurora DB clusters.

# Arguments
- `dbcluster_identifier`: The DB cluster identifier for the DB cluster to be deleted. This
  parameter isn't case-sensitive. Constraints:   Must match an existing DBClusterIdentifier.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"FinalDBSnapshotIdentifier"`:  The DB cluster snapshot identifier of the new DB cluster
  snapshot created when SkipFinalSnapshot is disabled.    Specifying this parameter and also
  skipping the creation of a final DB cluster snapshot with the SkipFinalShapshot parameter
  results in an error.  Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First
  character must be a letter   Can't end with a hyphen or contain two consecutive hyphens
- `"SkipFinalSnapshot"`: A value that indicates whether to skip the creation of a final DB
  cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster
  snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the
  DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is
  created. By default, this parameter is disabled.  You must specify a
  FinalDBSnapshotIdentifier parameter if SkipFinalSnapshot is disabled.
"""
function delete_dbcluster(
    DBClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteDBCluster",
        Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier);
        aws_config=aws_config,
    )
end
function delete_dbcluster(
    DBClusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteDBCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_dbcluster_endpoint(dbcluster_endpoint_identifier)
    delete_dbcluster_endpoint(dbcluster_endpoint_identifier, params::Dict{String,<:Any})

Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.  This action
only applies to Aurora DB clusters.

# Arguments
- `dbcluster_endpoint_identifier`: The identifier associated with the custom endpoint. This
  parameter is stored as a lowercase string.

"""
function delete_dbcluster_endpoint(
    DBClusterEndpointIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteDBClusterEndpoint",
        Dict{String,Any}("DBClusterEndpointIdentifier" => DBClusterEndpointIdentifier);
        aws_config=aws_config,
    )
end
function delete_dbcluster_endpoint(
    DBClusterEndpointIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteDBClusterEndpoint",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterEndpointIdentifier" => DBClusterEndpointIdentifier
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_dbcluster_parameter_group(dbcluster_parameter_group_name)
    delete_dbcluster_parameter_group(dbcluster_parameter_group_name, params::Dict{String,<:Any})

Deletes a specified DB cluster parameter group. The DB cluster parameter group to be
deleted can't be associated with any DB clusters. For more information on Amazon Aurora,
see  What Is Amazon Aurora? in the Amazon Aurora User Guide.   This action only applies to
Aurora DB clusters.

# Arguments
- `dbcluster_parameter_group_name`: The name of the DB cluster parameter group.
  Constraints:   Must be the name of an existing DB cluster parameter group.   You can't
  delete a default DB cluster parameter group.   Can't be associated with any DB clusters.

"""
function delete_dbcluster_parameter_group(
    DBClusterParameterGroupName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteDBClusterParameterGroup",
        Dict{String,Any}("DBClusterParameterGroupName" => DBClusterParameterGroupName);
        aws_config=aws_config,
    )
end
function delete_dbcluster_parameter_group(
    DBClusterParameterGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteDBClusterParameterGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterParameterGroupName" => DBClusterParameterGroupName
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_dbcluster_snapshot(dbcluster_snapshot_identifier)
    delete_dbcluster_snapshot(dbcluster_snapshot_identifier, params::Dict{String,<:Any})

Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is
terminated.  The DB cluster snapshot must be in the available state to be deleted.  For
more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User
Guide.   This action only applies to Aurora DB clusters.

# Arguments
- `dbcluster_snapshot_identifier`: The identifier of the DB cluster snapshot to delete.
  Constraints: Must be the name of an existing DB cluster snapshot in the available state.

"""
function delete_dbcluster_snapshot(
    DBClusterSnapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteDBClusterSnapshot",
        Dict{String,Any}("DBClusterSnapshotIdentifier" => DBClusterSnapshotIdentifier);
        aws_config=aws_config,
    )
end
function delete_dbcluster_snapshot(
    DBClusterSnapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteDBClusterSnapshot",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterSnapshotIdentifier" => DBClusterSnapshotIdentifier
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_dbinstance(dbinstance_identifier)
    delete_dbinstance(dbinstance_identifier, params::Dict{String,<:Any})

The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a
DB instance, all automated backups for that instance are deleted and can't be recovered.
Manual DB snapshots of the DB instance to be deleted by DeleteDBInstance are not deleted.
If you request a final DB snapshot the status of the Amazon RDS DB instance is deleting
until the DB snapshot is created. The API action DescribeDBInstance is used to monitor the
status of this operation. The action can't be canceled or reverted once submitted.  When a
DB instance is in a failure state and has a status of failed, incompatible-restore, or
incompatible-network, you can only delete it when you skip creation of the final snapshot
with the SkipFinalSnapshot parameter. If the specified DB instance is part of an Amazon
Aurora DB cluster, you can't delete the DB instance if both of the following conditions are
true:   The DB cluster is a read replica of another Amazon Aurora DB cluster.   The DB
instance is the only instance in the DB cluster.   To delete a DB instance in this case,
first call the PromoteReadReplicaDBCluster API action to promote the DB cluster so it's no
longer a read replica. After the promotion completes, then call the DeleteDBInstance API
action to delete the final instance in the DB cluster.

# Arguments
- `dbinstance_identifier`: The DB instance identifier for the DB instance to be deleted.
  This parameter isn't case-sensitive. Constraints:   Must match the name of an existing DB
  instance.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DeleteAutomatedBackups"`: A value that indicates whether to remove automated backups
  immediately after the DB instance is deleted. This parameter isn't case-sensitive. The
  default is to remove automated backups immediately after the DB instance is deleted.
- `"FinalDBSnapshotIdentifier"`:  The DBSnapshotIdentifier of the new DBSnapshot created
  when the SkipFinalSnapshot parameter is disabled.   Specifying this parameter and also
  specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.
  Constraints:   Must be 1 to 255 letters or numbers.   First character must be a letter.
  Can't end with a hyphen or contain two consecutive hyphens.   Can't be specified when
  deleting a read replica.
- `"SkipFinalSnapshot"`: A value that indicates whether to skip the creation of a final DB
  snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is
  created. If skip isn't specified, a DB snapshot is created before the DB instance is
  deleted. By default, skip isn't specified, and the DB snapshot is created. When a DB
  instance is in a failure state and has a status of 'failed', 'incompatible-restore', or
  'incompatible-network', it can only be deleted when skip is specified. Specify skip when
  deleting a read replica.  The FinalDBSnapshotIdentifier parameter must be specified if skip
  isn't specified.
"""
function delete_dbinstance(
    DBInstanceIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteDBInstance",
        Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier);
        aws_config=aws_config,
    )
end
function delete_dbinstance(
    DBInstanceIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteDBInstance",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_dbinstance_automated_backup()
    delete_dbinstance_automated_backup(params::Dict{String,<:Any})

Deletes automated backups using the DbiResourceId value of the source DB instance or the
Amazon Resource Name (ARN) of the automated backups.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBInstanceAutomatedBackupsArn"`: The Amazon Resource Name (ARN) of the automated
  backups to delete, for example,
  arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE.
- `"DbiResourceId"`: The identifier for the source DB instance, which can't be changed and
  which is unique to an Amazon Web Services Region.
"""
function delete_dbinstance_automated_backup(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DeleteDBInstanceAutomatedBackup"; aws_config=aws_config)
end
function delete_dbinstance_automated_backup(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DeleteDBInstanceAutomatedBackup", params; aws_config=aws_config)
end

"""
    delete_dbparameter_group(dbparameter_group_name)
    delete_dbparameter_group(dbparameter_group_name, params::Dict{String,<:Any})

Deletes a specified DB parameter group. The DB parameter group to be deleted can't be
associated with any DB instances.

# Arguments
- `dbparameter_group_name`: The name of the DB parameter group. Constraints:   Must be the
  name of an existing DB parameter group   You can't delete a default DB parameter group
  Can't be associated with any DB instances

"""
function delete_dbparameter_group(
    DBParameterGroupName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteDBParameterGroup",
        Dict{String,Any}("DBParameterGroupName" => DBParameterGroupName);
        aws_config=aws_config,
    )
end
function delete_dbparameter_group(
    DBParameterGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteDBParameterGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBParameterGroupName" => DBParameterGroupName),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_dbproxy(dbproxy_name)
    delete_dbproxy(dbproxy_name, params::Dict{String,<:Any})

Deletes an existing DB proxy.

# Arguments
- `dbproxy_name`: The name of the DB proxy to delete.

"""
function delete_dbproxy(DBProxyName; aws_config::AbstractAWSConfig=global_aws_config())
    return rds(
        "DeleteDBProxy",
        Dict{String,Any}("DBProxyName" => DBProxyName);
        aws_config=aws_config,
    )
end
function delete_dbproxy(
    DBProxyName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteDBProxy",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("DBProxyName" => DBProxyName), params)
        );
        aws_config=aws_config,
    )
end

"""
    delete_dbproxy_endpoint(dbproxy_endpoint_name)
    delete_dbproxy_endpoint(dbproxy_endpoint_name, params::Dict{String,<:Any})

Deletes a DBProxyEndpoint. Doing so removes the ability to access the DB proxy using the
endpoint that you defined. The endpoint that you delete might have provided capabilities
such as read/write or read-only operations, or using a different VPC than the DB proxy's
default VPC.

# Arguments
- `dbproxy_endpoint_name`: The name of the DB proxy endpoint to delete.

"""
function delete_dbproxy_endpoint(
    DBProxyEndpointName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteDBProxyEndpoint",
        Dict{String,Any}("DBProxyEndpointName" => DBProxyEndpointName);
        aws_config=aws_config,
    )
end
function delete_dbproxy_endpoint(
    DBProxyEndpointName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteDBProxyEndpoint",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBProxyEndpointName" => DBProxyEndpointName),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_dbsecurity_group(dbsecurity_group_name)
    delete_dbsecurity_group(dbsecurity_group_name, params::Dict{String,<:Any})

Deletes a DB security group.  The specified DB security group must not be associated with
any DB instances.

# Arguments
- `dbsecurity_group_name`: The name of the DB security group to delete.  You can't delete
  the default DB security group.  Constraints:   Must be 1 to 255 letters, numbers, or
  hyphens.   First character must be a letter   Can't end with a hyphen or contain two
  consecutive hyphens   Must not be \"Default\"

"""
function delete_dbsecurity_group(
    DBSecurityGroupName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteDBSecurityGroup",
        Dict{String,Any}("DBSecurityGroupName" => DBSecurityGroupName);
        aws_config=aws_config,
    )
end
function delete_dbsecurity_group(
    DBSecurityGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteDBSecurityGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBSecurityGroupName" => DBSecurityGroupName),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_dbsnapshot(dbsnapshot_identifier)
    delete_dbsnapshot(dbsnapshot_identifier, params::Dict{String,<:Any})

Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.
The DB snapshot must be in the available state to be deleted.

# Arguments
- `dbsnapshot_identifier`: The DB snapshot identifier. Constraints: Must be the name of an
  existing DB snapshot in the available state.

"""
function delete_dbsnapshot(
    DBSnapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteDBSnapshot",
        Dict{String,Any}("DBSnapshotIdentifier" => DBSnapshotIdentifier);
        aws_config=aws_config,
    )
end
function delete_dbsnapshot(
    DBSnapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteDBSnapshot",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBSnapshotIdentifier" => DBSnapshotIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_dbsubnet_group(dbsubnet_group_name)
    delete_dbsubnet_group(dbsubnet_group_name, params::Dict{String,<:Any})

Deletes a DB subnet group.  The specified database subnet group must not be associated with
any DB instances.

# Arguments
- `dbsubnet_group_name`: The name of the database subnet group to delete.  You can't delete
  the default subnet group.  Constraints: Constraints: Must match the name of an existing
  DBSubnetGroup. Must not be default. Example: mySubnetgroup

"""
function delete_dbsubnet_group(
    DBSubnetGroupName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteDBSubnetGroup",
        Dict{String,Any}("DBSubnetGroupName" => DBSubnetGroupName);
        aws_config=aws_config,
    )
end
function delete_dbsubnet_group(
    DBSubnetGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteDBSubnetGroup",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("DBSubnetGroupName" => DBSubnetGroupName), params
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_event_subscription(subscription_name)
    delete_event_subscription(subscription_name, params::Dict{String,<:Any})

Deletes an RDS event notification subscription.

# Arguments
- `subscription_name`: The name of the RDS event notification subscription you want to
  delete.

"""
function delete_event_subscription(
    SubscriptionName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteEventSubscription",
        Dict{String,Any}("SubscriptionName" => SubscriptionName);
        aws_config=aws_config,
    )
end
function delete_event_subscription(
    SubscriptionName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteEventSubscription",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("SubscriptionName" => SubscriptionName), params
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_global_cluster(global_cluster_identifier)
    delete_global_cluster(global_cluster_identifier, params::Dict{String,<:Any})

 Deletes a global database cluster. The primary and secondary clusters must already be
detached or destroyed first.   This action only applies to Aurora DB clusters.

# Arguments
- `global_cluster_identifier`:  The cluster identifier of the global database cluster being
  deleted.

"""
function delete_global_cluster(
    GlobalClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteGlobalCluster",
        Dict{String,Any}("GlobalClusterIdentifier" => GlobalClusterIdentifier);
        aws_config=aws_config,
    )
end
function delete_global_cluster(
    GlobalClusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteGlobalCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("GlobalClusterIdentifier" => GlobalClusterIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_installation_media(installation_media_id)
    delete_installation_media(installation_media_id, params::Dict{String,<:Any})

Deletes the installation medium for a DB engine that requires an on-premises customer
provided license, such as Microsoft SQL Server.

# Arguments
- `installation_media_id`: The installation medium ID.

"""
function delete_installation_media(
    InstallationMediaId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteInstallationMedia",
        Dict{String,Any}("InstallationMediaId" => InstallationMediaId);
        aws_config=aws_config,
    )
end
function delete_installation_media(
    InstallationMediaId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteInstallationMedia",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("InstallationMediaId" => InstallationMediaId),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_option_group(option_group_name)
    delete_option_group(option_group_name, params::Dict{String,<:Any})

Deletes an existing option group.

# Arguments
- `option_group_name`: The name of the option group to be deleted.  You can't delete
  default option groups.

"""
function delete_option_group(
    OptionGroupName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeleteOptionGroup",
        Dict{String,Any}("OptionGroupName" => OptionGroupName);
        aws_config=aws_config,
    )
end
function delete_option_group(
    OptionGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeleteOptionGroup",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("OptionGroupName" => OptionGroupName), params
            ),
        );
        aws_config=aws_config,
    )
end

"""
    deregister_dbproxy_targets(dbproxy_name)
    deregister_dbproxy_targets(dbproxy_name, params::Dict{String,<:Any})

Remove the association between one or more DBProxyTarget data structures and a
DBProxyTargetGroup.

# Arguments
- `dbproxy_name`: The identifier of the DBProxy that is associated with the
  DBProxyTargetGroup.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBClusterIdentifiers"`: One or more DB cluster identifiers.
- `"DBInstanceIdentifiers"`: One or more DB instance identifiers.
- `"TargetGroupName"`: The identifier of the DBProxyTargetGroup.
"""
function deregister_dbproxy_targets(
    DBProxyName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DeregisterDBProxyTargets",
        Dict{String,Any}("DBProxyName" => DBProxyName);
        aws_config=aws_config,
    )
end
function deregister_dbproxy_targets(
    DBProxyName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DeregisterDBProxyTargets",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("DBProxyName" => DBProxyName), params)
        );
        aws_config=aws_config,
    )
end

"""
    describe_account_attributes()
    describe_account_attributes(params::Dict{String,<:Any})

Lists all of the attributes for a customer account. The attributes include Amazon RDS
quotas for the account, such as the number of DB instances allowed. The description for a
quota includes the quota name, current usage toward that quota, and the quota's maximum
value. This command doesn't take any parameters.

"""
function describe_account_attributes(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeAccountAttributes"; aws_config=aws_config)
end
function describe_account_attributes(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeAccountAttributes", params; aws_config=aws_config)
end

"""
    describe_certificates()
    describe_certificates(params::Dict{String,<:Any})

Lists the set of CA certificates provided by Amazon RDS for this Amazon Web Services
account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CertificateIdentifier"`: The user-supplied certificate identifier. If this parameter is
  specified, information for only the identified certificate is returned. This parameter
  isn't case-sensitive. Constraints:   Must match an existing CertificateIdentifier.
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`:  An optional pagination token provided by a previous DescribeCertificates
  request. If this parameter is specified, the response includes only records beyond the
  marker, up to the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
"""
function describe_certificates(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeCertificates"; aws_config=aws_config)
end
function describe_certificates(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeCertificates", params; aws_config=aws_config)
end

"""
    describe_custom_availability_zones()
    describe_custom_availability_zones(params::Dict{String,<:Any})

Returns information about custom Availability Zones (AZs). A custom AZ is an on-premises AZ
that is integrated with a VMware vSphere cluster. For more information about RDS on VMware,
see the  RDS on VMware User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CustomAvailabilityZoneId"`: The custom AZ identifier. If this parameter is specified,
  information from only the specific custom AZ is returned.
- `"Filters"`: A filter that specifies one or more custom AZs to describe.
- `"Marker"`: An optional pagination token provided by a previous
  DescribeCustomAvailabilityZones request. If this parameter is specified, the response
  includes only records beyond the marker, up to the value specified by MaxRecords.
- `"MaxRecords"`: The maximum number of records to include in the response. If more records
  exist than the specified MaxRecords value, a pagination token called a marker is included
  in the response so you can retrieve the remaining results. Default: 100 Constraints:
  Minimum 20, maximum 100.
"""
function describe_custom_availability_zones(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeCustomAvailabilityZones"; aws_config=aws_config)
end
function describe_custom_availability_zones(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeCustomAvailabilityZones", params; aws_config=aws_config)
end

"""
    describe_dbcluster_backtracks(dbcluster_identifier)
    describe_dbcluster_backtracks(dbcluster_identifier, params::Dict{String,<:Any})

Returns information about backtracks for a DB cluster. For more information on Amazon
Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User Guide.   This action only
applies to Aurora MySQL DB clusters.

# Arguments
- `dbcluster_identifier`: The DB cluster identifier of the DB cluster to be described. This
  parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63
  alphanumeric characters or hyphens.   First character must be a letter.   Can't end with a
  hyphen or contain two consecutive hyphens.   Example: my-cluster1

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"BacktrackIdentifier"`: If specified, this value is the backtrack identifier of the
  backtrack to be described. Constraints:   Must contain a valid universally unique
  identifier (UUID). For more information about UUIDs, see A Universally Unique Identifier
  (UUID) URN Namespace.   Example: 123e4567-e89b-12d3-a456-426655440000
- `"Filters"`: A filter that specifies one or more DB clusters to describe. Supported
  filters include the following:    db-cluster-backtrack-id - Accepts backtrack identifiers.
  The results list includes information about only the backtracks identified by these
  identifiers.    db-cluster-backtrack-status - Accepts any of the following backtrack status
  values:    applying     completed     failed     pending    The results list includes
  information about only the backtracks identified by these values.
- `"Marker"`:  An optional pagination token provided by a previous
  DescribeDBClusterBacktracks request. If this parameter is specified, the response includes
  only records beyond the marker, up to the value specified by MaxRecords.
- `"MaxRecords"`: The maximum number of records to include in the response. If more records
  exist than the specified MaxRecords value, a pagination token called a marker is included
  in the response so you can retrieve the remaining results.  Default: 100 Constraints:
  Minimum 20, maximum 100.
"""
function describe_dbcluster_backtracks(
    DBClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeDBClusterBacktracks",
        Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier);
        aws_config=aws_config,
    )
end
function describe_dbcluster_backtracks(
    DBClusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DescribeDBClusterBacktracks",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_dbcluster_endpoints()
    describe_dbcluster_endpoints(params::Dict{String,<:Any})

Returns information about endpoints for an Amazon Aurora DB cluster.  This action only
applies to Aurora DB clusters.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBClusterEndpointIdentifier"`: The identifier of the endpoint to describe. This
  parameter is stored as a lowercase string.
- `"DBClusterIdentifier"`: The DB cluster identifier of the DB cluster associated with the
  endpoint. This parameter is stored as a lowercase string.
- `"Filters"`: A set of name-value pairs that define which endpoints to include in the
  output. The filters are specified as name-value pairs, in the format
  Name=endpoint_type,Values=endpoint_type1,endpoint_type2,.... Name can be one of:
  db-cluster-endpoint-type, db-cluster-endpoint-custom-type, db-cluster-endpoint-id,
  db-cluster-endpoint-status. Values for the  db-cluster-endpoint-type filter can be one or
  more of: reader, writer, custom. Values for the db-cluster-endpoint-custom-type filter can
  be one or more of: reader, any. Values for the db-cluster-endpoint-status filter can be one
  or more of: available, creating, deleting, inactive, modifying.
- `"Marker"`:  An optional pagination token provided by a previous
  DescribeDBClusterEndpoints request. If this parameter is specified, the response includes
  only records beyond the marker, up to the value specified by MaxRecords.
- `"MaxRecords"`: The maximum number of records to include in the response. If more records
  exist than the specified MaxRecords value, a pagination token called a marker is included
  in the response so you can retrieve the remaining results.  Default: 100 Constraints:
  Minimum 20, maximum 100.
"""
function describe_dbcluster_endpoints(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeDBClusterEndpoints"; aws_config=aws_config)
end
function describe_dbcluster_endpoints(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBClusterEndpoints", params; aws_config=aws_config)
end

"""
    describe_dbcluster_parameter_groups()
    describe_dbcluster_parameter_groups(params::Dict{String,<:Any})

 Returns a list of DBClusterParameterGroup descriptions. If a DBClusterParameterGroupName
parameter is specified, the list will contain only the description of the specified DB
cluster parameter group.  For more information on Amazon Aurora, see  What Is Amazon
Aurora? in the Amazon Aurora User Guide.   This action only applies to Aurora DB clusters.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBClusterParameterGroupName"`: The name of a specific DB cluster parameter group to
  return details for. Constraints:   If supplied, must match the name of an existing
  DBClusterParameterGroup.
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`:  An optional pagination token provided by a previous
  DescribeDBClusterParameterGroups request. If this parameter is specified, the response
  includes only records beyond the marker, up to the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
"""
function describe_dbcluster_parameter_groups(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBClusterParameterGroups"; aws_config=aws_config)
end
function describe_dbcluster_parameter_groups(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBClusterParameterGroups", params; aws_config=aws_config)
end

"""
    describe_dbcluster_parameters(dbcluster_parameter_group_name)
    describe_dbcluster_parameters(dbcluster_parameter_group_name, params::Dict{String,<:Any})

Returns the detailed parameter list for a particular DB cluster parameter group. For more
information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User Guide.
 This action only applies to Aurora DB clusters.

# Arguments
- `dbcluster_parameter_group_name`: The name of a specific DB cluster parameter group to
  return parameter details for. Constraints:   If supplied, must match the name of an
  existing DBClusterParameterGroup.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`:  An optional pagination token provided by a previous
  DescribeDBClusterParameters request. If this parameter is specified, the response includes
  only records beyond the marker, up to the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
- `"Source"`:  A value that indicates to return only parameters for a specific source.
  Parameter sources can be engine, service, or customer.
"""
function describe_dbcluster_parameters(
    DBClusterParameterGroupName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeDBClusterParameters",
        Dict{String,Any}("DBClusterParameterGroupName" => DBClusterParameterGroupName);
        aws_config=aws_config,
    )
end
function describe_dbcluster_parameters(
    DBClusterParameterGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DescribeDBClusterParameters",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterParameterGroupName" => DBClusterParameterGroupName
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_dbcluster_snapshot_attributes(dbcluster_snapshot_identifier)
    describe_dbcluster_snapshot_attributes(dbcluster_snapshot_identifier, params::Dict{String,<:Any})

Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster
snapshot. When sharing snapshots with other Amazon Web Services accounts,
DescribeDBClusterSnapshotAttributes returns the restore attribute and a list of IDs for the
Amazon Web Services accounts that are authorized to copy or restore the manual DB cluster
snapshot. If all is included in the list of values for the restore attribute, then the
manual DB cluster snapshot is public and can be copied or restored by all Amazon Web
Services accounts. To add or remove access for an Amazon Web Services account to copy or
restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or
private, use the ModifyDBClusterSnapshotAttribute API action.  This action only applies to
Aurora DB clusters.

# Arguments
- `dbcluster_snapshot_identifier`: The identifier for the DB cluster snapshot to describe
  the attributes for.

"""
function describe_dbcluster_snapshot_attributes(
    DBClusterSnapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeDBClusterSnapshotAttributes",
        Dict{String,Any}("DBClusterSnapshotIdentifier" => DBClusterSnapshotIdentifier);
        aws_config=aws_config,
    )
end
function describe_dbcluster_snapshot_attributes(
    DBClusterSnapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DescribeDBClusterSnapshotAttributes",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterSnapshotIdentifier" => DBClusterSnapshotIdentifier
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_dbcluster_snapshots()
    describe_dbcluster_snapshots(params::Dict{String,<:Any})

Returns information about DB cluster snapshots. This API action supports pagination. For
more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User
Guide.   This action only applies to Aurora DB clusters.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBClusterIdentifier"`: The ID of the DB cluster to retrieve the list of DB cluster
  snapshots for. This parameter can't be used in conjunction with the
  DBClusterSnapshotIdentifier parameter. This parameter isn't case-sensitive.  Constraints:
  If supplied, must match the identifier of an existing DBCluster.
- `"DBClusterSnapshotIdentifier"`: A specific DB cluster snapshot identifier to describe.
  This parameter can't be used in conjunction with the DBClusterIdentifier parameter. This
  value is stored as a lowercase string.  Constraints:   If supplied, must match the
  identifier of an existing DBClusterSnapshot.   If this identifier is for an automated
  snapshot, the SnapshotType parameter must also be specified.
- `"Filters"`: A filter that specifies one or more DB cluster snapshots to describe.
  Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon
  Resource Names (ARNs).    db-cluster-snapshot-id - Accepts DB cluster snapshot identifiers.
     snapshot-type - Accepts types of DB cluster snapshots.    engine - Accepts names of
  database engines.
- `"IncludePublic"`: A value that indicates whether to include manual DB cluster snapshots
  that are public and can be copied or restored by any Amazon Web Services account. By
  default, the public snapshots are not included. You can share a manual DB cluster snapshot
  as public by using the ModifyDBClusterSnapshotAttribute API action.
- `"IncludeShared"`: A value that indicates whether to include shared manual DB cluster
  snapshots from other Amazon Web Services accounts that this Amazon Web Services account has
  been given permission to copy or restore. By default, these snapshots are not included. You
  can give an Amazon Web Services account permission to restore a manual DB cluster snapshot
  from another Amazon Web Services account by the ModifyDBClusterSnapshotAttribute API action.
- `"Marker"`: An optional pagination token provided by a previous
  DescribeDBClusterSnapshots request. If this parameter is specified, the response includes
  only records beyond the marker, up to the value specified by MaxRecords.
- `"MaxRecords"`: The maximum number of records to include in the response. If more records
  exist than the specified MaxRecords value, a pagination token called a marker is included
  in the response so you can retrieve the remaining results.  Default: 100 Constraints:
  Minimum 20, maximum 100.
- `"SnapshotType"`: The type of DB cluster snapshots to be returned. You can specify one of
  the following values:    automated - Return all DB cluster snapshots that have been
  automatically taken by Amazon RDS for my Amazon Web Services account.    manual - Return
  all DB cluster snapshots that have been taken by my Amazon Web Services account.    shared
  - Return all manual DB cluster snapshots that have been shared to my Amazon Web Services
  account.    public - Return all DB cluster snapshots that have been marked as public.   If
  you don't specify a SnapshotType value, then both automated and manual DB cluster snapshots
  are returned. You can include shared DB cluster snapshots with these results by enabling
  the IncludeShared parameter. You can include public DB cluster snapshots with these results
  by enabling the IncludePublic parameter. The IncludeShared and IncludePublic parameters
  don't apply for SnapshotType values of manual or automated. The IncludePublic parameter
  doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply
  when SnapshotType is set to public.
"""
function describe_dbcluster_snapshots(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeDBClusterSnapshots"; aws_config=aws_config)
end
function describe_dbcluster_snapshots(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBClusterSnapshots", params; aws_config=aws_config)
end

"""
    describe_dbclusters()
    describe_dbclusters(params::Dict{String,<:Any})

Returns information about provisioned Aurora DB clusters. This API supports pagination. For
more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User
Guide.   This operation can also return information for Amazon Neptune DB instances and
Amazon DocumentDB instances.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBClusterIdentifier"`: The user-supplied DB cluster identifier. If this parameter is
  specified, information from only the specific DB cluster is returned. This parameter isn't
  case-sensitive. Constraints:   If supplied, must match an existing DBClusterIdentifier.
- `"Filters"`: A filter that specifies one or more DB clusters to describe. Supported
  filters:    clone-group-id - Accepts clone group identifiers. The results list will only
  include information about the DB clusters associated with these clone groups.
  db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).
  The results list will only include information about the DB clusters identified by these
  ARNs.    domain - Accepts Active Directory directory IDs. The results list will only
  include information about the DB clusters associated with these domains.    engine -
  Accepts engine names. The results list will only include information about the DB clusters
  for these engines.
- `"IncludeShared"`: Optional Boolean parameter that specifies whether the output includes
  information about clusters shared from other Amazon Web Services accounts.
- `"Marker"`: An optional pagination token provided by a previous DescribeDBClusters
  request. If this parameter is specified, the response includes only records beyond the
  marker, up to the value specified by MaxRecords.
- `"MaxRecords"`: The maximum number of records to include in the response. If more records
  exist than the specified MaxRecords value, a pagination token called a marker is included
  in the response so you can retrieve the remaining results.  Default: 100 Constraints:
  Minimum 20, maximum 100.
"""
function describe_dbclusters(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeDBClusters"; aws_config=aws_config)
end
function describe_dbclusters(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBClusters", params; aws_config=aws_config)
end

"""
    describe_dbengine_versions()
    describe_dbengine_versions(params::Dict{String,<:Any})

Returns a list of the available DB engines.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBParameterGroupFamily"`: The name of a specific DB parameter group family to return
  details for. Constraints:   If supplied, must match an existing DBParameterGroupFamily.
- `"DefaultOnly"`: A value that indicates whether only the default version of the specified
  engine or engine and major version combination is returned.
- `"Engine"`: The database engine to return. Valid Values:     aurora (for MySQL
  5.6-compatible Aurora)    aurora-mysql (for MySQL 5.7-compatible Aurora)
  aurora-postgresql     mariadb     mysql     oracle-ee     oracle-ee-cdb     oracle-se2
  oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex
  sqlserver-web
- `"EngineVersion"`: The database engine version to return. Example: 5.1.49
- `"Filters"`: This parameter isn't currently supported.
- `"IncludeAll"`: A value that indicates whether to include engine versions that aren't
  available in the list. The default is to list only available engine versions.
- `"ListSupportedCharacterSets"`: A value that indicates whether to list the supported
  character sets for each engine version. If this parameter is enabled and the requested
  engine supports the CharacterSetName parameter for CreateDBInstance, the response includes
  a list of supported character sets for each engine version.
- `"ListSupportedTimezones"`: A value that indicates whether to list the supported time
  zones for each engine version. If this parameter is enabled and the requested engine
  supports the TimeZone parameter for CreateDBInstance, the response includes a list of
  supported time zones for each engine version.
- `"Marker"`:  An optional pagination token provided by a previous request. If this
  parameter is specified, the response includes only records beyond the marker, up to the
  value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more than
  the MaxRecords value is available, a pagination token called a marker is included in the
  response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20,
  maximum 100.
"""
function describe_dbengine_versions(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeDBEngineVersions"; aws_config=aws_config)
end
function describe_dbengine_versions(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBEngineVersions", params; aws_config=aws_config)
end

"""
    describe_dbinstance_automated_backups()
    describe_dbinstance_automated_backups(params::Dict{String,<:Any})

Displays backups for both current and deleted instances. For example, use this operation to
find details about automated backups for previously deleted instances. Current instances
with retention periods greater than zero (0) are returned for both the
DescribeDBInstanceAutomatedBackups and DescribeDBInstances operations. All parameters are
optional.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBInstanceAutomatedBackupsArn"`: The Amazon Resource Name (ARN) of the replicated
  automated backups, for example,
  arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE.
- `"DBInstanceIdentifier"`: (Optional) The user-supplied instance identifier. If this
  parameter is specified, it must match the identifier of an existing DB instance. It returns
  information from the specific DB instance' automated backup. This parameter isn't
  case-sensitive.
- `"DbiResourceId"`: The resource ID of the DB instance that is the source of the automated
  backup. This parameter isn't case-sensitive.
- `"Filters"`: A filter that specifies which resources to return based on status. Supported
  filters are the following:    status     active - automated backups for current instances
   retained - automated backups for deleted instances and after backup replication is stopped
     creating - automated backups that are waiting for the first automated snapshot to be
  available      db-instance-id - Accepts DB instance identifiers and Amazon Resource Names
  (ARNs). The results list includes only information about the DB instance automated backups
  identified by these ARNs.    dbi-resource-id - Accepts DB resource identifiers and Amazon
  Resource Names (ARNs). The results list includes only information about the DB instance
  resources identified by these ARNs.   Returns all resources by default. The status for each
  resource is specified in the response.
- `"Marker"`: The pagination token provided in the previous request. If this parameter is
  specified the response includes only records beyond the marker, up to MaxRecords.
- `"MaxRecords"`: The maximum number of records to include in the response. If more records
  exist than the specified MaxRecords value, a pagination token called a marker is included
  in the response so that you can retrieve the remaining results.
"""
function describe_dbinstance_automated_backups(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBInstanceAutomatedBackups"; aws_config=aws_config)
end
function describe_dbinstance_automated_backups(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBInstanceAutomatedBackups", params; aws_config=aws_config)
end

"""
    describe_dbinstances()
    describe_dbinstances(params::Dict{String,<:Any})

Returns information about provisioned RDS instances. This API supports pagination.  This
operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB
instances.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBInstanceIdentifier"`: The user-supplied instance identifier. If this parameter is
  specified, information from only the specific DB instance is returned. This parameter isn't
  case-sensitive. Constraints:   If supplied, must match the identifier of an existing
  DBInstance.
- `"Filters"`: A filter that specifies one or more DB instances to describe. Supported
  filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource
  Names (ARNs). The results list will only include information about the DB instances
  associated with the DB clusters identified by these ARNs.    db-instance-id - Accepts DB
  instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will
  only include information about the DB instances identified by these ARNs.
  dbi-resource-id - Accepts DB instance resource identifiers. The results list will only
  include information about the DB instances identified by these DB instance resource
  identifiers.    domain - Accepts Active Directory directory IDs. The results list will only
  include information about the DB instances associated with these domains.    engine -
  Accepts engine names. The results list will only include information about the DB instances
  for these engines.
- `"Marker"`:  An optional pagination token provided by a previous DescribeDBInstances
  request. If this parameter is specified, the response includes only records beyond the
  marker, up to the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
"""
function describe_dbinstances(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeDBInstances"; aws_config=aws_config)
end
function describe_dbinstances(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBInstances", params; aws_config=aws_config)
end

"""
    describe_dblog_files(dbinstance_identifier)
    describe_dblog_files(dbinstance_identifier, params::Dict{String,<:Any})

Returns a list of DB log files for the DB instance.

# Arguments
- `dbinstance_identifier`: The customer-assigned name of the DB instance that contains the
  log files you want to list. Constraints:   Must match the identifier of an existing
  DBInstance.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"FileLastWritten"`: Filters the available log files for files written since the
  specified date, in POSIX timestamp format with milliseconds.
- `"FileSize"`: Filters the available log files for files larger than the specified size.
- `"FilenameContains"`: Filters the available log files for log file names that contain the
  specified string.
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`: The pagination token provided in the previous request. If this parameter is
  specified the response includes only records beyond the marker, up to MaxRecords.
- `"MaxRecords"`: The maximum number of records to include in the response. If more records
  exist than the specified MaxRecords value, a pagination token called a marker is included
  in the response so you can retrieve the remaining results.
"""
function describe_dblog_files(
    DBInstanceIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeDBLogFiles",
        Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier);
        aws_config=aws_config,
    )
end
function describe_dblog_files(
    DBInstanceIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DescribeDBLogFiles",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_dbparameter_groups()
    describe_dbparameter_groups(params::Dict{String,<:Any})

 Returns a list of DBParameterGroup descriptions. If a DBParameterGroupName is specified,
the list will contain only the description of the specified DB parameter group.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBParameterGroupName"`: The name of a specific DB parameter group to return details
  for. Constraints:   If supplied, must match the name of an existing
  DBClusterParameterGroup.
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`:  An optional pagination token provided by a previous
  DescribeDBParameterGroups request. If this parameter is specified, the response includes
  only records beyond the marker, up to the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
"""
function describe_dbparameter_groups(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeDBParameterGroups"; aws_config=aws_config)
end
function describe_dbparameter_groups(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBParameterGroups", params; aws_config=aws_config)
end

"""
    describe_dbparameters(dbparameter_group_name)
    describe_dbparameters(dbparameter_group_name, params::Dict{String,<:Any})

Returns the detailed parameter list for a particular DB parameter group.

# Arguments
- `dbparameter_group_name`: The name of a specific DB parameter group to return details
  for. Constraints:   If supplied, must match the name of an existing DBParameterGroup.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`:  An optional pagination token provided by a previous DescribeDBParameters
  request. If this parameter is specified, the response includes only records beyond the
  marker, up to the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
- `"Source"`: The parameter types to return. Default: All parameter types returned Valid
  Values: user | system | engine-default
"""
function describe_dbparameters(
    DBParameterGroupName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeDBParameters",
        Dict{String,Any}("DBParameterGroupName" => DBParameterGroupName);
        aws_config=aws_config,
    )
end
function describe_dbparameters(
    DBParameterGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DescribeDBParameters",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBParameterGroupName" => DBParameterGroupName),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_dbproxies()
    describe_dbproxies(params::Dict{String,<:Any})

Returns information about DB proxies.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBProxyName"`: The name of the DB proxy. If you omit this parameter, the output
  includes information about all DB proxies owned by your Amazon Web Services account ID.
- `"Filters"`: This parameter is not currently supported.
- `"Marker"`:  An optional pagination token provided by a previous request. If this
  parameter is specified, the response includes only records beyond the marker, up to the
  value specified by MaxRecords.
- `"MaxRecords"`: The maximum number of records to include in the response. If more records
  exist than the specified MaxRecords value, a pagination token called a marker is included
  in the response so that the remaining results can be retrieved.  Default: 100 Constraints:
  Minimum 20, maximum 100.
"""
function describe_dbproxies(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeDBProxies"; aws_config=aws_config)
end
function describe_dbproxies(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBProxies", params; aws_config=aws_config)
end

"""
    describe_dbproxy_endpoints()
    describe_dbproxy_endpoints(params::Dict{String,<:Any})

Returns information about DB proxy endpoints.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBProxyEndpointName"`: The name of a DB proxy endpoint to describe. If you omit this
  parameter, the output includes information about all DB proxy endpoints associated with the
  specified proxy.
- `"DBProxyName"`: The name of the DB proxy whose endpoints you want to describe. If you
  omit this parameter, the output includes information about all DB proxy endpoints
  associated with all your DB proxies.
- `"Filters"`: This parameter is not currently supported.
- `"Marker"`:  An optional pagination token provided by a previous request. If this
  parameter is specified, the response includes only records beyond the marker, up to the
  value specified by MaxRecords.
- `"MaxRecords"`: The maximum number of records to include in the response. If more records
  exist than the specified MaxRecords value, a pagination token called a marker is included
  in the response so that the remaining results can be retrieved.  Default: 100 Constraints:
  Minimum 20, maximum 100.
"""
function describe_dbproxy_endpoints(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeDBProxyEndpoints"; aws_config=aws_config)
end
function describe_dbproxy_endpoints(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBProxyEndpoints", params; aws_config=aws_config)
end

"""
    describe_dbproxy_target_groups(dbproxy_name)
    describe_dbproxy_target_groups(dbproxy_name, params::Dict{String,<:Any})

Returns information about DB proxy target groups, represented by DBProxyTargetGroup data
structures.

# Arguments
- `dbproxy_name`: The identifier of the DBProxy associated with the target group.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: This parameter is not currently supported.
- `"Marker"`:  An optional pagination token provided by a previous request. If this
  parameter is specified, the response includes only records beyond the marker, up to the
  value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that the remaining results can be retrieved.  Default: 100
  Constraints: Minimum 20, maximum 100.
- `"TargetGroupName"`: The identifier of the DBProxyTargetGroup to describe.
"""
function describe_dbproxy_target_groups(
    DBProxyName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeDBProxyTargetGroups",
        Dict{String,Any}("DBProxyName" => DBProxyName);
        aws_config=aws_config,
    )
end
function describe_dbproxy_target_groups(
    DBProxyName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DescribeDBProxyTargetGroups",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("DBProxyName" => DBProxyName), params)
        );
        aws_config=aws_config,
    )
end

"""
    describe_dbproxy_targets(dbproxy_name)
    describe_dbproxy_targets(dbproxy_name, params::Dict{String,<:Any})

Returns information about DBProxyTarget objects. This API supports pagination.

# Arguments
- `dbproxy_name`: The identifier of the DBProxyTarget to describe.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: This parameter is not currently supported.
- `"Marker"`:  An optional pagination token provided by a previous request. If this
  parameter is specified, the response includes only records beyond the marker, up to the
  value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that the remaining results can be retrieved.  Default: 100
  Constraints: Minimum 20, maximum 100.
- `"TargetGroupName"`: The identifier of the DBProxyTargetGroup to describe.
"""
function describe_dbproxy_targets(
    DBProxyName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeDBProxyTargets",
        Dict{String,Any}("DBProxyName" => DBProxyName);
        aws_config=aws_config,
    )
end
function describe_dbproxy_targets(
    DBProxyName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DescribeDBProxyTargets",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("DBProxyName" => DBProxyName), params)
        );
        aws_config=aws_config,
    )
end

"""
    describe_dbsecurity_groups()
    describe_dbsecurity_groups(params::Dict{String,<:Any})

 Returns a list of DBSecurityGroup descriptions. If a DBSecurityGroupName is specified, the
list will contain only the descriptions of the specified DB security group.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBSecurityGroupName"`: The name of the DB security group to return details for.
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`:  An optional pagination token provided by a previous DescribeDBSecurityGroups
  request. If this parameter is specified, the response includes only records beyond the
  marker, up to the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
"""
function describe_dbsecurity_groups(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeDBSecurityGroups"; aws_config=aws_config)
end
function describe_dbsecurity_groups(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBSecurityGroups", params; aws_config=aws_config)
end

"""
    describe_dbsnapshot_attributes(dbsnapshot_identifier)
    describe_dbsnapshot_attributes(dbsnapshot_identifier, params::Dict{String,<:Any})

Returns a list of DB snapshot attribute names and values for a manual DB snapshot. When
sharing snapshots with other Amazon Web Services accounts, DescribeDBSnapshotAttributes
returns the restore attribute and a list of IDs for the Amazon Web Services accounts that
are authorized to copy or restore the manual DB snapshot. If all is included in the list of
values for the restore attribute, then the manual DB snapshot is public and can be copied
or restored by all Amazon Web Services accounts. To add or remove access for an Amazon Web
Services account to copy or restore a manual DB snapshot, or to make the manual DB snapshot
public or private, use the ModifyDBSnapshotAttribute API action.

# Arguments
- `dbsnapshot_identifier`: The identifier for the DB snapshot to describe the attributes
  for.

"""
function describe_dbsnapshot_attributes(
    DBSnapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeDBSnapshotAttributes",
        Dict{String,Any}("DBSnapshotIdentifier" => DBSnapshotIdentifier);
        aws_config=aws_config,
    )
end
function describe_dbsnapshot_attributes(
    DBSnapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DescribeDBSnapshotAttributes",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBSnapshotIdentifier" => DBSnapshotIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_dbsnapshots()
    describe_dbsnapshots(params::Dict{String,<:Any})

Returns information about DB snapshots. This API action supports pagination.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBInstanceIdentifier"`: The ID of the DB instance to retrieve the list of DB snapshots
  for. This parameter can't be used in conjunction with DBSnapshotIdentifier. This parameter
  isn't case-sensitive.  Constraints:   If supplied, must match the identifier of an existing
  DBInstance.
- `"DBSnapshotIdentifier"`:  A specific DB snapshot identifier to describe. This parameter
  can't be used in conjunction with DBInstanceIdentifier. This value is stored as a lowercase
  string.  Constraints:   If supplied, must match the identifier of an existing DBSnapshot.
  If this identifier is for an automated snapshot, the SnapshotType parameter must also be
  specified.
- `"DbiResourceId"`: A specific DB resource ID to describe.
- `"Filters"`: A filter that specifies one or more DB snapshots to describe. Supported
  filters:    db-instance-id - Accepts DB instance identifiers and DB instance Amazon
  Resource Names (ARNs).    db-snapshot-id - Accepts DB snapshot identifiers.
  dbi-resource-id - Accepts identifiers of source DB instances.    snapshot-type - Accepts
  types of DB snapshots.    engine - Accepts names of database engines.
- `"IncludePublic"`: A value that indicates whether to include manual DB cluster snapshots
  that are public and can be copied or restored by any Amazon Web Services account. By
  default, the public snapshots are not included. You can share a manual DB snapshot as
  public by using the ModifyDBSnapshotAttribute API.
- `"IncludeShared"`: A value that indicates whether to include shared manual DB cluster
  snapshots from other Amazon Web Services accounts that this Amazon Web Services account has
  been given permission to copy or restore. By default, these snapshots are not included. You
  can give an Amazon Web Services account permission to restore a manual DB snapshot from
  another Amazon Web Services account by using the ModifyDBSnapshotAttribute API action.
- `"Marker"`:  An optional pagination token provided by a previous DescribeDBSnapshots
  request. If this parameter is specified, the response includes only records beyond the
  marker, up to the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
- `"SnapshotType"`: The type of snapshots to be returned. You can specify one of the
  following values:    automated - Return all DB snapshots that have been automatically taken
  by Amazon RDS for my Amazon Web Services account.    manual - Return all DB snapshots that
  have been taken by my Amazon Web Services account.    shared - Return all manual DB
  snapshots that have been shared to my Amazon Web Services account.    public - Return all
  DB snapshots that have been marked as public.    awsbackup - Return the DB snapshots
  managed by the Amazon Web Services Backup service. For information about Amazon Web
  Services Backup, see the  Amazon Web Services Backup Developer Guide.   The awsbackup type
  does not apply to Aurora.   If you don't specify a SnapshotType value, then both automated
  and manual snapshots are returned. Shared and public DB snapshots are not included in the
  returned results by default. You can include shared snapshots with these results by
  enabling the IncludeShared parameter. You can include public snapshots with these results
  by enabling the IncludePublic parameter. The IncludeShared and IncludePublic parameters
  don't apply for SnapshotType values of manual or automated. The IncludePublic parameter
  doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply
  when SnapshotType is set to public.
"""
function describe_dbsnapshots(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeDBSnapshots"; aws_config=aws_config)
end
function describe_dbsnapshots(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBSnapshots", params; aws_config=aws_config)
end

"""
    describe_dbsubnet_groups()
    describe_dbsubnet_groups(params::Dict{String,<:Any})

Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list
will contain only the descriptions of the specified DBSubnetGroup. For an overview of CIDR
ranges, go to the Wikipedia Tutorial.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBSubnetGroupName"`: The name of the DB subnet group to return details for.
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`:  An optional pagination token provided by a previous DescribeDBSubnetGroups
  request. If this parameter is specified, the response includes only records beyond the
  marker, up to the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
"""
function describe_dbsubnet_groups(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeDBSubnetGroups"; aws_config=aws_config)
end
function describe_dbsubnet_groups(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeDBSubnetGroups", params; aws_config=aws_config)
end

"""
    describe_engine_default_cluster_parameters(dbparameter_group_family)
    describe_engine_default_cluster_parameters(dbparameter_group_family, params::Dict{String,<:Any})

Returns the default engine and system parameter information for the cluster database
engine. For more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon
Aurora User Guide.

# Arguments
- `dbparameter_group_family`: The name of the DB cluster parameter group family to return
  engine parameter information for.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`:  An optional pagination token provided by a previous
  DescribeEngineDefaultClusterParameters request. If this parameter is specified, the
  response includes only records beyond the marker, up to the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
"""
function describe_engine_default_cluster_parameters(
    DBParameterGroupFamily; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeEngineDefaultClusterParameters",
        Dict{String,Any}("DBParameterGroupFamily" => DBParameterGroupFamily);
        aws_config=aws_config,
    )
end
function describe_engine_default_cluster_parameters(
    DBParameterGroupFamily,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DescribeEngineDefaultClusterParameters",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBParameterGroupFamily" => DBParameterGroupFamily),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_engine_default_parameters(dbparameter_group_family)
    describe_engine_default_parameters(dbparameter_group_family, params::Dict{String,<:Any})

Returns the default engine and system parameter information for the specified database
engine.

# Arguments
- `dbparameter_group_family`: The name of the DB parameter group family.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`:  An optional pagination token provided by a previous
  DescribeEngineDefaultParameters request. If this parameter is specified, the response
  includes only records beyond the marker, up to the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
"""
function describe_engine_default_parameters(
    DBParameterGroupFamily; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeEngineDefaultParameters",
        Dict{String,Any}("DBParameterGroupFamily" => DBParameterGroupFamily);
        aws_config=aws_config,
    )
end
function describe_engine_default_parameters(
    DBParameterGroupFamily,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DescribeEngineDefaultParameters",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBParameterGroupFamily" => DBParameterGroupFamily),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_event_categories()
    describe_event_categories(params::Dict{String,<:Any})

Displays a list of categories for all event source types, or, if specified, for a specified
source type. You can see a list of the event categories and source types in  Events in the
Amazon RDS User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: This parameter isn't currently supported.
- `"SourceType"`: The type of source that is generating the events. Valid values:
  db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot |
  db-cluster-snapshot
"""
function describe_event_categories(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeEventCategories"; aws_config=aws_config)
end
function describe_event_categories(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeEventCategories", params; aws_config=aws_config)
end

"""
    describe_event_subscriptions()
    describe_event_subscriptions(params::Dict{String,<:Any})

Lists all the subscription descriptions for a customer account. The description for a
subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID,
CreationTime, and Status. If you specify a SubscriptionName, lists the description for that
subscription.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`:  An optional pagination token provided by a previous
  DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response
  includes only records beyond the marker, up to the value specified by MaxRecords .
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
- `"SubscriptionName"`: The name of the RDS event notification subscription you want to
  describe.
"""
function describe_event_subscriptions(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeEventSubscriptions"; aws_config=aws_config)
end
function describe_event_subscriptions(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeEventSubscriptions", params; aws_config=aws_config)
end

"""
    describe_events()
    describe_events(params::Dict{String,<:Any})

Returns events related to DB instances, DB clusters, DB parameter groups, DB security
groups, DB snapshots, and DB cluster snapshots for the past 14 days. Events specific to a
particular DB instances, DB clusters, DB parameter groups, DB security groups, DB
snapshots, and DB cluster snapshots group can be obtained by providing the name as a
parameter.  By default, the past hour of events are returned.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Duration"`: The number of minutes to retrieve events for. Default: 60
- `"EndTime"`:  The end of the time interval for which to retrieve events, specified in ISO
  8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.
  Example: 2009-07-08T18:00Z
- `"EventCategories"`: A list of event categories that trigger notifications for a event
  notification subscription.
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`:  An optional pagination token provided by a previous DescribeEvents request.
  If this parameter is specified, the response includes only records beyond the marker, up to
  the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
- `"SourceIdentifier"`: The identifier of the event source for which events are returned.
  If not specified, then all sources are included in the response. Constraints:   If
  SourceIdentifier is supplied, SourceType must also be provided.   If the source type is a
  DB instance, a DBInstanceIdentifier value must be supplied.   If the source type is a DB
  cluster, a DBClusterIdentifier value must be supplied.   If the source type is a DB
  parameter group, a DBParameterGroupName value must be supplied.   If the source type is a
  DB security group, a DBSecurityGroupName value must be supplied.   If the source type is a
  DB snapshot, a DBSnapshotIdentifier value must be supplied.   If the source type is a DB
  cluster snapshot, a DBClusterSnapshotIdentifier value must be supplied.   Can't end with a
  hyphen or contain two consecutive hyphens.
- `"SourceType"`: The event source to retrieve events for. If no value is specified, all
  events are returned.
- `"StartTime"`:  The beginning of the time interval to retrieve events for, specified in
  ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.
  Example: 2009-07-08T18:00Z
"""
function describe_events(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeEvents"; aws_config=aws_config)
end
function describe_events(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeEvents", params; aws_config=aws_config)
end

"""
    describe_export_tasks()
    describe_export_tasks(params::Dict{String,<:Any})

Returns information about a snapshot export to Amazon S3. This API operation supports
pagination.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ExportTaskIdentifier"`: The identifier of the snapshot export task to be described.
- `"Filters"`: Filters specify one or more snapshot exports to describe. The filters are
  specified as name-value pairs that define what to include in the output. Filter names and
  values are case-sensitive. Supported filters include the following:
  export-task-identifier - An identifier for the snapshot export task.    s3-bucket - The
  Amazon S3 bucket the snapshot is exported to.    source-arn - The Amazon Resource Name
  (ARN) of the snapshot exported to Amazon S3    status - The status of the export task. Must
  be lowercase, for example, complete.
- `"Marker"`:  An optional pagination token provided by a previous DescribeExportTasks
  request. If you specify this parameter, the response includes only records beyond the
  marker, up to the value specified by the MaxRecords parameter.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified value, a pagination token called a marker is included in
  the response. You can use the marker in a later DescribeExportTasks request to retrieve the
  remaining results.  Default: 100 Constraints: Minimum 20, maximum 100.
- `"SourceArn"`: The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
"""
function describe_export_tasks(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeExportTasks"; aws_config=aws_config)
end
function describe_export_tasks(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeExportTasks", params; aws_config=aws_config)
end

"""
    describe_global_clusters()
    describe_global_clusters(params::Dict{String,<:Any})

 Returns information about Aurora global database clusters. This API supports pagination.
For more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora
User Guide.   This action only applies to Aurora DB clusters.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: This parameter isn't currently supported.
- `"GlobalClusterIdentifier"`:  The user-supplied DB cluster identifier. If this parameter
  is specified, information from only the specific DB cluster is returned. This parameter
  isn't case-sensitive.  Constraints:   If supplied, must match an existing
  DBClusterIdentifier.
- `"Marker"`:  An optional pagination token provided by a previous DescribeGlobalClusters
  request. If this parameter is specified, the response includes only records beyond the
  marker, up to the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
"""
function describe_global_clusters(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeGlobalClusters"; aws_config=aws_config)
end
function describe_global_clusters(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeGlobalClusters", params; aws_config=aws_config)
end

"""
    describe_installation_media()
    describe_installation_media(params::Dict{String,<:Any})

Describes the available installation media for a DB engine that requires an on-premises
customer provided license, such as Microsoft SQL Server.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: A filter that specifies one or more installation media to describe.
  Supported filters include the following:    custom-availability-zone-id - Accepts custom
  Availability Zone (AZ) identifiers. The results list includes information about only the
  custom AZs identified by these identifiers.    engine - Accepts database engines. The
  results list includes information about only the database engines identified by these
  identifiers. For more information about the valid engines for installation media, see
  ImportInstallationMedia.
- `"InstallationMediaId"`: The installation medium ID.
- `"Marker"`: An optional pagination token provided by a previous request. If this
  parameter is specified, the response includes only records beyond the marker, up to the
  value specified by MaxRecords.
- `"MaxRecords"`: An optional pagination token provided by a previous
  DescribeInstallationMedia request. If this parameter is specified, the response includes
  only records beyond the marker, up to the value specified by MaxRecords.
"""
function describe_installation_media(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeInstallationMedia"; aws_config=aws_config)
end
function describe_installation_media(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeInstallationMedia", params; aws_config=aws_config)
end

"""
    describe_option_group_options(engine_name)
    describe_option_group_options(engine_name, params::Dict{String,<:Any})

Describes all available options.

# Arguments
- `engine_name`: A required parameter. Options available for the given engine name are
  described. Valid Values:     mariadb     mysql     oracle-ee     oracle-ee-cdb
  oracle-se2     oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se
  sqlserver-ex     sqlserver-web

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: This parameter isn't currently supported.
- `"MajorEngineVersion"`: If specified, filters the results to include only options for the
  specified major engine version.
- `"Marker"`: An optional pagination token provided by a previous request. If this
  parameter is specified, the response includes only records beyond the marker, up to the
  value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
"""
function describe_option_group_options(
    EngineName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeOptionGroupOptions",
        Dict{String,Any}("EngineName" => EngineName);
        aws_config=aws_config,
    )
end
function describe_option_group_options(
    EngineName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DescribeOptionGroupOptions",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("EngineName" => EngineName), params)
        );
        aws_config=aws_config,
    )
end

"""
    describe_option_groups()
    describe_option_groups(params::Dict{String,<:Any})

Describes the available option groups.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"EngineName"`: Filters the list of option groups to only include groups associated with
  a specific database engine. Valid Values:     mariadb     mysql     oracle-ee
  oracle-ee-cdb     oracle-se2     oracle-se2-cdb     postgres     sqlserver-ee
  sqlserver-se     sqlserver-ex     sqlserver-web
- `"Filters"`: This parameter isn't currently supported.
- `"MajorEngineVersion"`: Filters the list of option groups to only include groups
  associated with a specific database engine version. If specified, then EngineName must also
  be specified.
- `"Marker"`:  An optional pagination token provided by a previous DescribeOptionGroups
  request. If this parameter is specified, the response includes only records beyond the
  marker, up to the value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
- `"OptionGroupName"`: The name of the option group to describe. Can't be supplied together
  with EngineName or MajorEngineVersion.
"""
function describe_option_groups(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeOptionGroups"; aws_config=aws_config)
end
function describe_option_groups(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeOptionGroups", params; aws_config=aws_config)
end

"""
    describe_orderable_dbinstance_options(engine)
    describe_orderable_dbinstance_options(engine, params::Dict{String,<:Any})

Returns a list of orderable DB instance options for the specified engine.

# Arguments
- `engine`: The name of the engine to retrieve DB instance options for. Valid Values:
  aurora (for MySQL 5.6-compatible Aurora)    aurora-mysql (for MySQL 5.7-compatible Aurora)
    aurora-postgresql     mariadb     mysql     oracle-ee     oracle-ee-cdb     oracle-se2
   oracle-se2-cdb     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex
  sqlserver-web

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AvailabilityZoneGroup"`: The Availability Zone group associated with a Local Zone.
  Specify this parameter to retrieve available offerings for the Local Zones in the group.
  Omit this parameter to show the available offerings in the specified Amazon Web Services
  Region.
- `"DBInstanceClass"`: The DB instance class filter value. Specify this parameter to show
  only the available offerings matching the specified DB instance class.
- `"EngineVersion"`: The engine version filter value. Specify this parameter to show only
  the available offerings matching the specified engine version.
- `"Filters"`: This parameter isn't currently supported.
- `"LicenseModel"`: The license model filter value. Specify this parameter to show only the
  available offerings matching the specified license model.
- `"Marker"`:  An optional pagination token provided by a previous
  DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response
  includes only records beyond the marker, up to the value specified by MaxRecords .
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
- `"Vpc"`: A value that indicates whether to show only VPC or non-VPC offerings.
"""
function describe_orderable_dbinstance_options(
    Engine; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeOrderableDBInstanceOptions",
        Dict{String,Any}("Engine" => Engine);
        aws_config=aws_config,
    )
end
function describe_orderable_dbinstance_options(
    Engine, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeOrderableDBInstanceOptions",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Engine" => Engine), params));
        aws_config=aws_config,
    )
end

"""
    describe_pending_maintenance_actions()
    describe_pending_maintenance_actions(params::Dict{String,<:Any})

Returns a list of resources (for example, DB instances) that have at least one pending
maintenance action.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: A filter that specifies one or more resources to return pending maintenance
  actions for. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB
  cluster Amazon Resource Names (ARNs). The results list will only include pending
  maintenance actions for the DB clusters identified by these ARNs.    db-instance-id -
  Accepts DB instance identifiers and DB instance ARNs. The results list will only include
  pending maintenance actions for the DB instances identified by these ARNs.
- `"Marker"`:  An optional pagination token provided by a previous
  DescribePendingMaintenanceActions request. If this parameter is specified, the response
  includes only records beyond the marker, up to a number of records specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more
  records exist than the specified MaxRecords value, a pagination token called a marker is
  included in the response so that you can retrieve the remaining results.  Default: 100
  Constraints: Minimum 20, maximum 100.
- `"ResourceIdentifier"`: The ARN of a resource to return pending maintenance actions for.
"""
function describe_pending_maintenance_actions(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribePendingMaintenanceActions"; aws_config=aws_config)
end
function describe_pending_maintenance_actions(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribePendingMaintenanceActions", params; aws_config=aws_config)
end

"""
    describe_reserved_dbinstances()
    describe_reserved_dbinstances(params::Dict{String,<:Any})

Returns information about reserved DB instances for this account, or about a specified
reserved DB instance.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBInstanceClass"`: The DB instance class filter value. Specify this parameter to show
  only those reservations matching the specified DB instances class.
- `"Duration"`: The duration filter value, specified in years or seconds. Specify this
  parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 |
  94608000
- `"Filters"`: This parameter isn't currently supported.
- `"LeaseId"`: The lease identifier filter value. Specify this parameter to show only the
  reservation that matches the specified lease ID.  Amazon Web Services Support might request
  the lease ID for an issue related to a reserved DB instance.
- `"Marker"`:  An optional pagination token provided by a previous request. If this
  parameter is specified, the response includes only records beyond the marker, up to the
  value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more than
  the MaxRecords value is available, a pagination token called a marker is included in the
  response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20,
  maximum 100.
- `"MultiAZ"`: A value that indicates whether to show only those reservations that support
  Multi-AZ.
- `"OfferingType"`: The offering type filter value. Specify this parameter to show only the
  available offerings matching the specified offering type. Valid Values: \"Partial Upfront\"
  | \"All Upfront\" | \"No Upfront\"
- `"ProductDescription"`: The product description filter value. Specify this parameter to
  show only those reservations matching the specified product description.
- `"ReservedDBInstanceId"`: The reserved DB instance identifier filter value. Specify this
  parameter to show only the reservation that matches the specified reservation ID.
- `"ReservedDBInstancesOfferingId"`: The offering identifier filter value. Specify this
  parameter to show only purchased reservations matching the specified offering identifier.
"""
function describe_reserved_dbinstances(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeReservedDBInstances"; aws_config=aws_config)
end
function describe_reserved_dbinstances(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeReservedDBInstances", params; aws_config=aws_config)
end

"""
    describe_reserved_dbinstances_offerings()
    describe_reserved_dbinstances_offerings(params::Dict{String,<:Any})

Lists available reserved DB instance offerings.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBInstanceClass"`: The DB instance class filter value. Specify this parameter to show
  only the available offerings matching the specified DB instance class.
- `"Duration"`: Duration filter value, specified in years or seconds. Specify this
  parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 |
  94608000
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`:  An optional pagination token provided by a previous request. If this
  parameter is specified, the response includes only records beyond the marker, up to the
  value specified by MaxRecords.
- `"MaxRecords"`:  The maximum number of records to include in the response. If more than
  the MaxRecords value is available, a pagination token called a marker is included in the
  response so you can retrieve the remaining results.  Default: 100 Constraints: Minimum 20,
  maximum 100.
- `"MultiAZ"`: A value that indicates whether to show only those reservations that support
  Multi-AZ.
- `"OfferingType"`: The offering type filter value. Specify this parameter to show only the
  available offerings matching the specified offering type. Valid Values: \"Partial Upfront\"
  | \"All Upfront\" | \"No Upfront\"
- `"ProductDescription"`: Product description filter value. Specify this parameter to show
  only the available offerings that contain the specified product description.  The results
  show offerings that partially match the filter value.
- `"ReservedDBInstancesOfferingId"`: The offering identifier filter value. Specify this
  parameter to show only the available offering that matches the specified reservation
  identifier. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
"""
function describe_reserved_dbinstances_offerings(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeReservedDBInstancesOfferings"; aws_config=aws_config)
end
function describe_reserved_dbinstances_offerings(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeReservedDBInstancesOfferings", params; aws_config=aws_config)
end

"""
    describe_source_regions()
    describe_source_regions(params::Dict{String,<:Any})

Returns a list of the source Amazon Web Services Regions where the current Amazon Web
Services Region can create a read replica, copy a DB snapshot from, or replicate automated
backups from. This API action supports pagination.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: This parameter isn't currently supported.
- `"Marker"`: An optional pagination token provided by a previous DescribeSourceRegions
  request. If this parameter is specified, the response includes only records beyond the
  marker, up to the value specified by MaxRecords.
- `"MaxRecords"`: The maximum number of records to include in the response. If more records
  exist than the specified MaxRecords value, a pagination token called a marker is included
  in the response so you can retrieve the remaining results.  Default: 100 Constraints:
  Minimum 20, maximum 100.
- `"RegionName"`: The source Amazon Web Services Region name. For example, us-east-1.
  Constraints:   Must specify a valid Amazon Web Services Region name.
"""
function describe_source_regions(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("DescribeSourceRegions"; aws_config=aws_config)
end
function describe_source_regions(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("DescribeSourceRegions", params; aws_config=aws_config)
end

"""
    describe_valid_dbinstance_modifications(dbinstance_identifier)
    describe_valid_dbinstance_modifications(dbinstance_identifier, params::Dict{String,<:Any})

You can call DescribeValidDBInstanceModifications to learn what modifications you can make
to your DB instance. You can use this information when you call ModifyDBInstance.

# Arguments
- `dbinstance_identifier`: The customer identifier or the ARN of your DB instance.

"""
function describe_valid_dbinstance_modifications(
    DBInstanceIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DescribeValidDBInstanceModifications",
        Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier);
        aws_config=aws_config,
    )
end
function describe_valid_dbinstance_modifications(
    DBInstanceIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DescribeValidDBInstanceModifications",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    download_dblog_file_portion(dbinstance_identifier, log_file_name)
    download_dblog_file_portion(dbinstance_identifier, log_file_name, params::Dict{String,<:Any})

Downloads all or a portion of the specified log file, up to 1 MB in size.

# Arguments
- `dbinstance_identifier`: The customer-assigned name of the DB instance that contains the
  log files you want to list. Constraints:   Must match the identifier of an existing
  DBInstance.
- `log_file_name`: The name of the log file to be downloaded.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Marker"`: The pagination token provided in the previous request or \"0\". If the Marker
  parameter is specified the response includes only records beyond the marker until the end
  of the file or up to NumberOfLines.
- `"NumberOfLines"`: The number of lines to download. If the number of lines specified
  results in a file over 1 MB in size, the file is truncated at 1 MB in size. If the
  NumberOfLines parameter is specified, then the block of lines returned can be from the
  beginning or the end of the log file, depending on the value of the Marker parameter.   If
  neither Marker or NumberOfLines are specified, the entire log file is returned up to a
  maximum of 10000 lines, starting with the most recent log entries first.   If NumberOfLines
  is specified and Marker isn't specified, then the most recent lines from the end of the log
  file are returned.   If Marker is specified as \"0\", then the specified number of lines
  from the beginning of the log file are returned.   You can download the log file in blocks
  of lines by specifying the size of the block using the NumberOfLines parameter, and by
  specifying a value of \"0\" for the Marker parameter in your first request. Include the
  Marker value returned in the response as the Marker value for the next request, continuing
  until the AdditionalDataPending response element returns false.
"""
function download_dblog_file_portion(
    DBInstanceIdentifier, LogFileName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "DownloadDBLogFilePortion",
        Dict{String,Any}(
            "DBInstanceIdentifier" => DBInstanceIdentifier, "LogFileName" => LogFileName
        );
        aws_config=aws_config,
    )
end
function download_dblog_file_portion(
    DBInstanceIdentifier,
    LogFileName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "DownloadDBLogFilePortion",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBInstanceIdentifier" => DBInstanceIdentifier,
                    "LogFileName" => LogFileName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    failover_dbcluster(dbcluster_identifier)
    failover_dbcluster(dbcluster_identifier, params::Dict{String,<:Any})

Forces a failover for a DB cluster. A failover for a DB cluster promotes one of the Aurora
Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster
writer). Amazon Aurora will automatically fail over to an Aurora Replica, if one exists,
when the primary instance fails. You can force a failover when you want to simulate a
failure of a primary instance for testing. Because each instance in a DB cluster has its
own endpoint address, you will need to clean up and re-establish any existing connections
that use those endpoint addresses when the failover is complete. For more information on
Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User Guide.   This action
only applies to Aurora DB clusters.

# Arguments
- `dbcluster_identifier`: A DB cluster identifier to force a failover for. This parameter
  isn't case-sensitive. Constraints:   Must match the identifier of an existing DBCluster.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"TargetDBInstanceIdentifier"`: The name of the instance to promote to the primary
  instance. You must specify the instance identifier for an Aurora Replica in the DB cluster.
  For example, mydbcluster-replica1.
"""
function failover_dbcluster(
    DBClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "FailoverDBCluster",
        Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier);
        aws_config=aws_config,
    )
end
function failover_dbcluster(
    DBClusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "FailoverDBCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    failover_global_cluster(global_cluster_identifier, target_db_cluster_identifier)
    failover_global_cluster(global_cluster_identifier, target_db_cluster_identifier, params::Dict{String,<:Any})

Initiates the failover process for an Aurora global database (GlobalCluster). A failover
for an Aurora global database promotes one of secondary read-only DB clusters to be the
primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB
cluster. In other words, the role of the current primary DB cluster and the selected
(target) DB cluster are switched. The selected secondary DB cluster assumes full read/write
capabilities for the Aurora global database. For more information about failing over an
Amazon Aurora global database, see Managed planned failover for Amazon Aurora global
databases in the Amazon Aurora User Guide.   This action applies to GlobalCluster (Aurora
global databases) only. Use this action only on healthy Aurora global databases with
running Aurora DB clusters and no Region-wide outages, to test disaster recovery scenarios
or to reconfigure your Aurora global database topology.

# Arguments
- `global_cluster_identifier`: Identifier of the Aurora global database (GlobalCluster)
  that should be failed over. The identifier is the unique key assigned by the user when the
  Aurora global database was created. In other words, it's the name of the Aurora global
  database that you want to fail over.  Constraints:   Must match the identifier of an
  existing GlobalCluster (Aurora global database).
- `target_db_cluster_identifier`: Identifier of the secondary Aurora DB cluster that you
  want to promote to primary for the Aurora global database (GlobalCluster.) Use the Amazon
  Resource Name (ARN) for the identifier so that Aurora can locate the cluster in its Amazon
  Web Services Region.

"""
function failover_global_cluster(
    GlobalClusterIdentifier,
    TargetDbClusterIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "FailoverGlobalCluster",
        Dict{String,Any}(
            "GlobalClusterIdentifier" => GlobalClusterIdentifier,
            "TargetDbClusterIdentifier" => TargetDbClusterIdentifier,
        );
        aws_config=aws_config,
    )
end
function failover_global_cluster(
    GlobalClusterIdentifier,
    TargetDbClusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "FailoverGlobalCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "GlobalClusterIdentifier" => GlobalClusterIdentifier,
                    "TargetDbClusterIdentifier" => TargetDbClusterIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    import_installation_media(custom_availability_zone_id, engine, engine_installation_media_path, engine_version, osinstallation_media_path)
    import_installation_media(custom_availability_zone_id, engine, engine_installation_media_path, engine_version, osinstallation_media_path, params::Dict{String,<:Any})

Imports the installation media for a DB engine that requires an on-premises customer
provided license, such as SQL Server.

# Arguments
- `custom_availability_zone_id`: The identifier of the custom Availability Zone (AZ) to
  import the installation media to.
- `engine`: The name of the database engine to be used for this instance.  The list only
  includes supported DB engines that require an on-premises customer provided license.  Valid
  Values:     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web
- `engine_installation_media_path`: The path to the installation medium for the specified
  DB engine. Example: SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso
- `engine_version`: The version number of the database engine to use. For a list of valid
  engine versions, call DescribeDBEngineVersions. The following are the database engines and
  links to information about the major and minor versions. The list only includes DB engines
  that require an on-premises customer provided license.  Microsoft SQL Server  See
  Microsoft SQL Server Versions on Amazon RDS in the Amazon RDS User Guide.
- `osinstallation_media_path`: The path to the installation medium for the operating system
  associated with the specified DB engine. Example:
  WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso

"""
function import_installation_media(
    CustomAvailabilityZoneId,
    Engine,
    EngineInstallationMediaPath,
    EngineVersion,
    OSInstallationMediaPath;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ImportInstallationMedia",
        Dict{String,Any}(
            "CustomAvailabilityZoneId" => CustomAvailabilityZoneId,
            "Engine" => Engine,
            "EngineInstallationMediaPath" => EngineInstallationMediaPath,
            "EngineVersion" => EngineVersion,
            "OSInstallationMediaPath" => OSInstallationMediaPath,
        );
        aws_config=aws_config,
    )
end
function import_installation_media(
    CustomAvailabilityZoneId,
    Engine,
    EngineInstallationMediaPath,
    EngineVersion,
    OSInstallationMediaPath,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ImportInstallationMedia",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "CustomAvailabilityZoneId" => CustomAvailabilityZoneId,
                    "Engine" => Engine,
                    "EngineInstallationMediaPath" => EngineInstallationMediaPath,
                    "EngineVersion" => EngineVersion,
                    "OSInstallationMediaPath" => OSInstallationMediaPath,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    list_tags_for_resource(resource_name)
    list_tags_for_resource(resource_name, params::Dict{String,<:Any})

Lists all tags on an Amazon RDS resource. For an overview on tagging an Amazon RDS
resource, see Tagging Amazon RDS Resources in the Amazon RDS User Guide.

# Arguments
- `resource_name`: The Amazon RDS resource with tags to be listed. This value is an Amazon
  Resource Name (ARN). For information about creating an ARN, see  Constructing an ARN for
  Amazon RDS in the Amazon RDS User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: This parameter isn't currently supported.
"""
function list_tags_for_resource(
    ResourceName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ListTagsForResource",
        Dict{String,Any}("ResourceName" => ResourceName);
        aws_config=aws_config,
    )
end
function list_tags_for_resource(
    ResourceName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ListTagsForResource",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ResourceName" => ResourceName), params)
        );
        aws_config=aws_config,
    )
end

"""
    modify_certificates()
    modify_certificates(params::Dict{String,<:Any})

Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS)
certificate for Amazon RDS for new DB instances temporarily, or remove the override. By
using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB
instances that is different from the default certificate provided by RDS. You can also use
this operation to remove the override, so that new DB instances use the default certificate
provided by RDS. You might need to override the default certificate in the following
situations:   You already migrated your applications to support the latest certificate
authority (CA) certificate, but the new CA certificate is not yet the RDS default CA
certificate for the specified Amazon Web Services Region.   RDS has already moved to a new
default CA certificate for the specified Amazon Web Services Region, but you are still in
the process of supporting the new CA certificate. In this case, you temporarily need
additional time to finish your application changes.   For more information about rotating
your SSL/TLS certificate for RDS DB engines, see  Rotating Your SSL/TLS Certificate in the
Amazon RDS User Guide. For more information about rotating your SSL/TLS certificate for
Aurora DB engines, see  Rotating Your SSL/TLS Certificate in the Amazon Aurora User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CertificateIdentifier"`: The new default certificate identifier to override the current
  one with. To determine the valid values, use the describe-certificates CLI command or the
  DescribeCertificates API operation.
- `"RemoveCustomerOverride"`: A value that indicates whether to remove the override for the
  default certificate. If the override is removed, the default certificate is the system
  default.
"""
function modify_certificates(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("ModifyCertificates"; aws_config=aws_config)
end
function modify_certificates(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("ModifyCertificates", params; aws_config=aws_config)
end

"""
    modify_current_dbcluster_capacity(dbcluster_identifier)
    modify_current_dbcluster_capacity(dbcluster_identifier, params::Dict{String,<:Any})

Set the capacity of an Aurora Serverless DB cluster to a specific value. Aurora Serverless
scales seamlessly based on the workload on the DB cluster. In some cases, the capacity
might not scale fast enough to meet a sudden change in workload, such as a large number of
new transactions. Call ModifyCurrentDBClusterCapacity to set the capacity explicitly. After
this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB
cluster based on the cooldown period for scaling up and the cooldown period for scaling
down. For more information about Aurora Serverless, see Using Amazon Aurora Serverless in
the Amazon Aurora User Guide.  If you call ModifyCurrentDBClusterCapacity with the default
TimeoutAction, connections that prevent Aurora Serverless from finding a scaling point
might be dropped. For more information about scaling points, see  Autoscaling for Aurora
Serverless in the Amazon Aurora User Guide.   This action only applies to Aurora Serverless
DB clusters.

# Arguments
- `dbcluster_identifier`: The DB cluster identifier for the cluster being modified. This
  parameter isn't case-sensitive. Constraints:   Must match the identifier of an existing DB
  cluster.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Capacity"`: The DB cluster capacity. When you change the capacity of a paused Aurora
  Serverless DB cluster, it automatically resumes. Constraints:   For Aurora MySQL, valid
  capacity values are 1, 2, 4, 8, 16, 32, 64, 128, and 256.   For Aurora PostgreSQL, valid
  capacity values are 2, 4, 8, 16, 32, 64, 192, and 384.
- `"SecondsBeforeTimeout"`: The amount of time, in seconds, that Aurora Serverless tries to
  find a scaling point to perform seamless scaling before enforcing the timeout action. The
  default is 300. Specify a value between 10 and 600 seconds.
- `"TimeoutAction"`: The action to take when the timeout is reached, either
  ForceApplyCapacityChange or RollbackCapacityChange.  ForceApplyCapacityChange, the default,
  sets the capacity to the specified value as soon as possible.  RollbackCapacityChange
  ignores the capacity change if a scaling point isn't found in the timeout period.
"""
function modify_current_dbcluster_capacity(
    DBClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ModifyCurrentDBClusterCapacity",
        Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier);
        aws_config=aws_config,
    )
end
function modify_current_dbcluster_capacity(
    DBClusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyCurrentDBClusterCapacity",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    modify_dbcluster(dbcluster_identifier)
    modify_dbcluster(dbcluster_identifier, params::Dict{String,<:Any})

Modify a setting for an Amazon Aurora DB cluster. You can change one or more database
configuration parameters by specifying these parameters and the new values in the request.
For more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora
User Guide.   This action only applies to Aurora DB clusters.

# Arguments
- `dbcluster_identifier`: The DB cluster identifier for the cluster being modified. This
  parameter isn't case-sensitive. Constraints: This identifier must match the identifier of
  an existing DB cluster.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AllowMajorVersionUpgrade"`: A value that indicates whether major version upgrades are
  allowed. Constraints: You must allow major version upgrades when specifying a value for the
  EngineVersion parameter that is a different major version than the DB cluster's current
  version.
- `"ApplyImmediately"`: A value that indicates whether the modifications in this request
  and any pending modifications are asynchronously applied as soon as possible, regardless of
  the PreferredMaintenanceWindow setting for the DB cluster. If this parameter is disabled,
  changes to the DB cluster are applied during the next maintenance window. The
  ApplyImmediately parameter only affects the EnableIAMDatabaseAuthentication,
  MasterUserPassword, and NewDBClusterIdentifier values. If the ApplyImmediately parameter is
  disabled, then changes to the EnableIAMDatabaseAuthentication, MasterUserPassword, and
  NewDBClusterIdentifier values are applied during the next maintenance window. All other
  changes are applied immediately, regardless of the value of the ApplyImmediately parameter.
  By default, this parameter is disabled.
- `"BacktrackWindow"`: The target backtrack window, in seconds. To disable backtracking,
  set this value to 0.  Currently, Backtrack is only supported for Aurora MySQL DB clusters.
  Default: 0 Constraints:   If specified, this value must be set to a number from 0 to
  259,200 (72 hours).
- `"BackupRetentionPeriod"`: The number of days for which automated backups are retained.
  You must specify a minimum value of 1. Default: 1 Constraints:   Must be a value from 1 to
  35
- `"CloudwatchLogsExportConfiguration"`: The configuration setting for the log types to be
  enabled for export to CloudWatch Logs for a specific DB cluster.
- `"CopyTagsToSnapshot"`: A value that indicates whether to copy all tags from the DB
  cluster to snapshots of the DB cluster. The default is not to copy them.
- `"DBClusterParameterGroupName"`: The name of the DB cluster parameter group to use for
  the DB cluster.
- `"DBInstanceParameterGroupName"`: The name of the DB parameter group to apply to all
  instances of the DB cluster.   When you apply a parameter group using the
  DBInstanceParameterGroupName parameter, the DB cluster isn't rebooted automatically. Also,
  parameter changes aren't applied during the next maintenance window but instead are applied
  immediately.  Default: The existing name setting Constraints:   The DB parameter group must
  be in the same DB parameter group family as this DB cluster.   The
  DBInstanceParameterGroupName parameter is only valid in combination with the
  AllowMajorVersionUpgrade parameter.
- `"DeletionProtection"`: A value that indicates whether the DB cluster has deletion
  protection enabled. The database can't be deleted when deletion protection is enabled. By
  default, deletion protection is disabled.
- `"Domain"`: The Active Directory directory ID to move the DB cluster to. Specify none to
  remove the cluster from its current domain. The domain must be created prior to this
  operation.  For more information, see Kerberos Authentication in the Amazon Aurora User
  Guide.
- `"DomainIAMRoleName"`: Specify the name of the IAM role to be used when making API calls
  to the Directory Service.
- `"EnableGlobalWriteForwarding"`: A value that indicates whether to enable this DB cluster
  to forward write operations to the primary cluster of an Aurora global database
  (GlobalCluster). By default, write operations are not allowed on Aurora DB clusters that
  are secondary clusters in an Aurora global database. You can set this value only on Aurora
  DB clusters that are members of an Aurora global database. With this parameter enabled, a
  secondary cluster can forward writes to the current primary cluster and the resulting
  changes are replicated back to this cluster. For the primary DB cluster of an Aurora global
  database, this value is used immediately if the primary is demoted by the
  FailoverGlobalCluster API operation, but it does nothing until then.
- `"EnableHttpEndpoint"`: A value that indicates whether to enable the HTTP endpoint for an
  Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled. When enabled, the
  HTTP endpoint provides a connectionless web service API for running SQL queries on the
  Aurora Serverless DB cluster. You can also query your database from inside the RDS console
  with the query editor. For more information, see Using the Data API for Aurora Serverless
  in the Amazon Aurora User Guide.
- `"EnableIAMDatabaseAuthentication"`: A value that indicates whether to enable mapping of
  Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By
  default, mapping is disabled. For more information, see  IAM Database Authentication in the
  Amazon Aurora User Guide.
- `"EngineVersion"`: The version number of the database engine to which you want to
  upgrade. Changing this parameter results in an outage. The change is applied during the
  next maintenance window unless ApplyImmediately is enabled. To list all of the available
  engine versions for aurora (for MySQL 5.6-compatible Aurora), use the following command:
  aws rds describe-db-engine-versions --engine aurora --query
  \"DBEngineVersions[].EngineVersion\"  To list all of the available engine versions for
  aurora-mysql (for MySQL 5.7-compatible Aurora), use the following command:  aws rds
  describe-db-engine-versions --engine aurora-mysql --query
  \"DBEngineVersions[].EngineVersion\"  To list all of the available engine versions for
  aurora-postgresql, use the following command:  aws rds describe-db-engine-versions --engine
  aurora-postgresql --query \"DBEngineVersions[].EngineVersion\"
- `"MasterUserPassword"`: The new password for the master database user. This password can
  contain any printable ASCII character except \"/\", \"\"\", or \"@\". Constraints: Must
  contain from 8 to 41 characters.
- `"NewDBClusterIdentifier"`: The new DB cluster identifier for the DB cluster when
  renaming a DB cluster. This value is stored as a lowercase string. Constraints:   Must
  contain from 1 to 63 letters, numbers, or hyphens   The first character must be a letter
  Can't end with a hyphen or contain two consecutive hyphens   Example: my-cluster2
- `"OptionGroupName"`: A value that indicates that the DB cluster should be associated with
  the specified option group. Changing this parameter doesn't result in an outage except in
  the following case, and the change is applied during the next maintenance window unless the
  ApplyImmediately is enabled for this request. If the parameter change results in an option
  group that enables OEM, this change can cause a brief (sub-second) period during which new
  connections are rejected but existing connections are not interrupted.  Permanent options
  can't be removed from an option group. The option group can't be removed from a DB cluster
  once it is associated with a DB cluster.
- `"Port"`: The port number on which the DB cluster accepts connections. Constraints: Value
  must be 1150-65535  Default: The same port as the original DB cluster.
- `"PreferredBackupWindow"`: The daily time range during which automated backups are
  created if automated backups are enabled, using the BackupRetentionPeriod parameter.  The
  default is a 30-minute window selected at random from an 8-hour block of time for each
  Amazon Web Services Region. To view the time blocks available, see  Backup window in the
  Amazon Aurora User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be
  in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance
  window.   Must be at least 30 minutes.
- `"PreferredMaintenanceWindow"`: The weekly time range during which system maintenance can
  occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is
  a 30-minute window selected at random from an 8-hour block of time for each Amazon Web
  Services Region, occurring on a random day of the week. To see the time blocks available,
  see  Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.
   Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
- `"ScalingConfiguration"`: The scaling properties of the DB cluster. You can only modify
  scaling properties for DB clusters in serverless DB engine mode.
- `"VpcSecurityGroupIds"`: A list of VPC security groups that the DB cluster will belong to.
"""
function modify_dbcluster(
    DBClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ModifyDBCluster",
        Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier);
        aws_config=aws_config,
    )
end
function modify_dbcluster(
    DBClusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    modify_dbcluster_endpoint(dbcluster_endpoint_identifier)
    modify_dbcluster_endpoint(dbcluster_endpoint_identifier, params::Dict{String,<:Any})

Modifies the properties of an endpoint in an Amazon Aurora DB cluster.  This action only
applies to Aurora DB clusters.

# Arguments
- `dbcluster_endpoint_identifier`: The identifier of the endpoint to modify. This parameter
  is stored as a lowercase string.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"EndpointType"`: The type of the endpoint. One of: READER, WRITER, ANY.
- `"ExcludedMembers"`: List of DB instance identifiers that aren't part of the custom
  endpoint group. All other eligible instances are reachable through the custom endpoint.
  Only relevant if the list of static members is empty.
- `"StaticMembers"`: List of DB instance identifiers that are part of the custom endpoint
  group.
"""
function modify_dbcluster_endpoint(
    DBClusterEndpointIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ModifyDBClusterEndpoint",
        Dict{String,Any}("DBClusterEndpointIdentifier" => DBClusterEndpointIdentifier);
        aws_config=aws_config,
    )
end
function modify_dbcluster_endpoint(
    DBClusterEndpointIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBClusterEndpoint",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterEndpointIdentifier" => DBClusterEndpointIdentifier
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    modify_dbcluster_parameter_group(dbcluster_parameter_group_name, parameter)
    modify_dbcluster_parameter_group(dbcluster_parameter_group_name, parameter, params::Dict{String,<:Any})

 Modifies the parameters of a DB cluster parameter group. To modify more than one
parameter, submit a list of the following: ParameterName, ParameterValue, and ApplyMethod.
A maximum of 20 parameters can be modified in a single request.  For more information on
Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User Guide.   After you
create a DB cluster parameter group, you should wait at least 5 minutes before creating
your first DB cluster that uses that DB cluster parameter group as the default parameter
group. This allows Amazon RDS to fully complete the create action before the parameter
group is used as the default for a new DB cluster. This is especially important for
parameters that are critical when creating the default database for a DB cluster, such as
the character set for the default database defined by the character_set_database parameter.
You can use the Parameter Groups option of the Amazon RDS console or the
DescribeDBClusterParameters action to verify that your DB cluster parameter group has been
created or modified. If the modified DB cluster parameter group is used by an Aurora
Serverless cluster, Aurora applies the update immediately. The cluster restart might
interrupt your workload. In that case, your application must reopen any connections and
retry any transactions that were active when the parameter changes took effect.   This
action only applies to Aurora DB clusters.

# Arguments
- `dbcluster_parameter_group_name`: The name of the DB cluster parameter group to modify.
- `parameter`: A list of parameters in the DB cluster parameter group to modify. Valid
  Values (for the application method): immediate | pending-reboot   You can use the immediate
  value with dynamic parameters only. You can use the pending-reboot value for both dynamic
  and static parameters. When the application method is immediate, changes to dynamic
  parameters are applied immediately to the DB clusters associated with the parameter group.
  When the application method is pending-reboot, changes to dynamic and static parameters are
  applied after a reboot without failover to the DB clusters associated with the parameter
  group.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Parameters"`: A list of parameters in the DB cluster parameter group to modify. Valid
  Values (for the application method): immediate | pending-reboot   You can use the immediate
  value with dynamic parameters only. You can use the pending-reboot value for both dynamic
  and static parameters. When the application method is immediate, changes to dynamic
  parameters are applied immediately to the DB clusters associated with the parameter group.
  When the application method is pending-reboot, changes to dynamic and static parameters are
  applied after a reboot without failover to the DB clusters associated with the parameter
  group.
"""
function modify_dbcluster_parameter_group(
    DBClusterParameterGroupName,
    Parameter;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBClusterParameterGroup",
        Dict{String,Any}(
            "DBClusterParameterGroupName" => DBClusterParameterGroupName,
            "Parameter" => Parameter,
        );
        aws_config=aws_config,
    )
end
function modify_dbcluster_parameter_group(
    DBClusterParameterGroupName,
    Parameter,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBClusterParameterGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterParameterGroupName" => DBClusterParameterGroupName,
                    "Parameter" => Parameter,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    modify_dbcluster_snapshot_attribute(attribute_name, dbcluster_snapshot_identifier)
    modify_dbcluster_snapshot_attribute(attribute_name, dbcluster_snapshot_identifier, params::Dict{String,<:Any})

Adds an attribute and values to, or removes an attribute and values from, a manual DB
cluster snapshot. To share a manual DB cluster snapshot with other Amazon Web Services
accounts, specify restore as the AttributeName and use the ValuesToAdd parameter to add a
list of IDs of the Amazon Web Services accounts that are authorized to restore the manual
DB cluster snapshot. Use the value all to make the manual DB cluster snapshot public, which
means that it can be copied or restored by all Amazon Web Services accounts.  Don't add the
all value for any manual DB cluster snapshots that contain private information that you
don't want available to all Amazon Web Services accounts.  If a manual DB cluster snapshot
is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web
Services account IDs for the ValuesToAdd parameter. You can't use all as a value for that
parameter in this case. To view which Amazon Web Services accounts have access to copy or
restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot is public or
private, use the DescribeDBClusterSnapshotAttributes API action. The accounts are returned
as values for the restore attribute.  This action only applies to Aurora DB clusters.

# Arguments
- `attribute_name`: The name of the DB cluster snapshot attribute to modify. To manage
  authorization for other Amazon Web Services accounts to copy or restore a manual DB cluster
  snapshot, set this value to restore.  To view the list of attributes available to modify,
  use the DescribeDBClusterSnapshotAttributes API action.
- `dbcluster_snapshot_identifier`: The identifier for the DB cluster snapshot to modify the
  attributes for.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ValuesToAdd"`: A list of DB cluster snapshot attributes to add to the attribute
  specified by AttributeName. To authorize other Amazon Web Services accounts to copy or
  restore a manual DB cluster snapshot, set this list to include one or more Amazon Web
  Services account IDs, or all to make the manual DB cluster snapshot restorable by any
  Amazon Web Services account. Do not add the all value for any manual DB cluster snapshots
  that contain private information that you don't want available to all Amazon Web Services
  accounts.
- `"ValuesToRemove"`: A list of DB cluster snapshot attributes to remove from the attribute
  specified by AttributeName. To remove authorization for other Amazon Web Services accounts
  to copy or restore a manual DB cluster snapshot, set this list to include one or more
  Amazon Web Services account identifiers, or all to remove authorization for any Amazon Web
  Services account to copy or restore the DB cluster snapshot. If you specify all, an Amazon
  Web Services account whose account ID is explicitly added to the restore attribute can
  still copy or restore a manual DB cluster snapshot.
"""
function modify_dbcluster_snapshot_attribute(
    AttributeName,
    DBClusterSnapshotIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBClusterSnapshotAttribute",
        Dict{String,Any}(
            "AttributeName" => AttributeName,
            "DBClusterSnapshotIdentifier" => DBClusterSnapshotIdentifier,
        );
        aws_config=aws_config,
    )
end
function modify_dbcluster_snapshot_attribute(
    AttributeName,
    DBClusterSnapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBClusterSnapshotAttribute",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "AttributeName" => AttributeName,
                    "DBClusterSnapshotIdentifier" => DBClusterSnapshotIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    modify_dbinstance(dbinstance_identifier)
    modify_dbinstance(dbinstance_identifier, params::Dict{String,<:Any})

Modifies settings for a DB instance. You can change one or more database configuration
parameters by specifying these parameters and the new values in the request. To learn what
modifications you can make to your DB instance, call DescribeValidDBInstanceModifications
before you call ModifyDBInstance.

# Arguments
- `dbinstance_identifier`: The DB instance identifier. This value is stored as a lowercase
  string. Constraints:   Must match the identifier of an existing DBInstance.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AllocatedStorage"`: The new amount of storage in gibibytes (GiB) to allocate for the DB
  instance.  For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least
  10% greater than the current value. Values that are not at least 10% greater than the
  existing value are rounded up so that they are 10% greater than the current value.  For the
  valid values for allocated storage for each engine, see CreateDBInstance.
- `"AllowMajorVersionUpgrade"`: A value that indicates whether major version upgrades are
  allowed. Changing this parameter doesn't result in an outage and the change is
  asynchronously applied as soon as possible. Constraints: Major version upgrades must be
  allowed when specifying a value for the EngineVersion parameter that is a different major
  version than the DB instance's current version.
- `"ApplyImmediately"`: A value that indicates whether the modifications in this request
  and any pending modifications are asynchronously applied as soon as possible, regardless of
  the PreferredMaintenanceWindow setting for the DB instance. By default, this parameter is
  disabled.   If this parameter is disabled, changes to the DB instance are applied during
  the next maintenance window. Some parameter changes can cause an outage and are applied on
  the next call to RebootDBInstance, or the next failure reboot. Review the table of
  parameters in Modifying a DB Instance in the Amazon RDS User Guide. to see the impact of
  enabling or disabling ApplyImmediately for each modified parameter and to determine when
  the changes are applied.
- `"AutoMinorVersionUpgrade"`:  A value that indicates whether minor version upgrades are
  applied automatically to the DB instance during the maintenance window. Changing this
  parameter doesn't result in an outage except in the following case and the change is
  asynchronously applied as soon as possible. An outage results if this parameter is enabled
  during the maintenance window, and a newer minor version is available, and RDS has enabled
  auto patching for that engine version.
- `"AwsBackupRecoveryPointArn"`: The Amazon Resource Name (ARN) of the recovery point in
  Amazon Web Services Backup.
- `"BackupRetentionPeriod"`: The number of days to retain automated backups. Setting this
  parameter to a positive number enables backups. Setting this parameter to 0 disables
  automated backups.  Enabling and disabling backups can result in a brief I/O suspension
  that lasts from a few seconds to a few minutes, depending on the size and class of your DB
  instance.  These changes are applied during the next maintenance window unless the
  ApplyImmediately parameter is enabled for this request. If you change the parameter from
  one non-zero value to another non-zero value, the change is asynchronously applied as soon
  as possible.  Amazon Aurora  Not applicable. The retention period for automated backups is
  managed by the DB cluster. For more information, see ModifyDBCluster. Default: Uses
  existing setting Constraints:   Must be a value from 0 to 35   Can be specified for a MySQL
  read replica only if the source is running MySQL 5.6 or later   Can be specified for a
  PostgreSQL read replica only if the source is running PostgreSQL 9.3.5   Can't be set to 0
  if the DB instance is a source to read replicas
- `"CACertificateIdentifier"`: Indicates the certificate that needs to be associated with
  the instance.
- `"CertificateRotationRestart"`: A value that indicates whether the DB instance is
  restarted when you rotate your SSL/TLS certificate. By default, the DB instance is
  restarted when you rotate your SSL/TLS certificate. The certificate is not updated until
  the DB instance is restarted.  Set this parameter only if you are not using SSL/TLS to
  connect to the DB instance.  If you are using SSL/TLS to connect to the DB instance, follow
  the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:   For
  more information about rotating your SSL/TLS certificate for RDS DB engines, see  Rotating
  Your SSL/TLS Certificate. in the Amazon RDS User Guide.    For more information about
  rotating your SSL/TLS certificate for Aurora DB engines, see  Rotating Your SSL/TLS
  Certificate in the Amazon Aurora User Guide.
- `"CloudwatchLogsExportConfiguration"`: The configuration setting for the log types to be
  enabled for export to CloudWatch Logs for a specific DB instance. A change to the
  CloudwatchLogsExportConfiguration parameter is always applied to the DB instance
  immediately. Therefore, the ApplyImmediately parameter has no effect.
- `"CopyTagsToSnapshot"`: A value that indicates whether to copy all tags from the DB
  instance to snapshots of the DB instance. By default, tags are not copied.  Amazon Aurora
  Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value
  for an Aurora DB instance has no effect on the DB cluster setting. For more information,
  see ModifyDBCluster.
- `"DBInstanceClass"`: The new compute and memory capacity of the DB instance, for example,
  db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions,
  or for all database engines. For the full list of DB instance classes, and availability for
  your engine, see DB Instance Class in the Amazon RDS User Guide.  If you modify the DB
  instance class, an outage occurs during the change. The change is applied during the next
  maintenance window, unless ApplyImmediately is enabled for this request.  Default: Uses
  existing setting
- `"DBParameterGroupName"`: The name of the DB parameter group to apply to the DB instance.
  Changing this setting doesn't result in an outage. The parameter group name itself is
  changed immediately, but the actual parameter changes are not applied until you reboot the
  instance without failover. In this case, the DB instance isn't rebooted automatically and
  the parameter changes isn't applied during the next maintenance window. Default: Uses
  existing setting Constraints: The DB parameter group must be in the same DB parameter group
  family as this DB instance.
- `"DBPortNumber"`: The port number on which the database accepts connections. The value of
  the DBPortNumber parameter must not match any of the port values specified for options in
  the option group for the DB instance. Your database will restart when you change the
  DBPortNumber value regardless of the value of the ApplyImmediately parameter.  MySQL
  Default: 3306   Valid values: 1150-65535   MariaDB   Default: 3306   Valid values:
  1150-65535   PostgreSQL   Default: 5432   Valid values: 1150-65535  Type: Integer  Oracle
  Default: 1521   Valid values: 1150-65535   SQL Server   Default: 1433   Valid values:
  1150-65535 except 1234, 1434, 3260, 3343, 3389, 47001, and 49152-49156.  Amazon Aurora
  Default: 3306   Valid values: 1150-65535
- `"DBSecurityGroups"`: A list of DB security groups to authorize on this DB instance.
  Changing this setting doesn't result in an outage and the change is asynchronously applied
  as soon as possible. Constraints:   If supplied, must match existing DBSecurityGroups.
- `"DBSubnetGroupName"`: The new DB subnet group for the DB instance. You can use this
  parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC,
  you can also use this parameter to move your DB instance into a VPC. For more information,
  see Working with a DB instance in a VPC in the Amazon RDS User Guide.  Changing the subnet
  group causes an outage during the change. The change is applied during the next maintenance
  window, unless you enable ApplyImmediately.  Constraints: If supplied, must match the name
  of an existing DBSubnetGroup. Example: mySubnetGroup
- `"DeletionProtection"`: A value that indicates whether the DB instance has deletion
  protection enabled. The database can't be deleted when deletion protection is enabled. By
  default, deletion protection is disabled. For more information, see  Deleting a DB
  Instance.
- `"Domain"`: The Active Directory directory ID to move the DB instance to. Specify none to
  remove the instance from its current domain. The domain must be created prior to this
  operation. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances
  can be created in an Active Directory Domain. For more information, see  Kerberos
  Authentication in the Amazon RDS User Guide.
- `"DomainIAMRoleName"`: The name of the IAM role to use when making API calls to the
  Directory Service.
- `"EnableCustomerOwnedIp"`: A value that indicates whether to enable a customer-owned IP
  address (CoIP) for an RDS on Outposts DB instance. A CoIP provides local or external
  connectivity to resources in your Outpost subnets through your on-premises network. For
  some use cases, a CoIP can provide lower latency for connections to the DB instance from
  outside of its virtual private cloud (VPC) on your local network. For more information
  about RDS on Outposts, see Working with Amazon RDS on Amazon Web Services Outposts in the
  Amazon RDS User Guide. For more information about CoIPs, see Customer-owned IP addresses in
  the Amazon Web Services Outposts User Guide.
- `"EnableIAMDatabaseAuthentication"`: A value that indicates whether to enable mapping of
  Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By
  default, mapping is disabled. This setting doesn't apply to Amazon Aurora. Mapping Amazon
  Web Services IAM accounts to database accounts is managed by the DB cluster. For more
  information about IAM database authentication, see  IAM Database Authentication for MySQL
  and PostgreSQL in the Amazon RDS User Guide.
- `"EnablePerformanceInsights"`: A value that indicates whether to enable Performance
  Insights for the DB instance. For more information, see Using Amazon Performance Insights
  in the Amazon Relational Database Service User Guide.
- `"EngineVersion"`:  The version number of the database engine to upgrade to. Changing
  this parameter results in an outage and the change is applied during the next maintenance
  window unless the ApplyImmediately parameter is enabled for this request.  For major
  version upgrades, if a nondefault DB parameter group is currently in use, a new DB
  parameter group in the DB parameter group family for the new engine version must be
  specified. The new DB parameter group can be the default for that DB parameter group
  family. If you specify only a major version, Amazon RDS will update the DB instance to the
  default minor version if the current minor version is lower. For information about valid
  engine versions, see CreateDBInstance, or call DescribeDBEngineVersions.
- `"Iops"`: The new Provisioned IOPS (I/O operations per second) value for the RDS
  instance.  Changing this setting doesn't result in an outage and the change is applied
  during the next maintenance window unless the ApplyImmediately parameter is enabled for
  this request. If you are migrating from Provisioned IOPS to standard storage, set this
  value to 0. The DB instance will require a reboot for the change in storage type to take
  effect.  If you choose to migrate your DB instance from using standard storage to using
  Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can
  take time. The duration of the migration depends on several factors such as database load,
  storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if
  any), and the number of prior scale storage operations. Typical migration times are under
  24 hours, but the process can take up to several days in some cases. During the migration,
  the DB instance is available for use, but might experience performance degradation. While
  the migration takes place, nightly backups for the instance are suspended. No other Amazon
  RDS operations can take place for the instance, including modifying the instance, rebooting
  the instance, deleting the instance, creating a read replica for the instance, and creating
  a DB snapshot of the instance.  Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL,
  the value supplied must be at least 10% greater than the current value. Values that are not
  at least 10% greater than the existing value are rounded up so that they are 10% greater
  than the current value.  Default: Uses existing setting
- `"LicenseModel"`: The license model for the DB instance. Valid values: license-included |
  bring-your-own-license | general-public-license
- `"MasterUserPassword"`: The new password for the master user. The password can include
  any printable ASCII character except \"/\", \"\"\", or \"@\".  Changing this parameter
  doesn't result in an outage and the change is asynchronously applied as soon as possible.
  Between the time of the request and the completion of the request, the MasterUserPassword
  element exists in the PendingModifiedValues element of the operation response.   Amazon
  Aurora  Not applicable. The password for the master user is managed by the DB cluster. For
  more information, see ModifyDBCluster.  Default: Uses existing setting  MariaDB
  Constraints: Must contain from 8 to 41 characters.  Microsoft SQL Server  Constraints: Must
  contain from 8 to 128 characters.  MySQL  Constraints: Must contain from 8 to 41
  characters.  Oracle  Constraints: Must contain from 8 to 30 characters.  PostgreSQL
  Constraints: Must contain from 8 to 128 characters.  Amazon RDS API actions never return
  the password, so this action provides a way to regain access to a primary instance user if
  the password is lost. This includes restoring privileges that might have been accidentally
  revoked.
- `"MaxAllocatedStorage"`: The upper limit in gibibytes (GiB) to which Amazon RDS can
  automatically scale the storage of the DB instance. For more information about this
  setting, including limitations that apply to it, see  Managing capacity automatically with
  Amazon RDS storage autoscaling in the Amazon RDS User Guide.
- `"MonitoringInterval"`: The interval, in seconds, between points when Enhanced Monitoring
  metrics are collected for the DB instance. To disable collecting Enhanced Monitoring
  metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also
  set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60
- `"MonitoringRoleArn"`: The ARN for the IAM role that permits RDS to send enhanced
  monitoring metrics to Amazon CloudWatch Logs. For example,
  arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go
  to To create an IAM role for Amazon RDS Enhanced Monitoring in the Amazon RDS User Guide.
  If MonitoringInterval is set to a value other than 0, then you must supply a
  MonitoringRoleArn value.
- `"MultiAZ"`: A value that indicates whether the DB instance is a Multi-AZ deployment.
  Changing this parameter doesn't result in an outage and the change is applied during the
  next maintenance window unless the ApplyImmediately parameter is enabled for this request.
- `"NewDBInstanceIdentifier"`:  The new DB instance identifier for the DB instance when
  renaming a DB instance. When you change the DB instance identifier, an instance reboot
  occurs immediately if you enable ApplyImmediately, or will occur during the next
  maintenance window if you disable Apply Immediately. This value is stored as a lowercase
  string.  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first
  character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.
  Example: mydbinstance
- `"OptionGroupName"`:  A value that indicates the DB instance should be associated with
  the specified option group. Changing this parameter doesn't result in an outage except in
  the following case and the change is applied during the next maintenance window unless the
  ApplyImmediately parameter is enabled for this request. If the parameter change results in
  an option group that enables OEM, this change can cause a brief (sub-second) period during
  which new connections are rejected but existing connections are not interrupted.  Permanent
  options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an
  option group, and that option group can't be removed from a DB instance once it is
  associated with a DB instance
- `"PerformanceInsightsKMSKeyId"`: The Amazon Web Services KMS key identifier for
  encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the
  key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master
  key (CMK). If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS
  uses your default CMK. There is a default CMK for your Amazon Web Services account. Your
  Amazon Web Services account has a different default CMK for each Amazon Web Services Region.
- `"PerformanceInsightsRetentionPeriod"`: The amount of time, in days, to retain
  Performance Insights data. Valid values are 7 or 731 (2 years).
- `"PreferredBackupWindow"`:  The daily time range during which automated backups are
  created if automated backups are enabled, as determined by the BackupRetentionPeriod
  parameter. Changing this parameter doesn't result in an outage and the change is
  asynchronously applied as soon as possible. The default is a 30-minute window selected at
  random from an 8-hour block of time for each Amazon Web Services Region. For more
  information, see Backup window in the Amazon RDS User Guide.   Amazon Aurora  Not
  applicable. The daily time range for creating automated backups is managed by the DB
  cluster. For more information, see ModifyDBCluster. Constraints:   Must be in the format
  hh24:mi-hh24:mi   Must be in Universal Time Coordinated (UTC)   Must not conflict with the
  preferred maintenance window   Must be at least 30 minutes
- `"PreferredMaintenanceWindow"`: The weekly time range (in UTC) during which system
  maintenance can occur, which might result in an outage. Changing this parameter doesn't
  result in an outage, except in the following situation, and the change is asynchronously
  applied as soon as possible. If there are pending actions that cause a reboot, and the
  maintenance window is changed to include the current time, then changing this parameter
  will cause a reboot of the DB instance. If moving this window to the current time, there
  must be at least 30 minutes between the current time and end of the window to ensure
  pending changes are applied. For more information, see Amazon RDS Maintenance Window in the
  Amazon RDS User Guide.  Default: Uses existing setting Format: ddd:hh24:mi-ddd:hh24:mi
  Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes
- `"ProcessorFeatures"`: The number of CPU cores and the number of threads per core for the
  DB instance class of the DB instance.
- `"PromotionTier"`: A value that specifies the order in which an Aurora Replica is
  promoted to the primary instance after a failure of the existing primary instance. For more
  information, see  Fault Tolerance for an Aurora DB Cluster in the Amazon Aurora User Guide.
   Default: 1 Valid Values: 0 - 15
- `"PubliclyAccessible"`: A value that indicates whether the DB instance is publicly
  accessible.  When the DB instance is publicly accessible, its DNS endpoint resolves to the
  private IP address from within the DB instance's VPC, and to the public IP address from
  outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the
  security group it uses, and that public access is not permitted if the security group
  assigned to the DB instance doesn't permit it. When the DB instance isn't publicly
  accessible, it is an internal DB instance with a DNS name that resolves to a private IP
  address.  PubliclyAccessible only applies to DB instances in a VPC. The DB instance must be
  part of a public subnet and PubliclyAccessible must be enabled for it to be publicly
  accessible.  Changes to the PubliclyAccessible parameter are applied immediately regardless
  of the value of the ApplyImmediately parameter.
- `"ReplicaMode"`: A value that sets the open mode of a replica database to either mounted
  or read-only.  Currently, this parameter is only supported for Oracle DB instances.
  Mounted DB replicas are included in Oracle Enterprise Edition. The main use case for
  mounted replicas is cross-Region disaster recovery. The primary database doesn't use Active
  Data Guard to transmit information to the mounted replica. Because it doesn't accept user
  connections, a mounted replica can't serve a read-only workload. For more information, see
  Working with Oracle Read Replicas for Amazon RDS in the Amazon RDS User Guide.
- `"StorageType"`: Specifies the storage type to be associated with the DB instance.  If
  you specify Provisioned IOPS (io1), you must also include a value for the Iops parameter.
  If you choose to migrate your DB instance from using standard storage to using Provisioned
  IOPS, or from using Provisioned IOPS to using standard storage, the process can take time.
  The duration of the migration depends on several factors such as database load, storage
  size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and
  the number of prior scale storage operations. Typical migration times are under 24 hours,
  but the process can take up to several days in some cases. During the migration, the DB
  instance is available for use, but might experience performance degradation. While the
  migration takes place, nightly backups for the instance are suspended. No other Amazon RDS
  operations can take place for the instance, including modifying the instance, rebooting the
  instance, deleting the instance, creating a read replica for the instance, and creating a
  DB snapshot of the instance.   Valid values: standard | gp2 | io1  Default: io1 if the Iops
  parameter is specified, otherwise gp2
- `"TdeCredentialArn"`: The ARN from the key store with which to associate the instance for
  TDE encryption.
- `"TdeCredentialPassword"`: The password for the given ARN from the key store in order to
  access the device.
- `"UseDefaultProcessorFeatures"`: A value that indicates whether the DB instance class of
  the DB instance uses its default processor features.
- `"VpcSecurityGroupIds"`: A list of EC2 VPC security groups to authorize on this DB
  instance. This change is asynchronously applied as soon as possible.  Amazon Aurora  Not
  applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.
  For more information, see ModifyDBCluster. Constraints:   If supplied, must match existing
  VpcSecurityGroupIds.
"""
function modify_dbinstance(
    DBInstanceIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ModifyDBInstance",
        Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier);
        aws_config=aws_config,
    )
end
function modify_dbinstance(
    DBInstanceIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBInstance",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    modify_dbparameter_group(dbparameter_group_name, parameter)
    modify_dbparameter_group(dbparameter_group_name, parameter, params::Dict{String,<:Any})

 Modifies the parameters of a DB parameter group. To modify more than one parameter, submit
a list of the following: ParameterName, ParameterValue, and ApplyMethod. A maximum of 20
parameters can be modified in a single request.   After you modify a DB parameter group,
you should wait at least 5 minutes before creating your first DB instance that uses that DB
parameter group as the default parameter group. This allows Amazon RDS to fully complete
the modify action before the parameter group is used as the default for a new DB instance.
This is especially important for parameters that are critical when creating the default
database for a DB instance, such as the character set for the default database defined by
the character_set_database parameter. You can use the Parameter Groups option of the Amazon
RDS console or the DescribeDBParameters command to verify that your DB parameter group has
been created or modified.

# Arguments
- `dbparameter_group_name`: The name of the DB parameter group. Constraints:   If supplied,
  must match the name of an existing DBParameterGroup.
- `parameter`: An array of parameter names, values, and the application methods for the
  parameter update. At least one parameter name, value, and application method method must be
  supplied; later arguments are optional. A maximum of 20 parameters can be modified in a
  single request. Valid Values (for the application method): immediate | pending-reboot   You
  can use the immediate value with dynamic parameters only. You can use the pending-reboot
  value for both dynamic and static parameters. When the application method is immediate,
  changes to dynamic parameters are applied immediately to the DB instances associated with
  the parameter group. When the application method is pending-reboot, changes to dynamic and
  static parameters are applied after a reboot without failover to the DB instances
  associated with the parameter group.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Parameters"`: An array of parameter names, values, and the application methods for the
  parameter update. At least one parameter name, value, and application method method must be
  supplied; later arguments are optional. A maximum of 20 parameters can be modified in a
  single request. Valid Values (for the application method): immediate | pending-reboot   You
  can use the immediate value with dynamic parameters only. You can use the pending-reboot
  value for both dynamic and static parameters. When the application method is immediate,
  changes to dynamic parameters are applied immediately to the DB instances associated with
  the parameter group. When the application method is pending-reboot, changes to dynamic and
  static parameters are applied after a reboot without failover to the DB instances
  associated with the parameter group.
"""
function modify_dbparameter_group(
    DBParameterGroupName, Parameter; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ModifyDBParameterGroup",
        Dict{String,Any}(
            "DBParameterGroupName" => DBParameterGroupName, "Parameter" => Parameter
        );
        aws_config=aws_config,
    )
end
function modify_dbparameter_group(
    DBParameterGroupName,
    Parameter,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBParameterGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBParameterGroupName" => DBParameterGroupName, "Parameter" => Parameter
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    modify_dbproxy(dbproxy_name)
    modify_dbproxy(dbproxy_name, params::Dict{String,<:Any})

Changes the settings for an existing DB proxy.

# Arguments
- `dbproxy_name`: The identifier for the DBProxy to modify.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Auth"`: The new authentication settings for the DBProxy.
- `"DebugLogging"`: Whether the proxy includes detailed information about SQL statements in
  its logs. This information helps you to debug issues involving SQL behavior or the
  performance and scalability of the proxy connections. The debug information includes the
  text of SQL statements that you submit through the proxy. Thus, only enable this setting
  when needed for debugging, and only when you have security measures in place to safeguard
  any sensitive information that appears in the logs.
- `"IdleClientTimeout"`: The number of seconds that a connection to the proxy can be
  inactive before the proxy disconnects it. You can set this value higher or lower than the
  connection timeout limit for the associated database.
- `"NewDBProxyName"`: The new identifier for the DBProxy. An identifier must begin with a
  letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen
  or contain two consecutive hyphens.
- `"RequireTLS"`: Whether Transport Layer Security (TLS) encryption is required for
  connections to the proxy. By enabling this setting, you can enforce encrypted TLS
  connections to the proxy, even if the associated database doesn't use TLS.
- `"RoleArn"`: The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access
  secrets in Amazon Web Services Secrets Manager.
- `"SecurityGroups"`: The new list of security groups for the DBProxy.
"""
function modify_dbproxy(DBProxyName; aws_config::AbstractAWSConfig=global_aws_config())
    return rds(
        "ModifyDBProxy",
        Dict{String,Any}("DBProxyName" => DBProxyName);
        aws_config=aws_config,
    )
end
function modify_dbproxy(
    DBProxyName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBProxy",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("DBProxyName" => DBProxyName), params)
        );
        aws_config=aws_config,
    )
end

"""
    modify_dbproxy_endpoint(dbproxy_endpoint_name)
    modify_dbproxy_endpoint(dbproxy_endpoint_name, params::Dict{String,<:Any})

Changes the settings for an existing DB proxy endpoint.

# Arguments
- `dbproxy_endpoint_name`: The name of the DB proxy sociated with the DB proxy endpoint
  that you want to modify.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"NewDBProxyEndpointName"`: The new identifier for the DBProxyEndpoint. An identifier
  must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't
  end with a hyphen or contain two consecutive hyphens.
- `"VpcSecurityGroupIds"`: The VPC security group IDs for the DB proxy endpoint. When the
  DB proxy endpoint uses a different VPC than the original proxy, you also specify a
  different set of security group IDs than for the original proxy.
"""
function modify_dbproxy_endpoint(
    DBProxyEndpointName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ModifyDBProxyEndpoint",
        Dict{String,Any}("DBProxyEndpointName" => DBProxyEndpointName);
        aws_config=aws_config,
    )
end
function modify_dbproxy_endpoint(
    DBProxyEndpointName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBProxyEndpoint",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBProxyEndpointName" => DBProxyEndpointName),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    modify_dbproxy_target_group(dbproxy_name, target_group_name)
    modify_dbproxy_target_group(dbproxy_name, target_group_name, params::Dict{String,<:Any})

Modifies the properties of a DBProxyTargetGroup.

# Arguments
- `dbproxy_name`: The name of the new proxy to which to assign the target group.
- `target_group_name`: The name of the new target group to assign to the proxy.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ConnectionPoolConfig"`: The settings that determine the size and behavior of the
  connection pool for the target group.
- `"NewName"`: The new name for the modified DBProxyTarget. An identifier must begin with a
  letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen
  or contain two consecutive hyphens.
"""
function modify_dbproxy_target_group(
    DBProxyName, TargetGroupName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ModifyDBProxyTargetGroup",
        Dict{String,Any}(
            "DBProxyName" => DBProxyName, "TargetGroupName" => TargetGroupName
        );
        aws_config=aws_config,
    )
end
function modify_dbproxy_target_group(
    DBProxyName,
    TargetGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBProxyTargetGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBProxyName" => DBProxyName, "TargetGroupName" => TargetGroupName
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    modify_dbsnapshot(dbsnapshot_identifier)
    modify_dbsnapshot(dbsnapshot_identifier, params::Dict{String,<:Any})

Updates a manual DB snapshot with a new engine version. The snapshot can be encrypted or
unencrypted, but not shared or public.  Amazon RDS supports upgrading DB snapshots for
MySQL, Oracle, and PostgreSQL.

# Arguments
- `dbsnapshot_identifier`: The identifier of the DB snapshot to modify.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"EngineVersion"`: The engine version to upgrade the DB snapshot to.  The following are
  the database engines and engine versions that are available when you upgrade a DB snapshot.
    MySQL     5.5.46 (supported for 5.1 DB snapshots)    Oracle     12.1.0.2.v8 (supported
  for 12.1.0.1 DB snapshots)    11.2.0.4.v12 (supported for 11.2.0.2 DB snapshots)
  11.2.0.4.v11 (supported for 11.2.0.3 DB snapshots)    PostgreSQL  For the list of engine
  versions that are available for upgrading a DB snapshot, see  Upgrading the PostgreSQL DB
  Engine for Amazon RDS.
- `"OptionGroupName"`: The option group to identify with the upgraded DB snapshot.  You can
  specify this parameter when you upgrade an Oracle DB snapshot. The same option group
  considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more
  information, see Option group considerations in the Amazon RDS User Guide.
"""
function modify_dbsnapshot(
    DBSnapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ModifyDBSnapshot",
        Dict{String,Any}("DBSnapshotIdentifier" => DBSnapshotIdentifier);
        aws_config=aws_config,
    )
end
function modify_dbsnapshot(
    DBSnapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBSnapshot",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBSnapshotIdentifier" => DBSnapshotIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    modify_dbsnapshot_attribute(attribute_name, dbsnapshot_identifier)
    modify_dbsnapshot_attribute(attribute_name, dbsnapshot_identifier, params::Dict{String,<:Any})

Adds an attribute and values to, or removes an attribute and values from, a manual DB
snapshot. To share a manual DB snapshot with other Amazon Web Services accounts, specify
restore as the AttributeName and use the ValuesToAdd parameter to add a list of IDs of the
Amazon Web Services accounts that are authorized to restore the manual DB snapshot. Uses
the value all to make the manual DB snapshot public, which means it can be copied or
restored by all Amazon Web Services accounts.  Don't add the all value for any manual DB
snapshots that contain private information that you don't want available to all Amazon Web
Services accounts.  If the manual DB snapshot is encrypted, it can be shared, but only by
specifying a list of authorized Amazon Web Services account IDs for the ValuesToAdd
parameter. You can't use all as a value for that parameter in this case. To view which
Amazon Web Services accounts have access to copy or restore a manual DB snapshot, or
whether a manual DB snapshot public or private, use the DescribeDBSnapshotAttributes API
action. The accounts are returned as values for the restore attribute.

# Arguments
- `attribute_name`: The name of the DB snapshot attribute to modify. To manage
  authorization for other Amazon Web Services accounts to copy or restore a manual DB
  snapshot, set this value to restore.  To view the list of attributes available to modify,
  use the DescribeDBSnapshotAttributes API action.
- `dbsnapshot_identifier`: The identifier for the DB snapshot to modify the attributes for.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ValuesToAdd"`: A list of DB snapshot attributes to add to the attribute specified by
  AttributeName. To authorize other Amazon Web Services accounts to copy or restore a manual
  snapshot, set this list to include one or more Amazon Web Services account IDs, or all to
  make the manual DB snapshot restorable by any Amazon Web Services account. Do not add the
  all value for any manual DB snapshots that contain private information that you don't want
  available to all Amazon Web Services accounts.
- `"ValuesToRemove"`: A list of DB snapshot attributes to remove from the attribute
  specified by AttributeName. To remove authorization for other Amazon Web Services accounts
  to copy or restore a manual snapshot, set this list to include one or more Amazon Web
  Services account identifiers, or all to remove authorization for any Amazon Web Services
  account to copy or restore the DB snapshot. If you specify all, an Amazon Web Services
  account whose account ID is explicitly added to the restore attribute can still copy or
  restore the manual DB snapshot.
"""
function modify_dbsnapshot_attribute(
    AttributeName, DBSnapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ModifyDBSnapshotAttribute",
        Dict{String,Any}(
            "AttributeName" => AttributeName, "DBSnapshotIdentifier" => DBSnapshotIdentifier
        );
        aws_config=aws_config,
    )
end
function modify_dbsnapshot_attribute(
    AttributeName,
    DBSnapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBSnapshotAttribute",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "AttributeName" => AttributeName,
                    "DBSnapshotIdentifier" => DBSnapshotIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    modify_dbsubnet_group(dbsubnet_group_name, subnet_identifier)
    modify_dbsubnet_group(dbsubnet_group_name, subnet_identifier, params::Dict{String,<:Any})

Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in
at least two AZs in the Amazon Web Services Region.

# Arguments
- `dbsubnet_group_name`: The name for the DB subnet group. This value is stored as a
  lowercase string. You can't modify the default subnet group.  Constraints: Must match the
  name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup
- `subnet_identifier`: The EC2 subnet IDs for the DB subnet group.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBSubnetGroupDescription"`: The description for the DB subnet group.
- `"SubnetIds"`: The EC2 subnet IDs for the DB subnet group.
"""
function modify_dbsubnet_group(
    DBSubnetGroupName, SubnetIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ModifyDBSubnetGroup",
        Dict{String,Any}(
            "DBSubnetGroupName" => DBSubnetGroupName, "SubnetIdentifier" => SubnetIdentifier
        );
        aws_config=aws_config,
    )
end
function modify_dbsubnet_group(
    DBSubnetGroupName,
    SubnetIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyDBSubnetGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBSubnetGroupName" => DBSubnetGroupName,
                    "SubnetIdentifier" => SubnetIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    modify_event_subscription(subscription_name)
    modify_event_subscription(subscription_name, params::Dict{String,<:Any})

Modifies an existing RDS event notification subscription. You can't modify the source
identifiers using this call. To change source identifiers for a subscription, use the
AddSourceIdentifierToSubscription and RemoveSourceIdentifierFromSubscription calls. You can
see a list of the event categories for a given source type (SourceType) in Events in the
Amazon RDS User Guide or by using the DescribeEventCategories operation.

# Arguments
- `subscription_name`: The name of the RDS event notification subscription.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Enabled"`:  A value that indicates whether to activate the subscription.
- `"EventCategories"`:  A list of event categories for a source type (SourceType) that you
  want to subscribe to. You can see a list of the categories for a given source type in
  Events in the Amazon RDS User Guide or by using the DescribeEventCategories operation.
- `"SnsTopicArn"`: The Amazon Resource Name (ARN) of the SNS topic created for event
  notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
- `"SourceType"`: The type of source that is generating the events. For example, if you
  want to be notified of events generated by a DB instance, you would set this parameter to
  db-instance. If this value isn't specified, all events are returned. Valid values:
  db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot |
  db-cluster-snapshot
"""
function modify_event_subscription(
    SubscriptionName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ModifyEventSubscription",
        Dict{String,Any}("SubscriptionName" => SubscriptionName);
        aws_config=aws_config,
    )
end
function modify_event_subscription(
    SubscriptionName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyEventSubscription",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("SubscriptionName" => SubscriptionName), params
            ),
        );
        aws_config=aws_config,
    )
end

"""
    modify_global_cluster()
    modify_global_cluster(params::Dict{String,<:Any})

 Modify a setting for an Amazon Aurora global cluster. You can change one or more database
configuration parameters by specifying these parameters and the new values in the request.
For more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora
User Guide.   This action only applies to Aurora DB clusters.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AllowMajorVersionUpgrade"`: A value that indicates whether major version upgrades are
  allowed. Constraints: You must allow major version upgrades when specifying a value for the
  EngineVersion parameter that is a different major version than the DB cluster's current
  version. If you upgrade the major version of a global database, the cluster and DB instance
  parameter groups are set to the default parameter groups for the new version. Apply any
  custom parameter groups after completing the upgrade.
- `"DeletionProtection"`:  Indicates if the global database cluster has deletion protection
  enabled. The global database cluster can't be deleted when deletion protection is enabled.
- `"EngineVersion"`: The version number of the database engine to which you want to
  upgrade. Changing this parameter results in an outage. The change is applied during the
  next maintenance window unless ApplyImmediately is enabled. To list all of the available
  engine versions for aurora (for MySQL 5.6-compatible Aurora), use the following command:
  aws rds describe-db-engine-versions --engine aurora --query '*[]|[?SupportsGlobalDatabases
  == `true`].[EngineVersion]'  To list all of the available engine versions for aurora-mysql
  (for MySQL 5.7-compatible Aurora), use the following command:  aws rds
  describe-db-engine-versions --engine aurora-mysql --query '*[]|[?SupportsGlobalDatabases ==
  `true`].[EngineVersion]'  To list all of the available engine versions for
  aurora-postgresql, use the following command:  aws rds describe-db-engine-versions --engine
  aurora-postgresql --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'
- `"GlobalClusterIdentifier"`:  The DB cluster identifier for the global cluster being
  modified. This parameter isn't case-sensitive.  Constraints:   Must match the identifier of
  an existing global database cluster.
- `"NewGlobalClusterIdentifier"`:  The new cluster identifier for the global database
  cluster when modifying a global database cluster. This value is stored as a lowercase
  string.  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   The first
  character must be a letter   Can't end with a hyphen or contain two consecutive hyphens
  Example: my-cluster2
"""
function modify_global_cluster(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("ModifyGlobalCluster"; aws_config=aws_config)
end
function modify_global_cluster(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("ModifyGlobalCluster", params; aws_config=aws_config)
end

"""
    modify_option_group(option_group_name)
    modify_option_group(option_group_name, params::Dict{String,<:Any})

Modifies an existing option group.

# Arguments
- `option_group_name`: The name of the option group to be modified. Permanent options, such
  as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group,
  and that option group can't be removed from a DB instance once it is associated with a DB
  instance

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ApplyImmediately"`: A value that indicates whether to apply the change immediately or
  during the next maintenance window for each instance associated with the option group.
- `"OptionsToInclude"`: Options in this list are added to the option group or, if already
  present, the specified configuration is used to update the existing configuration.
- `"OptionsToRemove"`: Options in this list are removed from the option group.
"""
function modify_option_group(
    OptionGroupName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ModifyOptionGroup",
        Dict{String,Any}("OptionGroupName" => OptionGroupName);
        aws_config=aws_config,
    )
end
function modify_option_group(
    OptionGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ModifyOptionGroup",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("OptionGroupName" => OptionGroupName), params
            ),
        );
        aws_config=aws_config,
    )
end

"""
    promote_read_replica(dbinstance_identifier)
    promote_read_replica(dbinstance_identifier, params::Dict{String,<:Any})

Promotes a read replica DB instance to a standalone DB instance.    Backup duration is a
function of the amount of changes to the database since the previous backup. If you plan to
promote a read replica to a standalone instance, we recommend that you enable backups and
complete at least one backup prior to promotion. In addition, a read replica cannot be
promoted to a standalone instance when it is in the backing-up status. If you have enabled
backups on your read replica, configure the automated backup window so that daily backups
do not interfere with read replica promotion.   This command doesn't apply to Aurora MySQL
and Aurora PostgreSQL.

# Arguments
- `dbinstance_identifier`: The DB instance identifier. This value is stored as a lowercase
  string. Constraints:   Must match the identifier of an existing read replica DB instance.
  Example: mydbinstance

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"BackupRetentionPeriod"`: The number of days for which automated backups are retained.
  Setting this parameter to a positive number enables backups. Setting this parameter to 0
  disables automated backups. Default: 1 Constraints:   Must be a value from 0 to 35.   Can't
  be set to 0 if the DB instance is a source to read replicas.
- `"PreferredBackupWindow"`:  The daily time range during which automated backups are
  created if automated backups are enabled, using the BackupRetentionPeriod parameter.   The
  default is a 30-minute window selected at random from an 8-hour block of time for each
  Amazon Web Services Region. To see the time blocks available, see  Adjusting the Preferred
  Maintenance Window in the Amazon RDS User Guide.  Constraints:   Must be in the format
  hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with
  the preferred maintenance window.   Must be at least 30 minutes.
"""
function promote_read_replica(
    DBInstanceIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "PromoteReadReplica",
        Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier);
        aws_config=aws_config,
    )
end
function promote_read_replica(
    DBInstanceIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "PromoteReadReplica",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    promote_read_replica_dbcluster(dbcluster_identifier)
    promote_read_replica_dbcluster(dbcluster_identifier, params::Dict{String,<:Any})

Promotes a read replica DB cluster to a standalone DB cluster.  This action only applies to
Aurora DB clusters.

# Arguments
- `dbcluster_identifier`: The identifier of the DB cluster read replica to promote. This
  parameter isn't case-sensitive.  Constraints:   Must match the identifier of an existing DB
  cluster read replica.   Example: my-cluster-replica1

"""
function promote_read_replica_dbcluster(
    DBClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "PromoteReadReplicaDBCluster",
        Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier);
        aws_config=aws_config,
    )
end
function promote_read_replica_dbcluster(
    DBClusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "PromoteReadReplicaDBCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    purchase_reserved_dbinstances_offering(reserved_dbinstances_offering_id)
    purchase_reserved_dbinstances_offering(reserved_dbinstances_offering_id, params::Dict{String,<:Any})

Purchases a reserved DB instance offering.

# Arguments
- `reserved_dbinstances_offering_id`: The ID of the Reserved DB instance offering to
  purchase. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBInstanceCount"`: The number of instances to reserve. Default: 1
- `"ReservedDBInstanceId"`: Customer-specified identifier to track this reservation.
  Example: myreservationID
- `"Tags"`:
"""
function purchase_reserved_dbinstances_offering(
    ReservedDBInstancesOfferingId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "PurchaseReservedDBInstancesOffering",
        Dict{String,Any}("ReservedDBInstancesOfferingId" => ReservedDBInstancesOfferingId);
        aws_config=aws_config,
    )
end
function purchase_reserved_dbinstances_offering(
    ReservedDBInstancesOfferingId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "PurchaseReservedDBInstancesOffering",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ReservedDBInstancesOfferingId" => ReservedDBInstancesOfferingId
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    reboot_dbinstance(dbinstance_identifier)
    reboot_dbinstance(dbinstance_identifier, params::Dict{String,<:Any})

You might need to reboot your DB instance, usually for maintenance reasons. For example, if
you make certain modifications, or if you change the DB parameter group associated with the
DB instance, you must reboot the instance for the changes to take effect.  Rebooting a DB
instance restarts the database engine service. Rebooting a DB instance results in a
momentary outage, during which the DB instance status is set to rebooting.  For more
information about rebooting, see Rebooting a DB Instance in the Amazon RDS User Guide.

# Arguments
- `dbinstance_identifier`: The DB instance identifier. This parameter is stored as a
  lowercase string. Constraints:   Must match the identifier of an existing DBInstance.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ForceFailover"`:  A value that indicates whether the reboot is conducted through a
  Multi-AZ failover.  Constraint: You can't enable force failover if the instance isn't
  configured for Multi-AZ.
"""
function reboot_dbinstance(
    DBInstanceIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "RebootDBInstance",
        Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier);
        aws_config=aws_config,
    )
end
function reboot_dbinstance(
    DBInstanceIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RebootDBInstance",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    register_dbproxy_targets(dbproxy_name)
    register_dbproxy_targets(dbproxy_name, params::Dict{String,<:Any})

Associate one or more DBProxyTarget data structures with a DBProxyTargetGroup.

# Arguments
- `dbproxy_name`: The identifier of the DBProxy that is associated with the
  DBProxyTargetGroup.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBClusterIdentifiers"`: One or more DB cluster identifiers.
- `"DBInstanceIdentifiers"`: One or more DB instance identifiers.
- `"TargetGroupName"`: The identifier of the DBProxyTargetGroup.
"""
function register_dbproxy_targets(
    DBProxyName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "RegisterDBProxyTargets",
        Dict{String,Any}("DBProxyName" => DBProxyName);
        aws_config=aws_config,
    )
end
function register_dbproxy_targets(
    DBProxyName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RegisterDBProxyTargets",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("DBProxyName" => DBProxyName), params)
        );
        aws_config=aws_config,
    )
end

"""
    remove_from_global_cluster()
    remove_from_global_cluster(params::Dict{String,<:Any})

 Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster
becomes a standalone cluster with read-write capability instead of being read-only and
receiving data from a primary cluster in a different region.   This action only applies to
Aurora DB clusters.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DbClusterIdentifier"`:  The Amazon Resource Name (ARN) identifying the cluster that was
  detached from the Aurora global database cluster.
- `"GlobalClusterIdentifier"`:  The cluster identifier to detach from the Aurora global
  database cluster.
"""
function remove_from_global_cluster(; aws_config::AbstractAWSConfig=global_aws_config())
    return rds("RemoveFromGlobalCluster"; aws_config=aws_config)
end
function remove_from_global_cluster(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds("RemoveFromGlobalCluster", params; aws_config=aws_config)
end

"""
    remove_role_from_dbcluster(dbcluster_identifier, role_arn)
    remove_role_from_dbcluster(dbcluster_identifier, role_arn, params::Dict{String,<:Any})

Disassociates an Amazon Web Services Identity and Access Management (IAM) role from an
Amazon Aurora DB cluster. For more information, see Authorizing Amazon Aurora MySQL to
Access Other Amazon Web Services Services on Your Behalf  in the Amazon Aurora User Guide.
This action only applies to Aurora DB clusters.

# Arguments
- `dbcluster_identifier`: The name of the DB cluster to disassociate the IAM role from.
- `role_arn`: The Amazon Resource Name (ARN) of the IAM role to disassociate from the
  Aurora DB cluster, for example arn:aws:iam::123456789012:role/AuroraAccessRole.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"FeatureName"`: The name of the feature for the DB cluster that the IAM role is to be
  disassociated from. For the list of supported feature names, see DBEngineVersion.
"""
function remove_role_from_dbcluster(
    DBClusterIdentifier, RoleArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "RemoveRoleFromDBCluster",
        Dict{String,Any}(
            "DBClusterIdentifier" => DBClusterIdentifier, "RoleArn" => RoleArn
        );
        aws_config=aws_config,
    )
end
function remove_role_from_dbcluster(
    DBClusterIdentifier,
    RoleArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RemoveRoleFromDBCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterIdentifier" => DBClusterIdentifier, "RoleArn" => RoleArn
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    remove_role_from_dbinstance(dbinstance_identifier, feature_name, role_arn)
    remove_role_from_dbinstance(dbinstance_identifier, feature_name, role_arn, params::Dict{String,<:Any})

Disassociates an Amazon Web Services Identity and Access Management (IAM) role from a DB
instance.

# Arguments
- `dbinstance_identifier`: The name of the DB instance to disassociate the IAM role from.
- `feature_name`: The name of the feature for the DB instance that the IAM role is to be
  disassociated from. For the list of supported feature names, see DBEngineVersion.
- `role_arn`: The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB
  instance, for example, arn:aws:iam::123456789012:role/AccessRole.

"""
function remove_role_from_dbinstance(
    DBInstanceIdentifier,
    FeatureName,
    RoleArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RemoveRoleFromDBInstance",
        Dict{String,Any}(
            "DBInstanceIdentifier" => DBInstanceIdentifier,
            "FeatureName" => FeatureName,
            "RoleArn" => RoleArn,
        );
        aws_config=aws_config,
    )
end
function remove_role_from_dbinstance(
    DBInstanceIdentifier,
    FeatureName,
    RoleArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RemoveRoleFromDBInstance",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBInstanceIdentifier" => DBInstanceIdentifier,
                    "FeatureName" => FeatureName,
                    "RoleArn" => RoleArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    remove_source_identifier_from_subscription(source_identifier, subscription_name)
    remove_source_identifier_from_subscription(source_identifier, subscription_name, params::Dict{String,<:Any})

Removes a source identifier from an existing RDS event notification subscription.

# Arguments
- `source_identifier`:  The source identifier to be removed from the subscription, such as
  the DB instance identifier for a DB instance or the name of a security group.
- `subscription_name`: The name of the RDS event notification subscription you want to
  remove a source identifier from.

"""
function remove_source_identifier_from_subscription(
    SourceIdentifier, SubscriptionName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "RemoveSourceIdentifierFromSubscription",
        Dict{String,Any}(
            "SourceIdentifier" => SourceIdentifier, "SubscriptionName" => SubscriptionName
        );
        aws_config=aws_config,
    )
end
function remove_source_identifier_from_subscription(
    SourceIdentifier,
    SubscriptionName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RemoveSourceIdentifierFromSubscription",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "SourceIdentifier" => SourceIdentifier,
                    "SubscriptionName" => SubscriptionName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    remove_tags_from_resource(resource_name, tag_keys)
    remove_tags_from_resource(resource_name, tag_keys, params::Dict{String,<:Any})

Removes metadata tags from an Amazon RDS resource. For an overview on tagging an Amazon RDS
resource, see Tagging Amazon RDS Resources in the Amazon RDS User Guide.

# Arguments
- `resource_name`: The Amazon RDS resource that the tags are removed from. This value is an
  Amazon Resource Name (ARN). For information about creating an ARN, see  Constructing an ARN
  for Amazon RDS in the Amazon RDS User Guide.
- `tag_keys`: The tag key (name) of the tag to be removed.

"""
function remove_tags_from_resource(
    ResourceName, TagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "RemoveTagsFromResource",
        Dict{String,Any}("ResourceName" => ResourceName, "TagKeys" => TagKeys);
        aws_config=aws_config,
    )
end
function remove_tags_from_resource(
    ResourceName,
    TagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RemoveTagsFromResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceName" => ResourceName, "TagKeys" => TagKeys),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    reset_dbcluster_parameter_group(dbcluster_parameter_group_name)
    reset_dbcluster_parameter_group(dbcluster_parameter_group_name, params::Dict{String,<:Any})

 Modifies the parameters of a DB cluster parameter group to the default value. To reset
specific parameters submit a list of the following: ParameterName and ApplyMethod. To reset
the entire DB cluster parameter group, specify the DBClusterParameterGroupName and
ResetAllParameters parameters.   When resetting the entire group, dynamic parameters are
updated immediately and static parameters are set to pending-reboot to take effect on the
next DB instance restart or RebootDBInstance request. You must call RebootDBInstance for
every DB instance in your DB cluster that you want the updated static parameter to apply
to. For more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora
User Guide.   This action only applies to Aurora DB clusters.

# Arguments
- `dbcluster_parameter_group_name`: The name of the DB cluster parameter group to reset.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Parameters"`: A list of parameter names in the DB cluster parameter group to reset to
  the default values. You can't use this parameter if the ResetAllParameters parameter is
  enabled.
- `"ResetAllParameters"`: A value that indicates whether to reset all parameters in the DB
  cluster parameter group to their default values. You can't use this parameter if there is a
  list of parameter names specified for the Parameters parameter.
"""
function reset_dbcluster_parameter_group(
    DBClusterParameterGroupName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ResetDBClusterParameterGroup",
        Dict{String,Any}("DBClusterParameterGroupName" => DBClusterParameterGroupName);
        aws_config=aws_config,
    )
end
function reset_dbcluster_parameter_group(
    DBClusterParameterGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ResetDBClusterParameterGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterParameterGroupName" => DBClusterParameterGroupName
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    reset_dbparameter_group(dbparameter_group_name)
    reset_dbparameter_group(dbparameter_group_name, params::Dict{String,<:Any})

Modifies the parameters of a DB parameter group to the engine/system default value. To
reset specific parameters, provide a list of the following: ParameterName and ApplyMethod.
To reset the entire DB parameter group, specify the DBParameterGroup name and
ResetAllParameters parameters. When resetting the entire group, dynamic parameters are
updated immediately and static parameters are set to pending-reboot to take effect on the
next DB instance restart or RebootDBInstance request.

# Arguments
- `dbparameter_group_name`: The name of the DB parameter group. Constraints:   Must match
  the name of an existing DBParameterGroup.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Parameters"`: To reset the entire DB parameter group, specify the DBParameterGroup name
  and ResetAllParameters parameters. To reset specific parameters, provide a list of the
  following: ParameterName and ApplyMethod. A maximum of 20 parameters can be modified in a
  single request.  MySQL  Valid Values (for Apply method): immediate | pending-reboot  You
  can use the immediate value with dynamic parameters only. You can use the pending-reboot
  value for both dynamic and static parameters, and changes are applied when DB instance
  reboots.  MariaDB  Valid Values (for Apply method): immediate | pending-reboot  You can use
  the immediate value with dynamic parameters only. You can use the pending-reboot value for
  both dynamic and static parameters, and changes are applied when DB instance reboots.
  Oracle  Valid Values (for Apply method): pending-reboot
- `"ResetAllParameters"`:  A value that indicates whether to reset all parameters in the DB
  parameter group to default values. By default, all parameters in the DB parameter group are
  reset to default values.
"""
function reset_dbparameter_group(
    DBParameterGroupName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "ResetDBParameterGroup",
        Dict{String,Any}("DBParameterGroupName" => DBParameterGroupName);
        aws_config=aws_config,
    )
end
function reset_dbparameter_group(
    DBParameterGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "ResetDBParameterGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBParameterGroupName" => DBParameterGroupName),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    restore_dbcluster_from_s3(dbcluster_identifier, engine, master_user_password, master_username, s3_bucket_name, s3_ingestion_role_arn, source_engine, source_engine_version)
    restore_dbcluster_from_s3(dbcluster_identifier, engine, master_user_password, master_username, s3_bucket_name, s3_ingestion_role_arn, source_engine, source_engine_version, params::Dict{String,<:Any})

Creates an Amazon Aurora DB cluster from MySQL data stored in an Amazon S3 bucket. Amazon
RDS must be authorized to access the Amazon S3 bucket and the data must be created using
the Percona XtraBackup utility as described in  Migrating Data from MySQL by Using an
Amazon S3 Bucket in the Amazon Aurora User Guide.  This action only restores the DB
cluster, not the DB instances for that DB cluster. You must invoke the CreateDBInstance
action to create DB instances for the restored DB cluster, specifying the identifier of the
restored DB cluster in DBClusterIdentifier. You can create DB instances only after the
RestoreDBClusterFromS3 action has completed and the DB cluster is available.  For more
information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User Guide.
 This action only applies to Aurora DB clusters. The source DB engine must be MySQL.

# Arguments
- `dbcluster_identifier`: The name of the DB cluster to create from the source data in the
  Amazon S3 bucket. This parameter isn't case-sensitive. Constraints:   Must contain from 1
  to 63 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a
  hyphen or contain two consecutive hyphens.   Example: my-cluster1
- `engine`: The name of the database engine to be used for this DB cluster. Valid Values:
  aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora),
  and aurora-postgresql
- `master_user_password`: The password for the master database user. This password can
  contain any printable ASCII character except \"/\", \"\"\", or \"@\". Constraints: Must
  contain from 8 to 41 characters.
- `master_username`: The name of the master user for the restored DB cluster. Constraints:
   Must be 1 to 16 letters or numbers.   First character must be a letter.   Can't be a
  reserved word for the chosen database engine.
- `s3_bucket_name`: The name of the Amazon S3 bucket that contains the data used to create
  the Amazon Aurora DB cluster.
- `s3_ingestion_role_arn`: The Amazon Resource Name (ARN) of the Amazon Web Services
  Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon
  S3 bucket on your behalf.
- `source_engine`: The identifier for the database engine that was backed up to create the
  files stored in the Amazon S3 bucket.  Valid values: mysql
- `source_engine_version`: The version of the database that the backup files were created
  from. MySQL versions 5.5, 5.6, and 5.7 are supported.  Example: 5.6.40, 5.7.28

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AvailabilityZones"`: A list of Availability Zones (AZs) where instances in the restored
  DB cluster can be created.
- `"BacktrackWindow"`: The target backtrack window, in seconds. To disable backtracking,
  set this value to 0.  Currently, Backtrack is only supported for Aurora MySQL DB clusters.
  Default: 0 Constraints:   If specified, this value must be set to a number from 0 to
  259,200 (72 hours).
- `"BackupRetentionPeriod"`: The number of days for which automated backups of the restored
  DB cluster are retained. You must specify a minimum value of 1. Default: 1 Constraints:
  Must be a value from 1 to 35
- `"CharacterSetName"`: A value that indicates that the restored DB cluster should be
  associated with the specified CharacterSet.
- `"CopyTagsToSnapshot"`: A value that indicates whether to copy all tags from the restored
  DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
- `"DBClusterParameterGroupName"`: The name of the DB cluster parameter group to associate
  with the restored DB cluster. If this argument is omitted, default.aurora5.6 is used.
  Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.
- `"DBSubnetGroupName"`: A DB subnet group to associate with the restored DB cluster.
  Constraints: If supplied, must match the name of an existing DBSubnetGroup.  Example:
  mySubnetgroup
- `"DatabaseName"`: The database name for the restored DB cluster.
- `"DeletionProtection"`: A value that indicates whether the DB cluster has deletion
  protection enabled. The database can't be deleted when deletion protection is enabled. By
  default, deletion protection is disabled.
- `"Domain"`: Specify the Active Directory directory ID to restore the DB cluster in. The
  domain must be created prior to this operation.   For Amazon Aurora DB clusters, Amazon RDS
  can use Kerberos Authentication to authenticate users that connect to the DB cluster. For
  more information, see Kerberos Authentication in the Amazon Aurora User Guide.
- `"DomainIAMRoleName"`: Specify the name of the IAM role to be used when making API calls
  to the Directory Service.
- `"EnableCloudwatchLogsExports"`: The list of logs that the restored DB cluster is to
  export to CloudWatch Logs. The values in the list depend on the DB engine being used. For
  more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon
  Aurora User Guide.
- `"EnableIAMDatabaseAuthentication"`: A value that indicates whether to enable mapping of
  Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By
  default, mapping is disabled. For more information, see  IAM Database Authentication in the
  Amazon Aurora User Guide.
- `"EngineVersion"`: The version number of the database engine to use. To list all of the
  available engine versions for aurora (for MySQL 5.6-compatible Aurora), use the following
  command:  aws rds describe-db-engine-versions --engine aurora --query
  \"DBEngineVersions[].EngineVersion\"  To list all of the available engine versions for
  aurora-mysql (for MySQL 5.7-compatible Aurora), use the following command:  aws rds
  describe-db-engine-versions --engine aurora-mysql --query
  \"DBEngineVersions[].EngineVersion\"  To list all of the available engine versions for
  aurora-postgresql, use the following command:  aws rds describe-db-engine-versions --engine
  aurora-postgresql --query \"DBEngineVersions[].EngineVersion\"   Aurora MySQL  Example:
  5.6.10a, 5.6.mysql_aurora.1.19.2, 5.7.12, 5.7.mysql_aurora.2.04.5   Aurora PostgreSQL
  Example: 9.6.3, 10.7
- `"KmsKeyId"`: The Amazon Web Services KMS key identifier for an encrypted DB cluster. The
  Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for
  the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different Amazon
  Web Services account, specify the key ARN or alias ARN. If the StorageEncrypted parameter
  is enabled, and you do not specify a value for the KmsKeyId parameter, then Amazon RDS will
  use your default CMK. There is a default CMK for your Amazon Web Services account. Your
  Amazon Web Services account has a different default CMK for each Amazon Web Services Region.
- `"OptionGroupName"`: A value that indicates that the restored DB cluster should be
  associated with the specified option group. Permanent options can't be removed from an
  option group. An option group can't be removed from a DB cluster once it is associated with
  a DB cluster.
- `"Port"`: The port number on which the instances in the restored DB cluster accept
  connections.  Default: 3306
- `"PreferredBackupWindow"`: The daily time range during which automated backups are
  created if automated backups are enabled using the BackupRetentionPeriod parameter.  The
  default is a 30-minute window selected at random from an 8-hour block of time for each
  Amazon Web Services Region. To view the time blocks available, see  Backup window in the
  Amazon Aurora User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be
  in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance
  window.   Must be at least 30 minutes.
- `"PreferredMaintenanceWindow"`: The weekly time range during which system maintenance can
  occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is
  a 30-minute window selected at random from an 8-hour block of time for each Amazon Web
  Services Region, occurring on a random day of the week. To see the time blocks available,
  see  Adjusting the Preferred Maintenance Window in the Amazon Aurora User Guide.  Valid
  Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
- `"S3Prefix"`: The prefix for all of the file names that contain the data used to create
  the Amazon Aurora DB cluster. If you do not specify a SourceS3Prefix value, then the Amazon
  Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
- `"StorageEncrypted"`: A value that indicates whether the restored DB cluster is encrypted.
- `"Tags"`:
- `"VpcSecurityGroupIds"`: A list of EC2 VPC security groups to associate with the restored
  DB cluster.
"""
function restore_dbcluster_from_s3(
    DBClusterIdentifier,
    Engine,
    MasterUserPassword,
    MasterUsername,
    S3BucketName,
    S3IngestionRoleArn,
    SourceEngine,
    SourceEngineVersion;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RestoreDBClusterFromS3",
        Dict{String,Any}(
            "DBClusterIdentifier" => DBClusterIdentifier,
            "Engine" => Engine,
            "MasterUserPassword" => MasterUserPassword,
            "MasterUsername" => MasterUsername,
            "S3BucketName" => S3BucketName,
            "S3IngestionRoleArn" => S3IngestionRoleArn,
            "SourceEngine" => SourceEngine,
            "SourceEngineVersion" => SourceEngineVersion,
        );
        aws_config=aws_config,
    )
end
function restore_dbcluster_from_s3(
    DBClusterIdentifier,
    Engine,
    MasterUserPassword,
    MasterUsername,
    S3BucketName,
    S3IngestionRoleArn,
    SourceEngine,
    SourceEngineVersion,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RestoreDBClusterFromS3",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterIdentifier" => DBClusterIdentifier,
                    "Engine" => Engine,
                    "MasterUserPassword" => MasterUserPassword,
                    "MasterUsername" => MasterUsername,
                    "S3BucketName" => S3BucketName,
                    "S3IngestionRoleArn" => S3IngestionRoleArn,
                    "SourceEngine" => SourceEngine,
                    "SourceEngineVersion" => SourceEngineVersion,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    restore_dbcluster_from_snapshot(dbcluster_identifier, engine, snapshot_identifier)
    restore_dbcluster_from_snapshot(dbcluster_identifier, engine, snapshot_identifier, params::Dict{String,<:Any})

Creates a new DB cluster from a DB snapshot or DB cluster snapshot. This action only
applies to Aurora DB clusters. The target DB cluster is created from the source snapshot
with a default configuration. If you don't specify a security group, the new DB cluster is
associated with the default security group.  This action only restores the DB cluster, not
the DB instances for that DB cluster. You must invoke the CreateDBInstance action to create
DB instances for the restored DB cluster, specifying the identifier of the restored DB
cluster in DBClusterIdentifier. You can create DB instances only after the
RestoreDBClusterFromSnapshot action has completed and the DB cluster is available.  For
more information on Amazon Aurora, see  What Is Amazon Aurora? in the Amazon Aurora User
Guide.   This action only applies to Aurora DB clusters.

# Arguments
- `dbcluster_identifier`: The name of the DB cluster to create from the DB snapshot or DB
  cluster snapshot. This parameter isn't case-sensitive. Constraints:   Must contain from 1
  to 63 letters, numbers, or hyphens   First character must be a letter   Can't end with a
  hyphen or contain two consecutive hyphens   Example: my-snapshot-id
- `engine`: The database engine to use for the new DB cluster. Default: The same as source
  Constraint: Must be compatible with the engine of the source
- `snapshot_identifier`: The identifier for the DB snapshot or DB cluster snapshot to
  restore from. You can use either the name or the Amazon Resource Name (ARN) to specify a DB
  cluster snapshot. However, you can use only the ARN to specify a DB snapshot. Constraints:
   Must match the identifier of an existing Snapshot.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AvailabilityZones"`: Provides the list of Availability Zones (AZs) where instances in
  the restored DB cluster can be created.
- `"BacktrackWindow"`: The target backtrack window, in seconds. To disable backtracking,
  set this value to 0.  Currently, Backtrack is only supported for Aurora MySQL DB clusters.
  Default: 0 Constraints:   If specified, this value must be set to a number from 0 to
  259,200 (72 hours).
- `"CopyTagsToSnapshot"`: A value that indicates whether to copy all tags from the restored
  DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
- `"DBClusterParameterGroupName"`: The name of the DB cluster parameter group to associate
  with this DB cluster. If this argument is omitted, the default DB cluster parameter group
  for the specified engine is used. Constraints:   If supplied, must match the name of an
  existing default DB cluster parameter group.   Must be 1 to 255 letters, numbers, or
  hyphens.   First character must be a letter.   Can't end with a hyphen or contain two
  consecutive hyphens.
- `"DBSubnetGroupName"`: The name of the DB subnet group to use for the new DB cluster.
  Constraints: If supplied, must match the name of an existing DB subnet group. Example:
  mySubnetgroup
- `"DatabaseName"`: The database name for the restored DB cluster.
- `"DeletionProtection"`: A value that indicates whether the DB cluster has deletion
  protection enabled. The database can't be deleted when deletion protection is enabled. By
  default, deletion protection is disabled.
- `"Domain"`: Specify the Active Directory directory ID to restore the DB cluster in. The
  domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL
  Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.
  For more information, see  Kerberos Authentication in the Amazon RDS User Guide.
- `"DomainIAMRoleName"`: Specify the name of the IAM role to be used when making API calls
  to the Directory Service.
- `"EnableCloudwatchLogsExports"`: The list of logs that the restored DB cluster is to
  export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being
  used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs  in the
  Amazon Aurora User Guide.
- `"EnableIAMDatabaseAuthentication"`: A value that indicates whether to enable mapping of
  Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By
  default, mapping is disabled. For more information, see  IAM Database Authentication in the
  Amazon Aurora User Guide.
- `"EngineMode"`: The DB engine mode of the DB cluster, either provisioned, serverless,
  parallelquery, global, or multimaster. For more information, see  CreateDBCluster.
- `"EngineVersion"`: The version of the database engine to use for the new DB cluster. To
  list all of the available engine versions for aurora (for MySQL 5.6-compatible Aurora), use
  the following command:  aws rds describe-db-engine-versions --engine aurora --query
  \"DBEngineVersions[].EngineVersion\"  To list all of the available engine versions for
  aurora-mysql (for MySQL 5.7-compatible Aurora), use the following command:  aws rds
  describe-db-engine-versions --engine aurora-mysql --query
  \"DBEngineVersions[].EngineVersion\"  To list all of the available engine versions for
  aurora-postgresql, use the following command:  aws rds describe-db-engine-versions --engine
  aurora-postgresql --query \"DBEngineVersions[].EngineVersion\"   If you aren't using the
  default engine version, then you must specify the engine version.   Aurora MySQL  Example:
  5.6.10a, 5.6.mysql_aurora.1.19.2, 5.7.12, 5.7.mysql_aurora.2.04.5   Aurora PostgreSQL
  Example: 9.6.3, 10.7
- `"KmsKeyId"`: The Amazon Web Services KMS key identifier to use when restoring an
  encrypted DB cluster from a DB snapshot or DB cluster snapshot. The Amazon Web Services KMS
  key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services
  KMS customer master key (CMK). To use a CMK in a different Amazon Web Services account,
  specify the key ARN or alias ARN. When you don't specify a value for the KmsKeyId
  parameter, then the following occurs:   If the DB snapshot or DB cluster snapshot in
  SnapshotIdentifier is encrypted, then the restored DB cluster is encrypted using the Amazon
  Web Services KMS CMK that was used to encrypt the DB snapshot or DB cluster snapshot.   If
  the DB snapshot or DB cluster snapshot in SnapshotIdentifier isn't encrypted, then the
  restored DB cluster isn't encrypted.
- `"OptionGroupName"`: The name of the option group to use for the restored DB cluster.
- `"Port"`: The port number on which the new DB cluster accepts connections. Constraints:
  This value must be 1150-65535  Default: The same port as the original DB cluster.
- `"ScalingConfiguration"`: For DB clusters in serverless DB engine mode, the scaling
  properties of the DB cluster.
- `"Tags"`: The tags to be assigned to the restored DB cluster.
- `"VpcSecurityGroupIds"`: A list of VPC security groups that the new DB cluster will
  belong to.
"""
function restore_dbcluster_from_snapshot(
    DBClusterIdentifier,
    Engine,
    SnapshotIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RestoreDBClusterFromSnapshot",
        Dict{String,Any}(
            "DBClusterIdentifier" => DBClusterIdentifier,
            "Engine" => Engine,
            "SnapshotIdentifier" => SnapshotIdentifier,
        );
        aws_config=aws_config,
    )
end
function restore_dbcluster_from_snapshot(
    DBClusterIdentifier,
    Engine,
    SnapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RestoreDBClusterFromSnapshot",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterIdentifier" => DBClusterIdentifier,
                    "Engine" => Engine,
                    "SnapshotIdentifier" => SnapshotIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    restore_dbcluster_to_point_in_time(dbcluster_identifier, source_dbcluster_identifier)
    restore_dbcluster_to_point_in_time(dbcluster_identifier, source_dbcluster_identifier, params::Dict{String,<:Any})

Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time
before LatestRestorableTime for up to BackupRetentionPeriod days. The target DB cluster is
created from the source DB cluster with the same configuration as the original DB cluster,
except that the new DB cluster is created with the default DB security group.   This action
only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the
CreateDBInstance action to create DB instances for the restored DB cluster, specifying the
identifier of the restored DB cluster in DBClusterIdentifier. You can create DB instances
only after the RestoreDBClusterToPointInTime action has completed and the DB cluster is
available.  For more information on Amazon Aurora, see  What Is Amazon Aurora? in the
Amazon Aurora User Guide.   This action only applies to Aurora DB clusters.

# Arguments
- `dbcluster_identifier`: The name of the new DB cluster to be created. Constraints:   Must
  contain from 1 to 63 letters, numbers, or hyphens   First character must be a letter
  Can't end with a hyphen or contain two consecutive hyphens
- `source_dbcluster_identifier`: The identifier of the source DB cluster from which to
  restore. Constraints:   Must match the identifier of an existing DBCluster.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"BacktrackWindow"`: The target backtrack window, in seconds. To disable backtracking,
  set this value to 0.  Currently, Backtrack is only supported for Aurora MySQL DB clusters.
  Default: 0 Constraints:   If specified, this value must be set to a number from 0 to
  259,200 (72 hours).
- `"CopyTagsToSnapshot"`: A value that indicates whether to copy all tags from the restored
  DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
- `"DBClusterParameterGroupName"`: The name of the DB cluster parameter group to associate
  with this DB cluster. If this argument is omitted, the default DB cluster parameter group
  for the specified engine is used. Constraints:   If supplied, must match the name of an
  existing DB cluster parameter group.   Must be 1 to 255 letters, numbers, or hyphens.
  First character must be a letter.   Can't end with a hyphen or contain two consecutive
  hyphens.
- `"DBSubnetGroupName"`: The DB subnet group name to use for the new DB cluster.
  Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example:
  mySubnetgroup
- `"DeletionProtection"`: A value that indicates whether the DB cluster has deletion
  protection enabled. The database can't be deleted when deletion protection is enabled. By
  default, deletion protection is disabled.
- `"Domain"`: Specify the Active Directory directory ID to restore the DB cluster in. The
  domain must be created prior to this operation.   For Amazon Aurora DB clusters, Amazon RDS
  can use Kerberos Authentication to authenticate users that connect to the DB cluster. For
  more information, see Kerberos Authentication in the Amazon Aurora User Guide.
- `"DomainIAMRoleName"`: Specify the name of the IAM role to be used when making API calls
  to the Directory Service.
- `"EnableCloudwatchLogsExports"`: The list of logs that the restored DB cluster is to
  export to CloudWatch Logs. The values in the list depend on the DB engine being used. For
  more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon
  Aurora User Guide.
- `"EnableIAMDatabaseAuthentication"`: A value that indicates whether to enable mapping of
  Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By
  default, mapping is disabled. For more information, see  IAM Database Authentication in the
  Amazon Aurora User Guide.
- `"EngineMode"`: The engine mode of the new cluster. Specify provisioned or serverless,
  depending on the type of the cluster you are creating. You can create an Aurora Serverless
  clone from a provisioned cluster, or a provisioned clone from an Aurora Serverless cluster.
  To create a clone that is an Aurora Serverless cluster, the original cluster must be an
  Aurora Serverless cluster or an encrypted provisioned cluster.
- `"KmsKeyId"`: The Amazon Web Services KMS key identifier to use when restoring an
  encrypted DB cluster from an encrypted DB cluster. The Amazon Web Services KMS key
  identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS
  customer master key (CMK). To use a CMK in a different Amazon Web Services account, specify
  the key ARN or alias ARN. You can restore to a new DB cluster and encrypt the new DB
  cluster with a Amazon Web Services KMS CMK that is different than the Amazon Web Services
  KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the
  Amazon Web Services KMS CMK identified by the KmsKeyId parameter. If you don't specify a
  value for the KmsKeyId parameter, then the following occurs:   If the DB cluster is
  encrypted, then the restored DB cluster is encrypted using the Amazon Web Services KMS CMK
  that was used to encrypt the source DB cluster.   If the DB cluster isn't encrypted, then
  the restored DB cluster isn't encrypted.   If DBClusterIdentifier refers to a DB cluster
  that isn't encrypted, then the restore request is rejected.
- `"OptionGroupName"`: The name of the option group for the new DB cluster.
- `"Port"`: The port number on which the new DB cluster accepts connections. Constraints: A
  value from 1150-65535.  Default: The default port for the engine.
- `"RestoreToTime"`: The date and time to restore the DB cluster to. Valid Values: Value
  must be a time in Universal Coordinated Time (UTC) format Constraints:   Must be before the
  latest restorable time for the DB instance   Must be specified if UseLatestRestorableTime
  parameter isn't provided   Can't be specified if the UseLatestRestorableTime parameter is
  enabled   Can't be specified if the RestoreType parameter is copy-on-write    Example:
  2015-03-07T23:45:00Z
- `"RestoreType"`: The type of restore to be performed. You can specify one of the
  following values:    full-copy - The new DB cluster is restored as a full copy of the
  source DB cluster.    copy-on-write - The new DB cluster is restored as a clone of the
  source DB cluster.   Constraints: You can't specify copy-on-write if the engine version of
  the source DB cluster is earlier than 1.11. If you don't specify a RestoreType value, then
  the new DB cluster is restored as a full copy of the source DB cluster.
- `"ScalingConfiguration"`: For DB clusters in serverless DB engine mode, the scaling
  properties of the DB cluster.
- `"Tags"`:
- `"UseLatestRestorableTime"`: A value that indicates whether to restore the DB cluster to
  the latest restorable backup time. By default, the DB cluster isn't restored to the latest
  restorable backup time.  Constraints: Can't be specified if RestoreToTime parameter is
  provided.
- `"VpcSecurityGroupIds"`: A list of VPC security groups that the new DB cluster belongs to.
"""
function restore_dbcluster_to_point_in_time(
    DBClusterIdentifier,
    SourceDBClusterIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RestoreDBClusterToPointInTime",
        Dict{String,Any}(
            "DBClusterIdentifier" => DBClusterIdentifier,
            "SourceDBClusterIdentifier" => SourceDBClusterIdentifier,
        );
        aws_config=aws_config,
    )
end
function restore_dbcluster_to_point_in_time(
    DBClusterIdentifier,
    SourceDBClusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RestoreDBClusterToPointInTime",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBClusterIdentifier" => DBClusterIdentifier,
                    "SourceDBClusterIdentifier" => SourceDBClusterIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    restore_dbinstance_from_dbsnapshot(dbinstance_identifier, dbsnapshot_identifier)
    restore_dbinstance_from_dbsnapshot(dbinstance_identifier, dbsnapshot_identifier, params::Dict{String,<:Any})

Creates a new DB instance from a DB snapshot. The target database is created from the
source database restore point with most of the source's original configuration, including
the default security group and DB parameter group. By default, the new DB instance is
created as a Single-AZ deployment, except when the instance is a SQL Server instance that
has an option group associated with mirroring. In this case, the instance becomes a
Multi-AZ deployment, not a Single-AZ deployment. If you want to replace your original DB
instance with the new, restored DB instance, then rename your original DB instance before
you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances
with the same name. After you have renamed your original DB instance with a different
identifier, then you can pass the original name of the DB instance as the
DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result
is that you replace the original DB instance with the DB instance created from the
snapshot. If you are restoring from a shared manual DB snapshot, the DBSnapshotIdentifier
must be the ARN of the shared DB snapshot.  This command doesn't apply to Aurora MySQL and
Aurora PostgreSQL. For Aurora, use RestoreDBClusterFromSnapshot.

# Arguments
- `dbinstance_identifier`: Name of the DB instance to create from the DB snapshot. This
  parameter isn't case-sensitive. Constraints:   Must contain from 1 to 63 numbers, letters,
  or hyphens   First character must be a letter   Can't end with a hyphen or contain two
  consecutive hyphens   Example: my-snapshot-id
- `dbsnapshot_identifier`: The identifier for the DB snapshot to restore from. Constraints:
    Must match the identifier of an existing DBSnapshot.   If you are restoring from a shared
  manual DB snapshot, the DBSnapshotIdentifier must be the ARN of the shared DB snapshot.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AutoMinorVersionUpgrade"`: A value that indicates whether minor version upgrades are
  applied automatically to the DB instance during the maintenance window.
- `"AvailabilityZone"`: The Availability Zone (AZ) where the DB instance will be created.
  Default: A random, system-chosen Availability Zone. Constraint: You can't specify the
  AvailabilityZone parameter if the DB instance is a Multi-AZ deployment. Example: us-east-1a
- `"CopyTagsToSnapshot"`: A value that indicates whether to copy all tags from the restored
  DB instance to snapshots of the DB instance. By default, tags are not copied.
- `"DBInstanceClass"`: The compute and memory capacity of the Amazon RDS DB instance, for
  example, db.m4.large. Not all DB instance classes are available in all Amazon Web Services
  Regions, or for all database engines. For the full list of DB instance classes, and
  availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Default:
  The same DBInstanceClass as the original DB instance.
- `"DBName"`: The database name for the restored DB instance.  This parameter doesn't apply
  to the MySQL, PostgreSQL, or MariaDB engines.
- `"DBParameterGroupName"`: The name of the DB parameter group to associate with this DB
  instance. If you do not specify a value for DBParameterGroupName, then the default
  DBParameterGroup for the specified DB engine is used. Constraints:   If supplied, must
  match the name of an existing DBParameterGroup.   Must be 1 to 255 letters, numbers, or
  hyphens.   First character must be a letter.   Can't end with a hyphen or contain two
  consecutive hyphens.
- `"DBSubnetGroupName"`: The DB subnet group name to use for the new instance. Constraints:
  If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup
- `"DeletionProtection"`: A value that indicates whether the DB instance has deletion
  protection enabled. The database can't be deleted when deletion protection is enabled. By
  default, deletion protection is disabled. For more information, see  Deleting a DB
  Instance.
- `"Domain"`: Specify the Active Directory directory ID to restore the DB instance in. The
  domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL
  Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.
  For more information, see  Kerberos Authentication in the Amazon RDS User Guide.
- `"DomainIAMRoleName"`: Specify the name of the IAM role to be used when making API calls
  to the Directory Service.
- `"EnableCloudwatchLogsExports"`: The list of logs that the restored DB instance is to
  export to CloudWatch Logs. The values in the list depend on the DB engine being used. For
  more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon RDS
  User Guide.
- `"EnableCustomerOwnedIp"`: A value that indicates whether to enable a customer-owned IP
  address (CoIP) for an RDS on Outposts DB instance. A CoIP provides local or external
  connectivity to resources in your Outpost subnets through your on-premises network. For
  some use cases, a CoIP can provide lower latency for connections to the DB instance from
  outside of its virtual private cloud (VPC) on your local network. For more information
  about RDS on Outposts, see Working with Amazon RDS on Amazon Web Services Outposts in the
  Amazon RDS User Guide. For more information about CoIPs, see Customer-owned IP addresses in
  the Amazon Web Services Outposts User Guide.
- `"EnableIAMDatabaseAuthentication"`: A value that indicates whether to enable mapping of
  Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By
  default, mapping is disabled. For more information about IAM database authentication, see
  IAM Database Authentication for MySQL and PostgreSQL in the Amazon RDS User Guide.
- `"Engine"`: The database engine to use for the new instance. Default: The same as source
  Constraint: Must be compatible with the engine of the source. For example, you can restore
  a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot. Valid Values:    mariadb     mysql
   oracle-ee     oracle-ee-cdb     oracle-se2     oracle-se2-cdb     postgres
  sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web
- `"Iops"`: Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O
  operations per second. If this parameter isn't specified, the IOPS value is taken from the
  backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS
  instance. The conversion takes additional time, though your DB instance is available for
  connections before the conversion starts.  The provisioned IOPS value must follow the
  requirements for your database engine. For more information, see Amazon RDS Provisioned
  IOPS Storage to Improve Performance in the Amazon RDS User Guide.  Constraints: Must be an
  integer greater than 1000.
- `"LicenseModel"`: License model information for the restored DB instance. Default: Same
  as source.  Valid values: license-included | bring-your-own-license |
  general-public-license
- `"MultiAZ"`: A value that indicates whether the DB instance is a Multi-AZ deployment.
  Constraint: You can't specify the AvailabilityZone parameter if the DB instance is a
  Multi-AZ deployment.
- `"OptionGroupName"`: The name of the option group to be used for the restored DB
  instance. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't
  be removed from an option group, and that option group can't be removed from a DB instance
  once it is associated with a DB instance
- `"Port"`: The port number on which the database accepts connections. Default: The same
  port as the original DB instance Constraints: Value must be 1150-65535
- `"ProcessorFeatures"`: The number of CPU cores and the number of threads per core for the
  DB instance class of the DB instance.
- `"PubliclyAccessible"`: A value that indicates whether the DB instance is publicly
  accessible. When the DB instance is publicly accessible, its DNS endpoint resolves to the
  private IP address from within the DB instance's VPC, and to the public IP address from
  outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the
  security group it uses, and that public access is not permitted if the security group
  assigned to the DB instance doesn't permit it. When the DB instance isn't publicly
  accessible, it is an internal DB instance with a DNS name that resolves to a private IP
  address. For more information, see CreateDBInstance.
- `"StorageType"`: Specifies the storage type to be associated with the DB instance.  Valid
  values: standard | gp2 | io1   If you specify io1, you must also include a value for the
  Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise gp2
- `"Tags"`:
- `"TdeCredentialArn"`: The ARN from the key store with which to associate the instance for
  TDE encryption.
- `"TdeCredentialPassword"`: The password for the given ARN from the key store in order to
  access the device.
- `"UseDefaultProcessorFeatures"`: A value that indicates whether the DB instance class of
  the DB instance uses its default processor features.
- `"VpcSecurityGroupIds"`:  A list of EC2 VPC security groups to associate with this DB
  instance.   Default: The default EC2 VPC security group for the DB subnet group's VPC.
"""
function restore_dbinstance_from_dbsnapshot(
    DBInstanceIdentifier,
    DBSnapshotIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RestoreDBInstanceFromDBSnapshot",
        Dict{String,Any}(
            "DBInstanceIdentifier" => DBInstanceIdentifier,
            "DBSnapshotIdentifier" => DBSnapshotIdentifier,
        );
        aws_config=aws_config,
    )
end
function restore_dbinstance_from_dbsnapshot(
    DBInstanceIdentifier,
    DBSnapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RestoreDBInstanceFromDBSnapshot",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBInstanceIdentifier" => DBInstanceIdentifier,
                    "DBSnapshotIdentifier" => DBSnapshotIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    restore_dbinstance_from_s3(dbinstance_class, dbinstance_identifier, engine, s3_bucket_name, s3_ingestion_role_arn, source_engine, source_engine_version)
    restore_dbinstance_from_s3(dbinstance_class, dbinstance_identifier, engine, s3_bucket_name, s3_ingestion_role_arn, source_engine, source_engine_version, params::Dict{String,<:Any})

Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using
backup files. You can create a backup of your on-premises database, store it on Amazon
Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS
DB instance running MySQL. For more information, see Importing Data into an Amazon RDS
MySQL DB Instance in the Amazon RDS User Guide.

# Arguments
- `dbinstance_class`: The compute and memory capacity of the DB instance, for example,
  db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions,
  or for all database engines. For the full list of DB instance classes, and availability for
  your engine, see DB Instance Class in the Amazon RDS User Guide.  Importing from Amazon S3
  isn't supported on the db.t2.micro DB instance class.
- `dbinstance_identifier`: The DB instance identifier. This parameter is stored as a
  lowercase string.  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.
  First character must be a letter.   Can't end with a hyphen or contain two consecutive
  hyphens.   Example: mydbinstance
- `engine`: The name of the database engine to be used for this instance.  Valid Values:
  mysql
- `s3_bucket_name`: The name of your Amazon S3 bucket that contains your database backup
  file.
- `s3_ingestion_role_arn`: An Amazon Web Services Identity and Access Management (IAM) role
  to allow Amazon RDS to access your Amazon S3 bucket.
- `source_engine`: The name of the engine of your source database.  Valid Values: mysql
- `source_engine_version`: The version of the database that the backup files were created
  from. MySQL versions 5.6 and 5.7 are supported.  Example: 5.6.40

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AllocatedStorage"`: The amount of storage (in gigabytes) to allocate initially for the
  DB instance. Follow the allocation rules specified in CreateDBInstance.   Be sure to
  allocate enough memory for your new DB instance so that the restore operation can succeed.
  You can also allocate additional memory for future growth.
- `"AutoMinorVersionUpgrade"`: A value that indicates whether minor engine upgrades are
  applied automatically to the DB instance during the maintenance window. By default, minor
  engine upgrades are not applied automatically.
- `"AvailabilityZone"`: The Availability Zone that the DB instance is created in. For
  information about Amazon Web Services Regions and Availability Zones, see Regions and
  Availability Zones in the Amazon RDS User Guide.  Default: A random, system-chosen
  Availability Zone in the endpoint's Amazon Web Services Region.   Example: us-east-1d
  Constraint: The AvailabilityZone parameter can't be specified if the DB instance is a
  Multi-AZ deployment. The specified Availability Zone must be in the same Amazon Web
  Services Region as the current endpoint.
- `"BackupRetentionPeriod"`: The number of days for which automated backups are retained.
  Setting this parameter to a positive number enables backups. For more information, see
  CreateDBInstance.
- `"CopyTagsToSnapshot"`: A value that indicates whether to copy all tags from the DB
  instance to snapshots of the DB instance. By default, tags are not copied.
- `"DBName"`: The name of the database to create when the DB instance is created. Follow
  the naming rules specified in CreateDBInstance.
- `"DBParameterGroupName"`: The name of the DB parameter group to associate with this DB
  instance. If you do not specify a value for DBParameterGroupName, then the default
  DBParameterGroup for the specified DB engine is used.
- `"DBSecurityGroups"`: A list of DB security groups to associate with this DB instance.
  Default: The default DB security group for the database engine.
- `"DBSubnetGroupName"`: A DB subnet group to associate with this DB instance.
- `"DeletionProtection"`: A value that indicates whether the DB instance has deletion
  protection enabled. The database can't be deleted when deletion protection is enabled. By
  default, deletion protection is disabled. For more information, see  Deleting a DB
  Instance.
- `"EnableCloudwatchLogsExports"`: The list of logs that the restored DB instance is to
  export to CloudWatch Logs. The values in the list depend on the DB engine being used. For
  more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon RDS
  User Guide.
- `"EnableIAMDatabaseAuthentication"`: A value that indicates whether to enable mapping of
  Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By
  default, mapping is disabled. For more information about IAM database authentication, see
  IAM Database Authentication for MySQL and PostgreSQL in the Amazon RDS User Guide.
- `"EnablePerformanceInsights"`: A value that indicates whether to enable Performance
  Insights for the DB instance.  For more information, see Using Amazon Performance Insights
  in the Amazon Relational Database Service User Guide.
- `"EngineVersion"`: The version number of the database engine to use. Choose the latest
  minor version of your database engine. For information about engine versions, see
  CreateDBInstance, or call DescribeDBEngineVersions.
- `"Iops"`: The amount of Provisioned IOPS (input/output operations per second) to allocate
  initially for the DB instance. For information about valid Iops values, see Amazon RDS
  Provisioned IOPS Storage to Improve Performance in the Amazon RDS User Guide.
- `"KmsKeyId"`: The Amazon Web Services KMS key identifier for an encrypted DB instance.
  The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name
  for the Amazon Web Services KMS customer master key (CMK). To use a CMK in a different
  Amazon Web Services account, specify the key ARN or alias ARN. If the StorageEncrypted
  parameter is enabled, and you do not specify a value for the KmsKeyId parameter, then
  Amazon RDS will use your default CMK. There is a default CMK for your Amazon Web Services
  account. Your Amazon Web Services account has a different default CMK for each Amazon Web
  Services Region.
- `"LicenseModel"`: The license model for this DB instance. Use general-public-license.
- `"MasterUserPassword"`: The password for the master user. The password can include any
  printable ASCII character except \"/\", \"\"\", or \"@\".  Constraints: Must contain from 8
  to 41 characters.
- `"MasterUsername"`: The name for the master user.  Constraints:    Must be 1 to 16
  letters or numbers.   First character must be a letter.   Can't be a reserved word for the
  chosen database engine.
- `"MaxAllocatedStorage"`: The upper limit in gibibytes (GiB) to which Amazon RDS can
  automatically scale the storage of the DB instance. For more information about this
  setting, including limitations that apply to it, see  Managing capacity automatically with
  Amazon RDS storage autoscaling in the Amazon RDS User Guide.
- `"MonitoringInterval"`: The interval, in seconds, between points when Enhanced Monitoring
  metrics are collected for the DB instance. To disable collecting Enhanced Monitoring
  metrics, specify 0.  If MonitoringRoleArn is specified, then you must also set
  MonitoringInterval to a value other than 0.  Valid Values: 0, 1, 5, 10, 15, 30, 60
  Default: 0
- `"MonitoringRoleArn"`: The ARN for the IAM role that permits RDS to send enhanced
  monitoring metrics to Amazon CloudWatch Logs. For example,
  arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, see
  Setting Up and Enabling Enhanced Monitoring in the Amazon RDS User Guide.  If
  MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn
  value.
- `"MultiAZ"`: A value that indicates whether the DB instance is a Multi-AZ deployment. If
  the DB instance is a Multi-AZ deployment, you can't set the AvailabilityZone parameter.
- `"OptionGroupName"`: The name of the option group to associate with this DB instance. If
  this argument is omitted, the default option group for the specified engine is used.
- `"PerformanceInsightsKMSKeyId"`: The Amazon Web Services KMS key identifier for
  encryption of Performance Insights data. The Amazon Web Services KMS key identifier is the
  key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer master
  key (CMK). If you do not specify a value for PerformanceInsightsKMSKeyId, then Amazon RDS
  uses your default CMK. There is a default CMK for your Amazon Web Services account. Your
  Amazon Web Services account has a different default CMK for each Amazon Web Services Region.
- `"PerformanceInsightsRetentionPeriod"`: The amount of time, in days, to retain
  Performance Insights data. Valid values are 7 or 731 (2 years).
- `"Port"`: The port number on which the database accepts connections.  Type: Integer
  Valid Values: 1150-65535  Default: 3306
- `"PreferredBackupWindow"`: The time range each day during which automated backups are
  created if automated backups are enabled. For more information, see Backup window in the
  Amazon RDS User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in
  Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance
  window.   Must be at least 30 minutes.
- `"PreferredMaintenanceWindow"`: The time range each week during which system maintenance
  can occur, in Universal Coordinated Time (UTC). For more information, see Amazon RDS
  Maintenance Window in the Amazon RDS User Guide.  Constraints:   Must be in the format
  ddd:hh24:mi-ddd:hh24:mi.   Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.   Must be in
  Universal Coordinated Time (UTC).   Must not conflict with the preferred backup window.
  Must be at least 30 minutes.
- `"ProcessorFeatures"`: The number of CPU cores and the number of threads per core for the
  DB instance class of the DB instance.
- `"PubliclyAccessible"`: A value that indicates whether the DB instance is publicly
  accessible. When the DB instance is publicly accessible, its DNS endpoint resolves to the
  private IP address from within the DB instance's VPC, and to the public IP address from
  outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the
  security group it uses, and that public access is not permitted if the security group
  assigned to the DB instance doesn't permit it. When the DB instance isn't publicly
  accessible, it is an internal DB instance with a DNS name that resolves to a private IP
  address. For more information, see CreateDBInstance.
- `"S3Prefix"`: The prefix of your Amazon S3 bucket.
- `"StorageEncrypted"`: A value that indicates whether the new DB instance is encrypted or
  not.
- `"StorageType"`: Specifies the storage type to be associated with the DB instance.  Valid
  values: standard | gp2 | io1  If you specify io1, you must also include a value for the
  Iops parameter.  Default: io1 if the Iops parameter is specified; otherwise gp2
- `"Tags"`: A list of tags to associate with this DB instance. For more information, see
  Tagging Amazon RDS Resources in the Amazon RDS User Guide.
- `"UseDefaultProcessorFeatures"`: A value that indicates whether the DB instance class of
  the DB instance uses its default processor features.
- `"VpcSecurityGroupIds"`: A list of VPC security groups to associate with this DB
  instance.
"""
function restore_dbinstance_from_s3(
    DBInstanceClass,
    DBInstanceIdentifier,
    Engine,
    S3BucketName,
    S3IngestionRoleArn,
    SourceEngine,
    SourceEngineVersion;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RestoreDBInstanceFromS3",
        Dict{String,Any}(
            "DBInstanceClass" => DBInstanceClass,
            "DBInstanceIdentifier" => DBInstanceIdentifier,
            "Engine" => Engine,
            "S3BucketName" => S3BucketName,
            "S3IngestionRoleArn" => S3IngestionRoleArn,
            "SourceEngine" => SourceEngine,
            "SourceEngineVersion" => SourceEngineVersion,
        );
        aws_config=aws_config,
    )
end
function restore_dbinstance_from_s3(
    DBInstanceClass,
    DBInstanceIdentifier,
    Engine,
    S3BucketName,
    S3IngestionRoleArn,
    SourceEngine,
    SourceEngineVersion,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RestoreDBInstanceFromS3",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DBInstanceClass" => DBInstanceClass,
                    "DBInstanceIdentifier" => DBInstanceIdentifier,
                    "Engine" => Engine,
                    "S3BucketName" => S3BucketName,
                    "S3IngestionRoleArn" => S3IngestionRoleArn,
                    "SourceEngine" => SourceEngine,
                    "SourceEngineVersion" => SourceEngineVersion,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    restore_dbinstance_to_point_in_time(target_dbinstance_identifier)
    restore_dbinstance_to_point_in_time(target_dbinstance_identifier, params::Dict{String,<:Any})

Restores a DB instance to an arbitrary point in time. You can restore to any point in time
before the time identified by the LatestRestorableTime property. You can restore to a point
up to the number of days specified by the BackupRetentionPeriod property. The target
database is created with most of the original configuration, but in a system-selected
Availability Zone, with the default security group, the default subnet group, and the
default DB parameter group. By default, the new DB instance is created as a single-AZ
deployment except when the instance is a SQL Server instance that has an option group that
is associated with mirroring; in this case, the instance becomes a mirrored deployment and
not a single-AZ deployment.  This command doesn't apply to Aurora MySQL and Aurora
PostgreSQL. For Aurora, use RestoreDBClusterToPointInTime.

# Arguments
- `target_dbinstance_identifier`: The name of the new DB instance to be created.
  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   First character
  must be a letter   Can't end with a hyphen or contain two consecutive hyphens

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AutoMinorVersionUpgrade"`: A value that indicates whether minor version upgrades are
  applied automatically to the DB instance during the maintenance window.
- `"AvailabilityZone"`: The Availability Zone (AZ) where the DB instance will be created.
  Default: A random, system-chosen Availability Zone. Constraint: You can't specify the
  AvailabilityZone parameter if the DB instance is a Multi-AZ deployment. Example: us-east-1a
- `"CopyTagsToSnapshot"`: A value that indicates whether to copy all tags from the restored
  DB instance to snapshots of the DB instance. By default, tags are not copied.
- `"DBInstanceClass"`: The compute and memory capacity of the Amazon RDS DB instance, for
  example, db.m4.large. Not all DB instance classes are available in all Amazon Web Services
  Regions, or for all database engines. For the full list of DB instance classes, and
  availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Default:
  The same DBInstanceClass as the original DB instance.
- `"DBName"`: The database name for the restored DB instance.  This parameter isn't used
  for the MySQL or MariaDB engines.
- `"DBParameterGroupName"`: The name of the DB parameter group to associate with this DB
  instance. If you do not specify a value for DBParameterGroupName, then the default
  DBParameterGroup for the specified DB engine is used. Constraints:   If supplied, must
  match the name of an existing DBParameterGroup.   Must be 1 to 255 letters, numbers, or
  hyphens.   First character must be a letter.   Can't end with a hyphen or contain two
  consecutive hyphens.
- `"DBSubnetGroupName"`: The DB subnet group name to use for the new instance. Constraints:
  If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup
- `"DeletionProtection"`: A value that indicates whether the DB instance has deletion
  protection enabled. The database can't be deleted when deletion protection is enabled. By
  default, deletion protection is disabled. For more information, see  Deleting a DB
  Instance.
- `"Domain"`: Specify the Active Directory directory ID to restore the DB instance in. The
  domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL
  Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.
  For more information, see  Kerberos Authentication in the Amazon RDS User Guide.
- `"DomainIAMRoleName"`: Specify the name of the IAM role to be used when making API calls
  to the Directory Service.
- `"EnableCloudwatchLogsExports"`: The list of logs that the restored DB instance is to
  export to CloudWatch Logs. The values in the list depend on the DB engine being used. For
  more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon RDS
  User Guide.
- `"EnableCustomerOwnedIp"`: A value that indicates whether to enable a customer-owned IP
  address (CoIP) for an RDS on Outposts DB instance. A CoIP provides local or external
  connectivity to resources in your Outpost subnets through your on-premises network. For
  some use cases, a CoIP can provide lower latency for connections to the DB instance from
  outside of its virtual private cloud (VPC) on your local network. For more information
  about RDS on Outposts, see Working with Amazon RDS on Amazon Web Services Outposts in the
  Amazon RDS User Guide. For more information about CoIPs, see Customer-owned IP addresses in
  the Amazon Web Services Outposts User Guide.
- `"EnableIAMDatabaseAuthentication"`: A value that indicates whether to enable mapping of
  Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By
  default, mapping is disabled. For more information about IAM database authentication, see
  IAM Database Authentication for MySQL and PostgreSQL in the Amazon RDS User Guide.
- `"Engine"`: The database engine to use for the new instance. Default: The same as source
  Constraint: Must be compatible with the engine of the source Valid Values:    mariadb
  mysql     oracle-ee     oracle-ee-cdb     oracle-se2     oracle-se2-cdb     postgres
  sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web
- `"Iops"`: The amount of Provisioned IOPS (input/output operations per second) to be
  initially allocated for the DB instance. Constraints: Must be an integer greater than 1000.
   SQL Server  Setting the IOPS value for the SQL Server database engine isn't supported.
- `"LicenseModel"`: License model information for the restored DB instance. Default: Same
  as source.  Valid values: license-included | bring-your-own-license |
  general-public-license
- `"MaxAllocatedStorage"`: The upper limit in gibibytes (GiB) to which Amazon RDS can
  automatically scale the storage of the DB instance. For more information about this
  setting, including limitations that apply to it, see  Managing capacity automatically with
  Amazon RDS storage autoscaling in the Amazon RDS User Guide.
- `"MultiAZ"`: A value that indicates whether the DB instance is a Multi-AZ deployment.
  Constraint: You can't specify the AvailabilityZone parameter if the DB instance is a
  Multi-AZ deployment.
- `"OptionGroupName"`: The name of the option group to be used for the restored DB
  instance. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't
  be removed from an option group, and that option group can't be removed from a DB instance
  once it is associated with a DB instance
- `"Port"`: The port number on which the database accepts connections. Constraints: Value
  must be 1150-65535  Default: The same port as the original DB instance.
- `"ProcessorFeatures"`: The number of CPU cores and the number of threads per core for the
  DB instance class of the DB instance.
- `"PubliclyAccessible"`: A value that indicates whether the DB instance is publicly
  accessible. When the DB instance is publicly accessible, its DNS endpoint resolves to the
  private IP address from within the DB instance's VPC, and to the public IP address from
  outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the
  security group it uses, and that public access is not permitted if the security group
  assigned to the DB instance doesn't permit it. When the DB instance isn't publicly
  accessible, it is an internal DB instance with a DNS name that resolves to a private IP
  address. For more information, see CreateDBInstance.
- `"RestoreTime"`: The date and time to restore from. Valid Values: Value must be a time in
  Universal Coordinated Time (UTC) format Constraints:   Must be before the latest restorable
  time for the DB instance   Can't be specified if the UseLatestRestorableTime parameter is
  enabled   Example: 2009-09-07T23:45:00Z
- `"SourceDBInstanceAutomatedBackupsArn"`: The Amazon Resource Name (ARN) of the replicated
  automated backups from which to restore, for example,
  arn:aws:rds:useast-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE.
- `"SourceDBInstanceIdentifier"`: The identifier of the source DB instance from which to
  restore. Constraints:   Must match the identifier of an existing DB instance.
- `"SourceDbiResourceId"`: The resource ID of the source DB instance from which to restore.
- `"StorageType"`: Specifies the storage type to be associated with the DB instance.  Valid
  values: standard | gp2 | io1   If you specify io1, you must also include a value for the
  Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise gp2
- `"Tags"`:
- `"TdeCredentialArn"`: The ARN from the key store with which to associate the instance for
  TDE encryption.
- `"TdeCredentialPassword"`: The password for the given ARN from the key store in order to
  access the device.
- `"UseDefaultProcessorFeatures"`: A value that indicates whether the DB instance class of
  the DB instance uses its default processor features.
- `"UseLatestRestorableTime"`:  A value that indicates whether the DB instance is restored
  from the latest backup time. By default, the DB instance isn't restored from the latest
  backup time.  Constraints: Can't be specified if the RestoreTime parameter is provided.
- `"VpcSecurityGroupIds"`:  A list of EC2 VPC security groups to associate with this DB
  instance.   Default: The default EC2 VPC security group for the DB subnet group's VPC.
"""
function restore_dbinstance_to_point_in_time(
    TargetDBInstanceIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "RestoreDBInstanceToPointInTime",
        Dict{String,Any}("TargetDBInstanceIdentifier" => TargetDBInstanceIdentifier);
        aws_config=aws_config,
    )
end
function restore_dbinstance_to_point_in_time(
    TargetDBInstanceIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RestoreDBInstanceToPointInTime",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "TargetDBInstanceIdentifier" => TargetDBInstanceIdentifier
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    revoke_dbsecurity_group_ingress(dbsecurity_group_name)
    revoke_dbsecurity_group_ingress(dbsecurity_group_name, params::Dict{String,<:Any})

Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC
security groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for
VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).

# Arguments
- `dbsecurity_group_name`: The name of the DB security group to revoke ingress from.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CIDRIP"`:  The IP range to revoke access from. Must be a valid CIDR range. If CIDRIP is
  specified, EC2SecurityGroupName, EC2SecurityGroupId and EC2SecurityGroupOwnerId can't be
  provided.
- `"EC2SecurityGroupId"`:  The id of the EC2 security group to revoke access from. For VPC
  DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId
  and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
- `"EC2SecurityGroupName"`:  The name of the EC2 security group to revoke access from. For
  VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise,
  EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be
  provided.
- `"EC2SecurityGroupOwnerId"`:  The Amazon Web Services account number of the owner of the
  EC2 security group specified in the EC2SecurityGroupName parameter. The Amazon Web Services
  access key ID isn't an acceptable value. For VPC DB security groups, EC2SecurityGroupId
  must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or
  EC2SecurityGroupId must be provided.
"""
function revoke_dbsecurity_group_ingress(
    DBSecurityGroupName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "RevokeDBSecurityGroupIngress",
        Dict{String,Any}("DBSecurityGroupName" => DBSecurityGroupName);
        aws_config=aws_config,
    )
end
function revoke_dbsecurity_group_ingress(
    DBSecurityGroupName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "RevokeDBSecurityGroupIngress",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBSecurityGroupName" => DBSecurityGroupName),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    start_activity_stream(kms_key_id, mode, resource_arn)
    start_activity_stream(kms_key_id, mode, resource_arn, params::Dict{String,<:Any})

Starts a database activity stream to monitor activity on the database. For more
information, see Database Activity Streams in the Amazon Aurora User Guide.

# Arguments
- `kms_key_id`: The Amazon Web Services KMS key identifier for encrypting messages in the
  database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key
  ID, alias ARN, or alias name for the Amazon Web Services KMS customer master key (CMK).
- `mode`: Specifies the mode of the database activity stream. Database events such as a
  change or access generate an activity stream event. The database session can handle these
  events either synchronously or asynchronously.
- `resource_arn`: The Amazon Resource Name (ARN) of the DB cluster, for example,
  arn:aws:rds:us-east-1:12345667890:cluster:das-cluster.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ApplyImmediately"`: Specifies whether or not the database activity stream is to start
  as soon as possible, regardless of the maintenance window for the database.
- `"EngineNativeAuditFieldsIncluded"`: Specifies whether the database activity stream
  includes engine-native audit fields. This option only applies to an Oracle DB instance. By
  default, no engine-native audit fields are included.
"""
function start_activity_stream(
    KmsKeyId, Mode, ResourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "StartActivityStream",
        Dict{String,Any}(
            "KmsKeyId" => KmsKeyId, "Mode" => Mode, "ResourceArn" => ResourceArn
        );
        aws_config=aws_config,
    )
end
function start_activity_stream(
    KmsKeyId,
    Mode,
    ResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "StartActivityStream",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "KmsKeyId" => KmsKeyId, "Mode" => Mode, "ResourceArn" => ResourceArn
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    start_dbcluster(dbcluster_identifier)
    start_dbcluster(dbcluster_identifier, params::Dict{String,<:Any})

Starts an Amazon Aurora DB cluster that was stopped using the Amazon Web Services console,
the stop-db-cluster CLI command, or the StopDBCluster action. For more information, see
Stopping and Starting an Aurora Cluster in the Amazon Aurora User Guide.   This action only
applies to Aurora DB clusters.

# Arguments
- `dbcluster_identifier`: The DB cluster identifier of the Amazon Aurora DB cluster to be
  started. This parameter is stored as a lowercase string.

"""
function start_dbcluster(
    DBClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "StartDBCluster",
        Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier);
        aws_config=aws_config,
    )
end
function start_dbcluster(
    DBClusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "StartDBCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    start_dbinstance(dbinstance_identifier)
    start_dbinstance(dbinstance_identifier, params::Dict{String,<:Any})

 Starts an Amazon RDS DB instance that was stopped using the Amazon Web Services console,
the stop-db-instance CLI command, or the StopDBInstance action.  For more information, see
Starting an Amazon RDS DB instance That Was Previously Stopped in the Amazon RDS User
Guide.    This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB
clusters, use StartDBCluster instead.

# Arguments
- `dbinstance_identifier`:  The user-supplied instance identifier.

"""
function start_dbinstance(
    DBInstanceIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "StartDBInstance",
        Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier);
        aws_config=aws_config,
    )
end
function start_dbinstance(
    DBInstanceIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "StartDBInstance",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    start_dbinstance_automated_backups_replication(source_dbinstance_arn)
    start_dbinstance_automated_backups_replication(source_dbinstance_arn, params::Dict{String,<:Any})

Enables replication of automated backups to a different Amazon Web Services Region. For
more information, see  Replicating Automated Backups to Another Amazon Web Services Region
in the Amazon RDS User Guide.

# Arguments
- `source_dbinstance_arn`: The Amazon Resource Name (ARN) of the source DB instance for the
  replicated automated backups, for example, arn:aws:rds:us-west-2:123456789012:db:mydatabase.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"BackupRetentionPeriod"`: The retention period for the replicated automated backups.
- `"KmsKeyId"`: The Amazon Web Services KMS key identifier for encryption of the replicated
  automated backups. The KMS key ID is the Amazon Resource Name (ARN) for the KMS encryption
  key in the destination Amazon Web Services Region, for example,
  arn:aws:kms:us-east-1:123456789012:key/AKIAIOSFODNN7EXAMPLE.
- `"PreSignedUrl"`: A URL that contains a Signature Version 4 signed request for the
  StartDBInstanceAutomatedBackupsReplication action to be called in the Amazon Web Services
  Region of the source DB instance. The presigned URL must be a valid request for the
  StartDBInstanceAutomatedBackupsReplication API action that can be executed in the Amazon
  Web Services Region that contains the source DB instance.
"""
function start_dbinstance_automated_backups_replication(
    SourceDBInstanceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "StartDBInstanceAutomatedBackupsReplication",
        Dict{String,Any}("SourceDBInstanceArn" => SourceDBInstanceArn);
        aws_config=aws_config,
    )
end
function start_dbinstance_automated_backups_replication(
    SourceDBInstanceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "StartDBInstanceAutomatedBackupsReplication",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("SourceDBInstanceArn" => SourceDBInstanceArn),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    start_export_task(export_task_identifier, iam_role_arn, kms_key_id, s3_bucket_name, source_arn)
    start_export_task(export_task_identifier, iam_role_arn, kms_key_id, s3_bucket_name, source_arn, params::Dict{String,<:Any})

Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the
S3 bucket.

# Arguments
- `export_task_identifier`: A unique identifier for the snapshot export task. This ID isn't
  an identifier for the Amazon S3 bucket where the snapshot is to be exported to.
- `iam_role_arn`: The name of the IAM role to use for writing to the Amazon S3 bucket when
  exporting a snapshot.
- `kms_key_id`: The ID of the Amazon Web Services KMS customer master key (CMK) to use to
  encrypt the snapshot exported to Amazon S3. The Amazon Web Services KMS key identifier is
  the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS customer
  master key (CMK). The caller of this operation must be authorized to execute the following
  operations. These can be set in the Amazon Web Services KMS key policy:
  GrantOperation.Encrypt   GrantOperation.Decrypt   GrantOperation.GenerateDataKey
  GrantOperation.GenerateDataKeyWithoutPlaintext   GrantOperation.ReEncryptFrom
  GrantOperation.ReEncryptTo   GrantOperation.CreateGrant   GrantOperation.DescribeKey
  GrantOperation.RetireGrant
- `s3_bucket_name`: The name of the Amazon S3 bucket to export the snapshot to.
- `source_arn`: The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ExportOnly"`: The data to be exported from the snapshot. If this parameter is not
  provided, all the snapshot data is exported. Valid values are the following:    database -
  Export all the data from a specified database.    database.table table-name - Export a
  table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and
  Aurora MySQL.    database.schema schema-name - Export a database schema of the snapshot.
  This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.
  database.schema.table table-name - Export a table of the database schema. This format is
  valid only for RDS for PostgreSQL and Aurora PostgreSQL.
- `"S3Prefix"`: The Amazon S3 bucket prefix to use as the file name and path of the
  exported snapshot.
"""
function start_export_task(
    ExportTaskIdentifier,
    IamRoleArn,
    KmsKeyId,
    S3BucketName,
    SourceArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "StartExportTask",
        Dict{String,Any}(
            "ExportTaskIdentifier" => ExportTaskIdentifier,
            "IamRoleArn" => IamRoleArn,
            "KmsKeyId" => KmsKeyId,
            "S3BucketName" => S3BucketName,
            "SourceArn" => SourceArn,
        );
        aws_config=aws_config,
    )
end
function start_export_task(
    ExportTaskIdentifier,
    IamRoleArn,
    KmsKeyId,
    S3BucketName,
    SourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "StartExportTask",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ExportTaskIdentifier" => ExportTaskIdentifier,
                    "IamRoleArn" => IamRoleArn,
                    "KmsKeyId" => KmsKeyId,
                    "S3BucketName" => S3BucketName,
                    "SourceArn" => SourceArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    stop_activity_stream(resource_arn)
    stop_activity_stream(resource_arn, params::Dict{String,<:Any})

Stops a database activity stream that was started using the Amazon Web Services console,
the start-activity-stream CLI command, or the StartActivityStream action. For more
information, see Database Activity Streams in the Amazon Aurora User Guide.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the DB cluster for the database
  activity stream. For example, arn:aws:rds:us-east-1:12345667890:cluster:das-cluster.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ApplyImmediately"`: Specifies whether or not the database activity stream is to stop as
  soon as possible, regardless of the maintenance window for the database.
"""
function stop_activity_stream(
    ResourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "StopActivityStream",
        Dict{String,Any}("ResourceArn" => ResourceArn);
        aws_config=aws_config,
    )
end
function stop_activity_stream(
    ResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "StopActivityStream",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ResourceArn" => ResourceArn), params)
        );
        aws_config=aws_config,
    )
end

"""
    stop_dbcluster(dbcluster_identifier)
    stop_dbcluster(dbcluster_identifier, params::Dict{String,<:Any})

 Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB
cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains
the transaction logs so you can do a point-in-time restore if necessary.  For more
information, see  Stopping and Starting an Aurora Cluster in the Amazon Aurora User Guide.
 This action only applies to Aurora DB clusters.

# Arguments
- `dbcluster_identifier`: The DB cluster identifier of the Amazon Aurora DB cluster to be
  stopped. This parameter is stored as a lowercase string.

"""
function stop_dbcluster(
    DBClusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "StopDBCluster",
        Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier);
        aws_config=aws_config,
    )
end
function stop_dbcluster(
    DBClusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "StopDBCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBClusterIdentifier" => DBClusterIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    stop_dbinstance(dbinstance_identifier)
    stop_dbinstance(dbinstance_identifier, params::Dict{String,<:Any})

 Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB
instance's metadata, including its endpoint, DB parameter group, and option group
membership. Amazon RDS also retains the transaction logs so you can do a point-in-time
restore if necessary.  For more information, see  Stopping an Amazon RDS DB Instance
Temporarily in the Amazon RDS User Guide.    This command doesn't apply to Aurora MySQL and
Aurora PostgreSQL. For Aurora clusters, use StopDBCluster instead.

# Arguments
- `dbinstance_identifier`:  The user-supplied instance identifier.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DBSnapshotIdentifier"`:  The user-supplied instance identifier of the DB Snapshot
  created immediately before the DB instance is stopped.
"""
function stop_dbinstance(
    DBInstanceIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "StopDBInstance",
        Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier);
        aws_config=aws_config,
    )
end
function stop_dbinstance(
    DBInstanceIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "StopDBInstance",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DBInstanceIdentifier" => DBInstanceIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    stop_dbinstance_automated_backups_replication(source_dbinstance_arn)
    stop_dbinstance_automated_backups_replication(source_dbinstance_arn, params::Dict{String,<:Any})

Stops automated backup replication for a DB instance. For more information, see
Replicating Automated Backups to Another Amazon Web Services Region in the Amazon RDS User
Guide.

# Arguments
- `source_dbinstance_arn`: The Amazon Resource Name (ARN) of the source DB instance for
  which to stop replicating automated backups, for example,
  arn:aws:rds:us-west-2:123456789012:db:mydatabase.

"""
function stop_dbinstance_automated_backups_replication(
    SourceDBInstanceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return rds(
        "StopDBInstanceAutomatedBackupsReplication",
        Dict{String,Any}("SourceDBInstanceArn" => SourceDBInstanceArn);
        aws_config=aws_config,
    )
end
function stop_dbinstance_automated_backups_replication(
    SourceDBInstanceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return rds(
        "StopDBInstanceAutomatedBackupsReplication",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("SourceDBInstanceArn" => SourceDBInstanceArn),
                params,
            ),
        );
        aws_config=aws_config,
    )
end
