# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: appsync

using Compat
using UUIDs
"""
    CreateApiCache()

Creates a cache for the GraphQL API.

# Required Parameters
- `apiCachingBehavior`: Caching behavior.    FULL_REQUEST_CACHING: All requests are fully cached.    PER_RESOLVER_CACHING: Individual resovlers that you specify are cached.  
- `apiId`: The GraphQL API Id.
- `ttl`: TTL in seconds for cache entries. Valid values are between 1 and 3600 seconds.
- `type`: The cache instance type. Valid values are     SMALL     MEDIUM     LARGE     XLARGE     LARGE_2X     LARGE_4X     LARGE_8X (not available in all regions)    LARGE_12X    Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used. The following legacy instance types are avaible, but their use is discouraged:    T2_SMALL: A t2.small instance type.    T2_MEDIUM: A t2.medium instance type.    R4_LARGE: A r4.large instance type.    R4_XLARGE: A r4.xlarge instance type.    R4_2XLARGE: A r4.2xlarge instance type.    R4_4XLARGE: A r4.4xlarge instance type.    R4_8XLARGE: A r4.8xlarge instance type.  

# Optional Parameters
- `atRestEncryptionEnabled`: At rest encryption flag for cache. This setting cannot be updated after creation.
- `transitEncryptionEnabled`: Transit encryption flag when connecting to cache. This setting cannot be updated after creation.
"""

CreateApiCache(apiCachingBehavior, apiId, ttl, type; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/ApiCaches", Dict{String, Any}("apiCachingBehavior"=>apiCachingBehavior, "ttl"=>ttl, "type"=>type); aws_config=aws_config)
CreateApiCache(apiCachingBehavior, apiId, ttl, type, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/ApiCaches", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("apiCachingBehavior"=>apiCachingBehavior, "ttl"=>ttl, "type"=>type), args)); aws_config=aws_config)

"""
    CreateApiKey()

Creates a unique key that you can distribute to clients who are executing your API.

# Required Parameters
- `apiId`: The ID for your GraphQL API.

# Optional Parameters
- `description`: A description of the purpose of the API key.
- `expires`: The time from creation time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour. The default value for this parameter is 7 days from creation time. For more information, see .
"""

CreateApiKey(apiId; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/apikeys"; aws_config=aws_config)
CreateApiKey(apiId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/apikeys", args; aws_config=aws_config)

"""
    CreateDataSource()

Creates a DataSource object.

# Required Parameters
- `apiId`: The API ID for the GraphQL API for the DataSource.
- `name`: A user-supplied name for the DataSource.
- `type`: The type of the DataSource.

# Optional Parameters
- `description`: A description of the DataSource.
- `dynamodbConfig`: Amazon DynamoDB settings.
- `elasticsearchConfig`: Amazon Elasticsearch Service settings.
- `httpConfig`: HTTP endpoint settings.
- `lambdaConfig`: AWS Lambda settings.
- `relationalDatabaseConfig`: Relational database settings.
- `serviceRoleArn`: The AWS IAM service role ARN for the data source. The system assumes this role when accessing the data source.
"""

CreateDataSource(apiId, name, type; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/datasources", Dict{String, Any}("name"=>name, "type"=>type); aws_config=aws_config)
CreateDataSource(apiId, name, type, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/datasources", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name, "type"=>type), args)); aws_config=aws_config)

"""
    CreateFunction()

Creates a Function object. A function is a reusable entity. Multiple functions can be used to compose the resolver logic.

# Required Parameters
- `apiId`: The GraphQL API ID.
- `dataSourceName`: The Function DataSource name.
- `functionVersion`: The version of the request mapping template. Currently the supported value is 2018-05-29. 
- `name`: The Function name. The function name does not have to be unique.

# Optional Parameters
- `description`: The Function description.
- `requestMappingTemplate`: The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
- `responseMappingTemplate`: The Function response mapping template. 
"""

CreateFunction(apiId, dataSourceName, functionVersion, name; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/functions", Dict{String, Any}("dataSourceName"=>dataSourceName, "functionVersion"=>functionVersion, "name"=>name); aws_config=aws_config)
CreateFunction(apiId, dataSourceName, functionVersion, name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/functions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("dataSourceName"=>dataSourceName, "functionVersion"=>functionVersion, "name"=>name), args)); aws_config=aws_config)

"""
    CreateGraphqlApi()

Creates a GraphqlApi object.

# Required Parameters
- `authenticationType`: The authentication type: API key, AWS IAM, OIDC, or Amazon Cognito user pools.
- `name`: A user-supplied name for the GraphqlApi.

# Optional Parameters
- `additionalAuthenticationProviders`: A list of additional authentication providers for the GraphqlApi API.
- `logConfig`: The Amazon CloudWatch Logs configuration.
- `openIDConnectConfig`: The OpenID Connect configuration.
- `tags`: A TagMap object.
- `userPoolConfig`: The Amazon Cognito user pool configuration.
- `xrayEnabled`: A flag indicating whether to enable X-Ray tracing for the GraphqlApi.
"""

CreateGraphqlApi(authenticationType, name; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis", Dict{String, Any}("authenticationType"=>authenticationType, "name"=>name); aws_config=aws_config)
CreateGraphqlApi(authenticationType, name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("authenticationType"=>authenticationType, "name"=>name), args)); aws_config=aws_config)

"""
    CreateResolver()

Creates a Resolver object. A resolver converts incoming requests into a format that a data source can understand and converts the data source's responses into GraphQL.

# Required Parameters
- `apiId`: The ID for the GraphQL API for which the resolver is being created.
- `fieldName`: The name of the field to attach the resolver to.
- `typeName`: The name of the Type.

# Optional Parameters
- `cachingConfig`: The caching configuration for the resolver.
- `dataSourceName`: The name of the data source for which the resolver is being created.
- `kind`: The resolver type.    UNIT: A UNIT resolver type. A UNIT resolver is the default resolver type. A UNIT resolver enables you to execute a GraphQL query against a single data source.    PIPELINE: A PIPELINE resolver type. A PIPELINE resolver enables you to execute a series of Function in a serial manner. You can use a pipeline resolver to execute a GraphQL query against multiple data sources.  
- `pipelineConfig`: The PipelineConfig.
- `requestMappingTemplate`: The mapping template to be used for requests. A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL). VTL request mapping templates are optional when using a Lambda data source. For all other data sources, VTL request and response mapping templates are required.
- `responseMappingTemplate`: The mapping template to be used for responses from the data source.
- `syncConfig`: The SyncConfig for a resolver attached to a versioned datasource.
"""

CreateResolver(apiId, fieldName, typeName; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/types/$(typeName)/resolvers", Dict{String, Any}("fieldName"=>fieldName); aws_config=aws_config)
CreateResolver(apiId, fieldName, typeName, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/types/$(typeName)/resolvers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("fieldName"=>fieldName), args)); aws_config=aws_config)

"""
    CreateType()

Creates a Type object.

# Required Parameters
- `apiId`: The API ID.
- `definition`: The type definition, in GraphQL Schema Definition Language (SDL) format. For more information, see the GraphQL SDL documentation.
- `format`: The type format: SDL or JSON.

"""

CreateType(apiId, definition, format; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/types", Dict{String, Any}("definition"=>definition, "format"=>format); aws_config=aws_config)
CreateType(apiId, definition, format, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/types", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("definition"=>definition, "format"=>format), args)); aws_config=aws_config)

"""
    DeleteApiCache()

Deletes an ApiCache object.

# Required Parameters
- `apiId`: The API ID.

"""

DeleteApiCache(apiId; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/ApiCaches"; aws_config=aws_config)
DeleteApiCache(apiId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/ApiCaches", args; aws_config=aws_config)

"""
    DeleteApiKey()

Deletes an API key.

# Required Parameters
- `apiId`: The API ID.
- `id`: The ID for the API key.

"""

DeleteApiKey(apiId, id; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/apikeys/$(id)"; aws_config=aws_config)
DeleteApiKey(apiId, id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/apikeys/$(id)", args; aws_config=aws_config)

"""
    DeleteDataSource()

Deletes a DataSource object.

# Required Parameters
- `apiId`: The API ID.
- `name`: The name of the data source.

"""

DeleteDataSource(apiId, name; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/datasources/$(name)"; aws_config=aws_config)
DeleteDataSource(apiId, name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/datasources/$(name)", args; aws_config=aws_config)

"""
    DeleteFunction()

Deletes a Function.

# Required Parameters
- `apiId`: The GraphQL API ID.
- `functionId`: The Function ID.

"""

DeleteFunction(apiId, functionId; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/functions/$(functionId)"; aws_config=aws_config)
DeleteFunction(apiId, functionId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/functions/$(functionId)", args; aws_config=aws_config)

"""
    DeleteGraphqlApi()

Deletes a GraphqlApi object.

# Required Parameters
- `apiId`: The API ID.

"""

DeleteGraphqlApi(apiId; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)"; aws_config=aws_config)
DeleteGraphqlApi(apiId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)", args; aws_config=aws_config)

"""
    DeleteResolver()

Deletes a Resolver object.

# Required Parameters
- `apiId`: The API ID.
- `fieldName`: The resolver field name.
- `typeName`: The name of the resolver type.

"""

DeleteResolver(apiId, fieldName, typeName; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/types/$(typeName)/resolvers/$(fieldName)"; aws_config=aws_config)
DeleteResolver(apiId, fieldName, typeName, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/types/$(typeName)/resolvers/$(fieldName)", args; aws_config=aws_config)

"""
    DeleteType()

Deletes a Type object.

# Required Parameters
- `apiId`: The API ID.
- `typeName`: The type name.

"""

DeleteType(apiId, typeName; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/types/$(typeName)"; aws_config=aws_config)
DeleteType(apiId, typeName, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/types/$(typeName)", args; aws_config=aws_config)

"""
    FlushApiCache()

Flushes an ApiCache object.

# Required Parameters
- `apiId`: The API ID.

"""

FlushApiCache(apiId; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/FlushCache"; aws_config=aws_config)
FlushApiCache(apiId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/apis/$(apiId)/FlushCache", args; aws_config=aws_config)

"""
    GetApiCache()

Retrieves an ApiCache object.

# Required Parameters
- `apiId`: The API ID.

"""

GetApiCache(apiId; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/ApiCaches"; aws_config=aws_config)
GetApiCache(apiId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/ApiCaches", args; aws_config=aws_config)

"""
    GetDataSource()

Retrieves a DataSource object.

# Required Parameters
- `apiId`: The API ID.
- `name`: The name of the data source.

"""

GetDataSource(apiId, name; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/datasources/$(name)"; aws_config=aws_config)
GetDataSource(apiId, name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/datasources/$(name)", args; aws_config=aws_config)

"""
    GetFunction()

Get a Function.

# Required Parameters
- `apiId`: The GraphQL API ID.
- `functionId`: The Function ID.

"""

GetFunction(apiId, functionId; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/functions/$(functionId)"; aws_config=aws_config)
GetFunction(apiId, functionId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/functions/$(functionId)", args; aws_config=aws_config)

"""
    GetGraphqlApi()

Retrieves a GraphqlApi object.

# Required Parameters
- `apiId`: The API ID for the GraphQL API.

"""

GetGraphqlApi(apiId; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)"; aws_config=aws_config)
GetGraphqlApi(apiId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)", args; aws_config=aws_config)

"""
    GetIntrospectionSchema()

Retrieves the introspection schema for a GraphQL API.

# Required Parameters
- `apiId`: The API ID.
- `format`: The schema format: SDL or JSON.

# Optional Parameters
- `includeDirectives`: A flag that specifies whether the schema introspection should contain directives.
"""

GetIntrospectionSchema(apiId, format; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/schema", Dict{String, Any}("format"=>format); aws_config=aws_config)
GetIntrospectionSchema(apiId, format, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/schema", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("format"=>format), args)); aws_config=aws_config)

"""
    GetResolver()

Retrieves a Resolver object.

# Required Parameters
- `apiId`: The API ID.
- `fieldName`: The resolver field name.
- `typeName`: The resolver type name.

"""

GetResolver(apiId, fieldName, typeName; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/types/$(typeName)/resolvers/$(fieldName)"; aws_config=aws_config)
GetResolver(apiId, fieldName, typeName, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/types/$(typeName)/resolvers/$(fieldName)", args; aws_config=aws_config)

"""
    GetSchemaCreationStatus()

Retrieves the current status of a schema creation operation.

# Required Parameters
- `apiId`: The API ID.

"""

GetSchemaCreationStatus(apiId; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/schemacreation"; aws_config=aws_config)
GetSchemaCreationStatus(apiId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/schemacreation", args; aws_config=aws_config)

"""
    GetType()

Retrieves a Type object.

# Required Parameters
- `apiId`: The API ID.
- `format`: The type format: SDL or JSON.
- `typeName`: The type name.

"""

GetType(apiId, format, typeName; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/types/$(typeName)", Dict{String, Any}("format"=>format); aws_config=aws_config)
GetType(apiId, format, typeName, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/types/$(typeName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("format"=>format), args)); aws_config=aws_config)

"""
    ListApiKeys()

Lists the API keys for a given API.  API keys are deleted automatically sometime after they expire. However, they may still be included in the response until they have actually been deleted. You can safely call DeleteApiKey to manually delete a key before it's automatically deleted. 

# Required Parameters
- `apiId`: The API ID.

# Optional Parameters
- `maxResults`: The maximum number of results you want the request to return.
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""

ListApiKeys(apiId; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/apikeys"; aws_config=aws_config)
ListApiKeys(apiId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/apikeys", args; aws_config=aws_config)

"""
    ListDataSources()

Lists the data sources for a given API.

# Required Parameters
- `apiId`: The API ID.

# Optional Parameters
- `maxResults`: The maximum number of results you want the request to return.
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. 
"""

ListDataSources(apiId; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/datasources"; aws_config=aws_config)
ListDataSources(apiId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/datasources", args; aws_config=aws_config)

"""
    ListFunctions()

List multiple functions.

# Required Parameters
- `apiId`: The GraphQL API ID.

# Optional Parameters
- `maxResults`: The maximum number of results you want the request to return.
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""

ListFunctions(apiId; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/functions"; aws_config=aws_config)
ListFunctions(apiId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/functions", args; aws_config=aws_config)

"""
    ListGraphqlApis()

Lists your GraphQL APIs.

# Optional Parameters
- `maxResults`: The maximum number of results you want the request to return.
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. 
"""

ListGraphqlApis(; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis"; aws_config=aws_config)
ListGraphqlApis(args::AbstractDict{String, Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis", args; aws_config=aws_config)

"""
    ListResolvers()

Lists the resolvers for a given API and type.

# Required Parameters
- `apiId`: The API ID.
- `typeName`: The type name.

# Optional Parameters
- `maxResults`: The maximum number of results you want the request to return.
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. 
"""

ListResolvers(apiId, typeName; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/types/$(typeName)/resolvers"; aws_config=aws_config)
ListResolvers(apiId, typeName, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/types/$(typeName)/resolvers", args; aws_config=aws_config)

"""
    ListResolversByFunction()

List the resolvers that are associated with a specific function.

# Required Parameters
- `apiId`: The API ID.
- `functionId`: The Function ID.

# Optional Parameters
- `maxResults`: The maximum number of results you want the request to return.
- `nextToken`: An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.
"""

ListResolversByFunction(apiId, functionId; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/functions/$(functionId)/resolvers"; aws_config=aws_config)
ListResolversByFunction(apiId, functionId, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/functions/$(functionId)/resolvers", args; aws_config=aws_config)

"""
    ListTagsForResource()

Lists the tags for a resource.

# Required Parameters
- `resourceArn`: The GraphqlApi ARN.

"""

ListTagsForResource(resourceArn; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/tags/$(resourceArn)"; aws_config=aws_config)
ListTagsForResource(resourceArn, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/tags/$(resourceArn)", args; aws_config=aws_config)

"""
    ListTypes()

Lists the types for a given API.

# Required Parameters
- `apiId`: The API ID.
- `format`: The type format: SDL or JSON.

# Optional Parameters
- `maxResults`: The maximum number of results you want the request to return.
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. 
"""

ListTypes(apiId, format; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/types", Dict{String, Any}("format"=>format); aws_config=aws_config)
ListTypes(apiId, format, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("GET", "/v1/apis/$(apiId)/types", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("format"=>format), args)); aws_config=aws_config)

"""
    StartSchemaCreation()

Adds a new schema to your GraphQL API. This operation is asynchronous. Use to determine when it has completed.

# Required Parameters
- `apiId`: The API ID.
- `definition`: The schema definition, in GraphQL schema language format.

"""

StartSchemaCreation(apiId, definition; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/schemacreation", Dict{String, Any}("definition"=>definition); aws_config=aws_config)
StartSchemaCreation(apiId, definition, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/schemacreation", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("definition"=>definition), args)); aws_config=aws_config)

"""
    TagResource()

Tags a resource with user-supplied tags.

# Required Parameters
- `resourceArn`: The GraphqlApi ARN.
- `tags`: A TagMap object.

"""

TagResource(resourceArn, tags; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/tags/$(resourceArn)", Dict{String, Any}("tags"=>tags); aws_config=aws_config)
TagResource(resourceArn, tags, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tags"=>tags), args)); aws_config=aws_config)

"""
    UntagResource()

Untags a resource.

# Required Parameters
- `resourceArn`: The GraphqlApi ARN.
- `tagKeys`: A list of TagKey objects.

"""

UntagResource(resourceArn, tagKeys; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/tags/$(resourceArn)", Dict{String, Any}("tagKeys"=>tagKeys); aws_config=aws_config)
UntagResource(resourceArn, tagKeys, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("DELETE", "/v1/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), args)); aws_config=aws_config)

"""
    UpdateApiCache()

Updates the cache for the GraphQL API.

# Required Parameters
- `apiCachingBehavior`: Caching behavior.    FULL_REQUEST_CACHING: All requests are fully cached.    PER_RESOLVER_CACHING: Individual resovlers that you specify are cached.  
- `apiId`: The GraphQL API Id.
- `ttl`: TTL in seconds for cache entries. Valid values are between 1 and 3600 seconds.
- `type`: The cache instance type. Valid values are     SMALL     MEDIUM     LARGE     XLARGE     LARGE_2X     LARGE_4X     LARGE_8X (not available in all regions)    LARGE_12X    Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used. The following legacy instance types are avaible, but their use is discouraged:    T2_SMALL: A t2.small instance type.    T2_MEDIUM: A t2.medium instance type.    R4_LARGE: A r4.large instance type.    R4_XLARGE: A r4.xlarge instance type.    R4_2XLARGE: A r4.2xlarge instance type.    R4_4XLARGE: A r4.4xlarge instance type.    R4_8XLARGE: A r4.8xlarge instance type.  

"""

UpdateApiCache(apiCachingBehavior, apiId, ttl, type; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/ApiCaches/update", Dict{String, Any}("apiCachingBehavior"=>apiCachingBehavior, "ttl"=>ttl, "type"=>type); aws_config=aws_config)
UpdateApiCache(apiCachingBehavior, apiId, ttl, type, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/ApiCaches/update", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("apiCachingBehavior"=>apiCachingBehavior, "ttl"=>ttl, "type"=>type), args)); aws_config=aws_config)

"""
    UpdateApiKey()

Updates an API key.

# Required Parameters
- `apiId`: The ID for the GraphQL API.
- `id`: The API key ID.

# Optional Parameters
- `description`: A description of the purpose of the API key.
- `expires`: The time from update time after which the API key expires. The date is represented as seconds since the epoch. For more information, see .
"""

UpdateApiKey(apiId, id; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/apikeys/$(id)"; aws_config=aws_config)
UpdateApiKey(apiId, id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/apikeys/$(id)", args; aws_config=aws_config)

"""
    UpdateDataSource()

Updates a DataSource object.

# Required Parameters
- `apiId`: The API ID.
- `name`: The new name for the data source.
- `type`: The new data source type.

# Optional Parameters
- `description`: The new description for the data source.
- `dynamodbConfig`: The new Amazon DynamoDB configuration.
- `elasticsearchConfig`: The new Elasticsearch Service configuration.
- `httpConfig`: The new HTTP endpoint configuration.
- `lambdaConfig`: The new AWS Lambda configuration.
- `relationalDatabaseConfig`: The new relational database configuration.
- `serviceRoleArn`: The new service role ARN for the data source.
"""

UpdateDataSource(apiId, name, type; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/datasources/$(name)", Dict{String, Any}("type"=>type); aws_config=aws_config)
UpdateDataSource(apiId, name, type, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/datasources/$(name)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("type"=>type), args)); aws_config=aws_config)

"""
    UpdateFunction()

Updates a Function object.

# Required Parameters
- `apiId`: The GraphQL API ID.
- `dataSourceName`: The Function DataSource name.
- `functionId`: The function ID.
- `functionVersion`: The version of the request mapping template. Currently the supported value is 2018-05-29. 
- `name`: The Function name.

# Optional Parameters
- `description`: The Function description.
- `requestMappingTemplate`: The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
- `responseMappingTemplate`: The Function request mapping template. 
"""

UpdateFunction(apiId, dataSourceName, functionId, functionVersion, name; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/functions/$(functionId)", Dict{String, Any}("dataSourceName"=>dataSourceName, "functionVersion"=>functionVersion, "name"=>name); aws_config=aws_config)
UpdateFunction(apiId, dataSourceName, functionId, functionVersion, name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/functions/$(functionId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("dataSourceName"=>dataSourceName, "functionVersion"=>functionVersion, "name"=>name), args)); aws_config=aws_config)

"""
    UpdateGraphqlApi()

Updates a GraphqlApi object.

# Required Parameters
- `apiId`: The API ID.
- `name`: The new name for the GraphqlApi object.

# Optional Parameters
- `additionalAuthenticationProviders`: A list of additional authentication providers for the GraphqlApi API.
- `authenticationType`: The new authentication type for the GraphqlApi object.
- `logConfig`: The Amazon CloudWatch Logs configuration for the GraphqlApi object.
- `openIDConnectConfig`: The OpenID Connect configuration for the GraphqlApi object.
- `userPoolConfig`: The new Amazon Cognito user pool configuration for the GraphqlApi object.
- `xrayEnabled`: A flag indicating whether to enable X-Ray tracing for the GraphqlApi.
"""

UpdateGraphqlApi(apiId, name; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)", Dict{String, Any}("name"=>name); aws_config=aws_config)
UpdateGraphqlApi(apiId, name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), args)); aws_config=aws_config)

"""
    UpdateResolver()

Updates a Resolver object.

# Required Parameters
- `apiId`: The API ID.
- `fieldName`: The new field name.
- `typeName`: The new type name.

# Optional Parameters
- `cachingConfig`: The caching configuration for the resolver.
- `dataSourceName`: The new data source name.
- `kind`: The resolver type.    UNIT: A UNIT resolver type. A UNIT resolver is the default resolver type. A UNIT resolver enables you to execute a GraphQL query against a single data source.    PIPELINE: A PIPELINE resolver type. A PIPELINE resolver enables you to execute a series of Function in a serial manner. You can use a pipeline resolver to execute a GraphQL query against multiple data sources.  
- `pipelineConfig`: The PipelineConfig.
- `requestMappingTemplate`: The new request mapping template. A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL). VTL request mapping templates are optional when using a Lambda data source. For all other data sources, VTL request and response mapping templates are required.
- `responseMappingTemplate`: The new response mapping template.
- `syncConfig`: The SyncConfig for a resolver attached to a versioned datasource.
"""

UpdateResolver(apiId, fieldName, typeName; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/types/$(typeName)/resolvers/$(fieldName)"; aws_config=aws_config)
UpdateResolver(apiId, fieldName, typeName, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/types/$(typeName)/resolvers/$(fieldName)", args; aws_config=aws_config)

"""
    UpdateType()

Updates a Type object.

# Required Parameters
- `apiId`: The API ID.
- `format`: The new type format: SDL or JSON.
- `typeName`: The new type name.

# Optional Parameters
- `definition`: The new definition.
"""

UpdateType(apiId, format, typeName; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/types/$(typeName)", Dict{String, Any}("format"=>format); aws_config=aws_config)
UpdateType(apiId, format, typeName, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = appsync("POST", "/v1/apis/$(apiId)/types/$(typeName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("format"=>format), args)); aws_config=aws_config)
