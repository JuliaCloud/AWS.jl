# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: s3
using AWS.Compat
using AWS.UUIDs

"""
    abort_multipart_upload(bucket, key, upload_id)
    abort_multipart_upload(bucket, key, upload_id, params::Dict{String,<:Any})

This action aborts a multipart upload. After a multipart upload is aborted, no additional
parts can be uploaded using that upload ID. The storage consumed by any previously uploaded
parts will be freed. However, if any part uploads are currently in progress, those part
uploads might or might not succeed. As a result, it might be necessary to abort a given
multipart upload multiple times in order to completely free all storage consumed by all
parts.  To verify that all parts have been removed, so you don't get charged for the part
storage, you should call the ListParts action and ensure that the parts list is empty. For
information about permissions required to use the multipart upload, see Multipart Upload
and Permissions. The following operations are related to AbortMultipartUpload:
CreateMultipartUpload     UploadPart     CompleteMultipartUpload     ListParts
ListMultipartUploads

# Arguments
- `bucket`: The bucket name to which the upload was taking place.  When using this action
  with an access point, you must direct requests to the access point hostname. The access
  point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide. When using this action with Amazon S3 on Outposts, you
  must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the
  form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: Key of the object for which the multipart upload was initiated.
- `upload_id`: Upload ID that identifies the multipart upload.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
"""
function abort_multipart_upload(
    Bucket, Key, uploadId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)/$(Key)",
        Dict{String,Any}("uploadId" => uploadId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function abort_multipart_upload(
    Bucket,
    Key,
    uploadId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "DELETE",
        "/$(Bucket)/$(Key)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("uploadId" => uploadId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    complete_multipart_upload(bucket, key, upload_id)
    complete_multipart_upload(bucket, key, upload_id, params::Dict{String,<:Any})

Completes a multipart upload by assembling previously uploaded parts. You first initiate
the multipart upload and then upload all parts using the UploadPart operation. After
successfully uploading all relevant parts of an upload, you call this action to complete
the upload. Upon receiving this request, Amazon S3 concatenates all the parts in ascending
order by part number to create a new object. In the Complete Multipart Upload request, you
must provide the parts list. You must ensure that the parts list is complete. This action
concatenates the parts that you provide in the list. For each part in the list, you must
provide the part number and the ETag value, returned after that part was uploaded.
Processing of a Complete Multipart Upload request could take several minutes to complete.
After Amazon S3 begins processing the request, it sends an HTTP response header that
specifies a 200 OK response. While processing is in progress, Amazon S3 periodically sends
white space characters to keep the connection from timing out. Because a request could fail
after the initial 200 OK response has been sent, it is important that you check the
response body to determine whether the request succeeded. Note that if
CompleteMultipartUpload fails, applications should be prepared to retry the failed
requests. For more information, see Amazon S3 Error Best Practices.  You cannot use
Content-Type: application/x-www-form-urlencoded with Complete Multipart Upload requests.
Also, if you do not provide a Content-Type header, CompleteMultipartUpload returns a 200 OK
response.  For more information about multipart uploads, see Uploading Objects Using
Multipart Upload. For information about permissions required to use the multipart upload
API, see Multipart Upload and Permissions.  CompleteMultipartUpload has the following
special errors:   Error code: EntityTooSmall    Description: Your proposed upload is
smaller than the minimum allowed object size. Each part must be at least 5 MB in size,
except the last part.   400 Bad Request     Error code: InvalidPart    Description: One or
more of the specified parts could not be found. The part might not have been uploaded, or
the specified entity tag might not have matched the part's entity tag.   400 Bad Request
 Error code: InvalidPartOrder    Description: The list of parts was not in ascending order.
The parts list must be specified in order by part number.   400 Bad Request     Error code:
NoSuchUpload    Description: The specified multipart upload does not exist. The upload ID
might be invalid, or the multipart upload might have been aborted or completed.   404 Not
Found     The following operations are related to CompleteMultipartUpload:
CreateMultipartUpload     UploadPart     AbortMultipartUpload     ListParts
ListMultipartUploads

# Arguments
- `bucket`: Name of the bucket to which the multipart upload was initiated. When using this
  action with an access point, you must direct requests to the access point hostname. The
  access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide. When using this action with Amazon S3 on Outposts, you
  must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the
  form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: Object key for which the multipart upload was initiated.
- `upload_id`: ID for the initiated multipart upload.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CompleteMultipartUpload"`: The container for the multipart upload request information.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
"""
function complete_multipart_upload(
    Bucket, Key, uploadId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "POST",
        "/$(Bucket)/$(Key)",
        Dict{String,Any}("uploadId" => uploadId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function complete_multipart_upload(
    Bucket,
    Key,
    uploadId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "POST",
        "/$(Bucket)/$(Key)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("uploadId" => uploadId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    copy_object(bucket, key, x-amz-copy-source)
    copy_object(bucket, key, x-amz-copy-source, params::Dict{String,<:Any})

Creates a copy of an object that is already stored in Amazon S3.  You can store individual
objects of up to 5 TB in Amazon S3. You create a copy of your object up to 5 GB in size in
a single atomic action using this API. However, to copy an object greater than 5 GB, you
must use the multipart upload Upload Part - Copy API. For more information, see Copy Object
Using the REST Multipart Upload API.  All copy requests must be authenticated.
Additionally, you must have read access to the source object and write access to the
destination bucket. For more information, see REST Authentication. Both the Region that you
want to copy the object from and the Region that you want to copy the object to must be
enabled for your account. A copy request might return an error when Amazon S3 receives the
copy request or while Amazon S3 is copying the files. If the error occurs before the copy
action starts, you receive a standard Amazon S3 error. If the error occurs during the copy
operation, the error response is embedded in the 200 OK response. This means that a 200 OK
response can contain either a success or an error. Design your application to parse the
contents of the response and handle it appropriately. If the copy is successful, you
receive a response with information about the copied object.  If the request is an HTTP 1.1
request, the response is chunk encoded. If it were not, it would not contain the
content-length, and you would need to read the entire body.  The copy request charge is
based on the storage class and Region that you specify for the destination object. For
pricing information, see Amazon S3 pricing.  Amazon S3 transfer acceleration does not
support cross-Region copies. If you request a cross-Region copy using a transfer
acceleration endpoint, you get a 400 Bad Request error. For more information, see Transfer
Acceleration.   Metadata  When copying an object, you can preserve all metadata (default)
or specify new metadata. However, the ACL is not preserved and is set to private for the
user making the request. To override the default ACL setting, specify a new ACL when
generating a copy request. For more information, see Using ACLs.  To specify whether you
want the object metadata copied from the source object or replaced with metadata provided
in the request, you can optionally add the x-amz-metadata-directive header. When you grant
permissions, you can use the s3:x-amz-metadata-directive condition key to enforce certain
metadata behavior when objects are uploaded. For more information, see Specifying
Conditions in a Policy in the Amazon S3 User Guide. For a complete list of Amazon
S3-specific condition keys, see Actions, Resources, and Condition Keys for Amazon S3.
x-amz-copy-source-if Headers  To only copy an object under certain conditions, such as
whether the Etag matches or whether the object was modified before or after a specified
date, use the following request parameters:    x-amz-copy-source-if-match
x-amz-copy-source-if-none-match     x-amz-copy-source-if-unmodified-since
x-amz-copy-source-if-modified-since     If both the x-amz-copy-source-if-match and
x-amz-copy-source-if-unmodified-since headers are present in the request and evaluate as
follows, Amazon S3 returns 200 OK and copies the data:    x-amz-copy-source-if-match
condition evaluates to true    x-amz-copy-source-if-unmodified-since condition evaluates to
false   If both the x-amz-copy-source-if-none-match and x-amz-copy-source-if-modified-since
headers are present in the request and evaluate as follows, Amazon S3 returns the 412
Precondition Failed response code:    x-amz-copy-source-if-none-match condition evaluates
to false    x-amz-copy-source-if-modified-since condition evaluates to true    All headers
with the x-amz- prefix, including x-amz-copy-source, must be signed.   Server-side
encryption  When you perform a CopyObject operation, you can optionally use the appropriate
encryption-related headers to encrypt the object using server-side encryption with Amazon
Web Services managed encryption keys (SSE-S3 or SSE-KMS) or a customer-provided encryption
key. With server-side encryption, Amazon S3 encrypts your data as it writes it to disks in
its data centers and decrypts the data when you access it. For more information about
server-side encryption, see Using Server-Side Encryption. If a target object uses SSE-KMS,
you can enable an S3 Bucket Key for the object. For more information, see Amazon S3 Bucket
Keys in the Amazon S3 User Guide.  Access Control List (ACL)-Specific Request Headers  When
copying an object, you can optionally use headers to grant ACL-based permissions. By
default, all objects are private. Only the owner has full access control. When adding a new
object, you can grant permissions to individual Amazon Web Services accounts or to
predefined groups defined by Amazon S3. These permissions are then added to the ACL on the
object. For more information, see Access Control List (ACL) Overview and Managing ACLs
Using the REST API.  If the bucket that you're copying objects to uses the bucket owner
enforced setting for S3 Object Ownership, ACLs are disabled and no longer affect
permissions. Buckets that use this setting only accept PUT requests that don't specify an
ACL or PUT requests that specify bucket owner full control ACLs, such as the
bucket-owner-full-control canned ACL or an equivalent form of this ACL expressed in the XML
format. For more information, see  Controlling ownership of objects and disabling ACLs in
the Amazon S3 User Guide.  If your bucket uses the bucket owner enforced setting for Object
Ownership, all objects written to the bucket by any account will be owned by the bucket
owner.   Storage Class Options  You can use the CopyObject action to change the storage
class of an object that is already stored in Amazon S3 using the StorageClass parameter.
For more information, see Storage Classes in the Amazon S3 User Guide.  Versioning  By
default, x-amz-copy-source identifies the current version of an object to copy. If the
current version is a delete marker, Amazon S3 behaves as if the object was deleted. To copy
a different version, use the versionId subresource. If you enable versioning on the target
bucket, Amazon S3 generates a unique version ID for the object being copied. This version
ID is different from the version ID of the source object. Amazon S3 returns the version ID
of the copied object in the x-amz-version-id response header in the response. If you do not
enable versioning or suspend it on the target bucket, the version ID that Amazon S3
generates is always null. If the source object's storage class is GLACIER, you must restore
a copy of this object before you can use it as a source object for the copy operation. For
more information, see RestoreObject. The following operations are related to CopyObject:
PutObject     GetObject    For more information, see Copying Objects.

# Arguments
- `bucket`: The name of the destination bucket. When using this action with an access
  point, you must direct requests to the access point hostname. The access point hostname
  takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using
  this action with an access point through the Amazon Web Services SDKs, you provide the
  access point ARN in place of the bucket name. For more information about access point ARNs,
  see Using access points in the Amazon S3 User Guide. When using this action with Amazon S3
  on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts
  hostname takes the form
  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: The key of the destination object.
- `x-amz-copy-source`: Specifies the source object for the copy operation. You specify the
  value in one of two formats, depending on whether you want to access the source object
  through an access point:   For objects not accessed through an access point, specify the
  name of the source bucket and the key of the source object, separated by a slash (/). For
  example, to copy the object reports/january.pdf from the bucket awsexamplebucket, use
  awsexamplebucket/reports/january.pdf. The value must be URL encoded.   For objects accessed
  through access points, specify the Amazon Resource Name (ARN) of the object as accessed
  through the access point, in the format
  arn:aws:s3:&lt;Region&gt;:&lt;account-id&gt;:accesspoint/&lt;access-point-name&gt;/object/&l
  t;key&gt;. For example, to copy the object reports/january.pdf through access point
  my-access-point owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf.
  The value must be URL encoded.  Amazon S3 supports copy operations using access points only
  when the source and destination buckets are in the same Amazon Web Services Region.
  Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the
  object as accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/object/&lt
  ;key&gt;. For example, to copy the object reports/january.pdf through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf.
  The value must be URL encoded.    To copy a specific version of an object, append
  ?versionId=&lt;version-id&gt; to the value (for example,
  awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893). If you
  don't specify a version ID, Amazon S3 copies the latest version of the source object.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Cache-Control"`: Specifies caching behavior along the request/reply chain.
- `"Content-Disposition"`: Specifies presentational information for the object.
- `"Content-Encoding"`: Specifies what content encodings have been applied to the object
  and thus what decoding mechanisms must be applied to obtain the media-type referenced by
  the Content-Type header field.
- `"Content-Language"`: The language the content is in.
- `"Content-Type"`: A standard MIME type describing the format of the object data.
- `"Expires"`: The date and time at which the object is no longer cacheable.
- `"x-amz-acl"`: The canned ACL to apply to the object. This action is not supported by
  Amazon S3 on Outposts.
- `"x-amz-copy-source-if-match"`: Copies the object if its entity tag (ETag) matches the
  specified tag.
- `"x-amz-copy-source-if-modified-since"`: Copies the object if it has been modified since
  the specified time.
- `"x-amz-copy-source-if-none-match"`: Copies the object if its entity tag (ETag) is
  different than the specified ETag.
- `"x-amz-copy-source-if-unmodified-since"`: Copies the object if it hasn't been modified
  since the specified time.
- `"x-amz-copy-source-server-side-encryption-customer-algorithm"`: Specifies the algorithm
  to use when decrypting the source object (for example, AES256).
- `"x-amz-copy-source-server-side-encryption-customer-key"`: Specifies the
  customer-provided encryption key for Amazon S3 to use to decrypt the source object. The
  encryption key provided in this header must be one that was used when the source object was
  created.
- `"x-amz-copy-source-server-side-encryption-customer-key-MD5"`: Specifies the 128-bit MD5
  digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a
  message integrity check to ensure that the encryption key was transmitted without error.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected destination bucket owner.
  If the destination bucket is owned by a different account, the request will fail with an
  HTTP 403 (Access Denied) error.
- `"x-amz-grant-full-control"`: Gives the grantee READ, READ_ACP, and WRITE_ACP permissions
  on the object. This action is not supported by Amazon S3 on Outposts.
- `"x-amz-grant-read"`: Allows grantee to read the object data and its metadata. This
  action is not supported by Amazon S3 on Outposts.
- `"x-amz-grant-read-acp"`: Allows grantee to read the object ACL. This action is not
  supported by Amazon S3 on Outposts.
- `"x-amz-grant-write-acp"`: Allows grantee to write the ACL for the applicable object.
  This action is not supported by Amazon S3 on Outposts.
- `"x-amz-meta-"`: A map of metadata to store with the object in S3.
- `"x-amz-metadata-directive"`: Specifies whether the metadata is copied from the source
  object or replaced with metadata provided in the request.
- `"x-amz-object-lock-legal-hold"`: Specifies whether you want to apply a Legal Hold to the
  copied object.
- `"x-amz-object-lock-mode"`: The Object Lock mode that you want to apply to the copied
  object.
- `"x-amz-object-lock-retain-until-date"`: The date and time when you want the copied
  object's Object Lock to expire.
- `"x-amz-request-payer"`:
- `"x-amz-server-side-encryption"`: The server-side encryption algorithm used when storing
  this object in Amazon S3 (for example, AES256, aws:kms).
- `"x-amz-server-side-encryption-aws-kms-key-id"`: Specifies the Amazon Web Services KMS
  key ID to use for object encryption. All GET and PUT requests for an object protected by
  Amazon Web Services KMS will fail if not made via SSL or using SigV4. For information about
  configuring using any of the officially supported Amazon Web Services SDKs and Amazon Web
  Services CLI, see Specifying the Signature Version in Request Authentication in the Amazon
  S3 User Guide.
- `"x-amz-server-side-encryption-bucket-key-enabled"`: Specifies whether Amazon S3 should
  use an S3 Bucket Key for object encryption with server-side encryption using AWS KMS
  (SSE-KMS). Setting this header to true causes Amazon S3 to use an S3 Bucket Key for object
  encryption with SSE-KMS.  Specifying this header with a COPY action doesn’t affect
  bucket-level settings for S3 Bucket Key.
- `"x-amz-server-side-encryption-context"`: Specifies the Amazon Web Services KMS
  Encryption Context to use for object encryption. The value of this header is a
  base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs.
- `"x-amz-server-side-encryption-customer-algorithm"`: Specifies the algorithm to use to
  when encrypting the object (for example, AES256).
- `"x-amz-server-side-encryption-customer-key"`: Specifies the customer-provided encryption
  key for Amazon S3 to use in encrypting data. This value is used to store the object and
  then it is discarded; Amazon S3 does not store the encryption key. The key must be
  appropriate for use with the algorithm specified in the
  x-amz-server-side-encryption-customer-algorithm header.
- `"x-amz-server-side-encryption-customer-key-MD5"`: Specifies the 128-bit MD5 digest of
  the encryption key according to RFC 1321. Amazon S3 uses this header for a message
  integrity check to ensure that the encryption key was transmitted without error.
- `"x-amz-source-expected-bucket-owner"`: The account ID of the expected source bucket
  owner. If the source bucket is owned by a different account, the request will fail with an
  HTTP 403 (Access Denied) error.
- `"x-amz-storage-class"`: By default, Amazon S3 uses the STANDARD Storage Class to store
  newly created objects. The STANDARD storage class provides high durability and high
  availability. Depending on performance needs, you can specify a different Storage Class.
  Amazon S3 on Outposts only uses the OUTPOSTS Storage Class. For more information, see
  Storage Classes in the Amazon S3 User Guide.
- `"x-amz-tagging"`: The tag-set for the object destination object this value must be used
  in conjunction with the TaggingDirective. The tag-set must be encoded as URL Query
  parameters.
- `"x-amz-tagging-directive"`: Specifies whether the object tag-set are copied from the
  source object or replaced with tag-set provided in the request.
- `"x-amz-website-redirect-location"`: If the bucket is configured as a website, redirects
  requests for this object to another object in the same bucket or to an external URL. Amazon
  S3 stores the value of this header in the object metadata.
"""
function copy_object(
    Bucket, Key, x_amz_copy_source; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-copy-source" => x_amz_copy_source)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function copy_object(
    Bucket,
    Key,
    x_amz_copy_source,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-copy-source" => x_amz_copy_source)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_bucket(bucket)
    create_bucket(bucket, params::Dict{String,<:Any})

Creates a new S3 bucket. To create a bucket, you must register with Amazon S3 and have a
valid Amazon Web Services Access Key ID to authenticate requests. Anonymous requests are
never allowed to create buckets. By creating the bucket, you become the bucket owner. Not
every string is an acceptable bucket name. For information about bucket naming
restrictions, see Bucket naming rules. If you want to create an Amazon S3 on Outposts
bucket, see Create Bucket.  By default, the bucket is created in the US East (N. Virginia)
Region. You can optionally specify a Region in the request body. You might choose a Region
to optimize latency, minimize costs, or address regulatory requirements. For example, if
you reside in Europe, you will probably find it advantageous to create buckets in the
Europe (Ireland) Region. For more information, see Accessing a bucket.  If you send your
create bucket request to the s3.amazonaws.com endpoint, the request goes to the us-east-1
Region. Accordingly, the signature calculations in Signature Version 4 must use us-east-1
as the Region, even if the location constraint in the request specifies another Region
where the bucket is to be created. If you create a bucket in a Region other than US East
(N. Virginia), your application must be able to handle 307 redirect. For more information,
see Virtual hosting of buckets.   Access control lists (ACLs)  When creating a bucket using
this operation, you can optionally configure the bucket ACL to specify the accounts or
groups that should be granted specific permissions on the bucket.  If your CreateBucket
request sets bucket owner enforced for S3 Object Ownership and specifies a bucket ACL that
provides access to an external Amazon Web Services account, your request fails with a 400
error and returns the InvalidBucketAclWithObjectOwnership error code. For more information,
see Controlling object ownership in the Amazon S3 User Guide.  There are two ways to grant
the appropriate permissions using the request headers.   Specify a canned ACL using the
x-amz-acl request header. Amazon S3 supports a set of predefined ACLs, known as canned
ACLs. Each canned ACL has a predefined set of grantees and permissions. For more
information, see Canned ACL.   Specify access permissions explicitly using the
x-amz-grant-read, x-amz-grant-write, x-amz-grant-read-acp, x-amz-grant-write-acp, and
x-amz-grant-full-control headers. These headers map to the set of permissions Amazon S3
supports in an ACL. For more information, see Access control list (ACL) overview. You
specify each grantee as a type=value pair, where the type is one of the following:    id
– if the value specified is the canonical user ID of an Amazon Web Services account
uri – if you are granting permissions to a predefined group    emailAddress – if the
value specified is the email address of an Amazon Web Services account  Using email
addresses to specify a grantee is only supported in the following Amazon Web Services
Regions:    US East (N. Virginia)   US West (N. California)    US West (Oregon)    Asia
Pacific (Singapore)   Asia Pacific (Sydney)   Asia Pacific (Tokyo)   Europe (Ireland)
South America (São Paulo)   For a list of all the Amazon S3 supported Regions and
endpoints, see Regions and Endpoints in the Amazon Web Services General Reference.    For
example, the following x-amz-grant-read header grants the Amazon Web Services accounts
identified by account IDs permissions to read object data and its metadata:
x-amz-grant-read: id=\"11112222333\", id=\"444455556666\"      You can use either a canned
ACL or specify access permissions explicitly. You cannot do both.   Permissions  In
addition to s3:CreateBucket, the following permissions are required when your CreateBucket
includes specific headers:    ACLs - If your CreateBucket request specifies ACL permissions
and the ACL is public-read, public-read-write, authenticated-read, or if you specify access
permissions explicitly through any other ACL, both s3:CreateBucket and s3:PutBucketAcl
permissions are needed. If the ACL the CreateBucket request is private or doesn't specify
any ACLs, only s3:CreateBucket permission is needed.     Object Lock - If
ObjectLockEnabledForBucket is set to true in your CreateBucket request,
s3:PutBucketObjectLockConfiguration and s3:PutBucketVersioning permissions are required.
S3 Object Ownership - If your CreateBucket request includes the the x-amz-object-ownership
header, s3:PutBucketOwnershipControls permission is required.   The following operations
are related to CreateBucket:    PutObject     DeleteBucket

# Arguments
- `bucket`: The name of the bucket to create.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CreateBucketConfiguration"`: The configuration information for the bucket.
- `"x-amz-acl"`: The canned ACL to apply to the bucket.
- `"x-amz-bucket-object-lock-enabled"`: Specifies whether you want S3 Object Lock to be
  enabled for the new bucket.
- `"x-amz-grant-full-control"`: Allows grantee the read, write, read ACP, and write ACP
  permissions on the bucket.
- `"x-amz-grant-read"`: Allows grantee to list the objects in the bucket.
- `"x-amz-grant-read-acp"`: Allows grantee to read the bucket ACL.
- `"x-amz-grant-write"`: Allows grantee to create new objects in the bucket. For the bucket
  and object owners of existing objects, also allows deletions and overwrites of those
  objects.
- `"x-amz-grant-write-acp"`: Allows grantee to write the ACL for the applicable bucket.
- `"x-amz-object-ownership"`:
"""
function create_bucket(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3("PUT", "/$(Bucket)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
function create_bucket(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT", "/$(Bucket)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    create_multipart_upload(bucket, key)
    create_multipart_upload(bucket, key, params::Dict{String,<:Any})

This action initiates a multipart upload and returns an upload ID. This upload ID is used
to associate all of the parts in the specific multipart upload. You specify this upload ID
in each of your subsequent upload part requests (see UploadPart). You also include this
upload ID in the final request to either complete or abort the multipart upload request.
For more information about multipart uploads, see Multipart Upload Overview. If you have
configured a lifecycle rule to abort incomplete multipart uploads, the upload must complete
within the number of days specified in the bucket lifecycle configuration. Otherwise, the
incomplete multipart upload becomes eligible for an abort action and Amazon S3 aborts the
multipart upload. For more information, see Aborting Incomplete Multipart Uploads Using a
Bucket Lifecycle Policy. For information about the permissions required to use the
multipart upload API, see Multipart Upload and Permissions. For request signing, multipart
upload is just a series of regular requests. You initiate a multipart upload, send one or
more requests to upload parts, and then complete the multipart upload process. You sign
each request individually. There is nothing special about signing multipart upload
requests. For more information about signing, see Authenticating Requests (Amazon Web
Services Signature Version 4).   After you initiate a multipart upload and upload one or
more parts, to stop being charged for storing the uploaded parts, you must either complete
or abort the multipart upload. Amazon S3 frees up the space used to store the parts and
stop charging you for storing them only after you either complete or abort a multipart
upload.   You can optionally request server-side encryption. For server-side encryption,
Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts it
when you access it. You can provide your own encryption key, or use Amazon Web Services KMS
keys or Amazon S3-managed encryption keys. If you choose to provide your own encryption
key, the request headers you provide in UploadPart and UploadPartCopy requests must match
the headers you used in the request to initiate the upload by using CreateMultipartUpload.
To perform a multipart upload with encryption using an Amazon Web Services KMS key, the
requester must have permission to the kms:Decrypt and kms:GenerateDataKey* actions on the
key. These permissions are required because Amazon S3 must decrypt and read data from the
encrypted file parts before it completes the multipart upload. For more information, see
Multipart upload API and permissions in the Amazon S3 User Guide. If your Identity and
Access Management (IAM) user or role is in the same Amazon Web Services account as the KMS
key, then you must have these permissions on the key policy. If your IAM user or role
belongs to a different account than the key, then you must have the permissions on both the
key policy and your IAM user or role.  For more information, see Protecting Data Using
Server-Side Encryption.  Access Permissions  When copying an object, you can optionally
specify the accounts or groups that should be granted specific permissions on the new
object. There are two ways to grant the permissions using the request headers:   Specify a
canned ACL with the x-amz-acl request header. For more information, see Canned ACL.
Specify access permissions explicitly with the x-amz-grant-read, x-amz-grant-read-acp,
x-amz-grant-write-acp, and x-amz-grant-full-control headers. These parameters map to the
set of permissions that Amazon S3 supports in an ACL. For more information, see Access
Control List (ACL) Overview.   You can use either a canned ACL or specify access
permissions explicitly. You cannot do both.  Server-Side- Encryption-Specific Request
Headers  You can optionally tell Amazon S3 to encrypt data at rest using server-side
encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts your
data as it writes it to disks in its data centers and decrypts it when you access it. The
option you use depends on whether you want to use Amazon Web Services managed encryption
keys or provide your own encryption key.    Use encryption keys managed by Amazon S3 or
customer managed key stored in Amazon Web Services Key Management Service (Amazon Web
Services KMS) – If you want Amazon Web Services to manage the keys used to encrypt data,
specify the following headers in the request.   x-amz-server-side-encryption
x-amz-server-side-encryption-aws-kms-key-id   x-amz-server-side-encryption-context    If
you specify x-amz-server-side-encryption:aws:kms, but don't provide
x-amz-server-side-encryption-aws-kms-key-id, Amazon S3 uses the Amazon Web Services managed
key in Amazon Web Services KMS to protect the data.   All GET and PUT requests for an
object protected by Amazon Web Services KMS fail if you don't make them with SSL or by
using SigV4.  For more information about server-side encryption with KMS key (SSE-KMS), see
Protecting Data Using Server-Side Encryption with KMS keys.   Use customer-provided
encryption keys – If you want to manage your own encryption keys, provide all the
following headers in the request.   x-amz-server-side-encryption-customer-algorithm
x-amz-server-side-encryption-customer-key   x-amz-server-side-encryption-customer-key-MD5
For more information about server-side encryption with KMS keys (SSE-KMS), see Protecting
Data Using Server-Side Encryption with KMS keys.    Access-Control-List (ACL)-Specific
Request Headers  You also can use the following access control–related headers with this
operation. By default, all objects are private. Only the owner has full access control.
When adding a new object, you can grant permissions to individual Amazon Web Services
accounts or to predefined groups defined by Amazon S3. These permissions are then added to
the access control list (ACL) on the object. For more information, see Using ACLs. With
this operation, you can grant access permissions using one of the following two methods:
Specify a canned ACL (x-amz-acl) — Amazon S3 supports a set of predefined ACLs, known as
canned ACLs. Each canned ACL has a predefined set of grantees and permissions. For more
information, see Canned ACL.   Specify access permissions explicitly — To explicitly
grant access permissions to specific Amazon Web Services accounts or groups, use the
following headers. Each header maps to specific permissions that Amazon S3 supports in an
ACL. For more information, see Access Control List (ACL) Overview. In the header, you
specify a list of grantees who get the specific permission. To grant permissions
explicitly, use:   x-amz-grant-read   x-amz-grant-write   x-amz-grant-read-acp
x-amz-grant-write-acp   x-amz-grant-full-control   You specify each grantee as a type=value
pair, where the type is one of the following:    id – if the value specified is the
canonical user ID of an Amazon Web Services account    uri – if you are granting
permissions to a predefined group    emailAddress – if the value specified is the email
address of an Amazon Web Services account  Using email addresses to specify a grantee is
only supported in the following Amazon Web Services Regions:    US East (N. Virginia)   US
West (N. California)    US West (Oregon)    Asia Pacific (Singapore)   Asia Pacific
(Sydney)   Asia Pacific (Tokyo)   Europe (Ireland)   South America (São Paulo)   For a
list of all the Amazon S3 supported Regions and endpoints, see Regions and Endpoints in the
Amazon Web Services General Reference.    For example, the following x-amz-grant-read
header grants the Amazon Web Services accounts identified by account IDs permissions to
read object data and its metadata:  x-amz-grant-read: id=\"11112222333\",
id=\"444455556666\"       The following operations are related to CreateMultipartUpload:
UploadPart     CompleteMultipartUpload     AbortMultipartUpload     ListParts
ListMultipartUploads

# Arguments
- `bucket`: The name of the bucket to which to initiate the upload When using this action
  with an access point, you must direct requests to the access point hostname. The access
  point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide. When using this action with Amazon S3 on Outposts, you
  must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the
  form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: Object key for which the multipart upload is to be initiated.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Cache-Control"`: Specifies caching behavior along the request/reply chain.
- `"Content-Disposition"`: Specifies presentational information for the object.
- `"Content-Encoding"`: Specifies what content encodings have been applied to the object
  and thus what decoding mechanisms must be applied to obtain the media-type referenced by
  the Content-Type header field.
- `"Content-Language"`: The language the content is in.
- `"Content-Type"`: A standard MIME type describing the format of the object data.
- `"Expires"`: The date and time at which the object is no longer cacheable.
- `"x-amz-acl"`: The canned ACL to apply to the object. This action is not supported by
  Amazon S3 on Outposts.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-grant-full-control"`: Gives the grantee READ, READ_ACP, and WRITE_ACP permissions
  on the object. This action is not supported by Amazon S3 on Outposts.
- `"x-amz-grant-read"`: Allows grantee to read the object data and its metadata. This
  action is not supported by Amazon S3 on Outposts.
- `"x-amz-grant-read-acp"`: Allows grantee to read the object ACL. This action is not
  supported by Amazon S3 on Outposts.
- `"x-amz-grant-write-acp"`: Allows grantee to write the ACL for the applicable object.
  This action is not supported by Amazon S3 on Outposts.
- `"x-amz-meta-"`: A map of metadata to store with the object in S3.
- `"x-amz-object-lock-legal-hold"`: Specifies whether you want to apply a Legal Hold to the
  uploaded object.
- `"x-amz-object-lock-mode"`: Specifies the Object Lock mode that you want to apply to the
  uploaded object.
- `"x-amz-object-lock-retain-until-date"`: Specifies the date and time when you want the
  Object Lock to expire.
- `"x-amz-request-payer"`:
- `"x-amz-server-side-encryption"`: The server-side encryption algorithm used when storing
  this object in Amazon S3 (for example, AES256, aws:kms).
- `"x-amz-server-side-encryption-aws-kms-key-id"`: Specifies the ID of the symmetric
  customer managed key to use for object encryption. All GET and PUT requests for an object
  protected by Amazon Web Services KMS will fail if not made via SSL or using SigV4. For
  information about configuring using any of the officially supported Amazon Web Services
  SDKs and Amazon Web Services CLI, see Specifying the Signature Version in Request
  Authentication in the Amazon S3 User Guide.
- `"x-amz-server-side-encryption-bucket-key-enabled"`: Specifies whether Amazon S3 should
  use an S3 Bucket Key for object encryption with server-side encryption using AWS KMS
  (SSE-KMS). Setting this header to true causes Amazon S3 to use an S3 Bucket Key for object
  encryption with SSE-KMS. Specifying this header with an object action doesn’t affect
  bucket-level settings for S3 Bucket Key.
- `"x-amz-server-side-encryption-context"`: Specifies the Amazon Web Services KMS
  Encryption Context to use for object encryption. The value of this header is a
  base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs.
- `"x-amz-server-side-encryption-customer-algorithm"`: Specifies the algorithm to use to
  when encrypting the object (for example, AES256).
- `"x-amz-server-side-encryption-customer-key"`: Specifies the customer-provided encryption
  key for Amazon S3 to use in encrypting data. This value is used to store the object and
  then it is discarded; Amazon S3 does not store the encryption key. The key must be
  appropriate for use with the algorithm specified in the
  x-amz-server-side-encryption-customer-algorithm header.
- `"x-amz-server-side-encryption-customer-key-MD5"`: Specifies the 128-bit MD5 digest of
  the encryption key according to RFC 1321. Amazon S3 uses this header for a message
  integrity check to ensure that the encryption key was transmitted without error.
- `"x-amz-storage-class"`: By default, Amazon S3 uses the STANDARD Storage Class to store
  newly created objects. The STANDARD storage class provides high durability and high
  availability. Depending on performance needs, you can specify a different Storage Class.
  Amazon S3 on Outposts only uses the OUTPOSTS Storage Class. For more information, see
  Storage Classes in the Amazon S3 User Guide.
- `"x-amz-tagging"`: The tag-set for the object. The tag-set must be encoded as URL Query
  parameters.
- `"x-amz-website-redirect-location"`: If the bucket is configured as a website, redirects
  requests for this object to another object in the same bucket or to an external URL. Amazon
  S3 stores the value of this header in the object metadata.
"""
function create_multipart_upload(
    Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "POST",
        "/$(Bucket)/$(Key)?uploads";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_multipart_upload(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "POST",
        "/$(Bucket)/$(Key)?uploads",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket(bucket)
    delete_bucket(bucket, params::Dict{String,<:Any})

Deletes the S3 bucket. All objects (including all object versions and delete markers) in
the bucket must be deleted before the bucket itself can be deleted.  Related Resources
CreateBucket     DeleteObject

# Arguments
- `bucket`: Specifies the bucket being deleted.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_bucket(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "DELETE", "/$(Bucket)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function delete_bucket(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_analytics_configuration(bucket, id)
    delete_bucket_analytics_configuration(bucket, id, params::Dict{String,<:Any})

Deletes an analytics configuration for the bucket (specified by the analytics configuration
ID). To use this operation, you must have permissions to perform the
s3:PutAnalyticsConfiguration action. The bucket owner has this permission by default. The
bucket owner can grant this permission to others. For more information about permissions,
see Permissions Related to Bucket Subresource Operations and Managing Access Permissions to
Your Amazon S3 Resources. For information about the Amazon S3 analytics feature, see Amazon
S3 Analytics – Storage Class Analysis.  The following operations are related to
DeleteBucketAnalyticsConfiguration:    GetBucketAnalyticsConfiguration
ListBucketAnalyticsConfigurations     PutBucketAnalyticsConfiguration

# Arguments
- `bucket`: The name of the bucket from which an analytics configuration is deleted.
- `id`: The ID that identifies the analytics configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_bucket_analytics_configuration(
    Bucket, id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?analytics",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_analytics_configuration(
    Bucket,
    id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "DELETE",
        "/$(Bucket)?analytics",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_cors(bucket)
    delete_bucket_cors(bucket, params::Dict{String,<:Any})

Deletes the cors configuration information set for the bucket. To use this operation, you
must have permission to perform the s3:PutBucketCORS action. The bucket owner has this
permission by default and can grant this permission to others.  For information about cors,
see Enabling Cross-Origin Resource Sharing in the Amazon S3 User Guide.  Related Resources:
    PutBucketCors     RESTOPTIONSobject

# Arguments
- `bucket`: Specifies the bucket whose cors configuration is being deleted.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_bucket_cors(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "DELETE", "/$(Bucket)?cors"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function delete_bucket_cors(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?cors",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_encryption(bucket)
    delete_bucket_encryption(bucket, params::Dict{String,<:Any})

This implementation of the DELETE action removes default encryption from the bucket. For
information about the Amazon S3 default encryption feature, see Amazon S3 Default Bucket
Encryption in the Amazon S3 User Guide. To use this operation, you must have permissions to
perform the s3:PutEncryptionConfiguration action. The bucket owner has this permission by
default. The bucket owner can grant this permission to others. For more information about
permissions, see Permissions Related to Bucket Subresource Operations and Managing Access
Permissions to your Amazon S3 Resources in the Amazon S3 User Guide.  Related Resources
PutBucketEncryption     GetBucketEncryption

# Arguments
- `bucket`: The name of the bucket containing the server-side encryption configuration to
  delete.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_bucket_encryption(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "DELETE",
        "/$(Bucket)?encryption";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_encryption(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?encryption",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_intelligent_tiering_configuration(bucket, id)
    delete_bucket_intelligent_tiering_configuration(bucket, id, params::Dict{String,<:Any})

Deletes the S3 Intelligent-Tiering configuration from the specified bucket. The S3
Intelligent-Tiering storage class is designed to optimize storage costs by automatically
moving data to the most cost-effective storage access tier, without performance impact or
operational overhead. S3 Intelligent-Tiering delivers automatic cost savings in three low
latency and high throughput access tiers. To get the lowest storage cost on data that can
be accessed in minutes to hours, you can choose to activate additional archiving
capabilities. The S3 Intelligent-Tiering storage class is the ideal storage class for data
with unknown, changing, or unpredictable access patterns, independent of object size or
retention period. If the size of an object is less than 128 KB, it is not monitored and not
eligible for auto-tiering. Smaller objects can be stored, but they are always charged at
the Frequent Access tier rates in the S3 Intelligent-Tiering storage class. For more
information, see Storage class for automatically optimizing frequently and infrequently
accessed objects. Operations related to DeleteBucketIntelligentTieringConfiguration
include:     GetBucketIntelligentTieringConfiguration
PutBucketIntelligentTieringConfiguration     ListBucketIntelligentTieringConfigurations

# Arguments
- `bucket`: The name of the Amazon S3 bucket whose configuration you want to modify or
  retrieve.
- `id`: The ID used to identify the S3 Intelligent-Tiering configuration.

"""
function delete_bucket_intelligent_tiering_configuration(
    Bucket, id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?intelligent-tiering",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_intelligent_tiering_configuration(
    Bucket,
    id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "DELETE",
        "/$(Bucket)?intelligent-tiering",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_inventory_configuration(bucket, id)
    delete_bucket_inventory_configuration(bucket, id, params::Dict{String,<:Any})

Deletes an inventory configuration (identified by the inventory ID) from the bucket. To use
this operation, you must have permissions to perform the s3:PutInventoryConfiguration
action. The bucket owner has this permission by default. The bucket owner can grant this
permission to others. For more information about permissions, see Permissions Related to
Bucket Subresource Operations and Managing Access Permissions to Your Amazon S3 Resources.
For information about the Amazon S3 inventory feature, see Amazon S3 Inventory. Operations
related to DeleteBucketInventoryConfiguration include:     GetBucketInventoryConfiguration
   PutBucketInventoryConfiguration     ListBucketInventoryConfigurations

# Arguments
- `bucket`: The name of the bucket containing the inventory configuration to delete.
- `id`: The ID used to identify the inventory configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_bucket_inventory_configuration(
    Bucket, id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?inventory",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_inventory_configuration(
    Bucket,
    id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "DELETE",
        "/$(Bucket)?inventory",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_lifecycle(bucket)
    delete_bucket_lifecycle(bucket, params::Dict{String,<:Any})

Deletes the lifecycle configuration from the specified bucket. Amazon S3 removes all the
lifecycle configuration rules in the lifecycle subresource associated with the bucket. Your
objects never expire, and Amazon S3 no longer automatically deletes any objects on the
basis of rules contained in the deleted lifecycle configuration. To use this operation, you
must have permission to perform the s3:PutLifecycleConfiguration action. By default, the
bucket owner has this permission and the bucket owner can grant this permission to others.
There is usually some time lag before lifecycle configuration deletion is fully propagated
to all the Amazon S3 systems. For more information about the object expiration, see
Elements to Describe Lifecycle Actions. Related actions include:
PutBucketLifecycleConfiguration     GetBucketLifecycleConfiguration

# Arguments
- `bucket`: The bucket name of the lifecycle to delete.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_bucket_lifecycle(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "DELETE",
        "/$(Bucket)?lifecycle";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_lifecycle(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?lifecycle",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_metrics_configuration(bucket, id)
    delete_bucket_metrics_configuration(bucket, id, params::Dict{String,<:Any})

Deletes a metrics configuration for the Amazon CloudWatch request metrics (specified by the
metrics configuration ID) from the bucket. Note that this doesn't include the daily storage
metrics.  To use this operation, you must have permissions to perform the
s3:PutMetricsConfiguration action. The bucket owner has this permission by default. The
bucket owner can grant this permission to others. For more information about permissions,
see Permissions Related to Bucket Subresource Operations and Managing Access Permissions to
Your Amazon S3 Resources. For information about CloudWatch request metrics for Amazon S3,
see Monitoring Metrics with Amazon CloudWatch.  The following operations are related to
DeleteBucketMetricsConfiguration:    GetBucketMetricsConfiguration
PutBucketMetricsConfiguration     ListBucketMetricsConfigurations     Monitoring Metrics
with Amazon CloudWatch

# Arguments
- `bucket`: The name of the bucket containing the metrics configuration to delete.
- `id`: The ID used to identify the metrics configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_bucket_metrics_configuration(
    Bucket, id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?metrics",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_metrics_configuration(
    Bucket,
    id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "DELETE",
        "/$(Bucket)?metrics",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_ownership_controls(bucket)
    delete_bucket_ownership_controls(bucket, params::Dict{String,<:Any})

Removes OwnershipControls for an Amazon S3 bucket. To use this operation, you must have the
s3:PutBucketOwnershipControls permission. For more information about Amazon S3 permissions,
see Specifying Permissions in a Policy. For information about Amazon S3 Object Ownership,
see Using Object Ownership.  The following operations are related to
DeleteBucketOwnershipControls:    GetBucketOwnershipControls     PutBucketOwnershipControls


# Arguments
- `bucket`: The Amazon S3 bucket whose OwnershipControls you want to delete.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_bucket_ownership_controls(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?ownershipControls";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_ownership_controls(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?ownershipControls",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_policy(bucket)
    delete_bucket_policy(bucket, params::Dict{String,<:Any})

This implementation of the DELETE action uses the policy subresource to delete the policy
of a specified bucket. If you are using an identity other than the root user of the Amazon
Web Services account that owns the bucket, the calling identity must have the
DeleteBucketPolicy permissions on the specified bucket and belong to the bucket owner's
account to use this operation.  If you don't have DeleteBucketPolicy permissions, Amazon S3
returns a 403 Access Denied error. If you have the correct permissions, but you're not
using an identity that belongs to the bucket owner's account, Amazon S3 returns a 405
Method Not Allowed error.   As a security precaution, the root user of the Amazon Web
Services account that owns a bucket can always use this operation, even if the policy
explicitly denies the root user the ability to perform this action.  For more information
about bucket policies, see Using Bucket Policies and UserPolicies.  The following
operations are related to DeleteBucketPolicy     CreateBucket     DeleteObject

# Arguments
- `bucket`: The bucket name.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_bucket_policy(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "DELETE",
        "/$(Bucket)?policy";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_policy(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?policy",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_replication(bucket)
    delete_bucket_replication(bucket, params::Dict{String,<:Any})

 Deletes the replication configuration from the bucket. To use this operation, you must
have permissions to perform the s3:PutReplicationConfiguration action. The bucket owner has
these permissions by default and can grant it to others. For more information about
permissions, see Permissions Related to Bucket Subresource Operations and Managing Access
Permissions to Your Amazon S3 Resources.   It can take a while for the deletion of a
replication configuration to fully propagate.   For information about replication
configuration, see Replication in the Amazon S3 User Guide. The following operations are
related to DeleteBucketReplication:    PutBucketReplication     GetBucketReplication

# Arguments
- `bucket`:  The bucket name.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_bucket_replication(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?replication";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_replication(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?replication",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_tagging(bucket)
    delete_bucket_tagging(bucket, params::Dict{String,<:Any})

Deletes the tags from the bucket. To use this operation, you must have permission to
perform the s3:PutBucketTagging action. By default, the bucket owner has this permission
and can grant this permission to others.  The following operations are related to
DeleteBucketTagging:    GetBucketTagging     PutBucketTagging

# Arguments
- `bucket`: The bucket that has the tag set to be removed.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_bucket_tagging(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "DELETE",
        "/$(Bucket)?tagging";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_tagging(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?tagging",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_website(bucket)
    delete_bucket_website(bucket, params::Dict{String,<:Any})

This action removes the website configuration for a bucket. Amazon S3 returns a 200 OK
response upon successfully deleting a website configuration on the specified bucket. You
will get a 200 OK response if the website configuration you are trying to delete does not
exist on the bucket. Amazon S3 returns a 404 response if the bucket specified in the
request does not exist. This DELETE action requires the S3:DeleteBucketWebsite permission.
By default, only the bucket owner can delete the website configuration attached to a
bucket. However, bucket owners can grant other users permission to delete the website
configuration by writing a bucket policy granting them the S3:DeleteBucketWebsite
permission.  For more information about hosting websites, see Hosting Websites on Amazon
S3.  The following operations are related to DeleteBucketWebsite:    GetBucketWebsite
PutBucketWebsite

# Arguments
- `bucket`: The bucket name for which you want to remove the website configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_bucket_website(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "DELETE",
        "/$(Bucket)?website";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_website(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?website",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_object(bucket, key)
    delete_object(bucket, key, params::Dict{String,<:Any})

Removes the null version (if there is one) of an object and inserts a delete marker, which
becomes the latest version of the object. If there isn't a null version, Amazon S3 does not
remove any objects but will still respond that the command was successful. To remove a
specific version, you must be the bucket owner and you must use the version Id subresource.
Using this subresource permanently deletes the version. If the object deleted is a delete
marker, Amazon S3 sets the response header, x-amz-delete-marker, to true.  If the object
you want to delete is in a bucket where the bucket versioning configuration is MFA Delete
enabled, you must include the x-amz-mfa request header in the DELETE versionId request.
Requests that include x-amz-mfa must use HTTPS.   For more information about MFA Delete,
see Using MFA Delete. To see sample requests that use versioning, see Sample Request.  You
can delete objects by explicitly calling DELETE Object or configure its lifecycle
(PutBucketLifecycle) to enable Amazon S3 to remove them for you. If you want to block users
or accounts from removing or deleting objects from your bucket, you must deny them the
s3:DeleteObject, s3:DeleteObjectVersion, and s3:PutLifeCycleConfiguration actions.  The
following action is related to DeleteObject:    PutObject

# Arguments
- `bucket`: The bucket name of the bucket containing the object.  When using this action
  with an access point, you must direct requests to the access point hostname. The access
  point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide. When using this action with Amazon S3 on Outposts, you
  must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the
  form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: Key name of the object to delete.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"versionId"`: VersionId used to reference a specific version of the object.
- `"x-amz-bypass-governance-retention"`: Indicates whether S3 Object Lock should bypass
  Governance-mode restrictions to process this operation. To use this header, you must have
  the s3:PutBucketPublicAccessBlock permission.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-mfa"`: The concatenation of the authentication device's serial number, a space,
  and the value that is displayed on your authentication device. Required to permanently
  delete a versioned object if versioning is configured with MFA delete enabled.
- `"x-amz-request-payer"`:
"""
function delete_object(Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "DELETE",
        "/$(Bucket)/$(Key)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_object(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "DELETE",
        "/$(Bucket)/$(Key)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_object_tagging(bucket, key)
    delete_object_tagging(bucket, key, params::Dict{String,<:Any})

Removes the entire tag set from the specified object. For more information about managing
object tags, see  Object Tagging. To use this operation, you must have permission to
perform the s3:DeleteObjectTagging action. To delete tags of a specific object version, add
the versionId query parameter in the request. You will need permission for the
s3:DeleteObjectVersionTagging action. The following operations are related to
DeleteBucketMetricsConfiguration:    PutObjectTagging     GetObjectTagging

# Arguments
- `bucket`: The bucket name containing the objects from which to remove the tags.  When
  using this action with an access point, you must direct requests to the access point
  hostname. The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide. When using this action with Amazon S3 on Outposts, you
  must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the
  form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: The key that identifies the object in the bucket from which to remove all tags.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"versionId"`: The versionId of the object that the tag-set will be removed from.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_object_tagging(
    Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)/$(Key)?tagging";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_object_tagging(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "DELETE",
        "/$(Bucket)/$(Key)?tagging",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_objects(bucket, delete)
    delete_objects(bucket, delete, params::Dict{String,<:Any})

This action enables you to delete multiple objects from a bucket using a single HTTP
request. If you know the object keys that you want to delete, then this action provides a
suitable alternative to sending individual delete requests, reducing per-request overhead.
The request contains a list of up to 1000 keys that you want to delete. In the XML, you
provide the object key names, and optionally, version IDs if you want to delete a specific
version of the object from a versioning-enabled bucket. For each key, Amazon S3 performs a
delete action and returns the result of that delete, success, or failure, in the response.
Note that if the object specified in the request is not found, Amazon S3 returns the result
as deleted.  The action supports two modes for the response: verbose and quiet. By default,
the action uses verbose mode in which the response includes the result of deletion of each
key in your request. In quiet mode the response includes only keys where the delete action
encountered an error. For a successful deletion, the action does not return any information
about the delete in the response body. When performing this action on an MFA Delete enabled
bucket, that attempts to delete any versioned objects, you must include an MFA token. If
you do not provide one, the entire request will fail, even if there are non-versioned
objects you are trying to delete. If you provide an invalid token, whether there are
versioned keys in the request or not, the entire Multi-Object Delete request will fail. For
information about MFA Delete, see  MFA Delete. Finally, the Content-MD5 header is required
for all Multi-Object Delete requests. Amazon S3 uses the header value to ensure that your
request body has not been altered in transit. The following operations are related to
DeleteObjects:    CreateMultipartUpload     UploadPart     CompleteMultipartUpload
ListParts     AbortMultipartUpload

# Arguments
- `bucket`: The bucket name containing the objects to delete.  When using this action with
  an access point, you must direct requests to the access point hostname. The access point
  hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When
  using this action with an access point through the Amazon Web Services SDKs, you provide
  the access point ARN in place of the bucket name. For more information about access point
  ARNs, see Using access points in the Amazon S3 User Guide. When using this action with
  Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on
  Outposts hostname takes the form
  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `delete`: Container for the request.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-bypass-governance-retention"`: Specifies whether you want to delete this object
  even if it has a Governance-type Object Lock in place. To use this header, you must have
  the s3:PutBucketPublicAccessBlock permission.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-mfa"`: The concatenation of the authentication device's serial number, a space,
  and the value that is displayed on your authentication device. Required to permanently
  delete a versioned object if versioning is configured with MFA delete enabled.
- `"x-amz-request-payer"`:
"""
function delete_objects(Bucket, Delete; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "POST",
        "/$(Bucket)?delete",
        Dict{String,Any}("Delete" => Delete);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_objects(
    Bucket,
    Delete,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "POST",
        "/$(Bucket)?delete",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Delete" => Delete), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_public_access_block(bucket)
    delete_public_access_block(bucket, params::Dict{String,<:Any})

Removes the PublicAccessBlock configuration for an Amazon S3 bucket. To use this operation,
you must have the s3:PutBucketPublicAccessBlock permission. For more information about
permissions, see Permissions Related to Bucket Subresource Operations and Managing Access
Permissions to Your Amazon S3 Resources. The following operations are related to
DeletePublicAccessBlock:    Using Amazon S3 Block Public Access     GetPublicAccessBlock
 PutPublicAccessBlock     GetBucketPolicyStatus

# Arguments
- `bucket`: The Amazon S3 bucket whose PublicAccessBlock configuration you want to delete.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function delete_public_access_block(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?publicAccessBlock";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_public_access_block(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "DELETE",
        "/$(Bucket)?publicAccessBlock",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_accelerate_configuration(bucket)
    get_bucket_accelerate_configuration(bucket, params::Dict{String,<:Any})

This implementation of the GET action uses the accelerate subresource to return the
Transfer Acceleration state of a bucket, which is either Enabled or Suspended. Amazon S3
Transfer Acceleration is a bucket-level feature that enables you to perform faster data
transfers to and from Amazon S3. To use this operation, you must have permission to perform
the s3:GetAccelerateConfiguration action. The bucket owner has this permission by default.
The bucket owner can grant this permission to others. For more information about
permissions, see Permissions Related to Bucket Subresource Operations and Managing Access
Permissions to your Amazon S3 Resources in the Amazon S3 User Guide. You set the Transfer
Acceleration state of an existing bucket to Enabled or Suspended by using the
PutBucketAccelerateConfiguration operation.  A GET accelerate request does not return a
state value for a bucket that has no transfer acceleration state. A bucket has no Transfer
Acceleration state if a state has never been set on the bucket.  For more information about
transfer acceleration, see Transfer Acceleration in the Amazon S3 User Guide.  Related
Resources     PutBucketAccelerateConfiguration

# Arguments
- `bucket`: The name of the bucket for which the accelerate configuration is retrieved.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_accelerate_configuration(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?accelerate";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_accelerate_configuration(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?accelerate",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_acl(bucket)
    get_bucket_acl(bucket, params::Dict{String,<:Any})

This implementation of the GET action uses the acl subresource to return the access control
list (ACL) of a bucket. To use GET to return the ACL of the bucket, you must have READ_ACP
access to the bucket. If READ_ACP permission is granted to the anonymous user, you can
return the ACL of the bucket without using an authorization header.  If your bucket uses
the bucket owner enforced setting for S3 Object Ownership, requests to read ACLs are still
supported and return the bucket-owner-full-control ACL with the owner being the account
that created the bucket. For more information, see  Controlling object ownership and
disabling ACLs in the Amazon S3 User Guide.   Related Resources     ListObjects

# Arguments
- `bucket`: Specifies the S3 bucket whose ACL is being requested.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_acl(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET", "/$(Bucket)?acl"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_bucket_acl(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?acl",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_analytics_configuration(bucket, id)
    get_bucket_analytics_configuration(bucket, id, params::Dict{String,<:Any})

This implementation of the GET action returns an analytics configuration (identified by the
analytics configuration ID) from the bucket. To use this operation, you must have
permissions to perform the s3:GetAnalyticsConfiguration action. The bucket owner has this
permission by default. The bucket owner can grant this permission to others. For more
information about permissions, see  Permissions Related to Bucket Subresource Operations
and Managing Access Permissions to Your Amazon S3 Resources in the Amazon S3 User Guide.
For information about Amazon S3 analytics feature, see Amazon S3 Analytics – Storage
Class Analysis in the Amazon S3 User Guide.  Related Resources
DeleteBucketAnalyticsConfiguration     ListBucketAnalyticsConfigurations
PutBucketAnalyticsConfiguration

# Arguments
- `bucket`: The name of the bucket from which an analytics configuration is retrieved.
- `id`: The ID that identifies the analytics configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_analytics_configuration(
    Bucket, id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?analytics",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_analytics_configuration(
    Bucket,
    id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "GET",
        "/$(Bucket)?analytics",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_cors(bucket)
    get_bucket_cors(bucket, params::Dict{String,<:Any})

Returns the cors configuration information set for the bucket.  To use this operation, you
must have permission to perform the s3:GetBucketCORS action. By default, the bucket owner
has this permission and can grant it to others.  For more information about cors, see
Enabling Cross-Origin Resource Sharing. The following operations are related to
GetBucketCors:    PutBucketCors     DeleteBucketCors

# Arguments
- `bucket`: The bucket name for which to get the cors configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_cors(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET", "/$(Bucket)?cors"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_bucket_cors(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?cors",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_encryption(bucket)
    get_bucket_encryption(bucket, params::Dict{String,<:Any})

Returns the default encryption configuration for an Amazon S3 bucket. If the bucket does
not have a default encryption configuration, GetBucketEncryption returns
ServerSideEncryptionConfigurationNotFoundError.  For information about the Amazon S3
default encryption feature, see Amazon S3 Default Bucket Encryption.  To use this
operation, you must have permission to perform the s3:GetEncryptionConfiguration action.
The bucket owner has this permission by default. The bucket owner can grant this permission
to others. For more information about permissions, see Permissions Related to Bucket
Subresource Operations and Managing Access Permissions to Your Amazon S3 Resources. The
following operations are related to GetBucketEncryption:    PutBucketEncryption
DeleteBucketEncryption

# Arguments
- `bucket`: The name of the bucket from which the server-side encryption configuration is
  retrieved.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_encryption(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET",
        "/$(Bucket)?encryption";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_encryption(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?encryption",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_intelligent_tiering_configuration(bucket, id)
    get_bucket_intelligent_tiering_configuration(bucket, id, params::Dict{String,<:Any})

Gets the S3 Intelligent-Tiering configuration from the specified bucket. The S3
Intelligent-Tiering storage class is designed to optimize storage costs by automatically
moving data to the most cost-effective storage access tier, without performance impact or
operational overhead. S3 Intelligent-Tiering delivers automatic cost savings in three low
latency and high throughput access tiers. To get the lowest storage cost on data that can
be accessed in minutes to hours, you can choose to activate additional archiving
capabilities. The S3 Intelligent-Tiering storage class is the ideal storage class for data
with unknown, changing, or unpredictable access patterns, independent of object size or
retention period. If the size of an object is less than 128 KB, it is not monitored and not
eligible for auto-tiering. Smaller objects can be stored, but they are always charged at
the Frequent Access tier rates in the S3 Intelligent-Tiering storage class. For more
information, see Storage class for automatically optimizing frequently and infrequently
accessed objects. Operations related to GetBucketIntelligentTieringConfiguration include:
  DeleteBucketIntelligentTieringConfiguration     PutBucketIntelligentTieringConfiguration
   ListBucketIntelligentTieringConfigurations

# Arguments
- `bucket`: The name of the Amazon S3 bucket whose configuration you want to modify or
  retrieve.
- `id`: The ID used to identify the S3 Intelligent-Tiering configuration.

"""
function get_bucket_intelligent_tiering_configuration(
    Bucket, id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?intelligent-tiering",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_intelligent_tiering_configuration(
    Bucket,
    id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "GET",
        "/$(Bucket)?intelligent-tiering",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_inventory_configuration(bucket, id)
    get_bucket_inventory_configuration(bucket, id, params::Dict{String,<:Any})

Returns an inventory configuration (identified by the inventory configuration ID) from the
bucket. To use this operation, you must have permissions to perform the
s3:GetInventoryConfiguration action. The bucket owner has this permission by default and
can grant this permission to others. For more information about permissions, see
Permissions Related to Bucket Subresource Operations and Managing Access Permissions to
Your Amazon S3 Resources. For information about the Amazon S3 inventory feature, see Amazon
S3 Inventory. The following operations are related to GetBucketInventoryConfiguration:
DeleteBucketInventoryConfiguration     ListBucketInventoryConfigurations
PutBucketInventoryConfiguration

# Arguments
- `bucket`: The name of the bucket containing the inventory configuration to retrieve.
- `id`: The ID used to identify the inventory configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_inventory_configuration(
    Bucket, id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?inventory",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_inventory_configuration(
    Bucket,
    id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "GET",
        "/$(Bucket)?inventory",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_lifecycle(bucket)
    get_bucket_lifecycle(bucket, params::Dict{String,<:Any})

 For an updated version of this API, see GetBucketLifecycleConfiguration. If you configured
a bucket lifecycle using the filter element, you should see the updated version of this
topic. This topic is provided for backward compatibility.  Returns the lifecycle
configuration information set on the bucket. For information about lifecycle configuration,
see Object Lifecycle Management.  To use this operation, you must have permission to
perform the s3:GetLifecycleConfiguration action. The bucket owner has this permission by
default. The bucket owner can grant this permission to others. For more information about
permissions, see Permissions Related to Bucket Subresource Operations and Managing Access
Permissions to Your Amazon S3 Resources.  GetBucketLifecycle has the following special
error:   Error code: NoSuchLifecycleConfiguration    Description: The lifecycle
configuration does not exist.   HTTP Status Code: 404 Not Found   SOAP Fault Code Prefix:
Client     The following operations are related to GetBucketLifecycle:
GetBucketLifecycleConfiguration     PutBucketLifecycle     DeleteBucketLifecycle

# Arguments
- `bucket`: The name of the bucket for which to get the lifecycle information.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_lifecycle(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET",
        "/$(Bucket)?lifecycle";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_lifecycle(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?lifecycle",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_lifecycle_configuration(bucket)
    get_bucket_lifecycle_configuration(bucket, params::Dict{String,<:Any})

 Bucket lifecycle configuration now supports specifying a lifecycle rule using an object
key name prefix, one or more object tags, or a combination of both. Accordingly, this
section describes the latest API. The response describes the new filter element that you
can use to specify a filter to select a subset of objects to which the rule applies. If you
are using a previous version of the lifecycle configuration, it still works. For the
earlier action, see GetBucketLifecycle.  Returns the lifecycle configuration information
set on the bucket. For information about lifecycle configuration, see Object Lifecycle
Management. To use this operation, you must have permission to perform the
s3:GetLifecycleConfiguration action. The bucket owner has this permission, by default. The
bucket owner can grant this permission to others. For more information about permissions,
see Permissions Related to Bucket Subresource Operations and Managing Access Permissions to
Your Amazon S3 Resources.  GetBucketLifecycleConfiguration has the following special error:
  Error code: NoSuchLifecycleConfiguration    Description: The lifecycle configuration does
not exist.   HTTP Status Code: 404 Not Found   SOAP Fault Code Prefix: Client     The
following operations are related to GetBucketLifecycleConfiguration:    GetBucketLifecycle
   PutBucketLifecycle     DeleteBucketLifecycle

# Arguments
- `bucket`: The name of the bucket for which to get the lifecycle information.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_lifecycle_configuration(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?lifecycle";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_lifecycle_configuration(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?lifecycle",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_location(bucket)
    get_bucket_location(bucket, params::Dict{String,<:Any})

Returns the Region the bucket resides in. You set the bucket's Region using the
LocationConstraint request parameter in a CreateBucket request. For more information, see
CreateBucket. To use this implementation of the operation, you must be the bucket owner. To
use this API against an access point, provide the alias of the access point in place of the
bucket name. The following operations are related to GetBucketLocation:    GetObject
CreateBucket

# Arguments
- `bucket`: The name of the bucket for which to get the location.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_location(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET", "/$(Bucket)?location"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_bucket_location(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?location",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_logging(bucket)
    get_bucket_logging(bucket, params::Dict{String,<:Any})

Returns the logging status of a bucket and the permissions users have to view and modify
that status. To use GET, you must be the bucket owner. The following operations are related
to GetBucketLogging:    CreateBucket     PutBucketLogging

# Arguments
- `bucket`: The bucket name for which to get the logging information.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_logging(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET", "/$(Bucket)?logging"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_bucket_logging(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?logging",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_metrics_configuration(bucket, id)
    get_bucket_metrics_configuration(bucket, id, params::Dict{String,<:Any})

Gets a metrics configuration (specified by the metrics configuration ID) from the bucket.
Note that this doesn't include the daily storage metrics.  To use this operation, you must
have permissions to perform the s3:GetMetricsConfiguration action. The bucket owner has
this permission by default. The bucket owner can grant this permission to others. For more
information about permissions, see Permissions Related to Bucket Subresource Operations and
Managing Access Permissions to Your Amazon S3 Resources.  For information about CloudWatch
request metrics for Amazon S3, see Monitoring Metrics with Amazon CloudWatch. The following
operations are related to GetBucketMetricsConfiguration:    PutBucketMetricsConfiguration
  DeleteBucketMetricsConfiguration     ListBucketMetricsConfigurations     Monitoring
Metrics with Amazon CloudWatch

# Arguments
- `bucket`: The name of the bucket containing the metrics configuration to retrieve.
- `id`: The ID used to identify the metrics configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_metrics_configuration(
    Bucket, id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?metrics",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_metrics_configuration(
    Bucket,
    id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "GET",
        "/$(Bucket)?metrics",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_notification(bucket)
    get_bucket_notification(bucket, params::Dict{String,<:Any})

 No longer used, see GetBucketNotificationConfiguration.

# Arguments
- `bucket`: The name of the bucket for which to get the notification configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_notification(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET",
        "/$(Bucket)?notification";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_notification(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?notification",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_notification_configuration(bucket)
    get_bucket_notification_configuration(bucket, params::Dict{String,<:Any})

Returns the notification configuration of a bucket. If notifications are not enabled on the
bucket, the action returns an empty NotificationConfiguration element. By default, you must
be the bucket owner to read the notification configuration of a bucket. However, the bucket
owner can use a bucket policy to grant permission to other users to read this configuration
with the s3:GetBucketNotification permission. For more information about setting and
reading the notification configuration on a bucket, see Setting Up Notification of Bucket
Events. For more information about bucket policies, see Using Bucket Policies. The
following action is related to GetBucketNotification:    PutBucketNotification

# Arguments
- `bucket`: The name of the bucket for which to get the notification configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_notification_configuration(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?notification";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_notification_configuration(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?notification",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_ownership_controls(bucket)
    get_bucket_ownership_controls(bucket, params::Dict{String,<:Any})

Retrieves OwnershipControls for an Amazon S3 bucket. To use this operation, you must have
the s3:GetBucketOwnershipControls permission. For more information about Amazon S3
permissions, see Specifying permissions in a policy.  For information about Amazon S3
Object Ownership, see Using Object Ownership.  The following operations are related to
GetBucketOwnershipControls:    PutBucketOwnershipControls     DeleteBucketOwnershipControls


# Arguments
- `bucket`: The name of the Amazon S3 bucket whose OwnershipControls you want to retrieve.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_ownership_controls(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?ownershipControls";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_ownership_controls(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?ownershipControls",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_policy(bucket)
    get_bucket_policy(bucket, params::Dict{String,<:Any})

Returns the policy of a specified bucket. If you are using an identity other than the root
user of the Amazon Web Services account that owns the bucket, the calling identity must
have the GetBucketPolicy permissions on the specified bucket and belong to the bucket
owner's account in order to use this operation. If you don't have GetBucketPolicy
permissions, Amazon S3 returns a 403 Access Denied error. If you have the correct
permissions, but you're not using an identity that belongs to the bucket owner's account,
Amazon S3 returns a 405 Method Not Allowed error.  As a security precaution, the root user
of the Amazon Web Services account that owns a bucket can always use this operation, even
if the policy explicitly denies the root user the ability to perform this action.  For more
information about bucket policies, see Using Bucket Policies and User Policies. The
following action is related to GetBucketPolicy:    GetObject

# Arguments
- `bucket`: The bucket name for which to get the bucket policy.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_policy(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET", "/$(Bucket)?policy"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_bucket_policy(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?policy",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_policy_status(bucket)
    get_bucket_policy_status(bucket, params::Dict{String,<:Any})

Retrieves the policy status for an Amazon S3 bucket, indicating whether the bucket is
public. In order to use this operation, you must have the s3:GetBucketPolicyStatus
permission. For more information about Amazon S3 permissions, see Specifying Permissions in
a Policy.  For more information about when Amazon S3 considers a bucket public, see The
Meaning of \"Public\".  The following operations are related to GetBucketPolicyStatus:
Using Amazon S3 Block Public Access     GetPublicAccessBlock     PutPublicAccessBlock
DeletePublicAccessBlock

# Arguments
- `bucket`: The name of the Amazon S3 bucket whose policy status you want to retrieve.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_policy_status(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET",
        "/$(Bucket)?policyStatus";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_policy_status(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?policyStatus",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_replication(bucket)
    get_bucket_replication(bucket, params::Dict{String,<:Any})

Returns the replication configuration of a bucket.   It can take a while to propagate the
put or delete a replication configuration to all Amazon S3 systems. Therefore, a get
request soon after put or delete can return a wrong result.    For information about
replication configuration, see Replication in the Amazon S3 User Guide. This action
requires permissions for the s3:GetReplicationConfiguration action. For more information
about permissions, see Using Bucket Policies and User Policies. If you include the Filter
element in a replication configuration, you must also include the DeleteMarkerReplication
and Priority elements. The response also returns those elements. For information about
GetBucketReplication errors, see List of replication-related error codes  The following
operations are related to GetBucketReplication:    PutBucketReplication
DeleteBucketReplication

# Arguments
- `bucket`: The bucket name for which to get the replication information.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_replication(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET",
        "/$(Bucket)?replication";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_replication(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?replication",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_request_payment(bucket)
    get_bucket_request_payment(bucket, params::Dict{String,<:Any})

Returns the request payment configuration of a bucket. To use this version of the
operation, you must be the bucket owner. For more information, see Requester Pays Buckets.
The following operations are related to GetBucketRequestPayment:    ListObjects

# Arguments
- `bucket`: The name of the bucket for which to get the payment request configuration

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_request_payment(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?requestPayment";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_request_payment(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?requestPayment",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_tagging(bucket)
    get_bucket_tagging(bucket, params::Dict{String,<:Any})

Returns the tag set associated with the bucket. To use this operation, you must have
permission to perform the s3:GetBucketTagging action. By default, the bucket owner has this
permission and can grant this permission to others.  GetBucketTagging has the following
special error:   Error code: NoSuchTagSetError    Description: There is no tag set
associated with the bucket.     The following operations are related to GetBucketTagging:
 PutBucketTagging     DeleteBucketTagging

# Arguments
- `bucket`: The name of the bucket for which to get the tagging information.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_tagging(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET", "/$(Bucket)?tagging"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_bucket_tagging(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?tagging",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_versioning(bucket)
    get_bucket_versioning(bucket, params::Dict{String,<:Any})

Returns the versioning state of a bucket. To retrieve the versioning state of a bucket, you
must be the bucket owner. This implementation also returns the MFA Delete status of the
versioning state. If the MFA Delete status is enabled, the bucket owner must use an
authentication device to change the versioning state of the bucket. The following
operations are related to GetBucketVersioning:    GetObject     PutObject     DeleteObject


# Arguments
- `bucket`: The name of the bucket for which to get the versioning information.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_versioning(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET",
        "/$(Bucket)?versioning";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_versioning(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?versioning",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_website(bucket)
    get_bucket_website(bucket, params::Dict{String,<:Any})

Returns the website configuration for a bucket. To host website on Amazon S3, you can
configure a bucket as website by adding a website configuration. For more information about
hosting websites, see Hosting Websites on Amazon S3.  This GET action requires the
S3:GetBucketWebsite permission. By default, only the bucket owner can read the bucket
website configuration. However, bucket owners can allow other users to read the website
configuration by writing a bucket policy granting them the S3:GetBucketWebsite permission.
The following operations are related to DeleteBucketWebsite:    DeleteBucketWebsite
PutBucketWebsite

# Arguments
- `bucket`: The bucket name for which to get the website configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_bucket_website(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET", "/$(Bucket)?website"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_bucket_website(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?website",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_object(bucket, key)
    get_object(bucket, key, params::Dict{String,<:Any})

Retrieves objects from Amazon S3. To use GET, you must have READ access to the object. If
you grant READ access to the anonymous user, you can return the object without using an
authorization header. An Amazon S3 bucket has no directory hierarchy such as you would find
in a typical computer file system. You can, however, create a logical hierarchy by using
object key names that imply a folder structure. For example, instead of naming an object
sample.jpg, you can name it photos/2006/February/sample.jpg. To get an object from such a
logical hierarchy, specify the full key name for the object in the GET operation. For a
virtual hosted-style request example, if you have the object
photos/2006/February/sample.jpg, specify the resource as /photos/2006/February/sample.jpg.
For a path-style request example, if you have the object photos/2006/February/sample.jpg in
the bucket named examplebucket, specify the resource as
/examplebucket/photos/2006/February/sample.jpg. For more information about request types,
see HTTP Host Header Bucket Specification. To distribute large files to many people, you
can save bandwidth costs by using BitTorrent. For more information, see Amazon S3 Torrent.
For more information about returning the ACL of an object, see GetObjectAcl. If the object
you are retrieving is stored in the S3 Glacier or S3 Glacier Deep Archive storage class, or
S3 Intelligent-Tiering Archive or S3 Intelligent-Tiering Deep Archive tiers, before you can
retrieve the object you must first restore a copy using RestoreObject. Otherwise, this
action returns an InvalidObjectStateError error. For information about restoring archived
objects, see Restoring Archived Objects. Encryption request headers, like
x-amz-server-side-encryption, should not be sent for GET requests if your object uses
server-side encryption with KMS keys (SSE-KMS) or server-side encryption with Amazon
S3–managed encryption keys (SSE-S3). If your object does use these types of keys,
you’ll get an HTTP 400 BadRequest error. If you encrypt an object by using server-side
encryption with customer-provided encryption keys (SSE-C) when you store the object in
Amazon S3, then when you GET the object, you must use the following headers:
x-amz-server-side-encryption-customer-algorithm   x-amz-server-side-encryption-customer-key
  x-amz-server-side-encryption-customer-key-MD5   For more information about SSE-C, see
Server-Side Encryption (Using Customer-Provided Encryption Keys). Assuming you have the
relevant permission to read object tags, the response also returns the x-amz-tagging-count
header that provides the count of number of tags associated with the object. You can use
GetObjectTagging to retrieve the tag set associated with an object.  Permissions  You need
the relevant read object (or version) permission for this operation. For more information,
see Specifying Permissions in a Policy. If the object you request does not exist, the error
Amazon S3 returns depends on whether you also have the s3:ListBucket permission.   If you
have the s3:ListBucket permission on the bucket, Amazon S3 will return an HTTP status code
404 (\"no such key\") error.   If you don’t have the s3:ListBucket permission, Amazon S3
will return an HTTP status code 403 (\"access denied\") error.    Versioning  By default,
the GET action returns the current version of an object. To return a different version, use
the versionId subresource.     If you supply a versionId, you need the s3:GetObjectVersion
permission to access a specific version of an object. If you request a specific version,
you do not need to have the s3:GetObject permission.    If the current version of the
object is a delete marker, Amazon S3 behaves as if the object was deleted and includes
x-amz-delete-marker: true in the response.    For more information about versioning, see
PutBucketVersioning.   Overriding Response Header Values  There are times when you want to
override certain response header values in a GET response. For example, you might override
the Content-Disposition response header value in your GET request. You can override values
for a set of response headers using the following query parameters. These response header
values are sent only on a successful request, that is, when status code 200 OK is returned.
The set of headers you can override using these parameters is a subset of the headers that
Amazon S3 accepts when you create an object. The response headers that you can override for
the GET response are Content-Type, Content-Language, Expires, Cache-Control,
Content-Disposition, and Content-Encoding. To override these header values in the GET
response, you use the following request parameters.  You must sign the request, either
using an Authorization header or a presigned URL, when using these parameters. They cannot
be used with an unsigned (anonymous) request.     response-content-type
response-content-language     response-expires     response-cache-control
response-content-disposition     response-content-encoding     Additional Considerations
about Request Headers  If both of the If-Match and If-Unmodified-Since headers are present
in the request as follows: If-Match condition evaluates to true, and; If-Unmodified-Since
condition evaluates to false; then, S3 returns 200 OK and the data requested.  If both of
the If-None-Match and If-Modified-Since headers are present in the request as follows:
If-None-Match condition evaluates to false, and; If-Modified-Since condition evaluates to
true; then, S3 returns 304 Not Modified response code. For more information about
conditional requests, see RFC 7232. The following operations are related to GetObject:
ListBuckets     GetObjectAcl

# Arguments
- `bucket`: The bucket name containing the object.  When using this action with an access
  point, you must direct requests to the access point hostname. The access point hostname
  takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using
  this action with an access point through the Amazon Web Services SDKs, you provide the
  access point ARN in place of the bucket name. For more information about access point ARNs,
  see Using access points in the Amazon S3 User Guide. When using an Object Lambda access
  point the hostname takes the form
  AccessPointName-AccountId.s3-object-lambda.Region.amazonaws.com. When using this action
  with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3
  on Outposts hostname takes the form
  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: Key of the object to get.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"If-Match"`: Return the object only if its entity tag (ETag) is the same as the one
  specified, otherwise return a 412 (precondition failed).
- `"If-Modified-Since"`: Return the object only if it has been modified since the specified
  time, otherwise return a 304 (not modified).
- `"If-None-Match"`: Return the object only if its entity tag (ETag) is different from the
  one specified, otherwise return a 304 (not modified).
- `"If-Unmodified-Since"`: Return the object only if it has not been modified since the
  specified time, otherwise return a 412 (precondition failed).
- `"Range"`: Downloads the specified range bytes of an object. For more information about
  the HTTP Range header, see
  https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.  Amazon S3 doesn't
  support retrieving multiple ranges of data per GET request.
- `"partNumber"`: Part number of the object being read. This is a positive integer between
  1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful
  for downloading just a part of an object.
- `"response-cache-control"`: Sets the Cache-Control header of the response.
- `"response-content-disposition"`: Sets the Content-Disposition header of the response
- `"response-content-encoding"`: Sets the Content-Encoding header of the response.
- `"response-content-language"`: Sets the Content-Language header of the response.
- `"response-content-type"`: Sets the Content-Type header of the response.
- `"response-expires"`: Sets the Expires header of the response.
- `"versionId"`: VersionId used to reference a specific version of the object.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
- `"x-amz-server-side-encryption-customer-algorithm"`: Specifies the algorithm to use to
  when decrypting the object (for example, AES256).
- `"x-amz-server-side-encryption-customer-key"`: Specifies the customer-provided encryption
  key for Amazon S3 used to encrypt the data. This value is used to decrypt the object when
  recovering it and must match the one used when storing the data. The key must be
  appropriate for use with the algorithm specified in the
  x-amz-server-side-encryption-customer-algorithm header.
- `"x-amz-server-side-encryption-customer-key-MD5"`: Specifies the 128-bit MD5 digest of
  the encryption key according to RFC 1321. Amazon S3 uses this header for a message
  integrity check to ensure that the encryption key was transmitted without error.
"""
function get_object(Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET", "/$(Bucket)/$(Key)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_object(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "GET",
        "/$(Bucket)/$(Key)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_object_acl(bucket, key)
    get_object_acl(bucket, key, params::Dict{String,<:Any})

Returns the access control list (ACL) of an object. To use this operation, you must have
READ_ACP access to the object. This action is not supported by Amazon S3 on Outposts.
Versioning  By default, GET returns ACL information about the current version of an object.
To return ACL information about a different version, use the versionId subresource.  If
your bucket uses the bucket owner enforced setting for S3 Object Ownership, requests to
read ACLs are still supported and return the bucket-owner-full-control ACL with the owner
being the account that created the bucket. For more information, see  Controlling object
ownership and disabling ACLs in the Amazon S3 User Guide.  The following operations are
related to GetObjectAcl:    GetObject     DeleteObject     PutObject

# Arguments
- `bucket`: The bucket name that contains the object for which to get the ACL information.
  When using this action with an access point, you must direct requests to the access point
  hostname. The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide.
- `key`: The key of the object for which to get the ACL information.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"versionId"`: VersionId used to reference a specific version of the object.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
"""
function get_object_acl(Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET",
        "/$(Bucket)/$(Key)?acl";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_object_acl(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "GET",
        "/$(Bucket)/$(Key)?acl",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_object_legal_hold(bucket, key)
    get_object_legal_hold(bucket, key, params::Dict{String,<:Any})

Gets an object's current Legal Hold status. For more information, see Locking Objects. This
action is not supported by Amazon S3 on Outposts.

# Arguments
- `bucket`: The bucket name containing the object whose Legal Hold status you want to
  retrieve.  When using this action with an access point, you must direct requests to the
  access point hostname. The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide.
- `key`: The key name for the object whose Legal Hold status you want to retrieve.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"versionId"`: The version ID of the object whose Legal Hold status you want to retrieve.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
"""
function get_object_legal_hold(
    Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)/$(Key)?legal-hold";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_object_legal_hold(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "GET",
        "/$(Bucket)/$(Key)?legal-hold",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_object_lock_configuration(bucket)
    get_object_lock_configuration(bucket, params::Dict{String,<:Any})

Gets the Object Lock configuration for a bucket. The rule specified in the Object Lock
configuration will be applied by default to every new object placed in the specified
bucket. For more information, see Locking Objects.

# Arguments
- `bucket`: The bucket whose Object Lock configuration you want to retrieve. When using
  this action with an access point, you must direct requests to the access point hostname.
  The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_object_lock_configuration(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?object-lock";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_object_lock_configuration(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?object-lock",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_object_retention(bucket, key)
    get_object_retention(bucket, key, params::Dict{String,<:Any})

Retrieves an object's retention settings. For more information, see Locking Objects. This
action is not supported by Amazon S3 on Outposts.

# Arguments
- `bucket`: The bucket name containing the object whose retention settings you want to
  retrieve.  When using this action with an access point, you must direct requests to the
  access point hostname. The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide.
- `key`: The key name for the object whose retention settings you want to retrieve.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"versionId"`: The version ID for the object whose retention settings you want to
  retrieve.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
"""
function get_object_retention(
    Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)/$(Key)?retention";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_object_retention(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "GET",
        "/$(Bucket)/$(Key)?retention",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_object_tagging(bucket, key)
    get_object_tagging(bucket, key, params::Dict{String,<:Any})

Returns the tag-set of an object. You send the GET request against the tagging subresource
associated with the object. To use this operation, you must have permission to perform the
s3:GetObjectTagging action. By default, the GET action returns information about current
version of an object. For a versioned bucket, you can have multiple versions of an object
in your bucket. To retrieve tags of any other version, use the versionId query parameter.
You also need permission for the s3:GetObjectVersionTagging action.  By default, the bucket
owner has this permission and can grant this permission to others.  For information about
the Amazon S3 object tagging feature, see Object Tagging. The following action is related
to GetObjectTagging:    PutObjectTagging     DeleteObjectTagging

# Arguments
- `bucket`: The bucket name containing the object for which to get the tagging information.
   When using this action with an access point, you must direct requests to the access point
  hostname. The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide. When using this action with Amazon S3 on Outposts, you
  must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the
  form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: Object key for which to get the tagging information.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"versionId"`: The versionId of the object for which to get the tagging information.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
"""
function get_object_tagging(Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET",
        "/$(Bucket)/$(Key)?tagging";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_object_tagging(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "GET",
        "/$(Bucket)/$(Key)?tagging",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_object_torrent(bucket, key)
    get_object_torrent(bucket, key, params::Dict{String,<:Any})

Returns torrent files from a bucket. BitTorrent can save you bandwidth when you're
distributing large files. For more information about BitTorrent, see Using BitTorrent with
Amazon S3.  You can get torrent only for objects that are less than 5 GB in size, and that
are not encrypted using server-side encryption with a customer-provided encryption key.  To
use GET, you must have READ access to the object. This action is not supported by Amazon S3
on Outposts. The following action is related to GetObjectTorrent:    GetObject

# Arguments
- `bucket`: The name of the bucket containing the object for which to get the torrent files.
- `key`: The object key for which to get the information.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
"""
function get_object_torrent(Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET",
        "/$(Bucket)/$(Key)?torrent";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_object_torrent(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "GET",
        "/$(Bucket)/$(Key)?torrent",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_public_access_block(bucket)
    get_public_access_block(bucket, params::Dict{String,<:Any})

Retrieves the PublicAccessBlock configuration for an Amazon S3 bucket. To use this
operation, you must have the s3:GetBucketPublicAccessBlock permission. For more information
about Amazon S3 permissions, see Specifying Permissions in a Policy.  When Amazon S3
evaluates the PublicAccessBlock configuration for a bucket or an object, it checks the
PublicAccessBlock configuration for both the bucket (or the bucket that contains the
object) and the bucket owner's account. If the PublicAccessBlock settings are different
between the bucket and the account, Amazon S3 uses the most restrictive combination of the
bucket-level and account-level settings.  For more information about when Amazon S3
considers a bucket or an object public, see The Meaning of \"Public\". The following
operations are related to GetPublicAccessBlock:    Using Amazon S3 Block Public Access
PutPublicAccessBlock     GetPublicAccessBlock     DeletePublicAccessBlock

# Arguments
- `bucket`: The name of the Amazon S3 bucket whose PublicAccessBlock configuration you want
  to retrieve.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function get_public_access_block(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET",
        "/$(Bucket)?publicAccessBlock";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_public_access_block(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?publicAccessBlock",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    head_bucket(bucket)
    head_bucket(bucket, params::Dict{String,<:Any})

This action is useful to determine if a bucket exists and you have permission to access it.
The action returns a 200 OK if the bucket exists and you have permission to access it. If
the bucket does not exist or you do not have permission to access it, the HEAD request
returns a generic 404 Not Found or 403 Forbidden code. A message body is not included, so
you cannot determine the exception beyond these error codes. To use this operation, you
must have permissions to perform the s3:ListBucket action. The bucket owner has this
permission by default and can grant this permission to others. For more information about
permissions, see Permissions Related to Bucket Subresource Operations and Managing Access
Permissions to Your Amazon S3 Resources. To use this API against an access point, you must
provide the alias of the access point in place of the bucket name or specify the access
point ARN. When using the access point ARN, you must direct requests to the access point
hostname. The access point hostname takes the form
AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using the Amazon Web
Services SDKs, you provide the ARN in place of the bucket name. For more information see,
Using access points.

# Arguments
- `bucket`: The bucket name. When using this action with an access point, you must direct
  requests to the access point hostname. The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide. When using this action with Amazon S3 on Outposts, you
  must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the
  form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function head_bucket(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3("HEAD", "/$(Bucket)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
function head_bucket(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "HEAD", "/$(Bucket)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    head_object(bucket, key)
    head_object(bucket, key, params::Dict{String,<:Any})

The HEAD action retrieves metadata from an object without returning the object itself. This
action is useful if you're only interested in an object's metadata. To use HEAD, you must
have READ access to the object. A HEAD request has the same options as a GET action on an
object. The response is identical to the GET response except that there is no response
body. Because of this, if the HEAD request generates an error, it returns a generic 404 Not
Found or 403 Forbidden code. It is not possible to retrieve the exact exception beyond
these error codes. If you encrypt an object by using server-side encryption with
customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when
you retrieve the metadata from the object, you must use the following headers:
x-amz-server-side-encryption-customer-algorithm   x-amz-server-side-encryption-customer-key
  x-amz-server-side-encryption-customer-key-MD5   For more information about SSE-C, see
Server-Side Encryption (Using Customer-Provided Encryption Keys).    Encryption request
headers, like x-amz-server-side-encryption, should not be sent for GET requests if your
object uses server-side encryption with KMS keys (SSE-KMS) or server-side encryption with
Amazon S3–managed encryption keys (SSE-S3). If your object does use these types of keys,
you’ll get an HTTP 400 BadRequest error.    The last modified property in this case is
the creation date of the object.    Request headers are limited to 8 KB in size. For more
information, see Common Request Headers. Consider the following when using request headers:
   Consideration 1 – If both of the If-Match and If-Unmodified-Since headers are present
in the request as follows:    If-Match condition evaluates to true, and;
If-Unmodified-Since condition evaluates to false;   Then Amazon S3 returns 200 OK and the
data requested.    Consideration 2 – If both of the If-None-Match and If-Modified-Since
headers are present in the request as follows:    If-None-Match condition evaluates to
false, and;    If-Modified-Since condition evaluates to true;   Then Amazon S3 returns the
304 Not Modified response code.   For more information about conditional requests, see RFC
7232.  Permissions  You need the relevant read object (or version) permission for this
operation. For more information, see Specifying Permissions in a Policy. If the object you
request does not exist, the error Amazon S3 returns depends on whether you also have the
s3:ListBucket permission.   If you have the s3:ListBucket permission on the bucket, Amazon
S3 returns an HTTP status code 404 (\"no such key\") error.   If you don’t have the
s3:ListBucket permission, Amazon S3 returns an HTTP status code 403 (\"access denied\")
error.   The following action is related to HeadObject:    GetObject

# Arguments
- `bucket`: The name of the bucket containing the object. When using this action with an
  access point, you must direct requests to the access point hostname. The access point
  hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When
  using this action with an access point through the Amazon Web Services SDKs, you provide
  the access point ARN in place of the bucket name. For more information about access point
  ARNs, see Using access points in the Amazon S3 User Guide. When using this action with
  Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on
  Outposts hostname takes the form
  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: The object key.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"If-Match"`: Return the object only if its entity tag (ETag) is the same as the one
  specified, otherwise return a 412 (precondition failed).
- `"If-Modified-Since"`: Return the object only if it has been modified since the specified
  time, otherwise return a 304 (not modified).
- `"If-None-Match"`: Return the object only if its entity tag (ETag) is different from the
  one specified, otherwise return a 304 (not modified).
- `"If-Unmodified-Since"`: Return the object only if it has not been modified since the
  specified time, otherwise return a 412 (precondition failed).
- `"Range"`: Because HeadObject returns only the metadata for an object, this parameter has
  no effect.
- `"partNumber"`: Part number of the object being read. This is a positive integer between
  1 and 10,000. Effectively performs a 'ranged' HEAD request for the part specified. Useful
  querying about the size of the part and the number of parts in this object.
- `"versionId"`: VersionId used to reference a specific version of the object.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
- `"x-amz-server-side-encryption-customer-algorithm"`: Specifies the algorithm to use to
  when encrypting the object (for example, AES256).
- `"x-amz-server-side-encryption-customer-key"`: Specifies the customer-provided encryption
  key for Amazon S3 to use in encrypting data. This value is used to store the object and
  then it is discarded; Amazon S3 does not store the encryption key. The key must be
  appropriate for use with the algorithm specified in the
  x-amz-server-side-encryption-customer-algorithm header.
- `"x-amz-server-side-encryption-customer-key-MD5"`: Specifies the 128-bit MD5 digest of
  the encryption key according to RFC 1321. Amazon S3 uses this header for a message
  integrity check to ensure that the encryption key was transmitted without error.
"""
function head_object(Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "HEAD", "/$(Bucket)/$(Key)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function head_object(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "HEAD",
        "/$(Bucket)/$(Key)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_bucket_analytics_configurations(bucket)
    list_bucket_analytics_configurations(bucket, params::Dict{String,<:Any})

Lists the analytics configurations for the bucket. You can have up to 1,000 analytics
configurations per bucket. This action supports list pagination and does not return more
than 100 configurations at a time. You should always check the IsTruncated element in the
response. If there are no more configurations to list, IsTruncated is set to false. If
there are more configurations to list, IsTruncated is set to true, and there will be a
value in NextContinuationToken. You use the NextContinuationToken value to continue the
pagination of the list by passing the value in continuation-token in the request to GET the
next page. To use this operation, you must have permissions to perform the
s3:GetAnalyticsConfiguration action. The bucket owner has this permission by default. The
bucket owner can grant this permission to others. For more information about permissions,
see Permissions Related to Bucket Subresource Operations and Managing Access Permissions to
Your Amazon S3 Resources. For information about Amazon S3 analytics feature, see Amazon S3
Analytics – Storage Class Analysis.  The following operations are related to
ListBucketAnalyticsConfigurations:    GetBucketAnalyticsConfiguration
DeleteBucketAnalyticsConfiguration     PutBucketAnalyticsConfiguration

# Arguments
- `bucket`: The name of the bucket from which analytics configurations are retrieved.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"continuation-token"`: The ContinuationToken that represents a placeholder from where
  this request should begin.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function list_bucket_analytics_configurations(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?analytics";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_bucket_analytics_configurations(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?analytics",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_bucket_intelligent_tiering_configurations(bucket)
    list_bucket_intelligent_tiering_configurations(bucket, params::Dict{String,<:Any})

Lists the S3 Intelligent-Tiering configuration from the specified bucket. The S3
Intelligent-Tiering storage class is designed to optimize storage costs by automatically
moving data to the most cost-effective storage access tier, without performance impact or
operational overhead. S3 Intelligent-Tiering delivers automatic cost savings in three low
latency and high throughput access tiers. To get the lowest storage cost on data that can
be accessed in minutes to hours, you can choose to activate additional archiving
capabilities. The S3 Intelligent-Tiering storage class is the ideal storage class for data
with unknown, changing, or unpredictable access patterns, independent of object size or
retention period. If the size of an object is less than 128 KB, it is not monitored and not
eligible for auto-tiering. Smaller objects can be stored, but they are always charged at
the Frequent Access tier rates in the S3 Intelligent-Tiering storage class. For more
information, see Storage class for automatically optimizing frequently and infrequently
accessed objects. Operations related to ListBucketIntelligentTieringConfigurations include:
    DeleteBucketIntelligentTieringConfiguration
PutBucketIntelligentTieringConfiguration     GetBucketIntelligentTieringConfiguration

# Arguments
- `bucket`: The name of the Amazon S3 bucket whose configuration you want to modify or
  retrieve.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"continuation-token"`: The ContinuationToken that represents a placeholder from where
  this request should begin.
"""
function list_bucket_intelligent_tiering_configurations(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?intelligent-tiering";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_bucket_intelligent_tiering_configurations(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?intelligent-tiering",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_bucket_inventory_configurations(bucket)
    list_bucket_inventory_configurations(bucket, params::Dict{String,<:Any})

Returns a list of inventory configurations for the bucket. You can have up to 1,000
analytics configurations per bucket. This action supports list pagination and does not
return more than 100 configurations at a time. Always check the IsTruncated element in the
response. If there are no more configurations to list, IsTruncated is set to false. If
there are more configurations to list, IsTruncated is set to true, and there is a value in
NextContinuationToken. You use the NextContinuationToken value to continue the pagination
of the list by passing the value in continuation-token in the request to GET the next page.
 To use this operation, you must have permissions to perform the
s3:GetInventoryConfiguration action. The bucket owner has this permission by default. The
bucket owner can grant this permission to others. For more information about permissions,
see Permissions Related to Bucket Subresource Operations and Managing Access Permissions to
Your Amazon S3 Resources. For information about the Amazon S3 inventory feature, see Amazon
S3 Inventory  The following operations are related to ListBucketInventoryConfigurations:
GetBucketInventoryConfiguration     DeleteBucketInventoryConfiguration
PutBucketInventoryConfiguration

# Arguments
- `bucket`: The name of the bucket containing the inventory configurations to retrieve.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"continuation-token"`: The marker used to continue an inventory configuration listing
  that has been truncated. Use the NextContinuationToken from a previously truncated list
  response to continue the listing. The continuation token is an opaque value that Amazon S3
  understands.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function list_bucket_inventory_configurations(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?inventory";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_bucket_inventory_configurations(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?inventory",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_bucket_metrics_configurations(bucket)
    list_bucket_metrics_configurations(bucket, params::Dict{String,<:Any})

Lists the metrics configurations for the bucket. The metrics configurations are only for
the request metrics of the bucket and do not provide information on daily storage metrics.
You can have up to 1,000 configurations per bucket. This action supports list pagination
and does not return more than 100 configurations at a time. Always check the IsTruncated
element in the response. If there are no more configurations to list, IsTruncated is set to
false. If there are more configurations to list, IsTruncated is set to true, and there is a
value in NextContinuationToken. You use the NextContinuationToken value to continue the
pagination of the list by passing the value in continuation-token in the request to GET the
next page. To use this operation, you must have permissions to perform the
s3:GetMetricsConfiguration action. The bucket owner has this permission by default. The
bucket owner can grant this permission to others. For more information about permissions,
see Permissions Related to Bucket Subresource Operations and Managing Access Permissions to
Your Amazon S3 Resources. For more information about metrics configurations and CloudWatch
request metrics, see Monitoring Metrics with Amazon CloudWatch. The following operations
are related to ListBucketMetricsConfigurations:    PutBucketMetricsConfiguration
GetBucketMetricsConfiguration     DeleteBucketMetricsConfiguration

# Arguments
- `bucket`: The name of the bucket containing the metrics configurations to retrieve.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"continuation-token"`: The marker that is used to continue a metrics configuration
  listing that has been truncated. Use the NextContinuationToken from a previously truncated
  list response to continue the listing. The continuation token is an opaque value that
  Amazon S3 understands.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function list_bucket_metrics_configurations(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET", "/$(Bucket)?metrics"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_bucket_metrics_configurations(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?metrics",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_buckets()
    list_buckets(params::Dict{String,<:Any})

Returns a list of all buckets owned by the authenticated sender of the request.

"""
function list_buckets(; aws_config::AbstractAWSConfig=global_aws_config())
    return s3("GET", "/"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
function list_buckets(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3("GET", "/", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end

"""
    list_multipart_uploads(bucket)
    list_multipart_uploads(bucket, params::Dict{String,<:Any})

This action lists in-progress multipart uploads. An in-progress multipart upload is a
multipart upload that has been initiated using the Initiate Multipart Upload request, but
has not yet been completed or aborted. This action returns at most 1,000 multipart uploads
in the response. 1,000 multipart uploads is the maximum number of uploads a response can
include, which is also the default value. You can further limit the number of uploads in a
response by specifying the max-uploads parameter in the response. If additional multipart
uploads satisfy the list criteria, the response will contain an IsTruncated element with
the value true. To list the additional multipart uploads, use the key-marker and
upload-id-marker request parameters. In the response, the uploads are sorted by key. If
your application has initiated more than one multipart upload using the same object key,
then uploads in the response are first sorted by key. Additionally, uploads are sorted in
ascending order within each key by the upload initiation time. For more information on
multipart uploads, see Uploading Objects Using Multipart Upload. For information on
permissions required to use the multipart upload API, see Multipart Upload and Permissions.
The following operations are related to ListMultipartUploads:    CreateMultipartUpload
UploadPart     CompleteMultipartUpload     ListParts     AbortMultipartUpload

# Arguments
- `bucket`: The name of the bucket to which the multipart upload was initiated.  When using
  this action with an access point, you must direct requests to the access point hostname.
  The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide. When using this action with Amazon S3 on Outposts, you
  must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the
  form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"delimiter"`: Character you use to group keys. All keys that contain the same string
  between the prefix, if specified, and the first occurrence of the delimiter after the
  prefix are grouped under a single result element, CommonPrefixes. If you don't specify the
  prefix parameter, then the substring starts at the beginning of the key. The keys that are
  grouped under CommonPrefixes result element are not returned elsewhere in the response.
- `"encoding-type"`:
- `"key-marker"`: Together with upload-id-marker, this parameter specifies the multipart
  upload after which listing should begin. If upload-id-marker is not specified, only the
  keys lexicographically greater than the specified key-marker will be included in the list.
  If upload-id-marker is specified, any multipart uploads for a key equal to the key-marker
  might also be included, provided those multipart uploads have upload IDs lexicographically
  greater than the specified upload-id-marker.
- `"max-uploads"`: Sets the maximum number of multipart uploads, from 1 to 1,000, to return
  in the response body. 1,000 is the maximum number of uploads that can be returned in a
  response.
- `"prefix"`: Lists in-progress uploads only for those keys that begin with the specified
  prefix. You can use prefixes to separate a bucket into different grouping of keys. (You can
  think of using prefix to make groups in the same way you'd use a folder in a file system.)
- `"upload-id-marker"`: Together with key-marker, specifies the multipart upload after
  which listing should begin. If key-marker is not specified, the upload-id-marker parameter
  is ignored. Otherwise, any multipart uploads for a key equal to the key-marker might be
  included in the list only if they have an upload ID lexicographically greater than the
  specified upload-id-marker.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function list_multipart_uploads(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET", "/$(Bucket)?uploads"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_multipart_uploads(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?uploads",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_object_versions(bucket)
    list_object_versions(bucket, params::Dict{String,<:Any})

Returns metadata about all versions of the objects in a bucket. You can also use request
parameters as selection criteria to return metadata about a subset of all the object
versions.   To use this operation, you must have permissions to perform the
s3:ListBucketVersions action. Be aware of the name difference.     A 200 OK response can
contain valid or invalid XML. Make sure to design your application to parse the contents of
the response and handle it appropriately.  To use this operation, you must have READ access
to the bucket. This action is not supported by Amazon S3 on Outposts. The following
operations are related to ListObjectVersions:    ListObjectsV2     GetObject     PutObject
   DeleteObject

# Arguments
- `bucket`: The bucket name that contains the objects.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"delimiter"`: A delimiter is a character that you specify to group keys. All keys that
  contain the same string between the prefix and the first occurrence of the delimiter are
  grouped under a single result element in CommonPrefixes. These groups are counted as one
  result against the max-keys limitation. These keys are not returned elsewhere in the
  response.
- `"encoding-type"`:
- `"key-marker"`: Specifies the key to start with when listing objects in a bucket.
- `"max-keys"`: Sets the maximum number of keys returned in the response. By default the
  action returns up to 1,000 key names. The response might contain fewer keys but will never
  contain more. If additional keys satisfy the search criteria, but were not returned because
  max-keys was exceeded, the response contains &lt;isTruncated&gt;true&lt;/isTruncated&gt;.
  To return the additional keys, see key-marker and version-id-marker.
- `"prefix"`: Use this parameter to select only those keys that begin with the specified
  prefix. You can use prefixes to separate a bucket into different groupings of keys. (You
  can think of using prefix to make groups in the same way you'd use a folder in a file
  system.) You can use prefix with delimiter to roll up numerous objects into a single result
  under CommonPrefixes.
- `"version-id-marker"`: Specifies the object version you want to start listing from.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function list_object_versions(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET", "/$(Bucket)?versions"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_object_versions(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?versions",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_objects(bucket)
    list_objects(bucket, params::Dict{String,<:Any})

Returns some or all (up to 1,000) of the objects in a bucket. You can use the request
parameters as selection criteria to return a subset of the objects in a bucket. A 200 OK
response can contain valid or invalid XML. Be sure to design your application to parse the
contents of the response and handle it appropriately.  This action has been revised. We
recommend that you use the newer version, ListObjectsV2, when developing applications. For
backward compatibility, Amazon S3 continues to support ListObjects.  The following
operations are related to ListObjects:    ListObjectsV2     GetObject     PutObject
CreateBucket     ListBuckets

# Arguments
- `bucket`: The name of the bucket containing the objects. When using this action with an
  access point, you must direct requests to the access point hostname. The access point
  hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When
  using this action with an access point through the Amazon Web Services SDKs, you provide
  the access point ARN in place of the bucket name. For more information about access point
  ARNs, see Using access points in the Amazon S3 User Guide. When using this action with
  Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on
  Outposts hostname takes the form
  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"delimiter"`: A delimiter is a character you use to group keys.
- `"encoding-type"`:
- `"marker"`: Marker is where you want Amazon S3 to start listing from. Amazon S3 starts
  listing after this specified key. Marker can be any key in the bucket.
- `"max-keys"`: Sets the maximum number of keys returned in the response. By default the
  action returns up to 1,000 key names. The response might contain fewer keys but will never
  contain more.
- `"prefix"`: Limits the response to keys that begin with the specified prefix.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`: Confirms that the requester knows that she or he will be charged
  for the list objects request. Bucket owners need not specify this parameter in their
  requests.
"""
function list_objects(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3("GET", "/$(Bucket)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
function list_objects(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET", "/$(Bucket)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_objects_v2(bucket)
    list_objects_v2(bucket, params::Dict{String,<:Any})

Returns some or all (up to 1,000) of the objects in a bucket with each request. You can use
the request parameters as selection criteria to return a subset of the objects in a bucket.
A 200 OK response can contain valid or invalid XML. Make sure to design your application to
parse the contents of the response and handle it appropriately. Objects are returned sorted
in an ascending order of the respective key names in the list. For more information about
listing objects, see Listing object keys programmatically  To use this operation, you must
have READ access to the bucket. To use this action in an Identity and Access Management
(IAM) policy, you must have permissions to perform the s3:ListBucket action. The bucket
owner has this permission by default and can grant this permission to others. For more
information about permissions, see Permissions Related to Bucket Subresource Operations and
Managing Access Permissions to Your Amazon S3 Resources.  This section describes the latest
revision of this action. We recommend that you use this revised API for application
development. For backward compatibility, Amazon S3 continues to support the prior version
of this API, ListObjects.  To get a list of your buckets, see ListBuckets. The following
operations are related to ListObjectsV2:    GetObject     PutObject     CreateBucket

# Arguments
- `bucket`: Bucket name to list.  When using this action with an access point, you must
  direct requests to the access point hostname. The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide. When using this action with Amazon S3 on Outposts, you
  must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the
  form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"continuation-token"`: ContinuationToken indicates Amazon S3 that the list is being
  continued on this bucket with a token. ContinuationToken is obfuscated and is not a real
  key.
- `"delimiter"`: A delimiter is a character you use to group keys.
- `"encoding-type"`: Encoding type used by Amazon S3 to encode object keys in the response.
- `"fetch-owner"`: The owner field is not present in listV2 by default, if you want to
  return owner field with each key in the result then set the fetch owner field to true.
- `"max-keys"`: Sets the maximum number of keys returned in the response. By default the
  action returns up to 1,000 key names. The response might contain fewer keys but will never
  contain more.
- `"prefix"`: Limits the response to keys that begin with the specified prefix.
- `"start-after"`: StartAfter is where you want Amazon S3 to start listing from. Amazon S3
  starts listing after this specified key. StartAfter can be any key in the bucket.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`: Confirms that the requester knows that she or he will be charged
  for the list objects request in V2 style. Bucket owners need not specify this parameter in
  their requests.
"""
function list_objects_v2(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "GET",
        "/$(Bucket)?list-type=2";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_objects_v2(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)?list-type=2",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_parts(bucket, key, upload_id)
    list_parts(bucket, key, upload_id, params::Dict{String,<:Any})

Lists the parts that have been uploaded for a specific multipart upload. This operation
must include the upload ID, which you obtain by sending the initiate multipart upload
request (see CreateMultipartUpload). This request returns a maximum of 1,000 uploaded
parts. The default number of parts returned is 1,000 parts. You can restrict the number of
parts returned by specifying the max-parts request parameter. If your multipart upload
consists of more than 1,000 parts, the response returns an IsTruncated field with the value
of true, and a NextPartNumberMarker element. In subsequent ListParts requests you can
include the part-number-marker query string parameter and set its value to the
NextPartNumberMarker field value from the previous response. For more information on
multipart uploads, see Uploading Objects Using Multipart Upload. For information on
permissions required to use the multipart upload API, see Multipart Upload and Permissions.
The following operations are related to ListParts:    CreateMultipartUpload     UploadPart
   CompleteMultipartUpload     AbortMultipartUpload     ListMultipartUploads

# Arguments
- `bucket`: The name of the bucket to which the parts are being uploaded.  When using this
  action with an access point, you must direct requests to the access point hostname. The
  access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide. When using this action with Amazon S3 on Outposts, you
  must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the
  form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: Object key for which the multipart upload was initiated.
- `upload_id`: Upload ID identifying the multipart upload whose parts are being listed.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-parts"`: Sets the maximum number of parts to return.
- `"part-number-marker"`: Specifies the part after which listing should begin. Only parts
  with higher part numbers will be listed.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
"""
function list_parts(
    Bucket, Key, uploadId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "GET",
        "/$(Bucket)/$(Key)",
        Dict{String,Any}("uploadId" => uploadId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_parts(
    Bucket,
    Key,
    uploadId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "GET",
        "/$(Bucket)/$(Key)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("uploadId" => uploadId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_accelerate_configuration(accelerate_configuration, bucket)
    put_bucket_accelerate_configuration(accelerate_configuration, bucket, params::Dict{String,<:Any})

Sets the accelerate configuration of an existing bucket. Amazon S3 Transfer Acceleration is
a bucket-level feature that enables you to perform faster data transfers to Amazon S3.  To
use this operation, you must have permission to perform the s3:PutAccelerateConfiguration
action. The bucket owner has this permission by default. The bucket owner can grant this
permission to others. For more information about permissions, see Permissions Related to
Bucket Subresource Operations and Managing Access Permissions to Your Amazon S3 Resources.
The Transfer Acceleration state of a bucket can be set to one of the following two values:
  Enabled – Enables accelerated data transfers to the bucket.    Suspended – Disables
accelerated data transfers to the bucket.   The GetBucketAccelerateConfiguration action
returns the transfer acceleration state of a bucket. After setting the Transfer
Acceleration state of a bucket to Enabled, it might take up to thirty minutes before the
data transfer rates to the bucket increase.  The name of the bucket used for Transfer
Acceleration must be DNS-compliant and must not contain periods (\".\").  For more
information about transfer acceleration, see Transfer Acceleration. The following
operations are related to PutBucketAccelerateConfiguration:
GetBucketAccelerateConfiguration     CreateBucket

# Arguments
- `accelerate_configuration`: Container for setting the transfer acceleration state.
- `bucket`: The name of the bucket for which the accelerate configuration is set.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_accelerate_configuration(
    AccelerateConfiguration, Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?accelerate",
        Dict{String,Any}("AccelerateConfiguration" => AccelerateConfiguration);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_accelerate_configuration(
    AccelerateConfiguration,
    Bucket,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?accelerate",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("AccelerateConfiguration" => AccelerateConfiguration),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_acl(bucket)
    put_bucket_acl(bucket, params::Dict{String,<:Any})

Sets the permissions on an existing bucket using access control lists (ACL). For more
information, see Using ACLs. To set the ACL of a bucket, you must have WRITE_ACP
permission. You can use one of the following two ways to set a bucket's permissions:
Specify the ACL in the request body   Specify permissions using request headers    You
cannot specify access permission using both the body and the request headers.  Depending on
your application needs, you may choose to set the ACL on a bucket using either the request
body or the headers. For example, if you have an existing application that updates a bucket
ACL using the request body, then you can continue to use that approach.  If your bucket
uses the bucket owner enforced setting for S3 Object Ownership, ACLs are disabled and no
longer affect permissions. You must use policies to grant access to your bucket and the
objects in it. Requests to set ACLs or update ACLs fail and return the
AccessControlListNotSupported error code. Requests to read ACLs are still supported. For
more information, see Controlling object ownership in the Amazon S3 User Guide.   Access
Permissions  You can set access permissions using one of the following methods:   Specify a
canned ACL with the x-amz-acl request header. Amazon S3 supports a set of predefined ACLs,
known as canned ACLs. Each canned ACL has a predefined set of grantees and permissions.
Specify the canned ACL name as the value of x-amz-acl. If you use this header, you cannot
use other access control-specific headers in your request. For more information, see Canned
ACL.   Specify access permissions explicitly with the x-amz-grant-read,
x-amz-grant-read-acp, x-amz-grant-write-acp, and x-amz-grant-full-control headers. When
using these headers, you specify explicit access permissions and grantees (Amazon Web
Services accounts or Amazon S3 groups) who will receive the permission. If you use these
ACL-specific headers, you cannot use the x-amz-acl header to set a canned ACL. These
parameters map to the set of permissions that Amazon S3 supports in an ACL. For more
information, see Access Control List (ACL) Overview. You specify each grantee as a
type=value pair, where the type is one of the following:    id – if the value specified
is the canonical user ID of an Amazon Web Services account    uri – if you are granting
permissions to a predefined group    emailAddress – if the value specified is the email
address of an Amazon Web Services account  Using email addresses to specify a grantee is
only supported in the following Amazon Web Services Regions:    US East (N. Virginia)   US
West (N. California)    US West (Oregon)    Asia Pacific (Singapore)   Asia Pacific
(Sydney)   Asia Pacific (Tokyo)   Europe (Ireland)   South America (São Paulo)   For a
list of all the Amazon S3 supported Regions and endpoints, see Regions and Endpoints in the
Amazon Web Services General Reference.    For example, the following x-amz-grant-write
header grants create, overwrite, and delete objects permission to LogDelivery group
predefined by Amazon S3 and two Amazon Web Services accounts identified by their email
addresses.  x-amz-grant-write: uri=\"http://acs.amazonaws.com/groups/s3/LogDelivery\",
id=\"111122223333\", id=\"555566667777\"     You can use either a canned ACL or specify
access permissions explicitly. You cannot do both.  Grantee Values  You can specify the
person (grantee) to whom you're assigning access rights (using request elements) in the
following ways:   By the person's ID:  &lt;Grantee
xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
xsi:type=\"CanonicalUser\"&gt;&lt;ID&gt;&lt;&gt;ID&lt;&gt;&lt;/ID&gt;&lt;DisplayName&gt;&lt
;&gt;GranteesEmail&lt;&gt;&lt;/DisplayName&gt; &lt;/Grantee&gt;  DisplayName is optional
and ignored in the request   By URI:  &lt;Grantee
xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
xsi:type=\"Group\"&gt;&lt;URI&gt;&lt;&gt;http://acs.amazonaws.com/groups/global/Authenticate
dUsers&lt;&gt;&lt;/URI&gt;&lt;/Grantee&gt;    By Email address:  &lt;Grantee
xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
xsi:type=\"AmazonCustomerByEmail\"&gt;&lt;EmailAddress&gt;&lt;&gt;Grantees@email.com&lt;&gt
;&lt;/EmailAddress&gt;lt;/Grantee&gt;  The grantee is resolved to the CanonicalUser and, in
a response to a GET Object acl request, appears as the CanonicalUser.   Using email
addresses to specify a grantee is only supported in the following Amazon Web Services
Regions:    US East (N. Virginia)   US West (N. California)    US West (Oregon)    Asia
Pacific (Singapore)   Asia Pacific (Sydney)   Asia Pacific (Tokyo)   Europe (Ireland)
South America (São Paulo)   For a list of all the Amazon S3 supported Regions and
endpoints, see Regions and Endpoints in the Amazon Web Services General Reference.
Related Resources     CreateBucket     DeleteBucket     GetObjectAcl

# Arguments
- `bucket`: The bucket to which to apply the ACL.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AccessControlPolicy"`: Contains the elements that set the ACL permissions for an object
  per grantee.
- `"Content-MD5"`: The base64-encoded 128-bit MD5 digest of the data. This header must be
  used as a message integrity check to verify that the request body was not corrupted in
  transit. For more information, go to RFC 1864.  For requests made using the Amazon Web
  Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated
  automatically.
- `"x-amz-acl"`: The canned ACL to apply to the bucket.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-grant-full-control"`: Allows grantee the read, write, read ACP, and write ACP
  permissions on the bucket.
- `"x-amz-grant-read"`: Allows grantee to list the objects in the bucket.
- `"x-amz-grant-read-acp"`: Allows grantee to read the bucket ACL.
- `"x-amz-grant-write"`: Allows grantee to create new objects in the bucket. For the bucket
  and object owners of existing objects, also allows deletions and overwrites of those
  objects.
- `"x-amz-grant-write-acp"`: Allows grantee to write the ACL for the applicable bucket.
"""
function put_bucket_acl(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "PUT", "/$(Bucket)?acl"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function put_bucket_acl(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?acl",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_analytics_configuration(analytics_configuration, bucket, id)
    put_bucket_analytics_configuration(analytics_configuration, bucket, id, params::Dict{String,<:Any})

Sets an analytics configuration for the bucket (specified by the analytics configuration
ID). You can have up to 1,000 analytics configurations per bucket. You can choose to have
storage class analysis export analysis reports sent to a comma-separated values (CSV) flat
file. See the DataExport request element. Reports are updated daily and are based on the
object filters that you configure. When selecting data export, you specify a destination
bucket and an optional destination prefix where the file is written. You can export the
data to a destination bucket in a different account. However, the destination bucket must
be in the same Region as the bucket that you are making the PUT analytics configuration to.
For more information, see Amazon S3 Analytics – Storage Class Analysis.   You must create
a bucket policy on the destination bucket where the exported file is written to grant
permissions to Amazon S3 to write objects to the bucket. For an example policy, see
Granting Permissions for Amazon S3 Inventory and Storage Class Analysis.  To use this
operation, you must have permissions to perform the s3:PutAnalyticsConfiguration action.
The bucket owner has this permission by default. The bucket owner can grant this permission
to others. For more information about permissions, see Permissions Related to Bucket
Subresource Operations and Managing Access Permissions to Your Amazon S3 Resources.
Special Errors       HTTP Error: HTTP 400 Bad Request     Code: InvalidArgument     Cause:
Invalid argument.         HTTP Error: HTTP 400 Bad Request     Code: TooManyConfigurations
   Cause: You are attempting to create a new configuration but have already reached the
1,000-configuration limit.         HTTP Error: HTTP 403 Forbidden     Code: AccessDenied
 Cause: You are not the owner of the specified bucket, or you do not have the
s3:PutAnalyticsConfiguration bucket permission to set the configuration on the bucket.
 Related Resources     GetBucketAnalyticsConfiguration
DeleteBucketAnalyticsConfiguration     ListBucketAnalyticsConfigurations

# Arguments
- `analytics_configuration`: The configuration and any analyses for the analytics filter.
- `bucket`: The name of the bucket to which an analytics configuration is stored.
- `id`: The ID that identifies the analytics configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_analytics_configuration(
    AnalyticsConfiguration, Bucket, id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?analytics",
        Dict{String,Any}("AnalyticsConfiguration" => AnalyticsConfiguration, "id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_analytics_configuration(
    AnalyticsConfiguration,
    Bucket,
    id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?analytics",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "AnalyticsConfiguration" => AnalyticsConfiguration, "id" => id
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_cors(bucket, corsconfiguration)
    put_bucket_cors(bucket, corsconfiguration, params::Dict{String,<:Any})

Sets the cors configuration for your bucket. If the configuration exists, Amazon S3
replaces it. To use this operation, you must be allowed to perform the s3:PutBucketCORS
action. By default, the bucket owner has this permission and can grant it to others. You
set this configuration on a bucket so that the bucket can service cross-origin requests.
For example, you might want to enable a request whose origin is http://www.example.com to
access your Amazon S3 bucket at my.example.bucket.com by using the browser's XMLHttpRequest
capability. To enable cross-origin resource sharing (CORS) on a bucket, you add the cors
subresource to the bucket. The cors subresource is an XML document in which you configure
rules that identify origins and the HTTP methods that can be executed on your bucket. The
document is limited to 64 KB in size.  When Amazon S3 receives a cross-origin request (or a
pre-flight OPTIONS request) against a bucket, it evaluates the cors configuration on the
bucket and uses the first CORSRule rule that matches the incoming browser request to enable
a cross-origin request. For a rule to match, the following conditions must be met:   The
request's Origin header must match AllowedOrigin elements.   The request method (for
example, GET, PUT, HEAD, and so on) or the Access-Control-Request-Method header in case of
a pre-flight OPTIONS request must be one of the AllowedMethod elements.    Every header
specified in the Access-Control-Request-Headers request header of a pre-flight request must
match an AllowedHeader element.     For more information about CORS, go to Enabling
Cross-Origin Resource Sharing in the Amazon S3 User Guide.  Related Resources
GetBucketCors     DeleteBucketCors     RESTOPTIONSobject

# Arguments
- `bucket`: Specifies the bucket impacted by the corsconfiguration.
- `corsconfiguration`: Describes the cross-origin access configuration for objects in an
  Amazon S3 bucket. For more information, see Enabling Cross-Origin Resource Sharing in the
  Amazon S3 User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The base64-encoded 128-bit MD5 digest of the data. This header must be
  used as a message integrity check to verify that the request body was not corrupted in
  transit. For more information, go to RFC 1864.  For requests made using the Amazon Web
  Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated
  automatically.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_cors(
    Bucket, CORSConfiguration; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?cors",
        Dict{String,Any}("CORSConfiguration" => CORSConfiguration);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_cors(
    Bucket,
    CORSConfiguration,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?cors",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("CORSConfiguration" => CORSConfiguration), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_encryption(bucket, server_side_encryption_configuration)
    put_bucket_encryption(bucket, server_side_encryption_configuration, params::Dict{String,<:Any})

This action uses the encryption subresource to configure default encryption and Amazon S3
Bucket Key for an existing bucket. Default encryption for a bucket can use server-side
encryption with Amazon S3-managed keys (SSE-S3) or customer managed keys (SSE-KMS). If you
specify default encryption using SSE-KMS, you can also configure Amazon S3 Bucket Key. For
information about default encryption, see Amazon S3 default bucket encryption in the Amazon
S3 User Guide. For more information about S3 Bucket Keys, see Amazon S3 Bucket Keys in the
Amazon S3 User Guide.  This action requires Amazon Web Services Signature Version 4. For
more information, see  Authenticating Requests (Amazon Web Services Signature Version 4).
To use this operation, you must have permissions to perform the
s3:PutEncryptionConfiguration action. The bucket owner has this permission by default. The
bucket owner can grant this permission to others. For more information about permissions,
see Permissions Related to Bucket Subresource Operations and Managing Access Permissions to
Your Amazon S3 Resources in the Amazon S3 User Guide.   Related Resources
GetBucketEncryption     DeleteBucketEncryption

# Arguments
- `bucket`: Specifies default encryption for a bucket using server-side encryption with
  Amazon S3-managed keys (SSE-S3) or customer managed keys (SSE-KMS). For information about
  the Amazon S3 default encryption feature, see Amazon S3 Default Bucket Encryption in the
  Amazon S3 User Guide.
- `server_side_encryption_configuration`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The base64-encoded 128-bit MD5 digest of the server-side encryption
  configuration. For requests made using the Amazon Web Services Command Line Interface (CLI)
  or Amazon Web Services SDKs, this field is calculated automatically.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_encryption(
    Bucket,
    ServerSideEncryptionConfiguration;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?encryption",
        Dict{String,Any}(
            "ServerSideEncryptionConfiguration" => ServerSideEncryptionConfiguration
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_encryption(
    Bucket,
    ServerSideEncryptionConfiguration,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?encryption",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ServerSideEncryptionConfiguration" => ServerSideEncryptionConfiguration
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_intelligent_tiering_configuration(bucket, intelligent_tiering_configuration, id)
    put_bucket_intelligent_tiering_configuration(bucket, intelligent_tiering_configuration, id, params::Dict{String,<:Any})

Puts a S3 Intelligent-Tiering configuration to the specified bucket. You can have up to
1,000 S3 Intelligent-Tiering configurations per bucket. The S3 Intelligent-Tiering storage
class is designed to optimize storage costs by automatically moving data to the most
cost-effective storage access tier, without performance impact or operational overhead. S3
Intelligent-Tiering delivers automatic cost savings in three low latency and high
throughput access tiers. To get the lowest storage cost on data that can be accessed in
minutes to hours, you can choose to activate additional archiving capabilities. The S3
Intelligent-Tiering storage class is the ideal storage class for data with unknown,
changing, or unpredictable access patterns, independent of object size or retention period.
If the size of an object is less than 128 KB, it is not monitored and not eligible for
auto-tiering. Smaller objects can be stored, but they are always charged at the Frequent
Access tier rates in the S3 Intelligent-Tiering storage class. For more information, see
Storage class for automatically optimizing frequently and infrequently accessed objects.
Operations related to PutBucketIntelligentTieringConfiguration include:
DeleteBucketIntelligentTieringConfiguration     GetBucketIntelligentTieringConfiguration
 ListBucketIntelligentTieringConfigurations     You only need S3 Intelligent-Tiering
enabled on a bucket if you want to automatically move objects stored in the S3
Intelligent-Tiering storage class to the Archive Access or Deep Archive Access tier.
Special Errors     HTTP 400 Bad Request Error     Code: InvalidArgument    Cause: Invalid
Argument      HTTP 400 Bad Request Error     Code: TooManyConfigurations    Cause: You are
attempting to create a new configuration but have already reached the 1,000-configuration
limit.       HTTP 403 Forbidden Error     Code: AccessDenied    Cause: You are not the
owner of the specified bucket, or you do not have the s3:PutIntelligentTieringConfiguration
bucket permission to set the configuration on the bucket.

# Arguments
- `bucket`: The name of the Amazon S3 bucket whose configuration you want to modify or
  retrieve.
- `intelligent_tiering_configuration`: Container for S3 Intelligent-Tiering configuration.
- `id`: The ID used to identify the S3 Intelligent-Tiering configuration.

"""
function put_bucket_intelligent_tiering_configuration(
    Bucket,
    IntelligentTieringConfiguration,
    id;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?intelligent-tiering",
        Dict{String,Any}(
            "IntelligentTieringConfiguration" => IntelligentTieringConfiguration, "id" => id
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_intelligent_tiering_configuration(
    Bucket,
    IntelligentTieringConfiguration,
    id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?intelligent-tiering",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "IntelligentTieringConfiguration" => IntelligentTieringConfiguration,
                    "id" => id,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_inventory_configuration(bucket, inventory_configuration, id)
    put_bucket_inventory_configuration(bucket, inventory_configuration, id, params::Dict{String,<:Any})

This implementation of the PUT action adds an inventory configuration (identified by the
inventory ID) to the bucket. You can have up to 1,000 inventory configurations per bucket.
Amazon S3 inventory generates inventories of the objects in the bucket on a daily or weekly
basis, and the results are published to a flat file. The bucket that is inventoried is
called the source bucket, and the bucket where the inventory flat file is stored is called
the destination bucket. The destination bucket must be in the same Amazon Web Services
Region as the source bucket.  When you configure an inventory for a source bucket, you
specify the destination bucket where you want the inventory to be stored, and whether to
generate the inventory daily or weekly. You can also configure what object metadata to
include and whether to inventory all object versions or only current versions. For more
information, see Amazon S3 Inventory in the Amazon S3 User Guide.  You must create a bucket
policy on the destination bucket to grant permissions to Amazon S3 to write objects to the
bucket in the defined location. For an example policy, see  Granting Permissions for Amazon
S3 Inventory and Storage Class Analysis.  To use this operation, you must have permissions
to perform the s3:PutInventoryConfiguration action. The bucket owner has this permission by
default and can grant this permission to others. For more information about permissions,
see Permissions Related to Bucket Subresource Operations and Managing Access Permissions to
Your Amazon S3 Resources in the Amazon S3 User Guide.  Special Errors     HTTP 400 Bad
Request Error     Code: InvalidArgument    Cause: Invalid Argument      HTTP 400 Bad
Request Error     Code: TooManyConfigurations    Cause: You are attempting to create a new
configuration but have already reached the 1,000-configuration limit.       HTTP 403
Forbidden Error     Code: AccessDenied    Cause: You are not the owner of the specified
bucket, or you do not have the s3:PutInventoryConfiguration bucket permission to set the
configuration on the bucket.       Related Resources     GetBucketInventoryConfiguration
 DeleteBucketInventoryConfiguration     ListBucketInventoryConfigurations

# Arguments
- `bucket`: The name of the bucket where the inventory configuration will be stored.
- `inventory_configuration`: Specifies the inventory configuration.
- `id`: The ID used to identify the inventory configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_inventory_configuration(
    Bucket, InventoryConfiguration, id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?inventory",
        Dict{String,Any}("InventoryConfiguration" => InventoryConfiguration, "id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_inventory_configuration(
    Bucket,
    InventoryConfiguration,
    id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?inventory",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "InventoryConfiguration" => InventoryConfiguration, "id" => id
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_lifecycle(bucket)
    put_bucket_lifecycle(bucket, params::Dict{String,<:Any})

 For an updated version of this API, see PutBucketLifecycleConfiguration. This version has
been deprecated. Existing lifecycle configurations will work. For new lifecycle
configurations, use the updated API.   Creates a new lifecycle configuration for the bucket
or replaces an existing lifecycle configuration. For information about lifecycle
configuration, see Object Lifecycle Management in the Amazon S3 User Guide.  By default,
all Amazon S3 resources, including buckets, objects, and related subresources (for example,
lifecycle configuration and website configuration) are private. Only the resource owner,
the Amazon Web Services account that created the resource, can access it. The resource
owner can optionally grant access permissions to others by writing an access policy. For
this operation, users must get the s3:PutLifecycleConfiguration permission. You can also
explicitly deny permissions. Explicit denial also supersedes any other permissions. If you
want to prevent users or accounts from removing or deleting objects from your bucket, you
must deny them permissions for the following actions:     s3:DeleteObject
s3:DeleteObjectVersion     s3:PutLifecycleConfiguration    For more information about
permissions, see Managing Access Permissions to your Amazon S3 Resources in the Amazon S3
User Guide. For more examples of transitioning objects to storage classes such as
STANDARD_IA or ONEZONE_IA, see Examples of Lifecycle Configuration.  Related Resources
GetBucketLifecycle(Deprecated)    GetBucketLifecycleConfiguration     RestoreObject    By
default, a resource owner—in this case, a bucket owner, which is the Amazon Web Services
account that created the bucket—can perform any of the operations. A resource owner can
also grant others permission to perform the operation. For more information, see the
following topics in the Amazon S3 User Guide:     Specifying Permissions in a Policy
Managing Access Permissions to your Amazon S3 Resources

# Arguments
- `bucket`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`:  For requests made using the Amazon Web Services Command Line Interface
  (CLI) or Amazon Web Services SDKs, this field is calculated automatically.
- `"LifecycleConfiguration"`:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_lifecycle(Bucket; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "PUT",
        "/$(Bucket)?lifecycle";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_lifecycle(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?lifecycle",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_lifecycle_configuration(bucket)
    put_bucket_lifecycle_configuration(bucket, params::Dict{String,<:Any})

Creates a new lifecycle configuration for the bucket or replaces an existing lifecycle
configuration. For information about lifecycle configuration, see Managing your storage
lifecycle.  Bucket lifecycle configuration now supports specifying a lifecycle rule using
an object key name prefix, one or more object tags, or a combination of both. Accordingly,
this section describes the latest API. The previous version of the API supported filtering
based only on an object key name prefix, which is supported for backward compatibility. For
the related API description, see PutBucketLifecycle.   Rules  You specify the lifecycle
configuration in your request body. The lifecycle configuration is specified as XML
consisting of one or more rules. Each rule consists of the following:   Filter identifying
a subset of objects to which the rule applies. The filter can be based on a key name
prefix, object tags, or a combination of both.   Status whether the rule is in effect.
One or more lifecycle transition and expiration actions that you want Amazon S3 to perform
on the objects identified by the filter. If the state of your bucket is versioning-enabled
or versioning-suspended, you can have many versions of the same object (one current version
and zero or more noncurrent versions). Amazon S3 provides predefined actions that you can
specify for current and noncurrent object versions.   For more information, see Object
Lifecycle Management and Lifecycle Configuration Elements.  Permissions  By default, all
Amazon S3 resources are private, including buckets, objects, and related subresources (for
example, lifecycle configuration and website configuration). Only the resource owner (that
is, the Amazon Web Services account that created it) can access the resource. The resource
owner can optionally grant access permissions to others by writing an access policy. For
this operation, a user must get the s3:PutLifecycleConfiguration permission. You can also
explicitly deny permissions. Explicit deny also supersedes any other permissions. If you
want to block users or accounts from removing or deleting objects from your bucket, you
must deny them permissions for the following actions:   s3:DeleteObject
s3:DeleteObjectVersion   s3:PutLifecycleConfiguration   For more information about
permissions, see Managing Access Permissions to Your Amazon S3 Resources. The following are
related to PutBucketLifecycleConfiguration:    Examples of Lifecycle Configuration
GetBucketLifecycleConfiguration     DeleteBucketLifecycle

# Arguments
- `bucket`: The name of the bucket for which to set the configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"LifecycleConfiguration"`: Container for lifecycle rules. You can add as many as 1,000
  rules.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_lifecycle_configuration(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?lifecycle";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_lifecycle_configuration(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?lifecycle",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_logging(bucket, bucket_logging_status)
    put_bucket_logging(bucket, bucket_logging_status, params::Dict{String,<:Any})

Set the logging parameters for a bucket and to specify permissions for who can view and
modify the logging parameters. All logs are saved to buckets in the same Amazon Web
Services Region as the source bucket. To set the logging status of a bucket, you must be
the bucket owner. The bucket owner is automatically granted FULL_CONTROL to all logs. You
use the Grantee request element to grant access to other people. The Permissions request
element specifies the kind of access the grantee has to the logs.  If the target bucket for
log delivery uses the bucket owner enforced setting for S3 Object Ownership, you can't use
the Grantee request element to grant access to others. Permissions can only be granted
using policies. For more information, see Permissions for server access log delivery in the
Amazon S3 User Guide.   Grantee Values  You can specify the person (grantee) to whom you're
assigning access rights (using request elements) in the following ways:   By the person's
ID:  &lt;Grantee xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
xsi:type=\"CanonicalUser\"&gt;&lt;ID&gt;&lt;&gt;ID&lt;&gt;&lt;/ID&gt;&lt;DisplayName&gt;&lt
;&gt;GranteesEmail&lt;&gt;&lt;/DisplayName&gt; &lt;/Grantee&gt;  DisplayName is optional
and ignored in the request.   By Email address:   &lt;Grantee
xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
xsi:type=\"AmazonCustomerByEmail\"&gt;&lt;EmailAddress&gt;&lt;&gt;Grantees@email.com&lt;&gt
;&lt;/EmailAddress&gt;&lt;/Grantee&gt;  The grantee is resolved to the CanonicalUser and,
in a response to a GET Object acl request, appears as the CanonicalUser.   By URI:
&lt;Grantee xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
xsi:type=\"Group\"&gt;&lt;URI&gt;&lt;&gt;http://acs.amazonaws.com/groups/global/Authenticate
dUsers&lt;&gt;&lt;/URI&gt;&lt;/Grantee&gt;    To enable logging, you use LoggingEnabled and
its children request elements. To disable logging, you use an empty BucketLoggingStatus
request element:  &lt;BucketLoggingStatus xmlns=\"http://doc.s3.amazonaws.com/2006-03-01\"
/&gt;  For more information about server access logging, see Server Access Logging in the
Amazon S3 User Guide.  For more information about creating a bucket, see CreateBucket. For
more information about returning the logging status of a bucket, see GetBucketLogging. The
following operations are related to PutBucketLogging:    PutObject     DeleteBucket
CreateBucket     GetBucketLogging

# Arguments
- `bucket`: The name of the bucket for which to set the logging parameters.
- `bucket_logging_status`: Container for logging status information.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The MD5 hash of the PutBucketLogging request body. For requests made
  using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs,
  this field is calculated automatically.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_logging(
    Bucket, BucketLoggingStatus; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?logging",
        Dict{String,Any}("BucketLoggingStatus" => BucketLoggingStatus);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_logging(
    Bucket,
    BucketLoggingStatus,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?logging",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("BucketLoggingStatus" => BucketLoggingStatus),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_metrics_configuration(bucket, metrics_configuration, id)
    put_bucket_metrics_configuration(bucket, metrics_configuration, id, params::Dict{String,<:Any})

Sets a metrics configuration (specified by the metrics configuration ID) for the bucket.
You can have up to 1,000 metrics configurations per bucket. If you're updating an existing
metrics configuration, note that this is a full replacement of the existing metrics
configuration. If you don't include the elements you want to keep, they are erased. To use
this operation, you must have permissions to perform the s3:PutMetricsConfiguration action.
The bucket owner has this permission by default. The bucket owner can grant this permission
to others. For more information about permissions, see Permissions Related to Bucket
Subresource Operations and Managing Access Permissions to Your Amazon S3 Resources. For
information about CloudWatch request metrics for Amazon S3, see Monitoring Metrics with
Amazon CloudWatch. The following operations are related to PutBucketMetricsConfiguration:
 DeleteBucketMetricsConfiguration     GetBucketMetricsConfiguration
ListBucketMetricsConfigurations     GetBucketLifecycle has the following special error:
Error code: TooManyConfigurations    Description: You are attempting to create a new
configuration but have already reached the 1,000-configuration limit.   HTTP Status Code:
HTTP 400 Bad Request

# Arguments
- `bucket`: The name of the bucket for which the metrics configuration is set.
- `metrics_configuration`: Specifies the metrics configuration.
- `id`: The ID used to identify the metrics configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_metrics_configuration(
    Bucket, MetricsConfiguration, id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?metrics",
        Dict{String,Any}("MetricsConfiguration" => MetricsConfiguration, "id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_metrics_configuration(
    Bucket,
    MetricsConfiguration,
    id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?metrics",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "MetricsConfiguration" => MetricsConfiguration, "id" => id
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_notification(bucket, notification_configuration)
    put_bucket_notification(bucket, notification_configuration, params::Dict{String,<:Any})

 No longer used, see the PutBucketNotificationConfiguration operation.

# Arguments
- `bucket`: The name of the bucket.
- `notification_configuration`: The container for the configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The MD5 hash of the PutPublicAccessBlock request body. For requests made
  using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs,
  this field is calculated automatically.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_notification(
    Bucket, NotificationConfiguration; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?notification",
        Dict{String,Any}("NotificationConfiguration" => NotificationConfiguration);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_notification(
    Bucket,
    NotificationConfiguration,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?notification",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("NotificationConfiguration" => NotificationConfiguration),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_notification_configuration(bucket, notification_configuration)
    put_bucket_notification_configuration(bucket, notification_configuration, params::Dict{String,<:Any})

Enables notifications of specified events for a bucket. For more information about event
notifications, see Configuring Event Notifications. Using this API, you can replace an
existing notification configuration. The configuration is an XML file that defines the
event types that you want Amazon S3 to publish and the destination where you want Amazon S3
to publish an event notification when it detects an event of the specified type. By
default, your bucket has no event notifications configured. That is, the notification
configuration will be an empty NotificationConfiguration.
&lt;NotificationConfiguration&gt;   &lt;/NotificationConfiguration&gt;  This action
replaces the existing notification configuration with the configuration you include in the
request body. After Amazon S3 receives this request, it first verifies that any Amazon
Simple Notification Service (Amazon SNS) or Amazon Simple Queue Service (Amazon SQS)
destination exists, and that the bucket owner has permission to publish to it by sending a
test notification. In the case of Lambda destinations, Amazon S3 verifies that the Lambda
function permissions grant Amazon S3 permission to invoke the function from the Amazon S3
bucket. For more information, see Configuring Notifications for Amazon S3 Events. You can
disable notifications by adding the empty NotificationConfiguration element. By default,
only the bucket owner can configure notifications on a bucket. However, bucket owners can
use a bucket policy to grant permission to other users to set this configuration with
s3:PutBucketNotification permission.  The PUT notification is an atomic operation. For
example, suppose your notification configuration includes SNS topic, SQS queue, and Lambda
function configurations. When you send a PUT request with this configuration, Amazon S3
sends test messages to your SNS topic. If the message fails, the entire PUT action will
fail, and Amazon S3 will not add the configuration to your bucket.   Responses  If the
configuration in the request body includes only one TopicConfiguration specifying only the
s3:ReducedRedundancyLostObject event type, the response will also include the
x-amz-sns-test-message-id header containing the message ID of the test notification sent to
the topic. The following action is related to PutBucketNotificationConfiguration:
GetBucketNotificationConfiguration

# Arguments
- `bucket`: The name of the bucket.
- `notification_configuration`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-skip-destination-validation"`: Skips validation of Amazon SQS, Amazon SNS, and
  Lambda destinations. True or false value.
"""
function put_bucket_notification_configuration(
    Bucket, NotificationConfiguration; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?notification",
        Dict{String,Any}("NotificationConfiguration" => NotificationConfiguration);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_notification_configuration(
    Bucket,
    NotificationConfiguration,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?notification",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("NotificationConfiguration" => NotificationConfiguration),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_ownership_controls(bucket, ownership_controls)
    put_bucket_ownership_controls(bucket, ownership_controls, params::Dict{String,<:Any})

Creates or modifies OwnershipControls for an Amazon S3 bucket. To use this operation, you
must have the s3:PutBucketOwnershipControls permission. For more information about Amazon
S3 permissions, see Specifying permissions in a policy.  For information about Amazon S3
Object Ownership, see Using object ownership.  The following operations are related to
PutBucketOwnershipControls:    GetBucketOwnershipControls     DeleteBucketOwnershipControls


# Arguments
- `bucket`: The name of the Amazon S3 bucket whose OwnershipControls you want to set.
- `ownership_controls`: The OwnershipControls (BucketOwnerEnforced, BucketOwnerPreferred,
  or ObjectWriter) that you want to apply to this Amazon S3 bucket.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The MD5 hash of the OwnershipControls request body.  For requests made
  using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services SDKs,
  this field is calculated automatically.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_ownership_controls(
    Bucket, OwnershipControls; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?ownershipControls",
        Dict{String,Any}("OwnershipControls" => OwnershipControls);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_ownership_controls(
    Bucket,
    OwnershipControls,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?ownershipControls",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("OwnershipControls" => OwnershipControls), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_policy(bucket, policy)
    put_bucket_policy(bucket, policy, params::Dict{String,<:Any})

Applies an Amazon S3 bucket policy to an Amazon S3 bucket. If you are using an identity
other than the root user of the Amazon Web Services account that owns the bucket, the
calling identity must have the PutBucketPolicy permissions on the specified bucket and
belong to the bucket owner's account in order to use this operation. If you don't have
PutBucketPolicy permissions, Amazon S3 returns a 403 Access Denied error. If you have the
correct permissions, but you're not using an identity that belongs to the bucket owner's
account, Amazon S3 returns a 405 Method Not Allowed error.   As a security precaution, the
root user of the Amazon Web Services account that owns a bucket can always use this
operation, even if the policy explicitly denies the root user the ability to perform this
action.   For more information, see Bucket policy examples. The following operations are
related to PutBucketPolicy:    CreateBucket     DeleteBucket

# Arguments
- `bucket`: The name of the bucket.
- `policy`: The bucket policy as a JSON document.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The MD5 hash of the request body. For requests made using the Amazon Web
  Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated
  automatically.
- `"x-amz-confirm-remove-self-bucket-access"`: Set this parameter to true to confirm that
  you want to remove your permissions to change this bucket policy in the future.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_policy(
    Bucket, Policy; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?policy",
        Dict{String,Any}("Policy" => Policy);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_policy(
    Bucket,
    Policy,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?policy",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Policy" => Policy), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_replication(bucket, replication_configuration)
    put_bucket_replication(bucket, replication_configuration, params::Dict{String,<:Any})

 Creates a replication configuration or replaces an existing one. For more information, see
Replication in the Amazon S3 User Guide.  Specify the replication configuration in the
request body. In the replication configuration, you provide the name of the destination
bucket or buckets where you want Amazon S3 to replicate objects, the IAM role that Amazon
S3 can assume to replicate objects on your behalf, and other relevant information. A
replication configuration must include at least one rule, and can contain a maximum of
1,000. Each rule identifies a subset of objects to replicate by filtering the objects in
the source bucket. To choose additional subsets of objects to replicate, add a rule for
each subset. To specify a subset of the objects in the source bucket to apply a replication
rule to, add the Filter element as a child of the Rule element. You can filter objects
based on an object key prefix, one or more object tags, or both. When you add the Filter
element in the configuration, you must also add the following elements:
DeleteMarkerReplication, Status, and Priority.  If you are using an earlier version of the
replication configuration, Amazon S3 handles replication of delete markers differently. For
more information, see Backward Compatibility.  For information about enabling versioning on
a bucket, see Using Versioning.  Handling Replication of Encrypted Objects  By default,
Amazon S3 doesn't replicate objects that are stored at rest using server-side encryption
with KMS keys. To replicate Amazon Web Services KMS-encrypted objects, add the following:
SourceSelectionCriteria, SseKmsEncryptedObjects, Status, EncryptionConfiguration, and
ReplicaKmsKeyID. For information about replication configuration, see Replicating Objects
Created with SSE Using KMS keys. For information on PutBucketReplication errors, see List
of replication-related error codes   Permissions  To create a PutBucketReplication request,
you must have s3:PutReplicationConfiguration permissions for the bucket.  By default, a
resource owner, in this case the Amazon Web Services account that created the bucket, can
perform this operation. The resource owner can also grant others permissions to perform the
operation. For more information about permissions, see Specifying Permissions in a Policy
and Managing Access Permissions to Your Amazon S3 Resources.  To perform this operation,
the user or role performing the action must have the iam:PassRole permission.  The
following operations are related to PutBucketReplication:    GetBucketReplication
DeleteBucketReplication

# Arguments
- `bucket`: The name of the bucket
- `replication_configuration`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The base64-encoded 128-bit MD5 digest of the data. You must use this
  header as a message integrity check to verify that the request body was not corrupted in
  transit. For more information, see RFC 1864. For requests made using the Amazon Web
  Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated
  automatically.
- `"x-amz-bucket-object-lock-token"`: A token to allow Object Lock to be enabled for an
  existing bucket.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_replication(
    Bucket, ReplicationConfiguration; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?replication",
        Dict{String,Any}("ReplicationConfiguration" => ReplicationConfiguration);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_replication(
    Bucket,
    ReplicationConfiguration,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?replication",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ReplicationConfiguration" => ReplicationConfiguration),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_request_payment(bucket, request_payment_configuration)
    put_bucket_request_payment(bucket, request_payment_configuration, params::Dict{String,<:Any})

Sets the request payment configuration for a bucket. By default, the bucket owner pays for
downloads from the bucket. This configuration parameter enables the bucket owner (only) to
specify that the person requesting the download will be charged for the download. For more
information, see Requester Pays Buckets. The following operations are related to
PutBucketRequestPayment:    CreateBucket     GetBucketRequestPayment

# Arguments
- `bucket`: The bucket name.
- `request_payment_configuration`: Container for Payer.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The base64-encoded 128-bit MD5 digest of the data. You must use this
  header as a message integrity check to verify that the request body was not corrupted in
  transit. For more information, see RFC 1864. For requests made using the Amazon Web
  Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated
  automatically.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_request_payment(
    Bucket, RequestPaymentConfiguration; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?requestPayment",
        Dict{String,Any}("RequestPaymentConfiguration" => RequestPaymentConfiguration);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_request_payment(
    Bucket,
    RequestPaymentConfiguration,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?requestPayment",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "RequestPaymentConfiguration" => RequestPaymentConfiguration
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_tagging(bucket, tagging)
    put_bucket_tagging(bucket, tagging, params::Dict{String,<:Any})

Sets the tags for a bucket. Use tags to organize your Amazon Web Services bill to reflect
your own cost structure. To do this, sign up to get your Amazon Web Services account bill
with tag key values included. Then, to see the cost of combined resources, organize your
billing information according to resources with the same tag key values. For example, you
can tag several resources with a specific application name, and then organize your billing
information to see the total cost of that application across several services. For more
information, see Cost Allocation and Tagging and Using Cost Allocation in Amazon S3 Bucket
Tags.   When this operation sets the tags for a bucket, it will overwrite any current tags
the bucket already has. You cannot use this operation to add tags to an existing list of
tags.  To use this operation, you must have permissions to perform the s3:PutBucketTagging
action. The bucket owner has this permission by default and can grant this permission to
others. For more information about permissions, see Permissions Related to Bucket
Subresource Operations and Managing Access Permissions to Your Amazon S3 Resources.
PutBucketTagging has the following special errors:   Error code: InvalidTagError
Description: The tag provided was not a valid tag. This error can occur if the tag did not
pass input validation. For information about tag restrictions, see User-Defined Tag
Restrictions and Amazon Web Services-Generated Cost Allocation Tag Restrictions.     Error
code: MalformedXMLError    Description: The XML provided does not match the schema.
Error code: OperationAbortedError     Description: A conflicting conditional action is
currently in progress against this resource. Please try again.     Error code:
InternalError    Description: The service was unable to apply the provided tag to the
bucket.     The following operations are related to PutBucketTagging:    GetBucketTagging
  DeleteBucketTagging

# Arguments
- `bucket`: The bucket name.
- `tagging`: Container for the TagSet and Tag elements.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The base64-encoded 128-bit MD5 digest of the data. You must use this
  header as a message integrity check to verify that the request body was not corrupted in
  transit. For more information, see RFC 1864. For requests made using the Amazon Web
  Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated
  automatically.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_tagging(
    Bucket, Tagging; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?tagging",
        Dict{String,Any}("Tagging" => Tagging);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_tagging(
    Bucket,
    Tagging,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?tagging",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Tagging" => Tagging), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_versioning(bucket, versioning_configuration)
    put_bucket_versioning(bucket, versioning_configuration, params::Dict{String,<:Any})

Sets the versioning state of an existing bucket. To set the versioning state, you must be
the bucket owner. You can set the versioning state with one of the following values:
Enabled—Enables versioning for the objects in the bucket. All objects added to the bucket
receive a unique version ID.  Suspended—Disables versioning for the objects in the
bucket. All objects added to the bucket receive the version ID null. If the versioning
state has never been set on a bucket, it has no versioning state; a GetBucketVersioning
request does not return a versioning state value. If the bucket owner enables MFA Delete in
the bucket versioning configuration, the bucket owner must include the x-amz-mfa request
header and the Status and the MfaDelete request elements in a request to set the versioning
state of the bucket.  If you have an object expiration lifecycle policy in your
non-versioned bucket and you want to maintain the same permanent delete behavior when you
enable versioning, you must add a noncurrent expiration policy. The noncurrent expiration
lifecycle policy will manage the deletes of the noncurrent object versions in the
version-enabled bucket. (A version-enabled bucket maintains one current and zero or more
noncurrent object versions.) For more information, see Lifecycle and Versioning.   Related
Resources     CreateBucket     DeleteBucket     GetBucketVersioning

# Arguments
- `bucket`: The bucket name.
- `versioning_configuration`: Container for setting the versioning state.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: &gt;The base64-encoded 128-bit MD5 digest of the data. You must use this
  header as a message integrity check to verify that the request body was not corrupted in
  transit. For more information, see RFC 1864. For requests made using the Amazon Web
  Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated
  automatically.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-mfa"`: The concatenation of the authentication device's serial number, a space,
  and the value that is displayed on your authentication device.
"""
function put_bucket_versioning(
    Bucket, VersioningConfiguration; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?versioning",
        Dict{String,Any}("VersioningConfiguration" => VersioningConfiguration);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_versioning(
    Bucket,
    VersioningConfiguration,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?versioning",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("VersioningConfiguration" => VersioningConfiguration),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_website(bucket, website_configuration)
    put_bucket_website(bucket, website_configuration, params::Dict{String,<:Any})

Sets the configuration of the website that is specified in the website subresource. To
configure a bucket as a website, you can add this subresource on the bucket with website
configuration information such as the file name of the index document and any redirect
rules. For more information, see Hosting Websites on Amazon S3. This PUT action requires
the S3:PutBucketWebsite permission. By default, only the bucket owner can configure the
website attached to a bucket; however, bucket owners can allow other users to set the
website configuration by writing a bucket policy that grants them the S3:PutBucketWebsite
permission. To redirect all website requests sent to the bucket's website endpoint, you add
a website configuration with the following elements. Because all requests are sent to
another website, you don't need to provide index document name for the bucket.
WebsiteConfiguration     RedirectAllRequestsTo     HostName     Protocol    If you want
granular control over redirects, you can use the following elements to add routing rules
that describe conditions for redirecting requests and information about the redirect
destination. In this case, the website configuration must provide an index document for the
bucket, because some requests might not be redirected.     WebsiteConfiguration
IndexDocument     Suffix     ErrorDocument     Key     RoutingRules     RoutingRule
Condition     HttpErrorCodeReturnedEquals     KeyPrefixEquals     Redirect     Protocol
HostName     ReplaceKeyPrefixWith     ReplaceKeyWith     HttpRedirectCode    Amazon S3 has
a limitation of 50 routing rules per website configuration. If you require more than 50
routing rules, you can use object redirect. For more information, see Configuring an Object
Redirect in the Amazon S3 User Guide.

# Arguments
- `bucket`: The bucket name.
- `website_configuration`: Container for the request.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The base64-encoded 128-bit MD5 digest of the data. You must use this
  header as a message integrity check to verify that the request body was not corrupted in
  transit. For more information, see RFC 1864. For requests made using the Amazon Web
  Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated
  automatically.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_bucket_website(
    Bucket, WebsiteConfiguration; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?website",
        Dict{String,Any}("WebsiteConfiguration" => WebsiteConfiguration);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_website(
    Bucket,
    WebsiteConfiguration,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?website",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("WebsiteConfiguration" => WebsiteConfiguration),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_object(bucket, key)
    put_object(bucket, key, params::Dict{String,<:Any})

Adds an object to a bucket. You must have WRITE permissions on a bucket to add an object to
it. Amazon S3 never adds partial objects; if you receive a success response, Amazon S3
added the entire object to the bucket. Amazon S3 is a distributed system. If it receives
multiple write requests for the same object simultaneously, it overwrites all but the last
object written. Amazon S3 does not provide object locking; if you need this, make sure to
build it into your application layer or use versioning instead. To ensure that data is not
corrupted traversing the network, use the Content-MD5 header. When you use this header,
Amazon S3 checks the object against the provided MD5 value and, if they do not match,
returns an error. Additionally, you can calculate the MD5 while putting an object to Amazon
S3 and compare the returned ETag to the calculated MD5 value.    To successfully complete
the PutObject request, you must have the s3:PutObject in your IAM permissions.   To
successfully change the objects acl of your PutObject request, you must have the
s3:PutObjectAcl in your IAM permissions.    The Content-MD5 header is required for any
request to upload an object with a retention period configured using Amazon S3 Object Lock.
For more information about Amazon S3 Object Lock, see Amazon S3 Object Lock Overview in the
Amazon S3 User Guide.      Server-side Encryption  You can optionally request server-side
encryption. With server-side encryption, Amazon S3 encrypts your data as it writes it to
disks in its data centers and decrypts the data when you access it. You have the option to
provide your own encryption key or use Amazon Web Services managed encryption keys (SSE-S3
or SSE-KMS). For more information, see Using Server-Side Encryption. If you request
server-side encryption using Amazon Web Services Key Management Service (SSE-KMS), you can
enable an S3 Bucket Key at the object-level. For more information, see Amazon S3 Bucket
Keys in the Amazon S3 User Guide.  Access Control List (ACL)-Specific Request Headers  You
can use headers to grant ACL- based permissions. By default, all objects are private. Only
the owner has full access control. When adding a new object, you can grant permissions to
individual Amazon Web Services accounts or to predefined groups defined by Amazon S3. These
permissions are then added to the ACL on the object. For more information, see Access
Control List (ACL) Overview and Managing ACLs Using the REST API.  If the bucket that
you're uploading objects to uses the bucket owner enforced setting for S3 Object Ownership,
ACLs are disabled and no longer affect permissions. Buckets that use this setting only
accept PUT requests that don't specify an ACL or PUT requests that specify bucket owner
full control ACLs, such as the bucket-owner-full-control canned ACL or an equivalent form
of this ACL expressed in the XML format. PUT requests that contain other ACLs (for example,
custom grants to certain Amazon Web Services accounts) fail and return a 400 error with the
error code AccessControlListNotSupported. For more information, see  Controlling ownership
of objects and disabling ACLs in the Amazon S3 User Guide.  If your bucket uses the bucket
owner enforced setting for Object Ownership, all objects written to the bucket by any
account will be owned by the bucket owner.   Storage Class Options  By default, Amazon S3
uses the STANDARD Storage Class to store newly created objects. The STANDARD storage class
provides high durability and high availability. Depending on performance needs, you can
specify a different Storage Class. Amazon S3 on Outposts only uses the OUTPOSTS Storage
Class. For more information, see Storage Classes in the Amazon S3 User Guide.  Versioning
If you enable versioning for a bucket, Amazon S3 automatically generates a unique version
ID for the object being stored. Amazon S3 returns this ID in the response. When you enable
versioning for a bucket, if Amazon S3 receives multiple write requests for the same object
simultaneously, it stores all of the objects. For more information about versioning, see
Adding Objects to Versioning Enabled Buckets. For information about returning the
versioning state of a bucket, see GetBucketVersioning.   Related Resources     CopyObject
  DeleteObject

# Arguments
- `bucket`: The bucket name to which the PUT action was initiated.  When using this action
  with an access point, you must direct requests to the access point hostname. The access
  point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide. When using this action with Amazon S3 on Outposts, you
  must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the
  form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: Object key for which the PUT action was initiated.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Body"`: Object data.
- `"Cache-Control"`:  Can be used to specify caching behavior along the request/reply
  chain. For more information, see
  http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.
- `"Content-Disposition"`: Specifies presentational information for the object. For more
  information, see http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1.
- `"Content-Encoding"`: Specifies what content encodings have been applied to the object
  and thus what decoding mechanisms must be applied to obtain the media-type referenced by
  the Content-Type header field. For more information, see
  http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11.
- `"Content-Language"`: The language the content is in.
- `"Content-Length"`: Size of the body in bytes. This parameter is useful when the size of
  the body cannot be determined automatically. For more information, see
  http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13.
- `"Content-MD5"`: The base64-encoded 128-bit MD5 digest of the message (without the
  headers) according to RFC 1864. This header can be used as a message integrity check to
  verify that the data is the same data that was originally sent. Although it is optional, we
  recommend using the Content-MD5 mechanism as an end-to-end integrity check. For more
  information about REST request authentication, see REST Authentication.
- `"Content-Type"`: A standard MIME type describing the format of the contents. For more
  information, see http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17.
- `"Expires"`: The date and time at which the object is no longer cacheable. For more
  information, see http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21.
- `"x-amz-acl"`: The canned ACL to apply to the object. For more information, see Canned
  ACL. This action is not supported by Amazon S3 on Outposts.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-grant-full-control"`: Gives the grantee READ, READ_ACP, and WRITE_ACP permissions
  on the object. This action is not supported by Amazon S3 on Outposts.
- `"x-amz-grant-read"`: Allows grantee to read the object data and its metadata. This
  action is not supported by Amazon S3 on Outposts.
- `"x-amz-grant-read-acp"`: Allows grantee to read the object ACL. This action is not
  supported by Amazon S3 on Outposts.
- `"x-amz-grant-write-acp"`: Allows grantee to write the ACL for the applicable object.
  This action is not supported by Amazon S3 on Outposts.
- `"x-amz-meta-"`: A map of metadata to store with the object in S3.
- `"x-amz-object-lock-legal-hold"`: Specifies whether a legal hold will be applied to this
  object. For more information about S3 Object Lock, see Object Lock.
- `"x-amz-object-lock-mode"`: The Object Lock mode that you want to apply to this object.
- `"x-amz-object-lock-retain-until-date"`: The date and time when you want this object's
  Object Lock to expire. Must be formatted as a timestamp parameter.
- `"x-amz-request-payer"`:
- `"x-amz-server-side-encryption"`: The server-side encryption algorithm used when storing
  this object in Amazon S3 (for example, AES256, aws:kms).
- `"x-amz-server-side-encryption-aws-kms-key-id"`: If x-amz-server-side-encryption is
  present and has the value of aws:kms, this header specifies the ID of the Amazon Web
  Services Key Management Service (Amazon Web Services KMS) symmetrical customer managed key
  that was used for the object. If you specify x-amz-server-side-encryption:aws:kms, but do
  not provide x-amz-server-side-encryption-aws-kms-key-id, Amazon S3 uses the Amazon Web
  Services managed key to protect the data. If the KMS key does not exist in the same account
  issuing the command, you must use the full ARN and not just the ID.
- `"x-amz-server-side-encryption-bucket-key-enabled"`: Specifies whether Amazon S3 should
  use an S3 Bucket Key for object encryption with server-side encryption using AWS KMS
  (SSE-KMS). Setting this header to true causes Amazon S3 to use an S3 Bucket Key for object
  encryption with SSE-KMS. Specifying this header with a PUT action doesn’t affect
  bucket-level settings for S3 Bucket Key.
- `"x-amz-server-side-encryption-context"`: Specifies the Amazon Web Services KMS
  Encryption Context to use for object encryption. The value of this header is a
  base64-encoded UTF-8 string holding JSON with the encryption context key-value pairs.
- `"x-amz-server-side-encryption-customer-algorithm"`: Specifies the algorithm to use to
  when encrypting the object (for example, AES256).
- `"x-amz-server-side-encryption-customer-key"`: Specifies the customer-provided encryption
  key for Amazon S3 to use in encrypting data. This value is used to store the object and
  then it is discarded; Amazon S3 does not store the encryption key. The key must be
  appropriate for use with the algorithm specified in the
  x-amz-server-side-encryption-customer-algorithm header.
- `"x-amz-server-side-encryption-customer-key-MD5"`: Specifies the 128-bit MD5 digest of
  the encryption key according to RFC 1321. Amazon S3 uses this header for a message
  integrity check to ensure that the encryption key was transmitted without error.
- `"x-amz-storage-class"`: By default, Amazon S3 uses the STANDARD Storage Class to store
  newly created objects. The STANDARD storage class provides high durability and high
  availability. Depending on performance needs, you can specify a different Storage Class.
  Amazon S3 on Outposts only uses the OUTPOSTS Storage Class. For more information, see
  Storage Classes in the Amazon S3 User Guide.
- `"x-amz-tagging"`: The tag-set for the object. The tag-set must be encoded as URL Query
  parameters. (For example, \"Key1=Value1\")
- `"x-amz-website-redirect-location"`: If the bucket is configured as a website, redirects
  requests for this object to another object in the same bucket or to an external URL. Amazon
  S3 stores the value of this header in the object metadata. For information about object
  metadata, see Object Key and Metadata. In the following example, the request header sets
  the redirect to an object (anotherPage.html) in the same bucket:
  x-amz-website-redirect-location: /anotherPage.html  In the following example, the request
  header sets the object redirect to another website:  x-amz-website-redirect-location:
  http://www.example.com/  For more information about website hosting in Amazon S3, see
  Hosting Websites on Amazon S3 and How to Configure Website Page Redirects.
"""
function put_object(Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "PUT", "/$(Bucket)/$(Key)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function put_object(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_object_acl(bucket, key)
    put_object_acl(bucket, key, params::Dict{String,<:Any})

Uses the acl subresource to set the access control list (ACL) permissions for a new or
existing object in an S3 bucket. You must have WRITE_ACP permission to set the ACL of an
object. For more information, see What permissions can I grant? in the Amazon S3 User
Guide. This action is not supported by Amazon S3 on Outposts. Depending on your application
needs, you can choose to set the ACL on an object using either the request body or the
headers. For example, if you have an existing application that updates a bucket ACL using
the request body, you can continue to use that approach. For more information, see Access
Control List (ACL) Overview in the Amazon S3 User Guide.  If your bucket uses the bucket
owner enforced setting for S3 Object Ownership, ACLs are disabled and no longer affect
permissions. You must use policies to grant access to your bucket and the objects in it.
Requests to set ACLs or update ACLs fail and return the AccessControlListNotSupported error
code. Requests to read ACLs are still supported. For more information, see Controlling
object ownership in the Amazon S3 User Guide.   Access Permissions  You can set access
permissions using one of the following methods:   Specify a canned ACL with the x-amz-acl
request header. Amazon S3 supports a set of predefined ACLs, known as canned ACLs. Each
canned ACL has a predefined set of grantees and permissions. Specify the canned ACL name as
the value of x-amz-acl. If you use this header, you cannot use other access
control-specific headers in your request. For more information, see Canned ACL.   Specify
access permissions explicitly with the x-amz-grant-read, x-amz-grant-read-acp,
x-amz-grant-write-acp, and x-amz-grant-full-control headers. When using these headers, you
specify explicit access permissions and grantees (Amazon Web Services accounts or Amazon S3
groups) who will receive the permission. If you use these ACL-specific headers, you cannot
use x-amz-acl header to set a canned ACL. These parameters map to the set of permissions
that Amazon S3 supports in an ACL. For more information, see Access Control List (ACL)
Overview. You specify each grantee as a type=value pair, where the type is one of the
following:    id – if the value specified is the canonical user ID of an Amazon Web
Services account    uri – if you are granting permissions to a predefined group
emailAddress – if the value specified is the email address of an Amazon Web Services
account  Using email addresses to specify a grantee is only supported in the following
Amazon Web Services Regions:    US East (N. Virginia)   US West (N. California)    US West
(Oregon)    Asia Pacific (Singapore)   Asia Pacific (Sydney)   Asia Pacific (Tokyo)
Europe (Ireland)   South America (São Paulo)   For a list of all the Amazon S3 supported
Regions and endpoints, see Regions and Endpoints in the Amazon Web Services General
Reference.    For example, the following x-amz-grant-read header grants list objects
permission to the two Amazon Web Services accounts identified by their email addresses.
x-amz-grant-read: emailAddress=\"xyz@amazon.com\", emailAddress=\"abc@amazon.com\"     You
can use either a canned ACL or specify access permissions explicitly. You cannot do both.
Grantee Values  You can specify the person (grantee) to whom you're assigning access rights
(using request elements) in the following ways:   By the person's ID:  &lt;Grantee
xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
xsi:type=\"CanonicalUser\"&gt;&lt;ID&gt;&lt;&gt;ID&lt;&gt;&lt;/ID&gt;&lt;DisplayName&gt;&lt
;&gt;GranteesEmail&lt;&gt;&lt;/DisplayName&gt; &lt;/Grantee&gt;  DisplayName is optional
and ignored in the request.   By URI:  &lt;Grantee
xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
xsi:type=\"Group\"&gt;&lt;URI&gt;&lt;&gt;http://acs.amazonaws.com/groups/global/Authenticate
dUsers&lt;&gt;&lt;/URI&gt;&lt;/Grantee&gt;    By Email address:  &lt;Grantee
xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
xsi:type=\"AmazonCustomerByEmail\"&gt;&lt;EmailAddress&gt;&lt;&gt;Grantees@email.com&lt;&gt
;&lt;/EmailAddress&gt;lt;/Grantee&gt;  The grantee is resolved to the CanonicalUser and, in
a response to a GET Object acl request, appears as the CanonicalUser.  Using email
addresses to specify a grantee is only supported in the following Amazon Web Services
Regions:    US East (N. Virginia)   US West (N. California)    US West (Oregon)    Asia
Pacific (Singapore)   Asia Pacific (Sydney)   Asia Pacific (Tokyo)   Europe (Ireland)
South America (São Paulo)   For a list of all the Amazon S3 supported Regions and
endpoints, see Regions and Endpoints in the Amazon Web Services General Reference.
Versioning  The ACL of an object is set at the object version level. By default, PUT sets
the ACL of the current version of an object. To set the ACL of a different version, use the
versionId subresource.  Related Resources     CopyObject     GetObject

# Arguments
- `bucket`: The bucket name that contains the object to which you want to attach the ACL.
  When using this action with an access point, you must direct requests to the access point
  hostname. The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide.
- `key`: Key for which the PUT action was initiated. When using this action with an access
  point, you must direct requests to the access point hostname. The access point hostname
  takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using
  this action with an access point through the Amazon Web Services SDKs, you provide the
  access point ARN in place of the bucket name. For more information about access point ARNs,
  see Using access points in the Amazon S3 User Guide. When using this action with Amazon S3
  on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts
  hostname takes the form
  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AccessControlPolicy"`: Contains the elements that set the ACL permissions for an object
  per grantee.
- `"Content-MD5"`: The base64-encoded 128-bit MD5 digest of the data. This header must be
  used as a message integrity check to verify that the request body was not corrupted in
  transit. For more information, go to RFC 1864.&gt;  For requests made using the Amazon Web
  Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is calculated
  automatically.
- `"versionId"`: VersionId used to reference a specific version of the object.
- `"x-amz-acl"`: The canned ACL to apply to the object. For more information, see Canned
  ACL.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-grant-full-control"`: Allows grantee the read, write, read ACP, and write ACP
  permissions on the bucket. This action is not supported by Amazon S3 on Outposts.
- `"x-amz-grant-read"`: Allows grantee to list the objects in the bucket. This action is
  not supported by Amazon S3 on Outposts.
- `"x-amz-grant-read-acp"`: Allows grantee to read the bucket ACL. This action is not
  supported by Amazon S3 on Outposts.
- `"x-amz-grant-write"`: Allows grantee to create new objects in the bucket. For the bucket
  and object owners of existing objects, also allows deletions and overwrites of those
  objects.
- `"x-amz-grant-write-acp"`: Allows grantee to write the ACL for the applicable bucket.
  This action is not supported by Amazon S3 on Outposts.
- `"x-amz-request-payer"`:
"""
function put_object_acl(Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)?acl";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_object_acl(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)?acl",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_object_legal_hold(bucket, key)
    put_object_legal_hold(bucket, key, params::Dict{String,<:Any})

Applies a Legal Hold configuration to the specified object. For more information, see
Locking Objects. This action is not supported by Amazon S3 on Outposts.

# Arguments
- `bucket`: The bucket name containing the object that you want to place a Legal Hold on.
  When using this action with an access point, you must direct requests to the access point
  hostname. The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide.
- `key`: The key name for the object that you want to place a Legal Hold on.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The MD5 hash for the request body. For requests made using the Amazon
  Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is
  calculated automatically.
- `"LegalHold"`: Container element for the Legal Hold configuration you want to apply to
  the specified object.
- `"versionId"`: The version ID of the object that you want to place a Legal Hold on.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
"""
function put_object_legal_hold(
    Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)?legal-hold";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_object_legal_hold(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)?legal-hold",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_object_lock_configuration(bucket)
    put_object_lock_configuration(bucket, params::Dict{String,<:Any})

Places an Object Lock configuration on the specified bucket. The rule specified in the
Object Lock configuration will be applied by default to every new object placed in the
specified bucket. For more information, see Locking Objects.     The DefaultRetention
settings require both a mode and a period.   The DefaultRetention period can be either Days
or Years but you must select one. You cannot specify Days and Years at the same time.   You
can only enable Object Lock for new buckets. If you want to turn on Object Lock for an
existing bucket, contact Amazon Web Services Support.

# Arguments
- `bucket`: The bucket whose Object Lock configuration you want to create or replace.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The MD5 hash for the request body. For requests made using the Amazon
  Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is
  calculated automatically.
- `"ObjectLockConfiguration"`: The Object Lock configuration that you want to apply to the
  specified bucket.
- `"x-amz-bucket-object-lock-token"`: A token to allow Object Lock to be enabled for an
  existing bucket.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
"""
function put_object_lock_configuration(
    Bucket; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?object-lock";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_object_lock_configuration(
    Bucket, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)?object-lock",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_object_retention(bucket, key)
    put_object_retention(bucket, key, params::Dict{String,<:Any})

Places an Object Retention configuration on an object. For more information, see Locking
Objects. Users or accounts require the s3:PutObjectRetention permission in order to place
an Object Retention configuration on objects. Bypassing a Governance Retention
configuration requires the s3:BypassGovernanceRetention permission.  This action is not
supported by Amazon S3 on Outposts.  Permissions  When the Object Lock retention mode is
set to compliance, you need s3:PutObjectRetention and s3:BypassGovernanceRetention
permissions. For other requests to PutObjectRetention, only s3:PutObjectRetention
permissions are required.

# Arguments
- `bucket`: The bucket name that contains the object you want to apply this Object
  Retention configuration to.  When using this action with an access point, you must direct
  requests to the access point hostname. The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide.
- `key`: The key name for the object that you want to apply this Object Retention
  configuration to.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The MD5 hash for the request body. For requests made using the Amazon
  Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is
  calculated automatically.
- `"Retention"`: The container element for the Object Retention configuration.
- `"versionId"`: The version ID for the object that you want to apply this Object Retention
  configuration to.
- `"x-amz-bypass-governance-retention"`: Indicates whether this action should bypass
  Governance-mode restrictions.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
"""
function put_object_retention(
    Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)?retention";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_object_retention(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)?retention",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_object_tagging(bucket, key, tagging)
    put_object_tagging(bucket, key, tagging, params::Dict{String,<:Any})

Sets the supplied tag-set to an object that already exists in a bucket. A tag is a
key-value pair. You can associate tags with an object by sending a PUT request against the
tagging subresource that is associated with the object. You can retrieve tags by sending a
GET request. For more information, see GetObjectTagging. For tagging-related restrictions
related to characters and encodings, see Tag Restrictions. Note that Amazon S3 limits the
maximum number of tags to 10 tags per object. To use this operation, you must have
permission to perform the s3:PutObjectTagging action. By default, the bucket owner has this
permission and can grant this permission to others. To put tags of any other version, use
the versionId query parameter. You also need permission for the s3:PutObjectVersionTagging
action. For information about the Amazon S3 object tagging feature, see Object Tagging.
Special Errors       Code: InvalidTagError      Cause: The tag provided was not a valid
tag. This error can occur if the tag did not pass input validation. For more information,
see Object Tagging.         Code: MalformedXMLError      Cause: The XML provided does not
match the schema.         Code: OperationAbortedError      Cause: A conflicting conditional
action is currently in progress against this resource. Please try again.         Code:
InternalError     Cause: The service was unable to apply the provided tag to the object.
   Related Resources     GetObjectTagging     DeleteObjectTagging

# Arguments
- `bucket`: The bucket name containing the object.  When using this action with an access
  point, you must direct requests to the access point hostname. The access point hostname
  takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using
  this action with an access point through the Amazon Web Services SDKs, you provide the
  access point ARN in place of the bucket name. For more information about access point ARNs,
  see Using access points in the Amazon S3 User Guide. When using this action with Amazon S3
  on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts
  hostname takes the form
  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: Name of the object key.
- `tagging`: Container for the TagSet and Tag elements

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The MD5 hash for the request body. For requests made using the Amazon
  Web Services Command Line Interface (CLI) or Amazon Web Services SDKs, this field is
  calculated automatically.
- `"versionId"`: The versionId of the object that the tag-set will be added to.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
"""
function put_object_tagging(
    Bucket, Key, Tagging; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)?tagging",
        Dict{String,Any}("Tagging" => Tagging);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_object_tagging(
    Bucket,
    Key,
    Tagging,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)?tagging",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Tagging" => Tagging), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_public_access_block(bucket, public_access_block_configuration)
    put_public_access_block(bucket, public_access_block_configuration, params::Dict{String,<:Any})

Creates or modifies the PublicAccessBlock configuration for an Amazon S3 bucket. To use
this operation, you must have the s3:PutBucketPublicAccessBlock permission. For more
information about Amazon S3 permissions, see Specifying Permissions in a Policy.  When
Amazon S3 evaluates the PublicAccessBlock configuration for a bucket or an object, it
checks the PublicAccessBlock configuration for both the bucket (or the bucket that contains
the object) and the bucket owner's account. If the PublicAccessBlock configurations are
different between the bucket and the account, Amazon S3 uses the most restrictive
combination of the bucket-level and account-level settings.  For more information about
when Amazon S3 considers a bucket or an object public, see The Meaning of \"Public\".
Related Resources     GetPublicAccessBlock     DeletePublicAccessBlock
GetBucketPolicyStatus     Using Amazon S3 Block Public Access

# Arguments
- `bucket`: The name of the Amazon S3 bucket whose PublicAccessBlock configuration you want
  to set.
- `public_access_block_configuration`: The PublicAccessBlock configuration that you want to
  apply to this Amazon S3 bucket. You can enable the configuration options in any
  combination. For more information about when Amazon S3 considers a bucket or object public,
  see The Meaning of \"Public\" in the Amazon S3 User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content-MD5"`: The MD5 hash of the PutPublicAccessBlock request body.  For requests
  made using the Amazon Web Services Command Line Interface (CLI) or Amazon Web Services
  SDKs, this field is calculated automatically.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
"""
function put_public_access_block(
    Bucket,
    PublicAccessBlockConfiguration;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?publicAccessBlock",
        Dict{String,Any}(
            "PublicAccessBlockConfiguration" => PublicAccessBlockConfiguration
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_public_access_block(
    Bucket,
    PublicAccessBlockConfiguration,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)?publicAccessBlock",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "PublicAccessBlockConfiguration" => PublicAccessBlockConfiguration
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    restore_object(bucket, key)
    restore_object(bucket, key, params::Dict{String,<:Any})

Restores an archived copy of an object back into Amazon S3 This action is not supported by
Amazon S3 on Outposts. This action performs the following types of requests:     select -
Perform a select query on an archived object    restore an archive - Restore an archived
object   To use this operation, you must have permissions to perform the s3:RestoreObject
action. The bucket owner has this permission by default and can grant this permission to
others. For more information about permissions, see Permissions Related to Bucket
Subresource Operations and Managing Access Permissions to Your Amazon S3 Resources in the
Amazon S3 User Guide.  Querying Archives with Select Requests  You use a select type of
request to perform SQL queries on archived objects. The archived objects that are being
queried by the select request must be formatted as uncompressed comma-separated values
(CSV) files. You can run queries and custom analytics on your archived data without having
to restore your data to a hotter Amazon S3 tier. For an overview about select requests, see
Querying Archived Objects in the Amazon S3 User Guide. When making a select request, do the
following:   Define an output location for the select query's output. This must be an
Amazon S3 bucket in the same Amazon Web Services Region as the bucket that contains the
archive object that is being queried. The Amazon Web Services account that initiates the
job must have permissions to write to the S3 bucket. You can specify the storage class and
encryption for the output objects stored in the bucket. For more information about output,
see Querying Archived Objects in the Amazon S3 User Guide. For more information about the
S3 structure in the request body, see the following:    PutObject     Managing Access with
ACLs in the Amazon S3 User Guide     Protecting Data Using Server-Side Encryption in the
Amazon S3 User Guide      Define the SQL expression for the SELECT type of restoration for
your query in the request body's SelectParameters structure. You can use expressions like
the following examples.   The following expression returns all records from the specified
object.  SELECT * FROM Object    Assuming that you are not using any headers for data
stored in the object, you can specify columns with positional headers.  SELECT s._1, s._2
FROM Object s WHERE s._3 &gt; 100    If you have headers and you set the fileHeaderInfo in
the CSV structure in the request body to USE, you can specify headers in the query. (If you
set the fileHeaderInfo field to IGNORE, the first row is skipped for the query.) You cannot
mix ordinal positions with header column names.   SELECT s.Id, s.FirstName, s.SSN FROM
S3Object s      For more information about using SQL with S3 Glacier Select restore, see
SQL Reference for Amazon S3 Select and S3 Glacier Select in the Amazon S3 User Guide.  When
making a select request, you can also do the following:   To expedite your queries, specify
the Expedited tier. For more information about tiers, see \"Restoring Archives,\" later in
this topic.   Specify details about the data serialization format of both the input object
that is being queried and the serialization of the CSV-encoded query results.   The
following are additional important facts about the select feature:   The output results are
new Amazon S3 objects. Unlike archive retrievals, they are stored until explicitly
deleted-manually or through a lifecycle policy.   You can issue more than one select
request on the same Amazon S3 object. Amazon S3 doesn't deduplicate requests, so avoid
issuing duplicate requests.    Amazon S3 accepts a select request even if the object has
already been restored. A select request doesn’t return error response 409.    Restoring
objects  Objects that you archive to the S3 Glacier or S3 Glacier Deep Archive storage
class, and S3 Intelligent-Tiering Archive or S3 Intelligent-Tiering Deep Archive tiers are
not accessible in real time. For objects in Archive Access or Deep Archive Access tiers you
must first initiate a restore request, and then wait until the object is moved into the
Frequent Access tier. For objects in S3 Glacier or S3 Glacier Deep Archive storage classes
you must first initiate a restore request, and then wait until a temporary copy of the
object is available. To access an archived object, you must restore the object for the
duration (number of days) that you specify. To restore a specific object version, you can
provide a version ID. If you don't provide a version ID, Amazon S3 restores the current
version. When restoring an archived object (or using a select request), you can specify one
of the following data access tier options in the Tier element of the request body:
Expedited  - Expedited retrievals allow you to quickly access your data stored in the S3
Glacier storage class or S3 Intelligent-Tiering Archive tier when occasional urgent
requests for a subset of archives are required. For all but the largest archived objects
(250 MB+), data accessed using Expedited retrievals is typically made available within
1–5 minutes. Provisioned capacity ensures that retrieval capacity for Expedited
retrievals is available when you need it. Expedited retrievals and provisioned capacity are
not available for objects stored in the S3 Glacier Deep Archive storage class or S3
Intelligent-Tiering Deep Archive tier.     Standard  - Standard retrievals allow you to
access any of your archived objects within several hours. This is the default option for
retrieval requests that do not specify the retrieval option. Standard retrievals typically
finish within 3–5 hours for objects stored in the S3 Glacier storage class or S3
Intelligent-Tiering Archive tier. They typically finish within 12 hours for objects stored
in the S3 Glacier Deep Archive storage class or S3 Intelligent-Tiering Deep Archive tier.
Standard retrievals are free for objects stored in S3 Intelligent-Tiering.     Bulk  - Bulk
retrievals are the lowest-cost retrieval option in S3 Glacier, enabling you to retrieve
large amounts, even petabytes, of data inexpensively. Bulk retrievals typically finish
within 5–12 hours for objects stored in the S3 Glacier storage class or S3
Intelligent-Tiering Archive tier. They typically finish within 48 hours for objects stored
in the S3 Glacier Deep Archive storage class or S3 Intelligent-Tiering Deep Archive tier.
Bulk retrievals are free for objects stored in S3 Intelligent-Tiering.   For more
information about archive retrieval options and provisioned capacity for Expedited data
access, see Restoring Archived Objects in the Amazon S3 User Guide.  You can use Amazon S3
restore speed upgrade to change the restore speed to a faster speed while it is in
progress. For more information, see  Upgrading the speed of an in-progress restore in the
Amazon S3 User Guide.  To get the status of object restoration, you can send a HEAD
request. Operations return the x-amz-restore header, which provides information about the
restoration status, in the response. You can use Amazon S3 event notifications to notify
you when a restore is initiated or completed. For more information, see Configuring Amazon
S3 Event Notifications in the Amazon S3 User Guide. After restoring an archived object, you
can update the restoration period by reissuing the request with a new period. Amazon S3
updates the restoration period relative to the current time and charges only for the
request-there are no data transfer charges. You cannot update the restoration period when
Amazon S3 is actively processing your current restore request for the object. If your
bucket has a lifecycle configuration with a rule that includes an expiration action, the
object expiration overrides the life span that you specify in a restore request. For
example, if you restore an object copy for 10 days, but the object is scheduled to expire
in 3 days, Amazon S3 deletes the object in 3 days. For more information about lifecycle
configuration, see PutBucketLifecycleConfiguration and Object Lifecycle Management in
Amazon S3 User Guide.  Responses  A successful action returns either the 200 OK or 202
Accepted status code.    If the object is not previously restored, then Amazon S3 returns
202 Accepted in the response.    If the object is previously restored, Amazon S3 returns
200 OK in the response.     Special Errors       Code: RestoreAlreadyInProgress     Cause:
Object restore is already in progress. (This error does not apply to SELECT type requests.)
    HTTP Status Code: 409 Conflict     SOAP Fault Code Prefix: Client         Code:
GlacierExpeditedRetrievalNotAvailable     Cause: expedited retrievals are currently not
available. Try again later. (Returned if there is insufficient capacity to process the
Expedited request. This error applies only to Expedited retrievals and not to S3 Standard
or Bulk retrievals.)     HTTP Status Code: 503     SOAP Fault Code Prefix: N/A
Related Resources     PutBucketLifecycleConfiguration
GetBucketNotificationConfiguration     SQL Reference for Amazon S3 Select and S3 Glacier
Select  in the Amazon S3 User Guide

# Arguments
- `bucket`: The bucket name containing the object to restore.  When using this action with
  an access point, you must direct requests to the access point hostname. The access point
  hostname takes the form AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When
  using this action with an access point through the Amazon Web Services SDKs, you provide
  the access point ARN in place of the bucket name. For more information about access point
  ARNs, see Using access points in the Amazon S3 User Guide. When using this action with
  Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on
  Outposts hostname takes the form
  AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: Object key for which the action was initiated.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"RestoreRequest"`:
- `"versionId"`: VersionId used to reference a specific version of the object.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
"""
function restore_object(Bucket, Key; aws_config::AbstractAWSConfig=global_aws_config())
    return s3(
        "POST",
        "/$(Bucket)/$(Key)?restore";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function restore_object(
    Bucket,
    Key,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "POST",
        "/$(Bucket)/$(Key)?restore",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    select_object_content(bucket, expression, expression_type, input_serialization, key, output_serialization)
    select_object_content(bucket, expression, expression_type, input_serialization, key, output_serialization, params::Dict{String,<:Any})

This action filters the contents of an Amazon S3 object based on a simple structured query
language (SQL) statement. In the request, along with the SQL expression, you must also
specify a data serialization format (JSON, CSV, or Apache Parquet) of the object. Amazon S3
uses this format to parse object data into records, and returns only records that match the
specified SQL expression. You must also specify the data serialization format for the
response. This action is not supported by Amazon S3 on Outposts. For more information about
Amazon S3 Select, see Selecting Content from Objects and SELECT Command in the Amazon S3
User Guide. For more information about using SQL with Amazon S3 Select, see  SQL Reference
for Amazon S3 Select and S3 Glacier Select in the Amazon S3 User Guide.   Permissions  You
must have s3:GetObject permission for this operation. Amazon S3 Select does not support
anonymous access. For more information about permissions, see Specifying Permissions in a
Policy in the Amazon S3 User Guide.   Object Data Formats  You can use Amazon S3 Select to
query objects that have the following format properties:    CSV, JSON, and Parquet -
Objects must be in CSV, JSON, or Parquet format.    UTF-8 - UTF-8 is the only encoding type
Amazon S3 Select supports.    GZIP or BZIP2 - CSV and JSON files can be compressed using
GZIP or BZIP2. GZIP and BZIP2 are the only compression formats that Amazon S3 Select
supports for CSV and JSON files. Amazon S3 Select supports columnar compression for Parquet
using GZIP or Snappy. Amazon S3 Select does not support whole-object compression for
Parquet objects.    Server-side encryption - Amazon S3 Select supports querying objects
that are protected with server-side encryption. For objects that are encrypted with
customer-provided encryption keys (SSE-C), you must use HTTPS, and you must use the headers
that are documented in the GetObject. For more information about SSE-C, see Server-Side
Encryption (Using Customer-Provided Encryption Keys) in the Amazon S3 User Guide. For
objects that are encrypted with Amazon S3 managed encryption keys (SSE-S3) and Amazon Web
Services KMS keys (SSE-KMS), server-side encryption is handled transparently, so you don't
need to specify anything. For more information about server-side encryption, including
SSE-S3 and SSE-KMS, see Protecting Data Using Server-Side Encryption in the Amazon S3 User
Guide.    Working with the Response Body  Given the response size is unknown, Amazon S3
Select streams the response as a series of messages and includes a Transfer-Encoding header
with chunked as its value in the response. For more information, see Appendix:
SelectObjectContent Response.   GetObject Support  The SelectObjectContent action does not
support the following GetObject functionality. For more information, see GetObject.
Range: Although you can specify a scan range for an Amazon S3 Select request (see
SelectObjectContentRequest - ScanRange in the request parameters), you cannot specify the
range of bytes of an object to return.    GLACIER, DEEP_ARCHIVE and REDUCED_REDUNDANCY
storage classes: You cannot specify the GLACIER, DEEP_ARCHIVE, or REDUCED_REDUNDANCY
storage classes. For more information, about storage classes see Storage Classes in the
Amazon S3 User Guide.     Special Errors  For a list of special errors for this operation,
see List of SELECT Object Content Error Codes   Related Resources     GetObject
GetBucketLifecycleConfiguration     PutBucketLifecycleConfiguration

# Arguments
- `bucket`: The S3 bucket.
- `expression`: The expression that is used to query the object.
- `expression_type`: The type of the provided expression (for example, SQL).
- `input_serialization`: Describes the format of the data in the object that is being
  queried.
- `key`: The object key.
- `output_serialization`: Describes the format of the data that you want Amazon S3 to
  return in response.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"RequestProgress"`: Specifies if periodic request progress information should be enabled.
- `"ScanRange"`: Specifies the byte range of the object to get the records from. A record
  is processed when its first byte is contained by the range. This parameter is optional, but
  when specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify
  the start and end of the range.  ScanRangemay be used in the following ways:
  &lt;scanrange&gt;&lt;start&gt;50&lt;/start&gt;&lt;end&gt;100&lt;/end&gt;&lt;/scanrange&gt;
  - process only the records starting between the bytes 50 and 100 (inclusive, counting from
  zero)    &lt;scanrange&gt;&lt;start&gt;50&lt;/start&gt;&lt;/scanrange&gt; - process only
  the records starting after the byte 50
  &lt;scanrange&gt;&lt;end&gt;50&lt;/end&gt;&lt;/scanrange&gt; - process only the records
  within the last 50 bytes of the file.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-server-side-encryption-customer-algorithm"`: The SSE Algorithm used to encrypt
  the object. For more information, see Server-Side Encryption (Using Customer-Provided
  Encryption Keys.
- `"x-amz-server-side-encryption-customer-key"`: The SSE Customer Key. For more
  information, see Server-Side Encryption (Using Customer-Provided Encryption Keys.
- `"x-amz-server-side-encryption-customer-key-MD5"`: The SSE Customer Key MD5. For more
  information, see Server-Side Encryption (Using Customer-Provided Encryption Keys.
"""
function select_object_content(
    Bucket,
    Expression,
    ExpressionType,
    InputSerialization,
    Key,
    OutputSerialization;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "POST",
        "/$(Bucket)/$(Key)?select&select-type=2",
        Dict{String,Any}(
            "Expression" => Expression,
            "ExpressionType" => ExpressionType,
            "InputSerialization" => InputSerialization,
            "OutputSerialization" => OutputSerialization,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function select_object_content(
    Bucket,
    Expression,
    ExpressionType,
    InputSerialization,
    Key,
    OutputSerialization,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "POST",
        "/$(Bucket)/$(Key)?select&select-type=2",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Expression" => Expression,
                    "ExpressionType" => ExpressionType,
                    "InputSerialization" => InputSerialization,
                    "OutputSerialization" => OutputSerialization,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    upload_part(bucket, key, part_number, upload_id)
    upload_part(bucket, key, part_number, upload_id, params::Dict{String,<:Any})

Uploads a part in a multipart upload.  In this operation, you provide part data in your
request. However, you have an option to specify your existing Amazon S3 object as a data
source for the part you are uploading. To upload a part from an existing object, you use
the UploadPartCopy operation.   You must initiate a multipart upload (see
CreateMultipartUpload) before you can upload any part. In response to your initiate
request, Amazon S3 returns an upload ID, a unique identifier, that you must include in your
upload part request. Part numbers can be any number from 1 to 10,000, inclusive. A part
number uniquely identifies a part and also defines its position within the object being
created. If you upload a new part using the same part number that was used with a previous
part, the previously uploaded part is overwritten. Each part must be at least 5 MB in size,
except the last part. There is no size limit on the last part of your multipart upload. To
ensure that data is not corrupted when traversing the network, specify the Content-MD5
header in the upload part request. Amazon S3 checks the part data against the provided MD5
value. If they do not match, Amazon S3 returns an error.  If the upload request is signed
with Signature Version 4, then Amazon Web Services S3 uses the x-amz-content-sha256 header
as a checksum instead of Content-MD5. For more information see Authenticating Requests:
Using the Authorization Header (Amazon Web Services Signature Version 4).   Note: After you
initiate multipart upload and upload one or more parts, you must either complete or abort
multipart upload in order to stop getting charged for storage of the uploaded parts. Only
after you either complete or abort multipart upload, Amazon S3 frees up the parts storage
and stops charging you for the parts storage. For more information on multipart uploads, go
to Multipart Upload Overview in the Amazon S3 User Guide . For information on the
permissions required to use the multipart upload API, go to Multipart Upload and
Permissions in the Amazon S3 User Guide. You can optionally request server-side encryption
where Amazon S3 encrypts your data as it writes it to disks in its data centers and
decrypts it for you when you access it. You have the option of providing your own
encryption key, or you can use the Amazon Web Services managed encryption keys. If you
choose to provide your own encryption key, the request headers you provide in the request
must match the headers you used in the request to initiate the upload by using
CreateMultipartUpload. For more information, go to Using Server-Side Encryption in the
Amazon S3 User Guide. Server-side encryption is supported by the S3 Multipart Upload
actions. Unless you are using a customer-provided encryption key, you don't need to specify
the encryption parameters in each UploadPart request. Instead, you only need to specify the
server-side encryption parameters in the initial Initiate Multipart request. For more
information, see CreateMultipartUpload. If you requested server-side encryption using a
customer-provided encryption key in your initiate multipart upload request, you must
provide identical encryption information in each part upload using the following headers.
x-amz-server-side-encryption-customer-algorithm   x-amz-server-side-encryption-customer-key
  x-amz-server-side-encryption-customer-key-MD5    Special Errors       Code: NoSuchUpload
   Cause: The specified multipart upload does not exist. The upload ID might be invalid, or
the multipart upload might have been aborted or completed.      HTTP Status Code: 404 Not
Found      SOAP Fault Code Prefix: Client       Related Resources     CreateMultipartUpload
    CompleteMultipartUpload     AbortMultipartUpload     ListParts     ListMultipartUploads


# Arguments
- `bucket`: The name of the bucket to which the multipart upload was initiated. When using
  this action with an access point, you must direct requests to the access point hostname.
  The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide. When using this action with Amazon S3 on Outposts, you
  must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the
  form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: Object key for which the multipart upload was initiated.
- `part_number`: Part number of part being uploaded. This is a positive integer between 1
  and 10,000.
- `upload_id`: Upload ID identifying the multipart upload whose part is being uploaded.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Body"`: Object data.
- `"Content-Length"`: Size of the body in bytes. This parameter is useful when the size of
  the body cannot be determined automatically.
- `"Content-MD5"`: The base64-encoded 128-bit MD5 digest of the part data. This parameter
  is auto-populated when using the command from the CLI. This parameter is required if object
  lock parameters are specified.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected bucket owner. If the
  bucket is owned by a different account, the request will fail with an HTTP 403 (Access
  Denied) error.
- `"x-amz-request-payer"`:
- `"x-amz-server-side-encryption-customer-algorithm"`: Specifies the algorithm to use to
  when encrypting the object (for example, AES256).
- `"x-amz-server-side-encryption-customer-key"`: Specifies the customer-provided encryption
  key for Amazon S3 to use in encrypting data. This value is used to store the object and
  then it is discarded; Amazon S3 does not store the encryption key. The key must be
  appropriate for use with the algorithm specified in the
  x-amz-server-side-encryption-customer-algorithm header. This must be the same encryption
  key specified in the initiate multipart upload request.
- `"x-amz-server-side-encryption-customer-key-MD5"`: Specifies the 128-bit MD5 digest of
  the encryption key according to RFC 1321. Amazon S3 uses this header for a message
  integrity check to ensure that the encryption key was transmitted without error.
"""
function upload_part(
    Bucket, Key, partNumber, uploadId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)",
        Dict{String,Any}("partNumber" => partNumber, "uploadId" => uploadId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function upload_part(
    Bucket,
    Key,
    partNumber,
    uploadId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("partNumber" => partNumber, "uploadId" => uploadId),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    upload_part_copy(bucket, key, part_number, upload_id, x-amz-copy-source)
    upload_part_copy(bucket, key, part_number, upload_id, x-amz-copy-source, params::Dict{String,<:Any})

Uploads a part by copying data from an existing object as data source. You specify the data
source by adding the request header x-amz-copy-source in your request and a byte range by
adding the request header x-amz-copy-source-range in your request.  The minimum allowable
part size for a multipart upload is 5 MB. For more information about multipart upload
limits, go to Quick Facts in the Amazon S3 User Guide.   Instead of using an existing
object as part data, you might use the UploadPart action and provide data in your request.
You must initiate a multipart upload before you can upload any part. In response to your
initiate request. Amazon S3 returns a unique identifier, the upload ID, that you must
include in your upload part request. For more information about using the UploadPartCopy
operation, see the following:   For conceptual information about multipart uploads, see
Uploading Objects Using Multipart Upload in the Amazon S3 User Guide.   For information
about permissions required to use the multipart upload API, see Multipart Upload and
Permissions in the Amazon S3 User Guide.   For information about copying objects using a
single atomic action vs. the multipart upload, see Operations on Objects in the Amazon S3
User Guide.   For information about using server-side encryption with customer-provided
encryption keys with the UploadPartCopy operation, see CopyObject and UploadPart.   Note
the following additional considerations about the request headers
x-amz-copy-source-if-match, x-amz-copy-source-if-none-match,
x-amz-copy-source-if-unmodified-since, and x-amz-copy-source-if-modified-since:
Consideration 1 - If both of the x-amz-copy-source-if-match and
x-amz-copy-source-if-unmodified-since headers are present in the request as follows:
x-amz-copy-source-if-match condition evaluates to true, and;
x-amz-copy-source-if-unmodified-since condition evaluates to false; Amazon S3 returns 200
OK and copies the data.     Consideration 2 - If both of the
x-amz-copy-source-if-none-match and x-amz-copy-source-if-modified-since headers are present
in the request as follows:  x-amz-copy-source-if-none-match condition evaluates to false,
and;  x-amz-copy-source-if-modified-since condition evaluates to true; Amazon S3 returns
412 Precondition Failed response code.     Versioning  If your bucket has versioning
enabled, you could have multiple versions of the same object. By default, x-amz-copy-source
identifies the current version of the object to copy. If the current version is a delete
marker and you don't specify a versionId in the x-amz-copy-source, Amazon S3 returns a 404
error, because the object does not exist. If you specify versionId in the x-amz-copy-source
and the versionId is a delete marker, Amazon S3 returns an HTTP 400 error, because you are
not allowed to specify a delete marker as a version for the x-amz-copy-source.  You can
optionally specify a specific version of the source object to copy by adding the versionId
subresource as shown in the following example:  x-amz-copy-source:
/bucket/object?versionId=version id   Special Errors       Code: NoSuchUpload     Cause:
The specified multipart upload does not exist. The upload ID might be invalid, or the
multipart upload might have been aborted or completed.     HTTP Status Code: 404 Not Found
       Code: InvalidRequest     Cause: The specified copy source is not supported as a
byte-range copy source.     HTTP Status Code: 400 Bad Request       Related Resources
CreateMultipartUpload     UploadPart     CompleteMultipartUpload     AbortMultipartUpload
  ListParts     ListMultipartUploads

# Arguments
- `bucket`: The bucket name. When using this action with an access point, you must direct
  requests to the access point hostname. The access point hostname takes the form
  AccessPointName-AccountId.s3-accesspoint.Region.amazonaws.com. When using this action with
  an access point through the Amazon Web Services SDKs, you provide the access point ARN in
  place of the bucket name. For more information about access point ARNs, see Using access
  points in the Amazon S3 User Guide. When using this action with Amazon S3 on Outposts, you
  must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the
  form AccessPointName-AccountId.outpostID.s3-outposts.Region.amazonaws.com. When using this
  action using S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts
  bucket ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see
  Using S3 on Outposts in the Amazon S3 User Guide.
- `key`: Object key for which the multipart upload was initiated.
- `part_number`: Part number of part being copied. This is a positive integer between 1 and
  10,000.
- `upload_id`: Upload ID identifying the multipart upload whose part is being copied.
- `x-amz-copy-source`: Specifies the source object for the copy operation. You specify the
  value in one of two formats, depending on whether you want to access the source object
  through an access point:   For objects not accessed through an access point, specify the
  name of the source bucket and key of the source object, separated by a slash (/). For
  example, to copy the object reports/january.pdf from the bucket awsexamplebucket, use
  awsexamplebucket/reports/january.pdf. The value must be URL encoded.   For objects accessed
  through access points, specify the Amazon Resource Name (ARN) of the object as accessed
  through the access point, in the format
  arn:aws:s3:&lt;Region&gt;:&lt;account-id&gt;:accesspoint/&lt;access-point-name&gt;/object/&l
  t;key&gt;. For example, to copy the object reports/january.pdf through access point
  my-access-point owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3:us-west-2:123456789012:accesspoint/my-access-point/object/reports/january.pdf.
  The value must be URL encoded.  Amazon S3 supports copy operations using access points only
  when the source and destination buckets are in the same Amazon Web Services Region.
  Alternatively, for objects accessed through Amazon S3 on Outposts, specify the ARN of the
  object as accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/object/&lt
  ;key&gt;. For example, to copy the object reports/january.pdf through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/object/reports/january.pdf.
  The value must be URL encoded.    To copy a specific version of an object, append
  ?versionId=&lt;version-id&gt; to the value (for example,
  awsexamplebucket/reports/january.pdf?versionId=QUpfdndhfd8438MNFDN93jdnJFkdmqnh893). If you
  don't specify a version ID, Amazon S3 copies the latest version of the source object.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-copy-source-if-match"`: Copies the object if its entity tag (ETag) matches the
  specified tag.
- `"x-amz-copy-source-if-modified-since"`: Copies the object if it has been modified since
  the specified time.
- `"x-amz-copy-source-if-none-match"`: Copies the object if its entity tag (ETag) is
  different than the specified ETag.
- `"x-amz-copy-source-if-unmodified-since"`: Copies the object if it hasn't been modified
  since the specified time.
- `"x-amz-copy-source-range"`: The range of bytes to copy from the source object. The range
  value must use the form bytes=first-last, where the first and last are the zero-based byte
  offsets to copy. For example, bytes=0-9 indicates that you want to copy the first 10 bytes
  of the source. You can copy a range only if the source object is greater than 5 MB.
- `"x-amz-copy-source-server-side-encryption-customer-algorithm"`: Specifies the algorithm
  to use when decrypting the source object (for example, AES256).
- `"x-amz-copy-source-server-side-encryption-customer-key"`: Specifies the
  customer-provided encryption key for Amazon S3 to use to decrypt the source object. The
  encryption key provided in this header must be one that was used when the source object was
  created.
- `"x-amz-copy-source-server-side-encryption-customer-key-MD5"`: Specifies the 128-bit MD5
  digest of the encryption key according to RFC 1321. Amazon S3 uses this header for a
  message integrity check to ensure that the encryption key was transmitted without error.
- `"x-amz-expected-bucket-owner"`: The account ID of the expected destination bucket owner.
  If the destination bucket is owned by a different account, the request will fail with an
  HTTP 403 (Access Denied) error.
- `"x-amz-request-payer"`:
- `"x-amz-server-side-encryption-customer-algorithm"`: Specifies the algorithm to use to
  when encrypting the object (for example, AES256).
- `"x-amz-server-side-encryption-customer-key"`: Specifies the customer-provided encryption
  key for Amazon S3 to use in encrypting data. This value is used to store the object and
  then it is discarded; Amazon S3 does not store the encryption key. The key must be
  appropriate for use with the algorithm specified in the
  x-amz-server-side-encryption-customer-algorithm header. This must be the same encryption
  key specified in the initiate multipart upload request.
- `"x-amz-server-side-encryption-customer-key-MD5"`: Specifies the 128-bit MD5 digest of
  the encryption key according to RFC 1321. Amazon S3 uses this header for a message
  integrity check to ensure that the encryption key was transmitted without error.
- `"x-amz-source-expected-bucket-owner"`: The account ID of the expected source bucket
  owner. If the source bucket is owned by a different account, the request will fail with an
  HTTP 403 (Access Denied) error.
"""
function upload_part_copy(
    Bucket,
    Key,
    partNumber,
    uploadId,
    x_amz_copy_source;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)",
        Dict{String,Any}(
            "partNumber" => partNumber,
            "uploadId" => uploadId,
            "headers" => Dict{String,Any}("x-amz-copy-source" => x_amz_copy_source),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function upload_part_copy(
    Bucket,
    Key,
    partNumber,
    uploadId,
    x_amz_copy_source,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "PUT",
        "/$(Bucket)/$(Key)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "partNumber" => partNumber,
                    "uploadId" => uploadId,
                    "headers" => Dict{String,Any}("x-amz-copy-source" => x_amz_copy_source),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    write_get_object_response(x-amz-request-route, x-amz-request-token)
    write_get_object_response(x-amz-request-route, x-amz-request-token, params::Dict{String,<:Any})

Passes transformed objects to a GetObject operation when using Object Lambda access points.
For information about Object Lambda access points, see Transforming objects with Object
Lambda access points in the Amazon S3 User Guide. This operation supports metadata that can
be returned by GetObject, in addition to RequestRoute, RequestToken, StatusCode, ErrorCode,
and ErrorMessage. The GetObject response metadata is supported so that the
WriteGetObjectResponse caller, typically an Lambda function, can provide the same metadata
when it internally invokes GetObject. When WriteGetObjectResponse is called by a
customer-owned Lambda function, the metadata returned to the end user GetObject call might
differ from what Amazon S3 would normally return. You can include any number of metadata
headers. When including a metadata header, it should be prefaced with x-amz-meta. For
example, x-amz-meta-my-custom-header: MyCustomValue. The primary use case for this is to
forward GetObject metadata. Amazon Web Services provides some prebuilt Lambda functions
that you can use with S3 Object Lambda to detect and redact personally identifiable
information (PII) and decompress S3 objects. These Lambda functions are available in the
Amazon Web Services Serverless Application Repository, and can be selected through the
Amazon Web Services Management Console when you create your Object Lambda access point.
Example 1: PII Access Control - This Lambda function uses Amazon Comprehend, a natural
language processing (NLP) service using machine learning to find insights and relationships
in text. It automatically detects personally identifiable information (PII) such as names,
addresses, dates, credit card numbers, and social security numbers from documents in your
Amazon S3 bucket.  Example 2: PII Redaction - This Lambda function uses Amazon Comprehend,
a natural language processing (NLP) service using machine learning to find insights and
relationships in text. It automatically redacts personally identifiable information (PII)
such as names, addresses, dates, credit card numbers, and social security numbers from
documents in your Amazon S3 bucket.  Example 3: Decompression - The Lambda function
S3ObjectLambdaDecompression, is equipped to decompress objects stored in S3 in one of six
compressed file formats including bzip2, gzip, snappy, zlib, zstandard and ZIP.  For
information on how to view and use these functions, see Using Amazon Web Services built
Lambda functions in the Amazon S3 User Guide.

# Arguments
- `x-amz-request-route`: Route prefix to the HTTP URL generated.
- `x-amz-request-token`: A single use encrypted token that maps WriteGetObjectResponse to
  the end user GetObject request.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Body"`: The object data.
- `"Content-Length"`: The size of the content body in bytes.
- `"x-amz-fwd-error-code"`: A string that uniquely identifies an error condition. Returned
  in the &lt;Code&gt; tag of the error XML response for a corresponding GetObject call.
  Cannot be used with a successful StatusCode header or when the transformed object is
  provided in the body. All error codes from S3 are sentence-cased. Regex value is
  \"^[A-Z][a-zA-Z]+\".
- `"x-amz-fwd-error-message"`: Contains a generic description of the error condition.
  Returned in the &lt;Message&gt; tag of the error XML response for a corresponding GetObject
  call. Cannot be used with a successful StatusCode header or when the transformed object is
  provided in body.
- `"x-amz-fwd-header-Cache-Control"`: Specifies caching behavior along the request/reply
  chain.
- `"x-amz-fwd-header-Content-Disposition"`: Specifies presentational information for the
  object.
- `"x-amz-fwd-header-Content-Encoding"`: Specifies what content encodings have been applied
  to the object and thus what decoding mechanisms must be applied to obtain the media-type
  referenced by the Content-Type header field.
- `"x-amz-fwd-header-Content-Language"`: The language the content is in.
- `"x-amz-fwd-header-Content-Range"`: The portion of the object returned in the response.
- `"x-amz-fwd-header-Content-Type"`: A standard MIME type describing the format of the
  object data.
- `"x-amz-fwd-header-ETag"`: An opaque identifier assigned by a web server to a specific
  version of a resource found at a URL.
- `"x-amz-fwd-header-Expires"`: The date and time at which the object is no longer
  cacheable.
- `"x-amz-fwd-header-Last-Modified"`: The date and time that the object was last modified.
- `"x-amz-fwd-header-accept-ranges"`: Indicates that a range of bytes was specified.
- `"x-amz-fwd-header-x-amz-delete-marker"`: Specifies whether an object stored in Amazon S3
  is (true) or is not (false) a delete marker.
- `"x-amz-fwd-header-x-amz-expiration"`: If object stored in Amazon S3 expiration is
  configured (see PUT Bucket lifecycle) it includes expiry-date and rule-id key-value pairs
  providing object expiration information. The value of the rule-id is URL encoded.
- `"x-amz-fwd-header-x-amz-missing-meta"`: Set to the number of metadata entries not
  returned in x-amz-meta headers. This can happen if you create metadata using an API like
  SOAP that supports more flexible metadata than the REST API. For example, using SOAP, you
  can create metadata whose values are not legal HTTP headers.
- `"x-amz-fwd-header-x-amz-mp-parts-count"`: The count of parts this object has.
- `"x-amz-fwd-header-x-amz-object-lock-legal-hold"`: Indicates whether an object stored in
  Amazon S3 has an active legal hold.
- `"x-amz-fwd-header-x-amz-object-lock-mode"`: Indicates whether an object stored in Amazon
  S3 has Object Lock enabled. For more information about S3 Object Lock, see Object Lock.
- `"x-amz-fwd-header-x-amz-object-lock-retain-until-date"`: The date and time when Object
  Lock is configured to expire.
- `"x-amz-fwd-header-x-amz-replication-status"`: Indicates if request involves bucket that
  is either a source or destination in a Replication rule. For more information about S3
  Replication, see Replication.
- `"x-amz-fwd-header-x-amz-request-charged"`:
- `"x-amz-fwd-header-x-amz-restore"`: Provides information about object restoration
  operation and expiration time of the restored object copy.
- `"x-amz-fwd-header-x-amz-server-side-encryption"`:  The server-side encryption algorithm
  used when storing requested object in Amazon S3 (for example, AES256, aws:kms).
- `"x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id"`:  If present, specifies
  the ID of the Amazon Web Services Key Management Service (Amazon Web Services KMS)
  symmetric customer managed key that was used for stored in Amazon S3 object.
- `"x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled"`:  Indicates whether
  the object stored in Amazon S3 uses an S3 bucket key for server-side encryption with Amazon
  Web Services KMS (SSE-KMS).
- `"x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm"`: Encryption
  algorithm used if server-side encryption with a customer-provided encryption key was
  specified for object stored in Amazon S3.
- `"x-amz-fwd-header-x-amz-server-side-encryption-customer-key-MD5"`:  128-bit MD5 digest
  of customer-provided encryption key used in Amazon S3 to encrypt data stored in S3. For
  more information, see Protecting data using server-side encryption with customer-provided
  encryption keys (SSE-C).
- `"x-amz-fwd-header-x-amz-storage-class"`:  The class of storage used to store object in
  Amazon S3.
- `"x-amz-fwd-header-x-amz-tagging-count"`: The number of tags, if any, on the object.
- `"x-amz-fwd-header-x-amz-version-id"`: An ID used to reference a specific version of the
  object.
- `"x-amz-fwd-status"`: The integer status code for an HTTP response of a corresponding
  GetObject request.  Status Codes     200 - OK     206 - Partial Content     304 - Not
  Modified     400 - Bad Request     401 - Unauthorized     403 - Forbidden     404 - Not
  Found     405 - Method Not Allowed     409 - Conflict     411 - Length Required     412 -
  Precondition Failed     416 - Range Not Satisfiable     500 - Internal Server Error     503
  - Service Unavailable
- `"x-amz-meta-"`: A map of metadata to store with the object in S3.
"""
function write_get_object_response(
    x_amz_request_route,
    x_amz_request_token;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "POST",
        "/WriteGetObjectResponse",
        Dict{String,Any}(
            "headers" => Dict{String,Any}(
                "x-amz-request-route" => x_amz_request_route,
                "x-amz-request-token" => x_amz_request_token,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function write_get_object_response(
    x_amz_request_route,
    x_amz_request_token,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3(
        "POST",
        "/WriteGetObjectResponse",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}(
                        "x-amz-request-route" => x_amz_request_route,
                        "x-amz-request-token" => x_amz_request_token,
                    ),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
