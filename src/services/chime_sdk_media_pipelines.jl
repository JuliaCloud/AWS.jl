# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: chime_sdk_media_pipelines
using AWS.Compat
using AWS.UUIDs

"""
    create_media_capture_pipeline(sink_arn, sink_type, source_arn, source_type)
    create_media_capture_pipeline(sink_arn, sink_type, source_arn, source_type, params::Dict{String,<:Any})

Creates a media pipeline.

# Arguments
- `sink_arn`: The ARN of the sink type.
- `sink_type`: Destination type to which the media artifacts are saved. You must use an S3
  bucket.
- `source_arn`: ARN of the source from which the media artifacts are captured.
- `source_type`: Source type from which the media artifacts are captured. A Chime SDK
  Meeting is the only supported source.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ChimeSdkMeetingConfiguration"`: The configuration for a specified media pipeline.
  SourceType must be ChimeSdkMeeting.
- `"ClientRequestToken"`: The unique identifier for the client request. The token makes the
  API request idempotent. Use a unique token for each media pipeline request.
- `"Tags"`: The tag key-value pairs.
"""
function create_media_capture_pipeline(
    SinkArn,
    SinkType,
    SourceArn,
    SourceType;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_media_pipelines(
        "POST",
        "/sdk-media-capture-pipelines",
        Dict{String,Any}(
            "SinkArn" => SinkArn,
            "SinkType" => SinkType,
            "SourceArn" => SourceArn,
            "SourceType" => SourceType,
            "ClientRequestToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_media_capture_pipeline(
    SinkArn,
    SinkType,
    SourceArn,
    SourceType,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_media_pipelines(
        "POST",
        "/sdk-media-capture-pipelines",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "SinkArn" => SinkArn,
                    "SinkType" => SinkType,
                    "SourceArn" => SourceArn,
                    "SourceType" => SourceType,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_media_concatenation_pipeline(sinks, sources)
    create_media_concatenation_pipeline(sinks, sources, params::Dict{String,<:Any})

Creates a media concatenation pipeline.

# Arguments
- `sinks`: An object that specifies the data sinks for the media concatenation pipeline.
- `sources`: An object that specifies the sources for the media concatenation pipeline.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientRequestToken"`: The unique identifier for the client request. The token makes the
  API request idempotent. Use a unique token for each media concatenation pipeline request.
- `"Tags"`: The tags associated with the media concatenation pipeline.
"""
function create_media_concatenation_pipeline(
    Sinks, Sources; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_media_pipelines(
        "POST",
        "/sdk-media-concatenation-pipelines",
        Dict{String,Any}(
            "Sinks" => Sinks, "Sources" => Sources, "ClientRequestToken" => string(uuid4())
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_media_concatenation_pipeline(
    Sinks,
    Sources,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_media_pipelines(
        "POST",
        "/sdk-media-concatenation-pipelines",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Sinks" => Sinks,
                    "Sources" => Sources,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_media_live_connector_pipeline(sinks, sources)
    create_media_live_connector_pipeline(sinks, sources, params::Dict{String,<:Any})

Creates a streaming media pipeline in an Amazon Chime SDK meeting.

# Arguments
- `sinks`: The media pipeline's data sinks.
- `sources`: The media pipeline's data sources.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientRequestToken"`: The token assigned to the client making the request.
- `"Tags"`: The tags associated with the media pipeline.
"""
function create_media_live_connector_pipeline(
    Sinks, Sources; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_media_pipelines(
        "POST",
        "/sdk-media-live-connector-pipelines",
        Dict{String,Any}(
            "Sinks" => Sinks, "Sources" => Sources, "ClientRequestToken" => string(uuid4())
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_media_live_connector_pipeline(
    Sinks,
    Sources,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_media_pipelines(
        "POST",
        "/sdk-media-live-connector-pipelines",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Sinks" => Sinks,
                    "Sources" => Sources,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_media_capture_pipeline(media_pipeline_id)
    delete_media_capture_pipeline(media_pipeline_id, params::Dict{String,<:Any})

Deletes the media pipeline.

# Arguments
- `media_pipeline_id`: The ID of the media pipeline being deleted.

"""
function delete_media_capture_pipeline(
    mediaPipelineId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_media_pipelines(
        "DELETE",
        "/sdk-media-capture-pipelines/$(mediaPipelineId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_media_capture_pipeline(
    mediaPipelineId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_media_pipelines(
        "DELETE",
        "/sdk-media-capture-pipelines/$(mediaPipelineId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_media_pipeline(media_pipeline_id)
    delete_media_pipeline(media_pipeline_id, params::Dict{String,<:Any})

Deletes the media pipeline.

# Arguments
- `media_pipeline_id`: The ID of the media pipeline to delete.

"""
function delete_media_pipeline(
    mediaPipelineId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_media_pipelines(
        "DELETE",
        "/sdk-media-pipelines/$(mediaPipelineId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_media_pipeline(
    mediaPipelineId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_media_pipelines(
        "DELETE",
        "/sdk-media-pipelines/$(mediaPipelineId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_media_capture_pipeline(media_pipeline_id)
    get_media_capture_pipeline(media_pipeline_id, params::Dict{String,<:Any})

Gets an existing media pipeline.

# Arguments
- `media_pipeline_id`: The ID of the pipeline that you want to get.

"""
function get_media_capture_pipeline(
    mediaPipelineId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_media_pipelines(
        "GET",
        "/sdk-media-capture-pipelines/$(mediaPipelineId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_media_capture_pipeline(
    mediaPipelineId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_media_pipelines(
        "GET",
        "/sdk-media-capture-pipelines/$(mediaPipelineId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_media_pipeline(media_pipeline_id)
    get_media_pipeline(media_pipeline_id, params::Dict{String,<:Any})

Gets an existing media pipeline.

# Arguments
- `media_pipeline_id`: The ID of the pipeline that you want to get.

"""
function get_media_pipeline(
    mediaPipelineId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_media_pipelines(
        "GET",
        "/sdk-media-pipelines/$(mediaPipelineId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_media_pipeline(
    mediaPipelineId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_media_pipelines(
        "GET",
        "/sdk-media-pipelines/$(mediaPipelineId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_media_capture_pipelines()
    list_media_capture_pipelines(params::Dict{String,<:Any})

Returns a list of media pipelines.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to return in a single call. Valid Range: 1
  - 99.
- `"next-token"`: The token used to retrieve the next page of results.
"""
function list_media_capture_pipelines(; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_media_pipelines(
        "GET",
        "/sdk-media-capture-pipelines";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_media_capture_pipelines(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_media_pipelines(
        "GET",
        "/sdk-media-capture-pipelines",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_media_pipelines()
    list_media_pipelines(params::Dict{String,<:Any})

Returns a list of media pipelines.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to return in a single call. Valid Range: 1
  - 99.
- `"next-token"`: The token used to retrieve the next page of results.
"""
function list_media_pipelines(; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_media_pipelines(
        "GET",
        "/sdk-media-pipelines";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_media_pipelines(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_media_pipelines(
        "GET",
        "/sdk-media-pipelines",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(arn)
    list_tags_for_resource(arn, params::Dict{String,<:Any})

Lists the tags available for a media pipeline.

# Arguments
- `arn`: The ARN of the media pipeline associated with any tags. The ARN consists of the
  pipeline's region, resource ID, and pipeline ID.

"""
function list_tags_for_resource(arn; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_media_pipelines(
        "GET",
        "/tags",
        Dict{String,Any}("arn" => arn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    arn, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_media_pipelines(
        "GET",
        "/tags",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("arn" => arn), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

The ARN of the media pipeline that you want to tag. Consists of he pipeline's endpoint
region, resource ID, and pipeline ID.

# Arguments
- `resource_arn`: The ARN of the media pipeline associated with any tags. The ARN consists
  of the pipeline's endpoint region, resource ID, and pipeline ID.
- `tags`: The tags associated with the specified media pipeline.

"""
function tag_resource(ResourceARN, Tags; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_media_pipelines(
        "POST",
        "/tags?operation=tag-resource",
        Dict{String,Any}("ResourceARN" => ResourceARN, "Tags" => Tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    ResourceARN,
    Tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_media_pipelines(
        "POST",
        "/tags?operation=tag-resource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceARN" => ResourceARN, "Tags" => Tags),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Removes any tags from a media pipeline.

# Arguments
- `resource_arn`: The ARN of the pipeline that you want to untag.
- `tag_keys`: The key/value pairs in the tag that you want to remove.

"""
function untag_resource(
    ResourceARN, TagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_media_pipelines(
        "POST",
        "/tags?operation=untag-resource",
        Dict{String,Any}("ResourceARN" => ResourceARN, "TagKeys" => TagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    ResourceARN,
    TagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_media_pipelines(
        "POST",
        "/tags?operation=untag-resource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceARN" => ResourceARN, "TagKeys" => TagKeys),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
