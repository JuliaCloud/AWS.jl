# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: payment_cryptography
using AWS.Compat
using AWS.UUIDs

"""
    create_alias(alias_name)
    create_alias(alias_name, params::Dict{String,<:Any})

Creates an alias, or a friendly name, for an Amazon Web Services Payment Cryptography key.
You can use an alias to identify a key in the console and when you call cryptographic
operations such as EncryptData or DecryptData. You can associate the alias with any key in
the same Amazon Web Services Region. Each alias is associated with only one key at a time,
but a key can have multiple aliases. You can't create an alias without a key. The alias
must be unique in the account and Amazon Web Services Region, but you can create another
alias with the same name in a different Amazon Web Services Region. To change the key
that's associated with the alias, call UpdateAlias. To delete the alias, call DeleteAlias.
These operations don't affect the underlying key. To get the alias that you created, call
ListAliases.  Cross-account use: This operation can't be used across different Amazon Web
Services accounts.  Related operations:     DeleteAlias     GetAlias     ListAliases
UpdateAlias

# Arguments
- `alias_name`: A friendly name that you can use to refer a key. An alias must begin with
  alias/ followed by a name, for example alias/ExampleAlias. It can contain only alphanumeric
  characters, forward slashes (/), underscores (_), and dashes (-).  Don't include
  confidential or sensitive information in this field. This field may be displayed in
  plaintext in CloudTrail logs and other output.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"KeyArn"`: The KeyARN of the key to associate with the alias.
"""
function create_alias(AliasName; aws_config::AbstractAWSConfig=global_aws_config())
    return payment_cryptography(
        "CreateAlias",
        Dict{String,Any}("AliasName" => AliasName);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_alias(
    AliasName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "CreateAlias",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("AliasName" => AliasName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_key(exportable, key_attributes)
    create_key(exportable, key_attributes, params::Dict{String,<:Any})

Creates an Amazon Web Services Payment Cryptography key, a logical representation of a
cryptographic key, that is unique in your account and Amazon Web Services Region. You use
keys for cryptographic functions such as encryption and decryption.  In addition to the key
material used in cryptographic operations, an Amazon Web Services Payment Cryptography key
includes metadata such as the key ARN, key usage, key origin, creation date, description,
and key state. When you create a key, you specify both immutable and mutable data about the
key. The immutable data contains key attributes that defines the scope and cryptographic
operations that you can perform using the key, for example key class (example:
SYMMETRIC_KEY), key algorithm (example: TDES_2KEY), key usage (example:
TR31_P0_PIN_ENCRYPTION_KEY) and key modes of use (example: Encrypt). For information about
valid combinations of key attributes, see Understanding key attributes in the Amazon Web
Services Payment Cryptography User Guide. The mutable data contained within a key includes
usage timestamp and key deletion timestamp and can be modified after creation. Amazon Web
Services Payment Cryptography binds key attributes to keys using key blocks when you store
or export them. Amazon Web Services Payment Cryptography stores the key contents wrapped
and never stores or transmits them in the clear.   Cross-account use: This operation can't
be used across different Amazon Web Services accounts.  Related operations:     DeleteKey
  GetKey     ListKeys

# Arguments
- `exportable`: Specifies whether the key is exportable from the service.
- `key_attributes`: The role of the key, the algorithm it supports, and the cryptographic
  operations allowed with the key. This data is immutable after the key is created.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Enabled"`: Specifies whether to enable the key. If the key is enabled, it is activated
  for use within the service. If the key not enabled, then it is created but not activated.
  The default value is enabled.
- `"KeyCheckValueAlgorithm"`: The algorithm that Amazon Web Services Payment Cryptography
  uses to calculate the key check value (KCV) for DES and AES keys. For DES key, the KCV is
  computed by encrypting 8 bytes, each with value '00', with the key to be checked and
  retaining the 3 highest order bytes of the encrypted result. For AES key, the KCV is
  computed by encrypting 8 bytes, each with value '01', with the key to be checked and
  retaining the 3 highest order bytes of the encrypted result.
- `"Tags"`: The tags to attach to the key. Each tag consists of a tag key and a tag value.
  Both the tag key and the tag value are required, but the tag value can be an empty (null)
  string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key
  with the same tag key.  To use this parameter, you must have TagResource permission.  Don't
  include confidential or sensitive information in this field. This field may be displayed in
  plaintext in CloudTrail logs and other output.   Tagging or untagging an Amazon Web
  Services Payment Cryptography key can allow or deny permission to the key.
"""
function create_key(
    Exportable, KeyAttributes; aws_config::AbstractAWSConfig=global_aws_config()
)
    return payment_cryptography(
        "CreateKey",
        Dict{String,Any}("Exportable" => Exportable, "KeyAttributes" => KeyAttributes);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_key(
    Exportable,
    KeyAttributes,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "CreateKey",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Exportable" => Exportable, "KeyAttributes" => KeyAttributes
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_alias(alias_name)
    delete_alias(alias_name, params::Dict{String,<:Any})

Deletes the alias, but doesn't affect the underlying key. Each key can have multiple
aliases. To get the aliases of all keys, use the ListAliases operation. To change the alias
of a key, first use DeleteAlias to delete the current alias and then use CreateAlias to
create a new alias. To associate an existing alias with a different key, call UpdateAlias.
Cross-account use: This operation can't be used across different Amazon Web Services
accounts.  Related operations:     CreateAlias     GetAlias     ListAliases     UpdateAlias


# Arguments
- `alias_name`: A friendly name that you can use to refer Amazon Web Services Payment
  Cryptography key. This value must begin with alias/ followed by a name, such as
  alias/ExampleAlias.

"""
function delete_alias(AliasName; aws_config::AbstractAWSConfig=global_aws_config())
    return payment_cryptography(
        "DeleteAlias",
        Dict{String,Any}("AliasName" => AliasName);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_alias(
    AliasName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "DeleteAlias",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("AliasName" => AliasName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_key(key_identifier)
    delete_key(key_identifier, params::Dict{String,<:Any})

Deletes the key material and all metadata associated with Amazon Web Services Payment
Cryptography key. Key deletion is irreversible. After a key is deleted, you can't perform
cryptographic operations using the key. For example, you can't decrypt data that was
encrypted by a deleted Amazon Web Services Payment Cryptography key, and the data may
become unrecoverable. Because key deletion is destructive, Amazon Web Services Payment
Cryptography has a safety mechanism to prevent accidental deletion of a key. When you call
this operation, Amazon Web Services Payment Cryptography disables the specified key but
doesn't delete it until after a waiting period. The default waiting period is 7 days. To
set a different waiting period, set DeleteKeyInDays. During the waiting period, the
KeyState is DELETE_PENDING. After the key is deleted, the KeyState is DELETE_COMPLETE. If
you delete key material, you can use ImportKey to reimport the same key material into the
Amazon Web Services Payment Cryptography key. You should delete a key only when you are
sure that you don't need to use it anymore and no other parties are utilizing this key. If
you aren't sure, consider deactivating it instead by calling StopKeyUsage.  Cross-account
use: This operation can't be used across different Amazon Web Services accounts.  Related
operations:     RestoreKey     StartKeyUsage     StopKeyUsage

# Arguments
- `key_identifier`: The KeyARN of the key that is scheduled for deletion.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DeleteKeyInDays"`: The waiting period for key deletion. The default value is seven days.
"""
function delete_key(KeyIdentifier; aws_config::AbstractAWSConfig=global_aws_config())
    return payment_cryptography(
        "DeleteKey",
        Dict{String,Any}("KeyIdentifier" => KeyIdentifier);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_key(
    KeyIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "DeleteKey",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("KeyIdentifier" => KeyIdentifier), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    export_key(export_key_identifier, key_material)
    export_key(export_key_identifier, key_material, params::Dict{String,<:Any})

Exports a key from Amazon Web Services Payment Cryptography using either ANSI X9 TR-34 or
TR-31 key export standard. Amazon Web Services Payment Cryptography simplifies main or root
key exchange process by eliminating the need of a paper-based key exchange process. It
takes a modern and secure approach based of the ANSI X9 TR-34 key exchange standard. You
can use ExportKey to export main or root keys such as KEK (Key Encryption Key), using
asymmetric key exchange technique following ANSI X9 TR-34 standard. The ANSI X9 TR-34
standard uses asymmetric keys to establishes bi-directional trust between the two parties
exchanging keys. After which you can export working keys using the ANSI X9 TR-31 symmetric
key exchange standard as mandated by PCI PIN. Using this operation, you can share your
Amazon Web Services Payment Cryptography generated keys with other service partners to
perform cryptographic operations outside of Amazon Web Services Payment Cryptography
TR-34 key export  Amazon Web Services Payment Cryptography uses TR-34 asymmetric key
exchange standard to export main keys such as KEK. In TR-34 terminology, the sending party
of the key is called Key Distribution Host (KDH) and the receiving party of the key is
called Key Receiving Host (KRH). In key export process, KDH is Amazon Web Services Payment
Cryptography which initiates key export. KRH is the user receiving the key. Before you
initiate TR-34 key export, you must obtain an export token by calling
GetParametersForExport. This operation also returns the signing key certificate that KDH
uses to sign the wrapped key to generate a TR-34 wrapped key block. The export token
expires after 7 days. Set the following parameters:
CertificateAuthorityPublicKeyIdentifier  The KeyARN of the certificate chain that will sign
the wrapping key certificate. This must exist within Amazon Web Services Payment
Cryptography before you initiate TR-34 key export. If it does not exist, you can import it
by calling ImportKey for RootCertificatePublicKey.  ExportToken  Obtained from KDH by
calling GetParametersForExport.  WrappingKeyCertificate  Amazon Web Services Payment
Cryptography uses this to wrap the key under export.   When this operation is successful,
Amazon Web Services Payment Cryptography returns the TR-34 wrapped key block.   TR-31 key
export  Amazon Web Services Payment Cryptography uses TR-31 symmetric key exchange standard
to export working keys. In TR-31, you must use a main key such as KEK to encrypt or wrap
the key under export. To establish a KEK, you can use CreateKey or ImportKey. When this
operation is successful, Amazon Web Services Payment Cryptography returns a TR-31 wrapped
key block.   Cross-account use: This operation can't be used across different Amazon Web
Services accounts.  Related operations:     GetParametersForExport     ImportKey

# Arguments
- `export_key_identifier`: The KeyARN of the key under export from Amazon Web Services
  Payment Cryptography.
- `key_material`: The key block format type, for example, TR-34 or TR-31, to use during key
  material export.

"""
function export_key(
    ExportKeyIdentifier, KeyMaterial; aws_config::AbstractAWSConfig=global_aws_config()
)
    return payment_cryptography(
        "ExportKey",
        Dict{String,Any}(
            "ExportKeyIdentifier" => ExportKeyIdentifier, "KeyMaterial" => KeyMaterial
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function export_key(
    ExportKeyIdentifier,
    KeyMaterial,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "ExportKey",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ExportKeyIdentifier" => ExportKeyIdentifier,
                    "KeyMaterial" => KeyMaterial,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_alias(alias_name)
    get_alias(alias_name, params::Dict{String,<:Any})

Gets the Amazon Web Services Payment Cryptography key associated with the alias.
Cross-account use: This operation can't be used across different Amazon Web Services
accounts.  Related operations:     CreateAlias     DeleteAlias     ListAliases
UpdateAlias

# Arguments
- `alias_name`: The alias of the Amazon Web Services Payment Cryptography key.

"""
function get_alias(AliasName; aws_config::AbstractAWSConfig=global_aws_config())
    return payment_cryptography(
        "GetAlias",
        Dict{String,Any}("AliasName" => AliasName);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_alias(
    AliasName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "GetAlias",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("AliasName" => AliasName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_key(key_identifier)
    get_key(key_identifier, params::Dict{String,<:Any})

Gets the key material for an Amazon Web Services Payment Cryptography key, including the
immutable and mutable data specified when the key was created.  Cross-account use: This
operation can't be used across different Amazon Web Services accounts.  Related operations:
    CreateKey     DeleteKey     ListKeys

# Arguments
- `key_identifier`: The KeyARN of the Amazon Web Services Payment Cryptography key.

"""
function get_key(KeyIdentifier; aws_config::AbstractAWSConfig=global_aws_config())
    return payment_cryptography(
        "GetKey",
        Dict{String,Any}("KeyIdentifier" => KeyIdentifier);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_key(
    KeyIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "GetKey",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("KeyIdentifier" => KeyIdentifier), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_parameters_for_export(key_material_type, signing_key_algorithm)
    get_parameters_for_export(key_material_type, signing_key_algorithm, params::Dict{String,<:Any})

Gets the export token and the signing key certificate to initiate a TR-34 key export from
Amazon Web Services Payment Cryptography. The signing key certificate signs the wrapped key
under export within the TR-34 key payload. The export token and signing key certificate
must be in place and operational before calling ExportKey. The export token expires in 7
days. You can use the same export token to export multiple keys from your service account.
Cross-account use: This operation can't be used across different Amazon Web Services
accounts.  Related operations:     ExportKey     GetParametersForImport

# Arguments
- `key_material_type`: The key block format type (for example, TR-34 or TR-31) to use
  during key material export. Export token is only required for a TR-34 key export,
  TR34_KEY_BLOCK. Export token is not required for TR-31 key export.
- `signing_key_algorithm`: The signing key algorithm to generate a signing key certificate.
  This certificate signs the wrapped key under export within the TR-34 key block cryptogram.
  RSA_2048 is the only signing key algorithm allowed.

"""
function get_parameters_for_export(
    KeyMaterialType, SigningKeyAlgorithm; aws_config::AbstractAWSConfig=global_aws_config()
)
    return payment_cryptography(
        "GetParametersForExport",
        Dict{String,Any}(
            "KeyMaterialType" => KeyMaterialType,
            "SigningKeyAlgorithm" => SigningKeyAlgorithm,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_parameters_for_export(
    KeyMaterialType,
    SigningKeyAlgorithm,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "GetParametersForExport",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "KeyMaterialType" => KeyMaterialType,
                    "SigningKeyAlgorithm" => SigningKeyAlgorithm,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_parameters_for_import(key_material_type, wrapping_key_algorithm)
    get_parameters_for_import(key_material_type, wrapping_key_algorithm, params::Dict{String,<:Any})

Gets the import token and the wrapping key certificate to initiate a TR-34 key import into
Amazon Web Services Payment Cryptography. The wrapping key certificate wraps the key under
import within the TR-34 key payload. The import token and wrapping key certificate must be
in place and operational before calling ImportKey. The import token expires in 7 days. The
same import token can be used to import multiple keys into your service account.
Cross-account use: This operation can't be used across different Amazon Web Services
accounts.  Related operations:     GetParametersForExport     ImportKey

# Arguments
- `key_material_type`: The key block format type such as TR-34 or TR-31 to use during key
  material import. Import token is only required for TR-34 key import TR34_KEY_BLOCK. Import
  token is not required for TR-31 key import.
- `wrapping_key_algorithm`: The wrapping key algorithm to generate a wrapping key
  certificate. This certificate wraps the key under import within the TR-34 key block
  cryptogram. RSA_2048 is the only wrapping key algorithm allowed.

"""
function get_parameters_for_import(
    KeyMaterialType, WrappingKeyAlgorithm; aws_config::AbstractAWSConfig=global_aws_config()
)
    return payment_cryptography(
        "GetParametersForImport",
        Dict{String,Any}(
            "KeyMaterialType" => KeyMaterialType,
            "WrappingKeyAlgorithm" => WrappingKeyAlgorithm,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_parameters_for_import(
    KeyMaterialType,
    WrappingKeyAlgorithm,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "GetParametersForImport",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "KeyMaterialType" => KeyMaterialType,
                    "WrappingKeyAlgorithm" => WrappingKeyAlgorithm,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_public_key_certificate(key_identifier)
    get_public_key_certificate(key_identifier, params::Dict{String,<:Any})

Gets the public key certificate of the asymmetric key pair that exists within Amazon Web
Services Payment Cryptography. Unlike the private key of an asymmetric key, which never
leaves Amazon Web Services Payment Cryptography unencrypted, callers with
GetPublicKeyCertificate permission can download the public key certificate of the
asymmetric key. You can share the public key certificate to allow others to encrypt
messages and verify signatures outside of Amazon Web Services Payment Cryptography
Cross-account use: This operation can't be used across different Amazon Web Services
accounts.

# Arguments
- `key_identifier`: The KeyARN of the asymmetric key pair.

"""
function get_public_key_certificate(
    KeyIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return payment_cryptography(
        "GetPublicKeyCertificate",
        Dict{String,Any}("KeyIdentifier" => KeyIdentifier);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_public_key_certificate(
    KeyIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "GetPublicKeyCertificate",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("KeyIdentifier" => KeyIdentifier), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    import_key(key_material)
    import_key(key_material, params::Dict{String,<:Any})

Imports keys and public key certificates into Amazon Web Services Payment Cryptography.
Amazon Web Services Payment Cryptography simplifies main or root key exchange process by
eliminating the need of a paper-based key exchange process. It takes a modern and secure
approach based of the ANSI X9 TR-34 key exchange standard.  You can use ImportKey to import
main or root keys such as KEK (Key Encryption Key) using asymmetric key exchange technique
following the ANSI X9 TR-34 standard. The ANSI X9 TR-34 standard uses asymmetric keys to
establishes bi-directional trust between the two parties exchanging keys.  After you have
imported a main or root key, you can import working keys to perform various cryptographic
operations within Amazon Web Services Payment Cryptography using the ANSI X9 TR-31
symmetric key exchange standard as mandated by PCI PIN. You can also import a root public
key certificate, a self-signed certificate used to sign other public key certificates, or a
trusted public key certificate under an already established root public key certificate.
To import a public root key certificate  Using this operation, you can import the public
component (in PEM cerificate format) of your private root key. You can use the imported
public root key certificate for digital signatures, for example signing wrapping key or
signing key in TR-34, within your Amazon Web Services Payment Cryptography account.  Set
the following parameters:    KeyMaterial: RootCertificatePublicKey     KeyClass: PUBLIC_KEY
    KeyModesOfUse: Verify     KeyUsage: TR31_S0_ASYMMETRIC_KEY_FOR_DIGITAL_SIGNATURE
PublicKeyCertificate: The certificate authority used to sign the root public key
certificate.    To import a trusted public key certificate  The root public key certificate
must be in place and operational before you import a trusted public key certificate. Set
the following parameters:    KeyMaterial: TrustedCertificatePublicKey
CertificateAuthorityPublicKeyIdentifier: KeyArn of the RootCertificatePublicKey.
KeyModesOfUse and KeyUsage: Corresponding to the cryptographic operations such as wrap,
sign, or encrypt that you will allow the trusted public key certificate to perform.
PublicKeyCertificate: The certificate authority used to sign the trusted public key
certificate.    Import main keys  Amazon Web Services Payment Cryptography uses TR-34
asymmetric key exchange standard to import main keys such as KEK. In TR-34 terminology, the
sending party of the key is called Key Distribution Host (KDH) and the receiving party of
the key is called Key Receiving Host (KRH). During the key import process, KDH is the user
who initiates the key import and KRH is Amazon Web Services Payment Cryptography who
receives the key. Before initiating TR-34 key import, you must obtain an import token by
calling GetParametersForImport. This operation also returns the wrapping key certificate
that KDH uses wrap key under import to generate a TR-34 wrapped key block. The import token
expires after 7 days. Set the following parameters:
CertificateAuthorityPublicKeyIdentifier: The KeyArn of the certificate chain that will sign
the signing key certificate and should exist within Amazon Web Services Payment
Cryptography before initiating TR-34 key import. If it does not exist, you can import it by
calling by calling ImportKey for RootCertificatePublicKey.    ImportToken: Obtained from
KRH by calling GetParametersForImport.    WrappedKeyBlock: The TR-34 wrapped key block from
KDH. It contains the KDH key under import, wrapped with KRH provided wrapping key
certificate and signed by the KDH private signing key. This TR-34 key block is generated by
the KDH Hardware Security Module (HSM) outside of Amazon Web Services Payment Cryptography.
   SigningKeyCertificate: The public component of the private key that signed the KDH TR-34
wrapped key block. In PEM certificate format.    TR-34 is intended primarily to exchange
3DES keys. Your ability to export AES-128 and larger AES keys may be dependent on your
source system.   Import working keys  Amazon Web Services Payment Cryptography uses TR-31
symmetric key exchange standard to import working keys. A KEK must be established within
Amazon Web Services Payment Cryptography by using TR-34 key import. To initiate a TR-31 key
import, set the following parameters:    WrappedKeyBlock: The key under import and
encrypted using KEK. The TR-31 key block generated by your HSM outside of Amazon Web
Services Payment Cryptography.     WrappingKeyIdentifier: The KeyArn of the KEK that Amazon
Web Services Payment Cryptography uses to decrypt or unwrap the key under import.
Cross-account use: This operation can't be used across different Amazon Web Services
accounts.  Related operations:     ExportKey     GetParametersForImport

# Arguments
- `key_material`: The key or public key certificate type to use during key material import,
  for example TR-34 or RootCertificatePublicKey.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Enabled"`: Specifies whether import key is enabled.
- `"KeyCheckValueAlgorithm"`: The algorithm that Amazon Web Services Payment Cryptography
  uses to calculate the key check value (KCV) for DES and AES keys. For DES key, the KCV is
  computed by encrypting 8 bytes, each with value '00', with the key to be checked and
  retaining the 3 highest order bytes of the encrypted result. For AES key, the KCV is
  computed by encrypting 8 bytes, each with value '01', with the key to be checked and
  retaining the 3 highest order bytes of the encrypted result.
- `"Tags"`: The tags to attach to the key. Each tag consists of a tag key and a tag value.
  Both the tag key and the tag value are required, but the tag value can be an empty (null)
  string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key
  with the same tag key.  You can't have more than one tag on an Amazon Web Services Payment
  Cryptography key with the same tag key. If you specify an existing tag key with a different
  tag value, Amazon Web Services Payment Cryptography replaces the current tag value with the
  specified one. To use this parameter, you must have TagResource permission.  Don't include
  confidential or sensitive information in this field. This field may be displayed in
  plaintext in CloudTrail logs and other output.   Tagging or untagging an Amazon Web
  Services Payment Cryptography key can allow or deny permission to the key.
"""
function import_key(KeyMaterial; aws_config::AbstractAWSConfig=global_aws_config())
    return payment_cryptography(
        "ImportKey",
        Dict{String,Any}("KeyMaterial" => KeyMaterial);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function import_key(
    KeyMaterial,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "ImportKey",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("KeyMaterial" => KeyMaterial), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_aliases()
    list_aliases(params::Dict{String,<:Any})

Lists the aliases for all keys in the caller's Amazon Web Services account and Amazon Web
Services Region. You can filter the list of aliases. For more information, see Using
aliases in the Amazon Web Services Payment Cryptography User Guide. This is a paginated
operation, which means that each response might contain only a subset of all the aliases.
When the response contains only a subset of aliases, it includes a NextToken value. Use
this value in a subsequent ListAliases request to get more aliases. When you receive a
response with no NextToken (or an empty or null value), that means there are no more
aliases to get.  Cross-account use: This operation can't be used across different Amazon
Web Services accounts.  Related operations:     CreateAlias     DeleteAlias     GetAlias
 UpdateAlias

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: Use this parameter to specify the maximum number of items to return. When
  this value is present, Amazon Web Services Payment Cryptography does not return more than
  the specified number of items, but it might return fewer. This value is optional. If you
  include a value, it must be between 1 and 100, inclusive. If you do not include a value, it
  defaults to 50.
- `"NextToken"`: Use this parameter in a subsequent request after you receive a response
  with truncated results. Set it to the value of NextToken from the truncated response you
  just received.
"""
function list_aliases(; aws_config::AbstractAWSConfig=global_aws_config())
    return payment_cryptography(
        "ListAliases"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_aliases(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return payment_cryptography(
        "ListAliases", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_keys()
    list_keys(params::Dict{String,<:Any})

Lists the keys in the caller's Amazon Web Services account and Amazon Web Services Region.
You can filter the list of keys. This is a paginated operation, which means that each
response might contain only a subset of all the keys. When the response contains only a
subset of keys, it includes a NextToken value. Use this value in a subsequent ListKeys
request to get more keys. When you receive a response with no NextToken (or an empty or
null value), that means there are no more keys to get.  Cross-account use: This operation
can't be used across different Amazon Web Services accounts.  Related operations:
CreateKey     DeleteKey     GetKey

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"KeyState"`: The key state of the keys you want to list.
- `"MaxResults"`: Use this parameter to specify the maximum number of items to return. When
  this value is present, Amazon Web Services Payment Cryptography does not return more than
  the specified number of items, but it might return fewer.
- `"NextToken"`: Use this parameter in a subsequent request after you receive a response
  with truncated results. Set it to the value of NextToken from the truncated response you
  just received.
"""
function list_keys(; aws_config::AbstractAWSConfig=global_aws_config())
    return payment_cryptography(
        "ListKeys"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_keys(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return payment_cryptography(
        "ListKeys", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Lists the tags for an Amazon Web Services resource. This is a paginated operation, which
means that each response might contain only a subset of all the tags. When the response
contains only a subset of tags, it includes a NextToken value. Use this value in a
subsequent ListTagsForResource request to get more tags. When you receive a response with
no NextToken (or an empty or null value), that means there are no more tags to get.
Cross-account use: This operation can't be used across different Amazon Web Services
accounts.  Related operations:     TagResource     UntagResource

# Arguments
- `resource_arn`: The KeyARN of the key whose tags you are getting.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: Use this parameter to specify the maximum number of items to return. When
  this value is present, Amazon Web Services Payment Cryptography does not return more than
  the specified number of items, but it might return fewer.
- `"NextToken"`: Use this parameter in a subsequent request after you receive a response
  with truncated results. Set it to the value of NextToken from the truncated response you
  just received.
"""
function list_tags_for_resource(
    ResourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return payment_cryptography(
        "ListTagsForResource",
        Dict{String,Any}("ResourceArn" => ResourceArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    ResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "ListTagsForResource",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ResourceArn" => ResourceArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    restore_key(key_identifier)
    restore_key(key_identifier, params::Dict{String,<:Any})

Cancels a scheduled key deletion during the waiting period. Use this operation to restore a
Key that is scheduled for deletion. During the waiting period, the KeyState is
DELETE_PENDING and deletePendingTimestamp contains the date and time after which the Key
will be deleted. After Key is restored, the KeyState is CREATE_COMPLETE, and the value for
deletePendingTimestamp is removed.  Cross-account use: This operation can't be used across
different Amazon Web Services accounts.  Related operations:     DeleteKey
StartKeyUsage     StopKeyUsage

# Arguments
- `key_identifier`: The KeyARN of the key to be restored within Amazon Web Services Payment
  Cryptography.

"""
function restore_key(KeyIdentifier; aws_config::AbstractAWSConfig=global_aws_config())
    return payment_cryptography(
        "RestoreKey",
        Dict{String,Any}("KeyIdentifier" => KeyIdentifier);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function restore_key(
    KeyIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "RestoreKey",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("KeyIdentifier" => KeyIdentifier), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_key_usage(key_identifier)
    start_key_usage(key_identifier, params::Dict{String,<:Any})

Enables an Amazon Web Services Payment Cryptography key, which makes it active for
cryptographic operations within Amazon Web Services Payment Cryptography  Cross-account
use: This operation can't be used across different Amazon Web Services accounts.  Related
operations:     StopKeyUsage

# Arguments
- `key_identifier`: The KeyArn of the key.

"""
function start_key_usage(KeyIdentifier; aws_config::AbstractAWSConfig=global_aws_config())
    return payment_cryptography(
        "StartKeyUsage",
        Dict{String,Any}("KeyIdentifier" => KeyIdentifier);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_key_usage(
    KeyIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "StartKeyUsage",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("KeyIdentifier" => KeyIdentifier), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_key_usage(key_identifier)
    stop_key_usage(key_identifier, params::Dict{String,<:Any})

Disables an Amazon Web Services Payment Cryptography key, which makes it inactive within
Amazon Web Services Payment Cryptography. You can use this operation instead of DeleteKey
to deactivate a key. You can enable the key in the future by calling StartKeyUsage.
Cross-account use: This operation can't be used across different Amazon Web Services
accounts.  Related operations:     DeleteKey     StartKeyUsage

# Arguments
- `key_identifier`: The KeyArn of the key.

"""
function stop_key_usage(KeyIdentifier; aws_config::AbstractAWSConfig=global_aws_config())
    return payment_cryptography(
        "StopKeyUsage",
        Dict{String,Any}("KeyIdentifier" => KeyIdentifier);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function stop_key_usage(
    KeyIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "StopKeyUsage",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("KeyIdentifier" => KeyIdentifier), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Adds or edits tags on an Amazon Web Services Payment Cryptography key.  Tagging or
untagging an Amazon Web Services Payment Cryptography key can allow or deny permission to
the key.  Each tag consists of a tag key and a tag value, both of which are case-sensitive
strings. The tag value can be an empty (null) string. To add a tag, specify a new tag key
and a tag value. To edit a tag, specify an existing tag key and a new tag value. You can
also add tags to an Amazon Web Services Payment Cryptography key when you create it with
CreateKey.  Cross-account use: This operation can't be used across different Amazon Web
Services accounts.  Related operations:     ListTagsForResource     UntagResource

# Arguments
- `resource_arn`: The KeyARN of the key whose tags are being updated.
- `tags`: One or more tags. Each tag consists of a tag key and a tag value. The tag value
  can be an empty (null) string. You can't have more than one tag on an Amazon Web Services
  Payment Cryptography key with the same tag key. If you specify an existing tag key with a
  different tag value, Amazon Web Services Payment Cryptography replaces the current tag
  value with the new one.  Don't include confidential or sensitive information in this field.
  This field may be displayed in plaintext in CloudTrail logs and other output.  To use this
  parameter, you must have TagResource permission in an IAM policy.  Don't include
  confidential or sensitive information in this field. This field may be displayed in
  plaintext in CloudTrail logs and other output.

"""
function tag_resource(ResourceArn, Tags; aws_config::AbstractAWSConfig=global_aws_config())
    return payment_cryptography(
        "TagResource",
        Dict{String,Any}("ResourceArn" => ResourceArn, "Tags" => Tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    ResourceArn,
    Tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "TagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceArn" => ResourceArn, "Tags" => Tags),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Deletes a tag from an Amazon Web Services Payment Cryptography key.  Tagging or untagging
an Amazon Web Services Payment Cryptography key can allow or deny permission to the key.
Cross-account use: This operation can't be used across different Amazon Web Services
accounts.  Related operations:     ListTagsForResource     TagResource

# Arguments
- `resource_arn`: The KeyARN of the key whose tags are being removed.
- `tag_keys`: One or more tag keys. Don't include the tag values. If the Amazon Web
  Services Payment Cryptography key doesn't have the specified tag key, Amazon Web Services
  Payment Cryptography doesn't throw an exception or return a response. To confirm that the
  operation succeeded, use the ListTagsForResource operation.

"""
function untag_resource(
    ResourceArn, TagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return payment_cryptography(
        "UntagResource",
        Dict{String,Any}("ResourceArn" => ResourceArn, "TagKeys" => TagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    ResourceArn,
    TagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "UntagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceArn" => ResourceArn, "TagKeys" => TagKeys),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_alias(alias_name)
    update_alias(alias_name, params::Dict{String,<:Any})

Associates an existing Amazon Web Services Payment Cryptography alias with a different key.
Each alias is associated with only one Amazon Web Services Payment Cryptography key at a
time, although a key can have multiple aliases. The alias and the Amazon Web Services
Payment Cryptography key must be in the same Amazon Web Services account and Amazon Web
Services Region  Cross-account use: This operation can't be used across different Amazon
Web Services accounts.  Related operations:     CreateAlias     DeleteAlias     GetAlias
 ListAliases

# Arguments
- `alias_name`: The alias whose associated key is changing.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"KeyArn"`: The KeyARN for the key that you are updating or removing from the alias.
"""
function update_alias(AliasName; aws_config::AbstractAWSConfig=global_aws_config())
    return payment_cryptography(
        "UpdateAlias",
        Dict{String,Any}("AliasName" => AliasName);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_alias(
    AliasName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return payment_cryptography(
        "UpdateAlias",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("AliasName" => AliasName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
