# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: kinesis_analytics_v2
using AWS.Compat
using AWS.UUIDs

"""
    add_application_cloud_watch_logging_option(application_name, cloud_watch_logging_option, current_application_version_id)
    add_application_cloud_watch_logging_option(application_name, cloud_watch_logging_option, current_application_version_id, params::Dict{String,<:Any})

Adds an Amazon CloudWatch log stream to monitor application configuration errors.

# Arguments
- `application_name`: The Kinesis Data Analytics application name.
- `cloud_watch_logging_option`: Provides the Amazon CloudWatch log stream Amazon Resource
  Name (ARN).
- `current_application_version_id`: The version ID of the Kinesis Data Analytics
  application. You can retrieve the application version ID using DescribeApplication.

"""
add_application_cloud_watch_logging_option(ApplicationName, CloudWatchLoggingOption, CurrentApplicationVersionId; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("AddApplicationCloudWatchLoggingOption", Dict{String, Any}("ApplicationName"=>ApplicationName, "CloudWatchLoggingOption"=>CloudWatchLoggingOption, "CurrentApplicationVersionId"=>CurrentApplicationVersionId); aws_config=aws_config)
add_application_cloud_watch_logging_option(ApplicationName, CloudWatchLoggingOption, CurrentApplicationVersionId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("AddApplicationCloudWatchLoggingOption", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "CloudWatchLoggingOption"=>CloudWatchLoggingOption, "CurrentApplicationVersionId"=>CurrentApplicationVersionId), params)); aws_config=aws_config)

"""
    add_application_input(application_name, current_application_version_id, input)
    add_application_input(application_name, current_application_version_id, input, params::Dict{String,<:Any})

 Adds a streaming source to your SQL-based Kinesis Data Analytics application.  You can add
a streaming source when you create an application, or you can use this operation to add a
streaming source after you create an application. For more information, see
CreateApplication. Any configuration update, including adding a streaming source using this
operation, results in a new version of the application. You can use the DescribeApplication
operation to find the current application version.

# Arguments
- `application_name`: The name of your existing application to which you want to add the
  streaming source.
- `current_application_version_id`: The current version of your application. You can use
  the DescribeApplication operation to find the current application version.
- `input`: The Input to add.

"""
add_application_input(ApplicationName, CurrentApplicationVersionId, Input; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("AddApplicationInput", Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "Input"=>Input); aws_config=aws_config)
add_application_input(ApplicationName, CurrentApplicationVersionId, Input, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("AddApplicationInput", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "Input"=>Input), params)); aws_config=aws_config)

"""
    add_application_input_processing_configuration(application_name, current_application_version_id, input_id, input_processing_configuration)
    add_application_input_processing_configuration(application_name, current_application_version_id, input_id, input_processing_configuration, params::Dict{String,<:Any})

Adds an InputProcessingConfiguration to a SQL-based Kinesis Data Analytics application. An
input processor pre-processes records on the input stream before the application's SQL code
executes. Currently, the only input processor available is AWS Lambda.

# Arguments
- `application_name`: The name of the application to which you want to add the input
  processing configuration.
- `current_application_version_id`: The version of the application to which you want to add
  the input processing configuration. You can use the DescribeApplication operation to get
  the current application version. If the version specified is not the current version, the
  ConcurrentModificationException is returned.
- `input_id`: The ID of the input configuration to add the input processing configuration
  to. You can get a list of the input IDs for an application using the DescribeApplication
  operation.
- `input_processing_configuration`: The InputProcessingConfiguration to add to the
  application.

"""
add_application_input_processing_configuration(ApplicationName, CurrentApplicationVersionId, InputId, InputProcessingConfiguration; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("AddApplicationInputProcessingConfiguration", Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "InputId"=>InputId, "InputProcessingConfiguration"=>InputProcessingConfiguration); aws_config=aws_config)
add_application_input_processing_configuration(ApplicationName, CurrentApplicationVersionId, InputId, InputProcessingConfiguration, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("AddApplicationInputProcessingConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "InputId"=>InputId, "InputProcessingConfiguration"=>InputProcessingConfiguration), params)); aws_config=aws_config)

"""
    add_application_output(application_name, current_application_version_id, output)
    add_application_output(application_name, current_application_version_id, output, params::Dict{String,<:Any})

Adds an external destination to your SQL-based Kinesis Data Analytics application. If you
want Kinesis Data Analytics to deliver data from an in-application stream within your
application to an external destination (such as an Kinesis data stream, a Kinesis Data
Firehose delivery stream, or an AWS Lambda function), you add the relevant configuration to
your application using this operation. You can configure one or more outputs for your
application. Each output configuration maps an in-application stream and an external
destination.  You can use one of the output configurations to deliver data from your
in-application error stream to an external destination so that you can analyze the errors.
 Any configuration update, including adding a streaming source using this operation,
results in a new version of the application. You can use the DescribeApplication operation
to find the current application version.

# Arguments
- `application_name`: The name of the application to which you want to add the output
  configuration.
- `current_application_version_id`: The version of the application to which you want to add
  the output configuration. You can use the DescribeApplication operation to get the current
  application version. If the version specified is not the current version, the
  ConcurrentModificationException is returned.
- `output`: An array of objects, each describing one output configuration. In the output
  configuration, you specify the name of an in-application stream, a destination (that is, a
  Kinesis data stream, a Kinesis Data Firehose delivery stream, or an AWS Lambda function),
  and record the formation to use when writing to the destination.

"""
add_application_output(ApplicationName, CurrentApplicationVersionId, Output; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("AddApplicationOutput", Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "Output"=>Output); aws_config=aws_config)
add_application_output(ApplicationName, CurrentApplicationVersionId, Output, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("AddApplicationOutput", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "Output"=>Output), params)); aws_config=aws_config)

"""
    add_application_reference_data_source(application_name, current_application_version_id, reference_data_source)
    add_application_reference_data_source(application_name, current_application_version_id, reference_data_source, params::Dict{String,<:Any})

Adds a reference data source to an existing SQL-based Kinesis Data Analytics application.
Kinesis Data Analytics reads reference data (that is, an Amazon S3 object) and creates an
in-application table within your application. In the request, you provide the source (S3
bucket name and object key name), name of the in-application table to create, and the
necessary mapping information that describes how data in an Amazon S3 object maps to
columns in the resulting in-application table.

# Arguments
- `application_name`: The name of an existing application.
- `current_application_version_id`: The version of the application for which you are adding
  the reference data source. You can use the DescribeApplication operation to get the current
  application version. If the version specified is not the current version, the
  ConcurrentModificationException is returned.
- `reference_data_source`: The reference data source can be an object in your Amazon S3
  bucket. Kinesis Data Analytics reads the object and copies the data into the in-application
  table that is created. You provide an S3 bucket, object key name, and the resulting
  in-application table that is created.

"""
add_application_reference_data_source(ApplicationName, CurrentApplicationVersionId, ReferenceDataSource; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("AddApplicationReferenceDataSource", Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "ReferenceDataSource"=>ReferenceDataSource); aws_config=aws_config)
add_application_reference_data_source(ApplicationName, CurrentApplicationVersionId, ReferenceDataSource, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("AddApplicationReferenceDataSource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "ReferenceDataSource"=>ReferenceDataSource), params)); aws_config=aws_config)

"""
    add_application_vpc_configuration(application_name, current_application_version_id, vpc_configuration)
    add_application_vpc_configuration(application_name, current_application_version_id, vpc_configuration, params::Dict{String,<:Any})

Adds a Virtual Private Cloud (VPC) configuration to the application. Applications can use
VPCs to store and access resources securely. Note the following about VPC configurations
for Kinesis Data Analytics applications:   VPC configurations are not supported for SQL
applications.   When a VPC is added to a Kinesis Data Analytics application, the
application can no longer be accessed from the Internet directly. To enable Internet access
to the application, add an Internet gateway to your VPC.

# Arguments
- `application_name`: The name of an existing application.
- `current_application_version_id`: The version of the application to which you want to add
  the VPC configuration. You can use the DescribeApplication operation to get the current
  application version. If the version specified is not the current version, the
  ConcurrentModificationException is returned.
- `vpc_configuration`: Description of the VPC to add to the application.

"""
add_application_vpc_configuration(ApplicationName, CurrentApplicationVersionId, VpcConfiguration; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("AddApplicationVpcConfiguration", Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "VpcConfiguration"=>VpcConfiguration); aws_config=aws_config)
add_application_vpc_configuration(ApplicationName, CurrentApplicationVersionId, VpcConfiguration, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("AddApplicationVpcConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "VpcConfiguration"=>VpcConfiguration), params)); aws_config=aws_config)

"""
    create_application(application_name, runtime_environment, service_execution_role)
    create_application(application_name, runtime_environment, service_execution_role, params::Dict{String,<:Any})

Creates a Kinesis Data Analytics application. For information about creating a Kinesis Data
Analytics application, see Creating an Application.

# Arguments
- `application_name`: The name of your application (for example, sample-app).
- `runtime_environment`: The runtime environment for the application (SQL-1_0, FLINK-1_6,
  FLINK-1_8, or FLINK-1_11).
- `service_execution_role`: The IAM role used by the application to access Kinesis data
  streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external
  resources.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ApplicationConfiguration"`: Use this parameter to configure the application.
- `"ApplicationDescription"`: A summary description of the application.
- `"CloudWatchLoggingOptions"`: Use this parameter to configure an Amazon CloudWatch log
  stream to monitor application configuration errors.
- `"Tags"`: A list of one or more tags to assign to the application. A tag is a key-value
  pair that identifies an application. Note that the maximum number of application tags
  includes system tags. The maximum number of user-defined application tags is 50. For more
  information, see Using Tagging.
"""
create_application(ApplicationName, RuntimeEnvironment, ServiceExecutionRole; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("CreateApplication", Dict{String, Any}("ApplicationName"=>ApplicationName, "RuntimeEnvironment"=>RuntimeEnvironment, "ServiceExecutionRole"=>ServiceExecutionRole); aws_config=aws_config)
create_application(ApplicationName, RuntimeEnvironment, ServiceExecutionRole, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("CreateApplication", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "RuntimeEnvironment"=>RuntimeEnvironment, "ServiceExecutionRole"=>ServiceExecutionRole), params)); aws_config=aws_config)

"""
    create_application_presigned_url(application_name, url_type)
    create_application_presigned_url(application_name, url_type, params::Dict{String,<:Any})

Creates and returns a URL that you can use to connect to an application's extension.
Currently, the only available extension is the Apache Flink dashboard. The IAM role or user
used to call this API defines the permissions to access the extension. After the presigned
URL is created, no additional permission is required to access this URL. IAM authorization
policies for this API are also enforced for every HTTP request that attempts to connect to
the extension.  You control the amount of time that the URL will be valid using the
SessionExpirationDurationInSeconds parameter. If you do not provide this parameter, the
returned URL is valid for twelve hours.  The URL that you get from a call to
CreateApplicationPresignedUrl must be used within 3 minutes to be valid. If you first try
to use the URL after the 3-minute limit expires, the service returns an HTTP 403 Forbidden
error.

# Arguments
- `application_name`: The name of the application.
- `url_type`: The type of the extension for which to create and return a URL. Currently,
  the only valid extension URL type is FLINK_DASHBOARD_URL.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"SessionExpirationDurationInSeconds"`: The duration in seconds for which the returned
  URL will be valid.
"""
create_application_presigned_url(ApplicationName, UrlType; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("CreateApplicationPresignedUrl", Dict{String, Any}("ApplicationName"=>ApplicationName, "UrlType"=>UrlType); aws_config=aws_config)
create_application_presigned_url(ApplicationName, UrlType, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("CreateApplicationPresignedUrl", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "UrlType"=>UrlType), params)); aws_config=aws_config)

"""
    create_application_snapshot(application_name, snapshot_name)
    create_application_snapshot(application_name, snapshot_name, params::Dict{String,<:Any})

Creates a snapshot of the application's state data.

# Arguments
- `application_name`: The name of an existing application
- `snapshot_name`: An identifier for the application snapshot.

"""
create_application_snapshot(ApplicationName, SnapshotName; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("CreateApplicationSnapshot", Dict{String, Any}("ApplicationName"=>ApplicationName, "SnapshotName"=>SnapshotName); aws_config=aws_config)
create_application_snapshot(ApplicationName, SnapshotName, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("CreateApplicationSnapshot", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "SnapshotName"=>SnapshotName), params)); aws_config=aws_config)

"""
    delete_application(application_name, create_timestamp)
    delete_application(application_name, create_timestamp, params::Dict{String,<:Any})

Deletes the specified application. Kinesis Data Analytics halts application execution and
deletes the application.

# Arguments
- `application_name`: The name of the application to delete.
- `create_timestamp`: Use the DescribeApplication operation to get this value.

"""
delete_application(ApplicationName, CreateTimestamp; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplication", Dict{String, Any}("ApplicationName"=>ApplicationName, "CreateTimestamp"=>CreateTimestamp); aws_config=aws_config)
delete_application(ApplicationName, CreateTimestamp, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplication", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "CreateTimestamp"=>CreateTimestamp), params)); aws_config=aws_config)

"""
    delete_application_cloud_watch_logging_option(application_name, cloud_watch_logging_option_id, current_application_version_id)
    delete_application_cloud_watch_logging_option(application_name, cloud_watch_logging_option_id, current_application_version_id, params::Dict{String,<:Any})

Deletes an Amazon CloudWatch log stream from an Kinesis Data Analytics application.

# Arguments
- `application_name`: The application name.
- `cloud_watch_logging_option_id`: The CloudWatchLoggingOptionId of the Amazon CloudWatch
  logging option to delete. You can get the CloudWatchLoggingOptionId by using the
  DescribeApplication operation.
- `current_application_version_id`: The version ID of the application. You can retrieve the
  application version ID using DescribeApplication.

"""
delete_application_cloud_watch_logging_option(ApplicationName, CloudWatchLoggingOptionId, CurrentApplicationVersionId; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplicationCloudWatchLoggingOption", Dict{String, Any}("ApplicationName"=>ApplicationName, "CloudWatchLoggingOptionId"=>CloudWatchLoggingOptionId, "CurrentApplicationVersionId"=>CurrentApplicationVersionId); aws_config=aws_config)
delete_application_cloud_watch_logging_option(ApplicationName, CloudWatchLoggingOptionId, CurrentApplicationVersionId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplicationCloudWatchLoggingOption", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "CloudWatchLoggingOptionId"=>CloudWatchLoggingOptionId, "CurrentApplicationVersionId"=>CurrentApplicationVersionId), params)); aws_config=aws_config)

"""
    delete_application_input_processing_configuration(application_name, current_application_version_id, input_id)
    delete_application_input_processing_configuration(application_name, current_application_version_id, input_id, params::Dict{String,<:Any})

Deletes an InputProcessingConfiguration from an input.

# Arguments
- `application_name`: The name of the application.
- `current_application_version_id`: The application version. You can use the
  DescribeApplication operation to get the current application version. If the version
  specified is not the current version, the ConcurrentModificationException is returned.
- `input_id`: The ID of the input configuration from which to delete the input processing
  configuration. You can get a list of the input IDs for an application by using the
  DescribeApplication operation.

"""
delete_application_input_processing_configuration(ApplicationName, CurrentApplicationVersionId, InputId; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplicationInputProcessingConfiguration", Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "InputId"=>InputId); aws_config=aws_config)
delete_application_input_processing_configuration(ApplicationName, CurrentApplicationVersionId, InputId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplicationInputProcessingConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "InputId"=>InputId), params)); aws_config=aws_config)

"""
    delete_application_output(application_name, current_application_version_id, output_id)
    delete_application_output(application_name, current_application_version_id, output_id, params::Dict{String,<:Any})

Deletes the output destination configuration from your SQL-based Kinesis Data Analytics
application's configuration. Kinesis Data Analytics will no longer write data from the
corresponding in-application stream to the external output destination.

# Arguments
- `application_name`: The application name.
- `current_application_version_id`: The application version. You can use the
  DescribeApplication operation to get the current application version. If the version
  specified is not the current version, the ConcurrentModificationException is returned.
- `output_id`: The ID of the configuration to delete. Each output configuration that is
  added to the application (either when the application is created or later) using the
  AddApplicationOutput operation has a unique ID. You need to provide the ID to uniquely
  identify the output configuration that you want to delete from the application
  configuration. You can use the DescribeApplication operation to get the specific OutputId.

"""
delete_application_output(ApplicationName, CurrentApplicationVersionId, OutputId; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplicationOutput", Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "OutputId"=>OutputId); aws_config=aws_config)
delete_application_output(ApplicationName, CurrentApplicationVersionId, OutputId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplicationOutput", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "OutputId"=>OutputId), params)); aws_config=aws_config)

"""
    delete_application_reference_data_source(application_name, current_application_version_id, reference_id)
    delete_application_reference_data_source(application_name, current_application_version_id, reference_id, params::Dict{String,<:Any})

Deletes a reference data source configuration from the specified SQL-based Kinesis Data
Analytics application's configuration. If the application is running, Kinesis Data
Analytics immediately removes the in-application table that you created using the
AddApplicationReferenceDataSource operation.

# Arguments
- `application_name`: The name of an existing application.
- `current_application_version_id`: The current application version. You can use the
  DescribeApplication operation to get the current application version. If the version
  specified is not the current version, the ConcurrentModificationException is returned.
- `reference_id`: The ID of the reference data source. When you add a reference data source
  to your application using the AddApplicationReferenceDataSource, Kinesis Data Analytics
  assigns an ID. You can use the DescribeApplication operation to get the reference ID.

"""
delete_application_reference_data_source(ApplicationName, CurrentApplicationVersionId, ReferenceId; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplicationReferenceDataSource", Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "ReferenceId"=>ReferenceId); aws_config=aws_config)
delete_application_reference_data_source(ApplicationName, CurrentApplicationVersionId, ReferenceId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplicationReferenceDataSource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "ReferenceId"=>ReferenceId), params)); aws_config=aws_config)

"""
    delete_application_snapshot(application_name, snapshot_creation_timestamp, snapshot_name)
    delete_application_snapshot(application_name, snapshot_creation_timestamp, snapshot_name, params::Dict{String,<:Any})

Deletes a snapshot of application state.

# Arguments
- `application_name`: The name of an existing application.
- `snapshot_creation_timestamp`: The creation timestamp of the application snapshot to
  delete. You can retrieve this value using or .
- `snapshot_name`: The identifier for the snapshot delete.

"""
delete_application_snapshot(ApplicationName, SnapshotCreationTimestamp, SnapshotName; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplicationSnapshot", Dict{String, Any}("ApplicationName"=>ApplicationName, "SnapshotCreationTimestamp"=>SnapshotCreationTimestamp, "SnapshotName"=>SnapshotName); aws_config=aws_config)
delete_application_snapshot(ApplicationName, SnapshotCreationTimestamp, SnapshotName, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplicationSnapshot", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "SnapshotCreationTimestamp"=>SnapshotCreationTimestamp, "SnapshotName"=>SnapshotName), params)); aws_config=aws_config)

"""
    delete_application_vpc_configuration(application_name, current_application_version_id, vpc_configuration_id)
    delete_application_vpc_configuration(application_name, current_application_version_id, vpc_configuration_id, params::Dict{String,<:Any})

Removes a VPC configuration from a Kinesis Data Analytics application.

# Arguments
- `application_name`: The name of an existing application.
- `current_application_version_id`: The current application version ID. You can retrieve
  the application version ID using DescribeApplication.
- `vpc_configuration_id`: The ID of the VPC configuration to delete.

"""
delete_application_vpc_configuration(ApplicationName, CurrentApplicationVersionId, VpcConfigurationId; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplicationVpcConfiguration", Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "VpcConfigurationId"=>VpcConfigurationId); aws_config=aws_config)
delete_application_vpc_configuration(ApplicationName, CurrentApplicationVersionId, VpcConfigurationId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DeleteApplicationVpcConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId, "VpcConfigurationId"=>VpcConfigurationId), params)); aws_config=aws_config)

"""
    describe_application(application_name)
    describe_application(application_name, params::Dict{String,<:Any})

Returns information about a specific Kinesis Data Analytics application. If you want to
retrieve a list of all applications in your account, use the ListApplications operation.

# Arguments
- `application_name`: The name of the application.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"IncludeAdditionalDetails"`: Displays verbose information about a Kinesis Data Analytics
  application, including the application's job plan.
"""
describe_application(ApplicationName; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DescribeApplication", Dict{String, Any}("ApplicationName"=>ApplicationName); aws_config=aws_config)
describe_application(ApplicationName, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DescribeApplication", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName), params)); aws_config=aws_config)

"""
    describe_application_snapshot(application_name, snapshot_name)
    describe_application_snapshot(application_name, snapshot_name, params::Dict{String,<:Any})

Returns information about a snapshot of application state data.

# Arguments
- `application_name`: The name of an existing application.
- `snapshot_name`: The identifier of an application snapshot. You can retrieve this value
  using .

"""
describe_application_snapshot(ApplicationName, SnapshotName; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DescribeApplicationSnapshot", Dict{String, Any}("ApplicationName"=>ApplicationName, "SnapshotName"=>SnapshotName); aws_config=aws_config)
describe_application_snapshot(ApplicationName, SnapshotName, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DescribeApplicationSnapshot", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "SnapshotName"=>SnapshotName), params)); aws_config=aws_config)

"""
    discover_input_schema(service_execution_role)
    discover_input_schema(service_execution_role, params::Dict{String,<:Any})

Infers a schema for a SQL-based Kinesis Data Analytics application by evaluating sample
records on the specified streaming source (Kinesis data stream or Kinesis Data Firehose
delivery stream) or Amazon S3 object. In the response, the operation returns the inferred
schema and also the sample records that the operation used to infer the schema.  You can
use the inferred schema when configuring a streaming source for your application. When you
create an application using the Kinesis Data Analytics console, the console uses this
operation to infer a schema and show it in the console user interface.

# Arguments
- `service_execution_role`: The ARN of the role that is used to access the streaming source.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"InputProcessingConfiguration"`: The InputProcessingConfiguration to use to preprocess
  the records before discovering the schema of the records.
- `"InputStartingPositionConfiguration"`: The point at which you want Kinesis Data
  Analytics to start reading records from the specified streaming source discovery purposes.
- `"ResourceARN"`: The Amazon Resource Name (ARN) of the streaming source.
- `"S3Configuration"`: Specify this parameter to discover a schema from data in an Amazon
  S3 object.
"""
discover_input_schema(ServiceExecutionRole; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DiscoverInputSchema", Dict{String, Any}("ServiceExecutionRole"=>ServiceExecutionRole); aws_config=aws_config)
discover_input_schema(ServiceExecutionRole, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("DiscoverInputSchema", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ServiceExecutionRole"=>ServiceExecutionRole), params)); aws_config=aws_config)

"""
    list_application_snapshots(application_name)
    list_application_snapshots(application_name, params::Dict{String,<:Any})

Lists information about the current application snapshots.

# Arguments
- `application_name`: The name of an existing application.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Limit"`: The maximum number of application snapshots to list.
- `"NextToken"`: Use this parameter if you receive a NextToken response in a previous
  request that indicates that there is more output available. Set it to the value of the
  previous call's NextToken response to indicate where the output should continue from.
"""
list_application_snapshots(ApplicationName; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("ListApplicationSnapshots", Dict{String, Any}("ApplicationName"=>ApplicationName); aws_config=aws_config)
list_application_snapshots(ApplicationName, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("ListApplicationSnapshots", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName), params)); aws_config=aws_config)

"""
    list_applications()
    list_applications(params::Dict{String,<:Any})

Returns a list of Kinesis Data Analytics applications in your account. For each
application, the response includes the application name, Amazon Resource Name (ARN), and
status.  If you want detailed information about a specific application, use
DescribeApplication.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Limit"`: The maximum number of applications to list.
- `"NextToken"`: If a previous command returned a pagination token, pass it into this value
  to retrieve the next set of results. For more information about pagination, see Using the
  AWS Command Line Interface's Pagination Options.
"""
list_applications(; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("ListApplications"; aws_config=aws_config)
list_applications(params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("ListApplications", params; aws_config=aws_config)

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Retrieves the list of key-value tags assigned to the application. For more information, see
Using Tagging.

# Arguments
- `resource_arn`: The ARN of the application for which to retrieve tags.

"""
list_tags_for_resource(ResourceARN; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("ListTagsForResource", Dict{String, Any}("ResourceARN"=>ResourceARN); aws_config=aws_config)
list_tags_for_resource(ResourceARN, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("ListTagsForResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceARN"=>ResourceARN), params)); aws_config=aws_config)

"""
    start_application(application_name, run_configuration)
    start_application(application_name, run_configuration, params::Dict{String,<:Any})

Starts the specified Kinesis Data Analytics application. After creating an application, you
must exclusively call this operation to start your application.

# Arguments
- `application_name`: The name of the application.
- `run_configuration`: Identifies the run configuration (start parameters) of a Kinesis
  Data Analytics application.

"""
start_application(ApplicationName, RunConfiguration; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("StartApplication", Dict{String, Any}("ApplicationName"=>ApplicationName, "RunConfiguration"=>RunConfiguration); aws_config=aws_config)
start_application(ApplicationName, RunConfiguration, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("StartApplication", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "RunConfiguration"=>RunConfiguration), params)); aws_config=aws_config)

"""
    stop_application(application_name)
    stop_application(application_name, params::Dict{String,<:Any})

Stops the application from processing data. You can stop an application only if it is in
the running status, unless you set the Force parameter to true. You can use the
DescribeApplication operation to find the application status.  Kinesis Data Analytics takes
a snapshot when the application is stopped, unless Force is set to true.

# Arguments
- `application_name`: The name of the running application to stop.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Force"`: Set to true to force the application to stop. If you set Force to true,
  Kinesis Data Analytics stops the application without taking a snapshot.   Force-stopping
  your application may lead to data loss or duplication. To prevent data loss or duplicate
  processing of data during application restarts, we recommend you to take frequent snapshots
  of your application.  You can only force stop a Flink-based Kinesis Data Analytics
  application. You can't force stop a SQL-based Kinesis Data Analytics application. The
  application must be in the STARTING, UPDATING, STOPPING, AUTOSCALING, or RUNNING status.
"""
stop_application(ApplicationName; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("StopApplication", Dict{String, Any}("ApplicationName"=>ApplicationName); aws_config=aws_config)
stop_application(ApplicationName, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("StopApplication", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName), params)); aws_config=aws_config)

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Adds one or more key-value tags to a Kinesis Data Analytics application. Note that the
maximum number of application tags includes system tags. The maximum number of user-defined
application tags is 50. For more information, see Using Tagging.

# Arguments
- `resource_arn`: The ARN of the application to assign the tags.
- `tags`: The key-value tags to assign to the application.

"""
tag_resource(ResourceARN, Tags; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("TagResource", Dict{String, Any}("ResourceARN"=>ResourceARN, "Tags"=>Tags); aws_config=aws_config)
tag_resource(ResourceARN, Tags, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("TagResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceARN"=>ResourceARN, "Tags"=>Tags), params)); aws_config=aws_config)

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Removes one or more tags from a Kinesis Data Analytics application. For more information,
see Using Tagging.

# Arguments
- `resource_arn`: The ARN of the Kinesis Data Analytics application from which to remove
  the tags.
- `tag_keys`: A list of keys of tags to remove from the specified application.

"""
untag_resource(ResourceARN, TagKeys; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("UntagResource", Dict{String, Any}("ResourceARN"=>ResourceARN, "TagKeys"=>TagKeys); aws_config=aws_config)
untag_resource(ResourceARN, TagKeys, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("UntagResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceARN"=>ResourceARN, "TagKeys"=>TagKeys), params)); aws_config=aws_config)

"""
    update_application(application_name, current_application_version_id)
    update_application(application_name, current_application_version_id, params::Dict{String,<:Any})

Updates an existing Kinesis Data Analytics application. Using this operation, you can
update application code, input configuration, and output configuration.  Kinesis Data
Analytics updates the ApplicationVersionId each time you update your application.   You
cannot update the RuntimeEnvironment of an existing application. If you need to update an
application's RuntimeEnvironment, you must delete the application and create it again.

# Arguments
- `application_name`: The name of the application to update.
- `current_application_version_id`: The current application version ID. You can retrieve
  the application version ID using DescribeApplication.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ApplicationConfigurationUpdate"`: Describes application configuration updates.
- `"CloudWatchLoggingOptionUpdates"`: Describes application Amazon CloudWatch logging
  option updates. You can only update existing CloudWatch logging options with this action.
  To add a new CloudWatch logging option, use AddApplicationCloudWatchLoggingOption.
- `"RunConfigurationUpdate"`: Describes updates to the application's starting parameters.
- `"ServiceExecutionRoleUpdate"`: Describes updates to the service execution role.
"""
update_application(ApplicationName, CurrentApplicationVersionId; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("UpdateApplication", Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId); aws_config=aws_config)
update_application(ApplicationName, CurrentApplicationVersionId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("UpdateApplication", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationName"=>ApplicationName, "CurrentApplicationVersionId"=>CurrentApplicationVersionId), params)); aws_config=aws_config)

"""
    update_application_maintenance_configuration(application_maintenance_configuration_update, application_name)
    update_application_maintenance_configuration(application_maintenance_configuration_update, application_name, params::Dict{String,<:Any})

Updates the configuration for the automatic maintenance that Kinesis Data Analytics
performs on the application. For information about automatic application maintenance, see
Kinesis Data Analytics for Apache Flink Maintenance.

# Arguments
- `application_maintenance_configuration_update`: Describes the application maintenance
  configuration update.
- `application_name`: The name of the application for which you want to update the
  maintenance time window.

"""
update_application_maintenance_configuration(ApplicationMaintenanceConfigurationUpdate, ApplicationName; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("UpdateApplicationMaintenanceConfiguration", Dict{String, Any}("ApplicationMaintenanceConfigurationUpdate"=>ApplicationMaintenanceConfigurationUpdate, "ApplicationName"=>ApplicationName); aws_config=aws_config)
update_application_maintenance_configuration(ApplicationMaintenanceConfigurationUpdate, ApplicationName, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = kinesis_analytics_v2("UpdateApplicationMaintenanceConfiguration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ApplicationMaintenanceConfigurationUpdate"=>ApplicationMaintenanceConfigurationUpdate, "ApplicationName"=>ApplicationName), params)); aws_config=aws_config)
