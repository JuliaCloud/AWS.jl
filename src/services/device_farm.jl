# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
include("_utilities.jl")
using Compat
using UUIDs
using .AWSServices: device_farm

"""
    CreateDevicePool()

Creates a device pool.

# Required Parameters
- `name`: The device pool's name.
- `projectArn`: The ARN of the project for the device pool.
- `rules`: The device pool's rules.

# Optional Parameters
- `description`: The device pool's description.
- `maxDevices`: The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and meet the criteria that you assign for the rules parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter. By specifying the maximum number of devices, you can control the costs that you incur by running tests.
"""
CreateDevicePool(name, projectArn, rules) = device_farm("CreateDevicePool", Dict{String, Any}("name"=>name, "projectArn"=>projectArn, "rules"=>rules))
CreateDevicePool(name, projectArn, rules, args::AbstractDict{String, <:Any}) = device_farm("CreateDevicePool", Dict{String, Any}("name"=>name, "projectArn"=>projectArn, "rules"=>rules, args...))

"""
    CreateInstanceProfile()

Creates a profile that can be applied to one or more private fleet device instances.

# Required Parameters
- `name`: The name of your instance profile.

# Optional Parameters
- `description`: The description of your instance profile.
- `excludeAppPackagesFromCleanup`: An array of strings that specifies the list of app packages that should not be cleaned up from the device after a test run. The list of packages is considered only if you set packageCleanup to true.
- `packageCleanup`: When set to true, Device Farm removes app packages after a test run. The default value is false for private devices.
- `rebootAfterUse`: When set to true, Device Farm reboots the instance after a test run. The default value is true.
"""
CreateInstanceProfile(name) = device_farm("CreateInstanceProfile", Dict{String, Any}("name"=>name))
CreateInstanceProfile(name, args::AbstractDict{String, <:Any}) = device_farm("CreateInstanceProfile", Dict{String, Any}("name"=>name, args...))

"""
    CreateNetworkProfile()

Creates a network profile.

# Required Parameters
- `name`: The name for the new network profile.
- `projectArn`: The Amazon Resource Name (ARN) of the project for which you want to create a network profile.

# Optional Parameters
- `description`: The description of the network profile.
- `downlinkBandwidthBits`: The data throughput rate in bits per second, as an integer from 0 to 104857600.
- `downlinkDelayMs`: Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
- `downlinkJitterMs`: Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
- `downlinkLossPercent`: Proportion of received packets that fail to arrive from 0 to 100 percent.
- `type`: The type of network profile to create. Valid values are listed here.
- `uplinkBandwidthBits`: The data throughput rate in bits per second, as an integer from 0 to 104857600.
- `uplinkDelayMs`: Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
- `uplinkJitterMs`: Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
- `uplinkLossPercent`: Proportion of transmitted packets that fail to arrive from 0 to 100 percent.
"""
CreateNetworkProfile(name, projectArn) = device_farm("CreateNetworkProfile", Dict{String, Any}("name"=>name, "projectArn"=>projectArn))
CreateNetworkProfile(name, projectArn, args::AbstractDict{String, <:Any}) = device_farm("CreateNetworkProfile", Dict{String, Any}("name"=>name, "projectArn"=>projectArn, args...))

"""
    CreateProject()

Creates a project.

# Required Parameters
- `name`: The project's name.

# Optional Parameters
- `defaultJobTimeoutMinutes`: Sets the execution timeout value (in minutes) for a project. All test runs in this project use the specified execution timeout value unless overridden when scheduling a run.
"""
CreateProject(name) = device_farm("CreateProject", Dict{String, Any}("name"=>name))
CreateProject(name, args::AbstractDict{String, <:Any}) = device_farm("CreateProject", Dict{String, Any}("name"=>name, args...))

"""
    CreateRemoteAccessSession()

Specifies and starts a remote access session.

# Required Parameters
- `deviceArn`: The ARN of the device for which you want to create a remote access session.
- `projectArn`: The Amazon Resource Name (ARN) of the project for which you want to create a remote access session.

# Optional Parameters
- `clientId`: Unique identifier for the client. If you want access to multiple devices on the same client, you should pass the same clientId value in each call to CreateRemoteAccessSession. This identifier is required only if remoteDebugEnabled is set to true. Remote debugging is no longer supported.
- `configuration`: The configuration information for the remote access session request.
- `instanceArn`: The Amazon Resource Name (ARN) of the device instance for which you want to create a remote access session.
- `interactionMode`: The interaction mode of the remote access session. Valid values are:   INTERACTIVE: You can interact with the iOS device by viewing, touching, and rotating the screen. You cannot run XCUITest framework-based tests in this mode.   NO_VIDEO: You are connected to the device, but cannot interact with it or view the screen. This mode has the fastest test execution speed. You can run XCUITest framework-based tests in this mode.   VIDEO_ONLY: You can view the screen, but cannot touch or rotate it. You can run XCUITest framework-based tests and watch the screen in this mode.  
- `name`: The name of the remote access session to create.
- `remoteDebugEnabled`: Set to true if you want to access devices remotely for debugging in your remote access session. Remote debugging is no longer supported.
- `remoteRecordAppArn`: The Amazon Resource Name (ARN) for the app to be recorded in the remote access session.
- `remoteRecordEnabled`: Set to true to enable remote recording for the remote access session.
- `skipAppResign`: When set to true, for private devices, Device Farm does not sign your app again. For public devices, Device Farm always signs your apps again. For more information on how Device Farm modifies your uploads during tests, see Do you modify my app? 
- `sshPublicKey`: Ignored. The public key of the ssh key pair you want to use for connecting to remote devices in your remote debugging session. This key is required only if remoteDebugEnabled is set to true. Remote debugging is no longer supported.
"""
CreateRemoteAccessSession(deviceArn, projectArn) = device_farm("CreateRemoteAccessSession", Dict{String, Any}("deviceArn"=>deviceArn, "projectArn"=>projectArn))
CreateRemoteAccessSession(deviceArn, projectArn, args::AbstractDict{String, <:Any}) = device_farm("CreateRemoteAccessSession", Dict{String, Any}("deviceArn"=>deviceArn, "projectArn"=>projectArn, args...))

"""
    CreateTestGridProject()

Creates a Selenium testing project. Projects are used to track TestGridSession instances.

# Required Parameters
- `name`: Human-readable name of the Selenium testing project.

# Optional Parameters
- `description`: Human-readable description of the project.
"""
CreateTestGridProject(name) = device_farm("CreateTestGridProject", Dict{String, Any}("name"=>name))
CreateTestGridProject(name, args::AbstractDict{String, <:Any}) = device_farm("CreateTestGridProject", Dict{String, Any}("name"=>name, args...))

"""
    CreateTestGridUrl()

Creates a signed, short-term URL that can be passed to a Selenium RemoteWebDriver constructor.

# Required Parameters
- `expiresInSeconds`: Lifetime, in seconds, of the URL.
- `projectArn`: ARN (from CreateTestGridProject or ListTestGridProjects) to associate with the short-term URL. 

"""
CreateTestGridUrl(expiresInSeconds, projectArn) = device_farm("CreateTestGridUrl", Dict{String, Any}("expiresInSeconds"=>expiresInSeconds, "projectArn"=>projectArn))
CreateTestGridUrl(expiresInSeconds, projectArn, args::AbstractDict{String, <:Any}) = device_farm("CreateTestGridUrl", Dict{String, Any}("expiresInSeconds"=>expiresInSeconds, "projectArn"=>projectArn, args...))

"""
    CreateUpload()

Uploads an app or test scripts.

# Required Parameters
- `name`: The upload's file name. The name should not contain any forward slashes (/). If you are uploading an iOS app, the file name must end with the .ipa extension. If you are uploading an Android app, the file name must end with the .apk extension. For all others, the file name must end with the .zip file extension.
- `projectArn`: The ARN of the project for the upload.
- `type`: The upload's upload type. Must be one of the following values:   ANDROID_APP   IOS_APP   WEB_APP   EXTERNAL_DATA   APPIUM_JAVA_JUNIT_TEST_PACKAGE   APPIUM_JAVA_TESTNG_TEST_PACKAGE   APPIUM_PYTHON_TEST_PACKAGE   APPIUM_NODE_TEST_PACKAGE   APPIUM_RUBY_TEST_PACKAGE   APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE   APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE   APPIUM_WEB_PYTHON_TEST_PACKAGE   APPIUM_WEB_NODE_TEST_PACKAGE   APPIUM_WEB_RUBY_TEST_PACKAGE   CALABASH_TEST_PACKAGE   INSTRUMENTATION_TEST_PACKAGE   UIAUTOMATION_TEST_PACKAGE   UIAUTOMATOR_TEST_PACKAGE   XCTEST_TEST_PACKAGE   XCTEST_UI_TEST_PACKAGE   APPIUM_JAVA_JUNIT_TEST_SPEC   APPIUM_JAVA_TESTNG_TEST_SPEC   APPIUM_PYTHON_TEST_SPEC   APPIUM_NODE_TEST_SPEC   APPIUM_RUBY_TEST_SPEC   APPIUM_WEB_JAVA_JUNIT_TEST_SPEC   APPIUM_WEB_JAVA_TESTNG_TEST_SPEC   APPIUM_WEB_PYTHON_TEST_SPEC   APPIUM_WEB_NODE_TEST_SPEC   APPIUM_WEB_RUBY_TEST_SPEC   INSTRUMENTATION_TEST_SPEC   XCTEST_UI_TEST_SPEC    If you call CreateUpload with WEB_APP specified, AWS Device Farm throws an ArgumentException error.

# Optional Parameters
- `contentType`: The upload's content type (for example, application/octet-stream).
"""
CreateUpload(name, projectArn, type) = device_farm("CreateUpload", Dict{String, Any}("name"=>name, "projectArn"=>projectArn, "type"=>type))
CreateUpload(name, projectArn, type, args::AbstractDict{String, <:Any}) = device_farm("CreateUpload", Dict{String, Any}("name"=>name, "projectArn"=>projectArn, "type"=>type, args...))

"""
    CreateVPCEConfiguration()

Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud (VPC) endpoint.

# Required Parameters
- `serviceDnsName`: The DNS name of the service running in your VPC that you want Device Farm to test.
- `vpceConfigurationName`: The friendly name you give to your VPC endpoint configuration, to manage your configurations more easily.
- `vpceServiceName`: The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.

# Optional Parameters
- `vpceConfigurationDescription`: An optional description that provides details about your VPC endpoint configuration.
"""
CreateVPCEConfiguration(serviceDnsName, vpceConfigurationName, vpceServiceName) = device_farm("CreateVPCEConfiguration", Dict{String, Any}("serviceDnsName"=>serviceDnsName, "vpceConfigurationName"=>vpceConfigurationName, "vpceServiceName"=>vpceServiceName))
CreateVPCEConfiguration(serviceDnsName, vpceConfigurationName, vpceServiceName, args::AbstractDict{String, <:Any}) = device_farm("CreateVPCEConfiguration", Dict{String, Any}("serviceDnsName"=>serviceDnsName, "vpceConfigurationName"=>vpceConfigurationName, "vpceServiceName"=>vpceServiceName, args...))

"""
    DeleteDevicePool()

Deletes a device pool given the pool ARN. Does not allow deletion of curated pools owned by the system.

# Required Parameters
- `arn`: Represents the Amazon Resource Name (ARN) of the Device Farm device pool to delete.

"""
DeleteDevicePool(arn) = device_farm("DeleteDevicePool", Dict{String, Any}("arn"=>arn))
DeleteDevicePool(arn, args::AbstractDict{String, <:Any}) = device_farm("DeleteDevicePool", Dict{String, Any}("arn"=>arn, args...))

"""
    DeleteInstanceProfile()

Deletes a profile that can be applied to one or more private device instances.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the instance profile you are requesting to delete.

"""
DeleteInstanceProfile(arn) = device_farm("DeleteInstanceProfile", Dict{String, Any}("arn"=>arn))
DeleteInstanceProfile(arn, args::AbstractDict{String, <:Any}) = device_farm("DeleteInstanceProfile", Dict{String, Any}("arn"=>arn, args...))

"""
    DeleteNetworkProfile()

Deletes a network profile.

# Required Parameters
- `arn`: The ARN of the network profile to delete.

"""
DeleteNetworkProfile(arn) = device_farm("DeleteNetworkProfile", Dict{String, Any}("arn"=>arn))
DeleteNetworkProfile(arn, args::AbstractDict{String, <:Any}) = device_farm("DeleteNetworkProfile", Dict{String, Any}("arn"=>arn, args...))

"""
    DeleteProject()

Deletes an AWS Device Farm project, given the project ARN.  Deleting this resource does not stop an in-progress run.

# Required Parameters
- `arn`: Represents the Amazon Resource Name (ARN) of the Device Farm project to delete.

"""
DeleteProject(arn) = device_farm("DeleteProject", Dict{String, Any}("arn"=>arn))
DeleteProject(arn, args::AbstractDict{String, <:Any}) = device_farm("DeleteProject", Dict{String, Any}("arn"=>arn, args...))

"""
    DeleteRemoteAccessSession()

Deletes a completed remote access session and its results.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the session for which you want to delete remote access.

"""
DeleteRemoteAccessSession(arn) = device_farm("DeleteRemoteAccessSession", Dict{String, Any}("arn"=>arn))
DeleteRemoteAccessSession(arn, args::AbstractDict{String, <:Any}) = device_farm("DeleteRemoteAccessSession", Dict{String, Any}("arn"=>arn, args...))

"""
    DeleteRun()

Deletes the run, given the run ARN.  Deleting this resource does not stop an in-progress run.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) for the run to delete.

"""
DeleteRun(arn) = device_farm("DeleteRun", Dict{String, Any}("arn"=>arn))
DeleteRun(arn, args::AbstractDict{String, <:Any}) = device_farm("DeleteRun", Dict{String, Any}("arn"=>arn, args...))

"""
    DeleteTestGridProject()

 Deletes a Selenium testing project and all content generated under it.   You cannot undo this operation.   You cannot delete a project if it has active sessions. 

# Required Parameters
- `projectArn`: The ARN of the project to delete, from CreateTestGridProject or ListTestGridProjects.

"""
DeleteTestGridProject(projectArn) = device_farm("DeleteTestGridProject", Dict{String, Any}("projectArn"=>projectArn))
DeleteTestGridProject(projectArn, args::AbstractDict{String, <:Any}) = device_farm("DeleteTestGridProject", Dict{String, Any}("projectArn"=>projectArn, args...))

"""
    DeleteUpload()

Deletes an upload given the upload ARN.

# Required Parameters
- `arn`: Represents the Amazon Resource Name (ARN) of the Device Farm upload to delete.

"""
DeleteUpload(arn) = device_farm("DeleteUpload", Dict{String, Any}("arn"=>arn))
DeleteUpload(arn, args::AbstractDict{String, <:Any}) = device_farm("DeleteUpload", Dict{String, Any}("arn"=>arn, args...))

"""
    DeleteVPCEConfiguration()

Deletes a configuration for your Amazon Virtual Private Cloud (VPC) endpoint.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to delete.

"""
DeleteVPCEConfiguration(arn) = device_farm("DeleteVPCEConfiguration", Dict{String, Any}("arn"=>arn))
DeleteVPCEConfiguration(arn, args::AbstractDict{String, <:Any}) = device_farm("DeleteVPCEConfiguration", Dict{String, Any}("arn"=>arn, args...))

"""
    GetAccountSettings()

Returns the number of unmetered iOS or unmetered Android devices that have been purchased by the account.

"""
GetAccountSettings() = device_farm("GetAccountSettings")
GetAccountSettings(args::AbstractDict{String, <:Any}) = device_farm("GetAccountSettings", args)

"""
    GetDevice()

Gets information about a unique device type.

# Required Parameters
- `arn`: The device type's ARN.

"""
GetDevice(arn) = device_farm("GetDevice", Dict{String, Any}("arn"=>arn))
GetDevice(arn, args::AbstractDict{String, <:Any}) = device_farm("GetDevice", Dict{String, Any}("arn"=>arn, args...))

"""
    GetDeviceInstance()

Returns information about a device instance that belongs to a private device fleet.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the instance you're requesting information about.

"""
GetDeviceInstance(arn) = device_farm("GetDeviceInstance", Dict{String, Any}("arn"=>arn))
GetDeviceInstance(arn, args::AbstractDict{String, <:Any}) = device_farm("GetDeviceInstance", Dict{String, Any}("arn"=>arn, args...))

"""
    GetDevicePool()

Gets information about a device pool.

# Required Parameters
- `arn`: The device pool's ARN.

"""
GetDevicePool(arn) = device_farm("GetDevicePool", Dict{String, Any}("arn"=>arn))
GetDevicePool(arn, args::AbstractDict{String, <:Any}) = device_farm("GetDevicePool", Dict{String, Any}("arn"=>arn, args...))

"""
    GetDevicePoolCompatibility()

Gets information about compatibility with a device pool.

# Required Parameters
- `devicePoolArn`: The device pool's ARN.

# Optional Parameters
- `appArn`: The ARN of the app that is associated with the specified device pool.
- `configuration`: An object that contains information about the settings for a run.
- `test`: Information about the uploaded test to be run against the device pool.
- `testType`: The test type for the specified device pool. Allowed values include the following:   BUILTIN_FUZZ.   BUILTIN_EXPLORER. For Android, an app explorer that traverses an Android app, interacting with it and capturing screenshots at the same time.   APPIUM_JAVA_JUNIT.   APPIUM_JAVA_TESTNG.   APPIUM_PYTHON.   APPIUM_NODE.   APPIUM_RUBY.   APPIUM_WEB_JAVA_JUNIT.   APPIUM_WEB_JAVA_TESTNG.   APPIUM_WEB_PYTHON.   APPIUM_WEB_NODE.   APPIUM_WEB_RUBY.   CALABASH.   INSTRUMENTATION.   UIAUTOMATION.   UIAUTOMATOR.   XCTEST.   XCTEST_UI.  
"""
GetDevicePoolCompatibility(devicePoolArn) = device_farm("GetDevicePoolCompatibility", Dict{String, Any}("devicePoolArn"=>devicePoolArn))
GetDevicePoolCompatibility(devicePoolArn, args::AbstractDict{String, <:Any}) = device_farm("GetDevicePoolCompatibility", Dict{String, Any}("devicePoolArn"=>devicePoolArn, args...))

"""
    GetInstanceProfile()

Returns information about the specified instance profile.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of an instance profile.

"""
GetInstanceProfile(arn) = device_farm("GetInstanceProfile", Dict{String, Any}("arn"=>arn))
GetInstanceProfile(arn, args::AbstractDict{String, <:Any}) = device_farm("GetInstanceProfile", Dict{String, Any}("arn"=>arn, args...))

"""
    GetJob()

Gets information about a job.

# Required Parameters
- `arn`: The job's ARN.

"""
GetJob(arn) = device_farm("GetJob", Dict{String, Any}("arn"=>arn))
GetJob(arn, args::AbstractDict{String, <:Any}) = device_farm("GetJob", Dict{String, Any}("arn"=>arn, args...))

"""
    GetNetworkProfile()

Returns information about a network profile.

# Required Parameters
- `arn`: The ARN of the network profile to return information about.

"""
GetNetworkProfile(arn) = device_farm("GetNetworkProfile", Dict{String, Any}("arn"=>arn))
GetNetworkProfile(arn, args::AbstractDict{String, <:Any}) = device_farm("GetNetworkProfile", Dict{String, Any}("arn"=>arn, args...))

"""
    GetOfferingStatus()

Gets the current status and future status of all offerings purchased by an AWS account. The response indicates how many offerings are currently available and the offerings that will be available in the next period. The API returns a NotEligible error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact aws-devicefarm-support@amazon.com.

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
GetOfferingStatus() = device_farm("GetOfferingStatus")
GetOfferingStatus(args::AbstractDict{String, <:Any}) = device_farm("GetOfferingStatus", args)

"""
    GetProject()

Gets information about a project.

# Required Parameters
- `arn`: The project's ARN.

"""
GetProject(arn) = device_farm("GetProject", Dict{String, Any}("arn"=>arn))
GetProject(arn, args::AbstractDict{String, <:Any}) = device_farm("GetProject", Dict{String, Any}("arn"=>arn, args...))

"""
    GetRemoteAccessSession()

Returns a link to a currently running remote access session.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the remote access session about which you want to get session information.

"""
GetRemoteAccessSession(arn) = device_farm("GetRemoteAccessSession", Dict{String, Any}("arn"=>arn))
GetRemoteAccessSession(arn, args::AbstractDict{String, <:Any}) = device_farm("GetRemoteAccessSession", Dict{String, Any}("arn"=>arn, args...))

"""
    GetRun()

Gets information about a run.

# Required Parameters
- `arn`: The run's ARN.

"""
GetRun(arn) = device_farm("GetRun", Dict{String, Any}("arn"=>arn))
GetRun(arn, args::AbstractDict{String, <:Any}) = device_farm("GetRun", Dict{String, Any}("arn"=>arn, args...))

"""
    GetSuite()

Gets information about a suite.

# Required Parameters
- `arn`: The suite's ARN.

"""
GetSuite(arn) = device_farm("GetSuite", Dict{String, Any}("arn"=>arn))
GetSuite(arn, args::AbstractDict{String, <:Any}) = device_farm("GetSuite", Dict{String, Any}("arn"=>arn, args...))

"""
    GetTest()

Gets information about a test.

# Required Parameters
- `arn`: The test's ARN.

"""
GetTest(arn) = device_farm("GetTest", Dict{String, Any}("arn"=>arn))
GetTest(arn, args::AbstractDict{String, <:Any}) = device_farm("GetTest", Dict{String, Any}("arn"=>arn, args...))

"""
    GetTestGridProject()

Retrieves information about a Selenium testing project.

# Required Parameters
- `projectArn`: The ARN of the Selenium testing project, from either CreateTestGridProject or ListTestGridProjects.

"""
GetTestGridProject(projectArn) = device_farm("GetTestGridProject", Dict{String, Any}("projectArn"=>projectArn))
GetTestGridProject(projectArn, args::AbstractDict{String, <:Any}) = device_farm("GetTestGridProject", Dict{String, Any}("projectArn"=>projectArn, args...))

"""
    GetTestGridSession()

A session is an instance of a browser created through a RemoteWebDriver with the URL from CreateTestGridUrlResult url. You can use the following to look up sessions:   The session ARN (GetTestGridSessionRequest sessionArn).   The project ARN and a session ID (GetTestGridSessionRequest projectArn and GetTestGridSessionRequest sessionId).   

# Optional Parameters
- `projectArn`: The ARN for the project that this session belongs to. See CreateTestGridProject and ListTestGridProjects.
- `sessionArn`: An ARN that uniquely identifies a TestGridSession.
- `sessionId`: An ID associated with this session.
"""
GetTestGridSession() = device_farm("GetTestGridSession")
GetTestGridSession(args::AbstractDict{String, <:Any}) = device_farm("GetTestGridSession", args)

"""
    GetUpload()

Gets information about an upload.

# Required Parameters
- `arn`: The upload's ARN.

"""
GetUpload(arn) = device_farm("GetUpload", Dict{String, Any}("arn"=>arn))
GetUpload(arn, args::AbstractDict{String, <:Any}) = device_farm("GetUpload", Dict{String, Any}("arn"=>arn, args...))

"""
    GetVPCEConfiguration()

Returns information about the configuration settings for your Amazon Virtual Private Cloud (VPC) endpoint.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to describe.

"""
GetVPCEConfiguration(arn) = device_farm("GetVPCEConfiguration", Dict{String, Any}("arn"=>arn))
GetVPCEConfiguration(arn, args::AbstractDict{String, <:Any}) = device_farm("GetVPCEConfiguration", Dict{String, Any}("arn"=>arn, args...))

"""
    InstallToRemoteAccessSession()

Installs an application to the device in a remote access session. For Android applications, the file must be in .apk format. For iOS applications, the file must be in .ipa format.

# Required Parameters
- `appArn`: The ARN of the app about which you are requesting information.
- `remoteAccessSessionArn`: The Amazon Resource Name (ARN) of the remote access session about which you are requesting information.

"""
InstallToRemoteAccessSession(appArn, remoteAccessSessionArn) = device_farm("InstallToRemoteAccessSession", Dict{String, Any}("appArn"=>appArn, "remoteAccessSessionArn"=>remoteAccessSessionArn))
InstallToRemoteAccessSession(appArn, remoteAccessSessionArn, args::AbstractDict{String, <:Any}) = device_farm("InstallToRemoteAccessSession", Dict{String, Any}("appArn"=>appArn, "remoteAccessSessionArn"=>remoteAccessSessionArn, args...))

"""
    ListArtifacts()

Gets information about artifacts.

# Required Parameters
- `arn`: The run, job, suite, or test ARN.
- `type`: The artifacts' type. Allowed values include:   FILE   LOG   SCREENSHOT  

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListArtifacts(arn, type) = device_farm("ListArtifacts", Dict{String, Any}("arn"=>arn, "type"=>type))
ListArtifacts(arn, type, args::AbstractDict{String, <:Any}) = device_farm("ListArtifacts", Dict{String, Any}("arn"=>arn, "type"=>type, args...))

"""
    ListDeviceInstances()

Returns information about the private device instances associated with one or more AWS accounts.

# Optional Parameters
- `maxResults`: An integer that specifies the maximum number of items you want to return in the API response.
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListDeviceInstances() = device_farm("ListDeviceInstances")
ListDeviceInstances(args::AbstractDict{String, <:Any}) = device_farm("ListDeviceInstances", args)

"""
    ListDevicePools()

Gets information about device pools.

# Required Parameters
- `arn`: The project ARN.

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
- `type`: The device pools' type. Allowed values include:   CURATED: A device pool that is created and managed by AWS Device Farm.   PRIVATE: A device pool that is created and managed by the device pool developer.  
"""
ListDevicePools(arn) = device_farm("ListDevicePools", Dict{String, Any}("arn"=>arn))
ListDevicePools(arn, args::AbstractDict{String, <:Any}) = device_farm("ListDevicePools", Dict{String, Any}("arn"=>arn, args...))

"""
    ListDevices()

Gets information about unique device types.

# Optional Parameters
- `arn`: The Amazon Resource Name (ARN) of the project.
- `filters`: Used to select a set of devices. A filter is made up of an attribute, an operator, and one or more values.   Attribute: The aspect of a device such as platform or model used as the selection criteria in a device filter. Allowed values include:   ARN: The Amazon Resource Name (ARN) of the device (for example, arn:aws:devicefarm:us-west-2::device:12345Example).   PLATFORM: The device platform. Valid values are ANDROID or IOS.   OS_VERSION: The operating system version (for example, 10.3.2).   MODEL: The device model (for example, iPad 5th Gen).   AVAILABILITY: The current availability of the device. Valid values are AVAILABLE, HIGHLY_AVAILABLE, BUSY, or TEMPORARY_NOT_AVAILABLE.   FORM_FACTOR: The device form factor. Valid values are PHONE or TABLET.   MANUFACTURER: The device manufacturer (for example, Apple).   REMOTE_ACCESS_ENABLED: Whether the device is enabled for remote access. Valid values are TRUE or FALSE.   REMOTE_DEBUG_ENABLED: Whether the device is enabled for remote debugging. Valid values are TRUE or FALSE. Because remote debugging is no longer supported, this attribute is ignored.   INSTANCE_ARN: The Amazon Resource Name (ARN) of the device instance.   INSTANCE_LABELS: The label of the device instance.   FLEET_TYPE: The fleet type. Valid values are PUBLIC or PRIVATE.     Operator: The filter operator.   The EQUALS operator is available for every attribute except INSTANCE_LABELS.   The CONTAINS operator is available for the INSTANCE_LABELS and MODEL attributes.   The IN and NOT_IN operators are available for the ARN, OS_VERSION, MODEL, MANUFACTURER, and INSTANCE_ARN attributes.   The LESS_THAN, GREATER_THAN, LESS_THAN_OR_EQUALS, and GREATER_THAN_OR_EQUALS operators are also available for the OS_VERSION attribute.     Values: An array of one or more filter values.   The IN and NOT_IN operators take a values array that has one or more elements.   The other operators require an array with a single element.   In a request, the AVAILABILITY attribute takes the following values: AVAILABLE, HIGHLY_AVAILABLE, BUSY, or TEMPORARY_NOT_AVAILABLE.    
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListDevices() = device_farm("ListDevices")
ListDevices(args::AbstractDict{String, <:Any}) = device_farm("ListDevices", args)

"""
    ListInstanceProfiles()

Returns information about all the instance profiles in an AWS account.

# Optional Parameters
- `maxResults`: An integer that specifies the maximum number of items you want to return in the API response.
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListInstanceProfiles() = device_farm("ListInstanceProfiles")
ListInstanceProfiles(args::AbstractDict{String, <:Any}) = device_farm("ListInstanceProfiles", args)

"""
    ListJobs()

Gets information about jobs for a given test run.

# Required Parameters
- `arn`: The run's Amazon Resource Name (ARN).

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListJobs(arn) = device_farm("ListJobs", Dict{String, Any}("arn"=>arn))
ListJobs(arn, args::AbstractDict{String, <:Any}) = device_farm("ListJobs", Dict{String, Any}("arn"=>arn, args...))

"""
    ListNetworkProfiles()

Returns the list of available network profiles.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the project for which you want to list network profiles.

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
- `type`: The type of network profile to return information about. Valid values are listed here.
"""
ListNetworkProfiles(arn) = device_farm("ListNetworkProfiles", Dict{String, Any}("arn"=>arn))
ListNetworkProfiles(arn, args::AbstractDict{String, <:Any}) = device_farm("ListNetworkProfiles", Dict{String, Any}("arn"=>arn, args...))

"""
    ListOfferingPromotions()

Returns a list of offering promotions. Each offering promotion record contains the ID and description of the promotion. The API returns a NotEligible error if the caller is not permitted to invoke the operation. Contact aws-devicefarm-support@amazon.com if you must be able to invoke this operation.

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListOfferingPromotions() = device_farm("ListOfferingPromotions")
ListOfferingPromotions(args::AbstractDict{String, <:Any}) = device_farm("ListOfferingPromotions", args)

"""
    ListOfferingTransactions()

Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS account. The list is paginated and ordered by a descending timestamp (most recent transactions are first). The API returns a NotEligible error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact aws-devicefarm-support@amazon.com.

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListOfferingTransactions() = device_farm("ListOfferingTransactions")
ListOfferingTransactions(args::AbstractDict{String, <:Any}) = device_farm("ListOfferingTransactions", args)

"""
    ListOfferings()

Returns a list of products or offerings that the user can manage through the API. Each offering record indicates the recurring price per unit and the frequency for that offering. The API returns a NotEligible error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact aws-devicefarm-support@amazon.com.

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListOfferings() = device_farm("ListOfferings")
ListOfferings(args::AbstractDict{String, <:Any}) = device_farm("ListOfferings", args)

"""
    ListProjects()

Gets information about projects.

# Optional Parameters
- `arn`: Optional. If no Amazon Resource Name (ARN) is specified, then AWS Device Farm returns a list of all projects for the AWS account. You can also specify a project ARN.
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListProjects() = device_farm("ListProjects")
ListProjects(args::AbstractDict{String, <:Any}) = device_farm("ListProjects", args)

"""
    ListRemoteAccessSessions()

Returns a list of all currently running remote access sessions.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the project about which you are requesting information.

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListRemoteAccessSessions(arn) = device_farm("ListRemoteAccessSessions", Dict{String, Any}("arn"=>arn))
ListRemoteAccessSessions(arn, args::AbstractDict{String, <:Any}) = device_farm("ListRemoteAccessSessions", Dict{String, Any}("arn"=>arn, args...))

"""
    ListRuns()

Gets information about runs, given an AWS Device Farm project ARN.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the project for which you want to list runs.

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListRuns(arn) = device_farm("ListRuns", Dict{String, Any}("arn"=>arn))
ListRuns(arn, args::AbstractDict{String, <:Any}) = device_farm("ListRuns", Dict{String, Any}("arn"=>arn, args...))

"""
    ListSamples()

Gets information about samples, given an AWS Device Farm job ARN.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the job used to list samples.

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListSamples(arn) = device_farm("ListSamples", Dict{String, Any}("arn"=>arn))
ListSamples(arn, args::AbstractDict{String, <:Any}) = device_farm("ListSamples", Dict{String, Any}("arn"=>arn, args...))

"""
    ListSuites()

Gets information about test suites for a given job.

# Required Parameters
- `arn`: The job's Amazon Resource Name (ARN).

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListSuites(arn) = device_farm("ListSuites", Dict{String, Any}("arn"=>arn))
ListSuites(arn, args::AbstractDict{String, <:Any}) = device_farm("ListSuites", Dict{String, Any}("arn"=>arn, args...))

"""
    ListTagsForResource()

List the tags for an AWS Device Farm resource.

# Required Parameters
- `ResourceARN`: The Amazon Resource Name (ARN) of the resource or resources for which to list tags. You can associate tags with the following Device Farm resources: PROJECT, RUN, NETWORK_PROFILE, INSTANCE_PROFILE, DEVICE_INSTANCE, SESSION, DEVICE_POOL, DEVICE, and VPCE_CONFIGURATION.

"""
ListTagsForResource(ResourceARN) = device_farm("ListTagsForResource", Dict{String, Any}("ResourceARN"=>ResourceARN))
ListTagsForResource(ResourceARN, args::AbstractDict{String, <:Any}) = device_farm("ListTagsForResource", Dict{String, Any}("ResourceARN"=>ResourceARN, args...))

"""
    ListTestGridProjects()

Gets a list of all Selenium testing projects in your account.

# Optional Parameters
- `maxResult`: Return no more than this number of results.
- `nextToken`: From a response, used to continue a paginated listing. 
"""
ListTestGridProjects() = device_farm("ListTestGridProjects")
ListTestGridProjects(args::AbstractDict{String, <:Any}) = device_farm("ListTestGridProjects", args)

"""
    ListTestGridSessionActions()

Returns a list of the actions taken in a TestGridSession.

# Required Parameters
- `sessionArn`: The ARN of the session to retrieve.

# Optional Parameters
- `maxResult`: The maximum number of sessions to return per response.
- `nextToken`: Pagination token.
"""
ListTestGridSessionActions(sessionArn) = device_farm("ListTestGridSessionActions", Dict{String, Any}("sessionArn"=>sessionArn))
ListTestGridSessionActions(sessionArn, args::AbstractDict{String, <:Any}) = device_farm("ListTestGridSessionActions", Dict{String, Any}("sessionArn"=>sessionArn, args...))

"""
    ListTestGridSessionArtifacts()

Retrieves a list of artifacts created during the session.

# Required Parameters
- `sessionArn`: The ARN of a TestGridSession. 

# Optional Parameters
- `maxResult`: The maximum number of results to be returned by a request.
- `nextToken`: Pagination token.
- `type`: Limit results to a specified type of artifact.
"""
ListTestGridSessionArtifacts(sessionArn) = device_farm("ListTestGridSessionArtifacts", Dict{String, Any}("sessionArn"=>sessionArn))
ListTestGridSessionArtifacts(sessionArn, args::AbstractDict{String, <:Any}) = device_farm("ListTestGridSessionArtifacts", Dict{String, Any}("sessionArn"=>sessionArn, args...))

"""
    ListTestGridSessions()

Retrieves a list of sessions for a TestGridProject.

# Required Parameters
- `projectArn`: ARN of a TestGridProject.

# Optional Parameters
- `creationTimeAfter`: Return only sessions created after this time.
- `creationTimeBefore`: Return only sessions created before this time.
- `endTimeAfter`: Return only sessions that ended after this time.
- `endTimeBefore`: Return only sessions that ended before this time.
- `maxResult`: Return only this many results at a time.
- `nextToken`: Pagination token.
- `status`: Return only sessions in this state.
"""
ListTestGridSessions(projectArn) = device_farm("ListTestGridSessions", Dict{String, Any}("projectArn"=>projectArn))
ListTestGridSessions(projectArn, args::AbstractDict{String, <:Any}) = device_farm("ListTestGridSessions", Dict{String, Any}("projectArn"=>projectArn, args...))

"""
    ListTests()

Gets information about tests in a given test suite.

# Required Parameters
- `arn`: The test suite's Amazon Resource Name (ARN).

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListTests(arn) = device_farm("ListTests", Dict{String, Any}("arn"=>arn))
ListTests(arn, args::AbstractDict{String, <:Any}) = device_farm("ListTests", Dict{String, Any}("arn"=>arn, args...))

"""
    ListUniqueProblems()

Gets information about unique problems, such as exceptions or crashes. Unique problems are defined as a single instance of an error across a run, job, or suite. For example, if a call in your application consistently raises an exception (OutOfBoundsException in MyActivity.java:386), ListUniqueProblems returns a single entry instead of many individual entries for that exception.

# Required Parameters
- `arn`: The unique problems' ARNs.

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListUniqueProblems(arn) = device_farm("ListUniqueProblems", Dict{String, Any}("arn"=>arn))
ListUniqueProblems(arn, args::AbstractDict{String, <:Any}) = device_farm("ListUniqueProblems", Dict{String, Any}("arn"=>arn, args...))

"""
    ListUploads()

Gets information about uploads, given an AWS Device Farm project ARN.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the project for which you want to list uploads.

# Optional Parameters
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
- `type`: The type of upload. Must be one of the following values:   ANDROID_APP   IOS_APP   WEB_APP   EXTERNAL_DATA   APPIUM_JAVA_JUNIT_TEST_PACKAGE   APPIUM_JAVA_TESTNG_TEST_PACKAGE   APPIUM_PYTHON_TEST_PACKAGE   APPIUM_NODE_TEST_PACKAGE   APPIUM_RUBY_TEST_PACKAGE   APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE   APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE   APPIUM_WEB_PYTHON_TEST_PACKAGE   APPIUM_WEB_NODE_TEST_PACKAGE   APPIUM_WEB_RUBY_TEST_PACKAGE   CALABASH_TEST_PACKAGE   INSTRUMENTATION_TEST_PACKAGE   UIAUTOMATION_TEST_PACKAGE   UIAUTOMATOR_TEST_PACKAGE   XCTEST_TEST_PACKAGE   XCTEST_UI_TEST_PACKAGE   APPIUM_JAVA_JUNIT_TEST_SPEC   APPIUM_JAVA_TESTNG_TEST_SPEC   APPIUM_PYTHON_TEST_SPEC   APPIUM_NODE_TEST_SPEC    APPIUM_RUBY_TEST_SPEC   APPIUM_WEB_JAVA_JUNIT_TEST_SPEC   APPIUM_WEB_JAVA_TESTNG_TEST_SPEC   APPIUM_WEB_PYTHON_TEST_SPEC   APPIUM_WEB_NODE_TEST_SPEC   APPIUM_WEB_RUBY_TEST_SPEC   INSTRUMENTATION_TEST_SPEC   XCTEST_UI_TEST_SPEC  
"""
ListUploads(arn) = device_farm("ListUploads", Dict{String, Any}("arn"=>arn))
ListUploads(arn, args::AbstractDict{String, <:Any}) = device_farm("ListUploads", Dict{String, Any}("arn"=>arn, args...))

"""
    ListVPCEConfigurations()

Returns information about all Amazon Virtual Private Cloud (VPC) endpoint configurations in the AWS account.

# Optional Parameters
- `maxResults`: An integer that specifies the maximum number of items you want to return in the API response.
- `nextToken`: An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
"""
ListVPCEConfigurations() = device_farm("ListVPCEConfigurations")
ListVPCEConfigurations(args::AbstractDict{String, <:Any}) = device_farm("ListVPCEConfigurations", args)

"""
    PurchaseOffering()

Immediately purchases offerings for an AWS account. Offerings renew with the latest total purchased quantity for an offering, unless the renewal was overridden. The API returns a NotEligible error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact aws-devicefarm-support@amazon.com.

# Optional Parameters
- `offeringId`: The ID of the offering.
- `offeringPromotionId`: The ID of the offering promotion to be applied to the purchase.
- `quantity`: The number of device slots to purchase in an offering request.
"""
PurchaseOffering() = device_farm("PurchaseOffering")
PurchaseOffering(args::AbstractDict{String, <:Any}) = device_farm("PurchaseOffering", args)

"""
    RenewOffering()

Explicitly sets the quantity of devices to renew for an offering, starting from the effectiveDate of the next period. The API returns a NotEligible error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact aws-devicefarm-support@amazon.com.

# Optional Parameters
- `offeringId`: The ID of a request to renew an offering.
- `quantity`: The quantity requested in an offering renewal.
"""
RenewOffering() = device_farm("RenewOffering")
RenewOffering(args::AbstractDict{String, <:Any}) = device_farm("RenewOffering", args)

"""
    ScheduleRun()

Schedules a run.

# Required Parameters
- `projectArn`: The ARN of the project for the run to be scheduled.
- `test`: Information about the test for the run to be scheduled.

# Optional Parameters
- `appArn`: The ARN of an application package to run tests against, created with CreateUpload. See ListUploads.
- `configuration`: Information about the settings for the run to be scheduled.
- `devicePoolArn`: The ARN of the device pool for the run to be scheduled.
- `deviceSelectionConfiguration`: The filter criteria used to dynamically select a set of devices for a test run and the maximum number of devices to be included in the run. Either  devicePoolArn  or  deviceSelectionConfiguration  is required in a request.
- `executionConfiguration`: Specifies configuration information about a test run, such as the execution timeout (in minutes).
- `name`: The name for the run to be scheduled.
"""
ScheduleRun(projectArn, test) = device_farm("ScheduleRun", Dict{String, Any}("projectArn"=>projectArn, "test"=>test))
ScheduleRun(projectArn, test, args::AbstractDict{String, <:Any}) = device_farm("ScheduleRun", Dict{String, Any}("projectArn"=>projectArn, "test"=>test, args...))

"""
    StopJob()

Initiates a stop request for the current job. AWS Device Farm immediately stops the job on the device where tests have not started. You are not billed for this device. On the device where tests have started, setup suite and teardown suite tests run to completion on the device. You are billed for setup, teardown, and any tests that were in progress or already completed.

# Required Parameters
- `arn`: Represents the Amazon Resource Name (ARN) of the Device Farm job to stop.

"""
StopJob(arn) = device_farm("StopJob", Dict{String, Any}("arn"=>arn))
StopJob(arn, args::AbstractDict{String, <:Any}) = device_farm("StopJob", Dict{String, Any}("arn"=>arn, args...))

"""
    StopRemoteAccessSession()

Ends a specified remote access session.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the remote access session to stop.

"""
StopRemoteAccessSession(arn) = device_farm("StopRemoteAccessSession", Dict{String, Any}("arn"=>arn))
StopRemoteAccessSession(arn, args::AbstractDict{String, <:Any}) = device_farm("StopRemoteAccessSession", Dict{String, Any}("arn"=>arn, args...))

"""
    StopRun()

Initiates a stop request for the current test run. AWS Device Farm immediately stops the run on devices where tests have not started. You are not billed for these devices. On devices where tests have started executing, setup suite and teardown suite tests run to completion on those devices. You are billed for setup, teardown, and any tests that were in progress or already completed.

# Required Parameters
- `arn`: Represents the Amazon Resource Name (ARN) of the Device Farm run to stop.

"""
StopRun(arn) = device_farm("StopRun", Dict{String, Any}("arn"=>arn))
StopRun(arn, args::AbstractDict{String, <:Any}) = device_farm("StopRun", Dict{String, Any}("arn"=>arn, args...))

"""
    TagResource()

Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are also deleted.

# Required Parameters
- `ResourceARN`: The Amazon Resource Name (ARN) of the resource or resources to which to add tags. You can associate tags with the following Device Farm resources: PROJECT, RUN, NETWORK_PROFILE, INSTANCE_PROFILE, DEVICE_INSTANCE, SESSION, DEVICE_POOL, DEVICE, and VPCE_CONFIGURATION.
- `Tags`: The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters.

"""
TagResource(ResourceARN, Tags) = device_farm("TagResource", Dict{String, Any}("ResourceARN"=>ResourceARN, "Tags"=>Tags))
TagResource(ResourceARN, Tags, args::AbstractDict{String, <:Any}) = device_farm("TagResource", Dict{String, Any}("ResourceARN"=>ResourceARN, "Tags"=>Tags, args...))

"""
    UntagResource()

Deletes the specified tags from a resource.

# Required Parameters
- `ResourceARN`: The Amazon Resource Name (ARN) of the resource or resources from which to delete tags. You can associate tags with the following Device Farm resources: PROJECT, RUN, NETWORK_PROFILE, INSTANCE_PROFILE, DEVICE_INSTANCE, SESSION, DEVICE_POOL, DEVICE, and VPCE_CONFIGURATION.
- `TagKeys`: The keys of the tags to be removed.

"""
UntagResource(ResourceARN, TagKeys) = device_farm("UntagResource", Dict{String, Any}("ResourceARN"=>ResourceARN, "TagKeys"=>TagKeys))
UntagResource(ResourceARN, TagKeys, args::AbstractDict{String, <:Any}) = device_farm("UntagResource", Dict{String, Any}("ResourceARN"=>ResourceARN, "TagKeys"=>TagKeys, args...))

"""
    UpdateDeviceInstance()

Updates information about a private device instance.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the device instance.

# Optional Parameters
- `labels`: An array of strings that you want to associate with the device instance.
- `profileArn`: The ARN of the profile that you want to associate with the device instance.
"""
UpdateDeviceInstance(arn) = device_farm("UpdateDeviceInstance", Dict{String, Any}("arn"=>arn))
UpdateDeviceInstance(arn, args::AbstractDict{String, <:Any}) = device_farm("UpdateDeviceInstance", Dict{String, Any}("arn"=>arn, args...))

"""
    UpdateDevicePool()

Modifies the name, description, and rules in a device pool given the attributes and the pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a whole (or not at all).

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the Device Farm device pool to update.

# Optional Parameters
- `clearMaxDevices`: Sets whether the maxDevices parameter applies to your device pool. If you set this parameter to true, the maxDevices parameter does not apply, and Device Farm does not limit the number of devices that it adds to your device pool. In this case, Device Farm adds all available devices that meet the criteria specified in the rules parameter. If you use this parameter in your request, you cannot use the maxDevices parameter in the same request.
- `description`: A description of the device pool to update.
- `maxDevices`: The number of devices that Device Farm can add to your device pool. Device Farm adds devices that are available and that meet the criteria that you assign for the rules parameter. Depending on how many devices meet these constraints, your device pool might contain fewer devices than the value for this parameter. By specifying the maximum number of devices, you can control the costs that you incur by running tests. If you use this parameter in your request, you cannot use the clearMaxDevices parameter in the same request.
- `name`: A string that represents the name of the device pool to update.
- `rules`: Represents the rules to modify for the device pool. Updating rules is optional. If you update rules for your request, the update replaces the existing rules.
"""
UpdateDevicePool(arn) = device_farm("UpdateDevicePool", Dict{String, Any}("arn"=>arn))
UpdateDevicePool(arn, args::AbstractDict{String, <:Any}) = device_farm("UpdateDevicePool", Dict{String, Any}("arn"=>arn, args...))

"""
    UpdateInstanceProfile()

Updates information about an existing private device instance profile.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the instance profile.

# Optional Parameters
- `description`: The updated description for your instance profile.
- `excludeAppPackagesFromCleanup`: An array of strings that specifies the list of app packages that should not be cleaned up from the device after a test run is over. The list of packages is only considered if you set packageCleanup to true.
- `name`: The updated name for your instance profile.
- `packageCleanup`: The updated choice for whether you want to specify package cleanup. The default value is false for private devices.
- `rebootAfterUse`: The updated choice for whether you want to reboot the device after use. The default value is true.
"""
UpdateInstanceProfile(arn) = device_farm("UpdateInstanceProfile", Dict{String, Any}("arn"=>arn))
UpdateInstanceProfile(arn, args::AbstractDict{String, <:Any}) = device_farm("UpdateInstanceProfile", Dict{String, Any}("arn"=>arn, args...))

"""
    UpdateNetworkProfile()

Updates the network profile.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the project for which you want to update network profile settings.

# Optional Parameters
- `description`: The description of the network profile about which you are returning information.
- `downlinkBandwidthBits`: The data throughput rate in bits per second, as an integer from 0 to 104857600.
- `downlinkDelayMs`: Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
- `downlinkJitterMs`: Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
- `downlinkLossPercent`: Proportion of received packets that fail to arrive from 0 to 100 percent.
- `name`: The name of the network profile about which you are returning information.
- `type`: The type of network profile to return information about. Valid values are listed here.
- `uplinkBandwidthBits`: The data throughput rate in bits per second, as an integer from 0 to 104857600.
- `uplinkDelayMs`: Delay time for all packets to destination in milliseconds as an integer from 0 to 2000.
- `uplinkJitterMs`: Time variation in the delay of received packets in milliseconds as an integer from 0 to 2000.
- `uplinkLossPercent`: Proportion of transmitted packets that fail to arrive from 0 to 100 percent.
"""
UpdateNetworkProfile(arn) = device_farm("UpdateNetworkProfile", Dict{String, Any}("arn"=>arn))
UpdateNetworkProfile(arn, args::AbstractDict{String, <:Any}) = device_farm("UpdateNetworkProfile", Dict{String, Any}("arn"=>arn, args...))

"""
    UpdateProject()

Modifies the specified project name, given the project ARN and a new name.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the project whose name to update.

# Optional Parameters
- `defaultJobTimeoutMinutes`: The number of minutes a test run in the project executes before it times out.
- `name`: A string that represents the new name of the project that you are updating.
"""
UpdateProject(arn) = device_farm("UpdateProject", Dict{String, Any}("arn"=>arn))
UpdateProject(arn, args::AbstractDict{String, <:Any}) = device_farm("UpdateProject", Dict{String, Any}("arn"=>arn, args...))

"""
    UpdateTestGridProject()

Change details of a project.

# Required Parameters
- `projectArn`: ARN of the project to update.

# Optional Parameters
- `description`: Human-readable description for the project.
- `name`: Human-readable name for the project.
"""
UpdateTestGridProject(projectArn) = device_farm("UpdateTestGridProject", Dict{String, Any}("projectArn"=>projectArn))
UpdateTestGridProject(projectArn, args::AbstractDict{String, <:Any}) = device_farm("UpdateTestGridProject", Dict{String, Any}("projectArn"=>projectArn, args...))

"""
    UpdateUpload()

Updates an uploaded test spec.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the uploaded test spec.

# Optional Parameters
- `contentType`: The upload's content type (for example, application/x-yaml).
- `editContent`: Set to true if the YAML file has changed and must be updated. Otherwise, set to false.
- `name`: The upload's test spec file name. The name must not contain any forward slashes (/). The test spec file name must end with the .yaml or .yml file extension.
"""
UpdateUpload(arn) = device_farm("UpdateUpload", Dict{String, Any}("arn"=>arn))
UpdateUpload(arn, args::AbstractDict{String, <:Any}) = device_farm("UpdateUpload", Dict{String, Any}("arn"=>arn, args...))

"""
    UpdateVPCEConfiguration()

Updates information about an Amazon Virtual Private Cloud (VPC) endpoint configuration.

# Required Parameters
- `arn`: The Amazon Resource Name (ARN) of the VPC endpoint configuration you want to update.

# Optional Parameters
- `serviceDnsName`: The DNS (domain) name used to connect to your private service in your VPC. The DNS name must not already be in use on the internet.
- `vpceConfigurationDescription`: An optional description that provides details about your VPC endpoint configuration.
- `vpceConfigurationName`: The friendly name you give to your VPC endpoint configuration to manage your configurations more easily.
- `vpceServiceName`: The name of the VPC endpoint service running in your AWS account that you want Device Farm to test.
"""
UpdateVPCEConfiguration(arn) = device_farm("UpdateVPCEConfiguration", Dict{String, Any}("arn"=>arn))
UpdateVPCEConfiguration(arn, args::AbstractDict{String, <:Any}) = device_farm("UpdateVPCEConfiguration", Dict{String, Any}("arn"=>arn, args...))
