# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: appconfig
using AWS.Compat
using AWS.UUIDs

"""
    create_application(name)
    create_application(name, params::Dict{String,<:Any})

An application in AppConfig is a logical unit of code that provides capabilities for your
customers. For example, an application can be a microservice that runs on Amazon EC2
instances, a mobile application installed by your users, a serverless application using
Amazon API Gateway and AWS Lambda, or any system you run on behalf of others.

# Arguments
- `name`: A name for the application.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: A description of the application.
- `"Tags"`: Metadata to assign to the application. Tags help organize and categorize your
  AppConfig resources. Each tag consists of a key and an optional value, both of which you
  define.
"""
function create_application(Name; aws_config::AbstractAWSConfig=global_aws_config())
    return appconfig(
        "POST",
        "/applications",
        Dict{String,Any}("Name" => Name);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_application(
    Name, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "POST",
        "/applications",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Name" => Name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_configuration_profile(application_id, location_uri, name)
    create_configuration_profile(application_id, location_uri, name, params::Dict{String,<:Any})

Information that enables AppConfig to access the configuration source. Valid configuration
sources include Systems Manager (SSM) documents, SSM Parameter Store parameters, and Amazon
S3 objects. A configuration profile includes the following information.   The Uri location
of the configuration data.   The AWS Identity and Access Management (IAM) role that
provides access to the configuration data.   A validator for the configuration data.
Available validators include either a JSON Schema or an AWS Lambda function.   For more
information, see Create a Configuration and a Configuration Profile in the AWS AppConfig
User Guide.

# Arguments
- `application_id`: The application ID.
- `location_uri`: A URI to locate the configuration. You can specify a Systems Manager
  (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object. For an SSM
  document, specify either the document name in the format
  ssm-document://&lt;Document_name&gt; or the Amazon Resource Name (ARN). For a parameter,
  specify either the parameter name in the format ssm-parameter://&lt;Parameter_name&gt; or
  the ARN. For an Amazon S3 object, specify the URI in the following format:
  s3://&lt;bucket&gt;/&lt;objectKey&gt; . Here is an example:
  s3://my-bucket/my-app/us-east-1/my-config.json
- `name`: A name for the configuration profile.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: A description of the configuration profile.
- `"RetrievalRoleArn"`: The ARN of an IAM role with permission to access the configuration
  at the specified LocationUri.
- `"Tags"`: Metadata to assign to the configuration profile. Tags help organize and
  categorize your AppConfig resources. Each tag consists of a key and an optional value, both
  of which you define.
- `"Validators"`: A list of methods for validating the configuration.
"""
function create_configuration_profile(
    ApplicationId, LocationUri, Name; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "POST",
        "/applications/$(ApplicationId)/configurationprofiles",
        Dict{String,Any}("LocationUri" => LocationUri, "Name" => Name);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_configuration_profile(
    ApplicationId,
    LocationUri,
    Name,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "POST",
        "/applications/$(ApplicationId)/configurationprofiles",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("LocationUri" => LocationUri, "Name" => Name),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_deployment_strategy(deployment_duration_in_minutes, growth_factor, name, replicate_to)
    create_deployment_strategy(deployment_duration_in_minutes, growth_factor, name, replicate_to, params::Dict{String,<:Any})

A deployment strategy defines important criteria for rolling out your configuration to the
designated targets. A deployment strategy includes: the overall duration required, a
percentage of targets to receive the deployment during each interval, an algorithm that
defines how percentage grows, and bake time.

# Arguments
- `deployment_duration_in_minutes`: Total amount of time for a deployment to last.
- `growth_factor`: The percentage of targets to receive a deployed configuration during
  each interval.
- `name`: A name for the deployment strategy.
- `replicate_to`: Save the deployment strategy to a Systems Manager (SSM) document.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: A description of the deployment strategy.
- `"FinalBakeTimeInMinutes"`: The amount of time AppConfig monitors for alarms before
  considering the deployment to be complete and no longer eligible for automatic roll back.
- `"GrowthType"`: The algorithm used to define how percentage grows over time. AWS
  AppConfig supports the following growth types:  Linear: For this type, AppConfig processes
  the deployment by dividing the total number of targets by the value specified for Step
  percentage. For example, a linear deployment that uses a Step percentage of 10 deploys the
  configuration to 10 percent of the hosts. After those deployments are complete, the system
  deploys the configuration to the next 10 percent. This continues until 100% of the targets
  have successfully received the configuration.  Exponential: For this type, AppConfig
  processes the deployment exponentially using the following formula: G*(2^N). In this
  formula, G is the growth factor specified by the user and N is the number of steps until
  the configuration is deployed to all targets. For example, if you specify a growth factor
  of 2, then the system rolls out the configuration as follows:  2*(2^0)   2*(2^1)   2*(2^2)
  Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the
  targets, 8% of the targets, and continues until the configuration has been deployed to all
  targets.
- `"Tags"`: Metadata to assign to the deployment strategy. Tags help organize and
  categorize your AppConfig resources. Each tag consists of a key and an optional value, both
  of which you define.
"""
function create_deployment_strategy(
    DeploymentDurationInMinutes,
    GrowthFactor,
    Name,
    ReplicateTo;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "POST",
        "/deploymentstrategies",
        Dict{String,Any}(
            "DeploymentDurationInMinutes" => DeploymentDurationInMinutes,
            "GrowthFactor" => GrowthFactor,
            "Name" => Name,
            "ReplicateTo" => ReplicateTo,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_deployment_strategy(
    DeploymentDurationInMinutes,
    GrowthFactor,
    Name,
    ReplicateTo,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "POST",
        "/deploymentstrategies",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DeploymentDurationInMinutes" => DeploymentDurationInMinutes,
                    "GrowthFactor" => GrowthFactor,
                    "Name" => Name,
                    "ReplicateTo" => ReplicateTo,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_environment(application_id, name)
    create_environment(application_id, name, params::Dict{String,<:Any})

For each application, you define one or more environments. An environment is a logical
deployment group of AppConfig targets, such as applications in a Beta or Production
environment. You can also define environments for application subcomponents such as the
Web, Mobile and Back-end components for your application. You can configure Amazon
CloudWatch alarms for each environment. The system monitors alarms during a configuration
deployment. If an alarm is triggered, the system rolls back the configuration.

# Arguments
- `application_id`: The application ID.
- `name`: A name for the environment.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: A description of the environment.
- `"Monitors"`: Amazon CloudWatch alarms to monitor during the deployment process.
- `"Tags"`: Metadata to assign to the environment. Tags help organize and categorize your
  AppConfig resources. Each tag consists of a key and an optional value, both of which you
  define.
"""
function create_environment(
    ApplicationId, Name; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "POST",
        "/applications/$(ApplicationId)/environments",
        Dict{String,Any}("Name" => Name);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_environment(
    ApplicationId,
    Name,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "POST",
        "/applications/$(ApplicationId)/environments",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Name" => Name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_hosted_configuration_version(application_id, configuration_profile_id, content, content-_type)
    create_hosted_configuration_version(application_id, configuration_profile_id, content, content-_type, params::Dict{String,<:Any})

Create a new configuration in the AppConfig configuration store.

# Arguments
- `application_id`: The application ID.
- `configuration_profile_id`: The configuration profile ID.
- `content`: The content of the configuration or the configuration data.
- `content-_type`: A standard MIME type describing the format of the configuration content.
  For more information, see Content-Type.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: A description of the configuration.
- `"Latest-Version-Number"`: An optional locking token used to prevent race conditions from
  overwriting configuration updates when creating a new version. To ensure your data is not
  overwritten when creating multiple hosted configuration versions in rapid succession,
  specify the version of the latest hosted configuration version.
"""
function create_hosted_configuration_version(
    ApplicationId,
    ConfigurationProfileId,
    Content,
    Content_Type;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "POST",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)/hostedconfigurationversions",
        Dict{String,Any}(
            "Content" => Content,
            "headers" => Dict{String,Any}("Content-Type" => Content_Type),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_hosted_configuration_version(
    ApplicationId,
    ConfigurationProfileId,
    Content,
    Content_Type,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "POST",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)/hostedconfigurationversions",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Content" => Content,
                    "headers" => Dict{String,Any}("Content-Type" => Content_Type),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_application(application_id)
    delete_application(application_id, params::Dict{String,<:Any})

Delete an application. Deleting an application does not delete a configuration from a host.

# Arguments
- `application_id`: The ID of the application to delete.

"""
function delete_application(
    ApplicationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "DELETE",
        "/applications/$(ApplicationId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_application(
    ApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "DELETE",
        "/applications/$(ApplicationId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_configuration_profile(application_id, configuration_profile_id)
    delete_configuration_profile(application_id, configuration_profile_id, params::Dict{String,<:Any})

Delete a configuration profile. Deleting a configuration profile does not delete a
configuration from a host.

# Arguments
- `application_id`: The application ID that includes the configuration profile you want to
  delete.
- `configuration_profile_id`: The ID of the configuration profile you want to delete.

"""
function delete_configuration_profile(
    ApplicationId, ConfigurationProfileId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "DELETE",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_configuration_profile(
    ApplicationId,
    ConfigurationProfileId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "DELETE",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_deployment_strategy(deployment_strategy_id)
    delete_deployment_strategy(deployment_strategy_id, params::Dict{String,<:Any})

Delete a deployment strategy. Deleting a deployment strategy does not delete a
configuration from a host.

# Arguments
- `deployment_strategy_id`: The ID of the deployment strategy you want to delete.

"""
function delete_deployment_strategy(
    DeploymentStrategyId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "DELETE",
        "/deployementstrategies/$(DeploymentStrategyId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_deployment_strategy(
    DeploymentStrategyId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "DELETE",
        "/deployementstrategies/$(DeploymentStrategyId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_environment(application_id, environment_id)
    delete_environment(application_id, environment_id, params::Dict{String,<:Any})

Delete an environment. Deleting an environment does not delete a configuration from a host.

# Arguments
- `application_id`: The application ID that includes the environment you want to delete.
- `environment_id`: The ID of the environment you want to delete.

"""
function delete_environment(
    ApplicationId, EnvironmentId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "DELETE",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_environment(
    ApplicationId,
    EnvironmentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "DELETE",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_hosted_configuration_version(application_id, configuration_profile_id, version_number)
    delete_hosted_configuration_version(application_id, configuration_profile_id, version_number, params::Dict{String,<:Any})

Delete a version of a configuration from the AppConfig configuration store.

# Arguments
- `application_id`: The application ID.
- `configuration_profile_id`: The configuration profile ID.
- `version_number`: The versions number to delete.

"""
function delete_hosted_configuration_version(
    ApplicationId,
    ConfigurationProfileId,
    VersionNumber;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "DELETE",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)/hostedconfigurationversions/$(VersionNumber)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_hosted_configuration_version(
    ApplicationId,
    ConfigurationProfileId,
    VersionNumber,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "DELETE",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)/hostedconfigurationversions/$(VersionNumber)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_application(application_id)
    get_application(application_id, params::Dict{String,<:Any})

Retrieve information about an application.

# Arguments
- `application_id`: The ID of the application you want to get.

"""
function get_application(ApplicationId; aws_config::AbstractAWSConfig=global_aws_config())
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_application(
    ApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_configuration(application, configuration, environment, client_id)
    get_configuration(application, configuration, environment, client_id, params::Dict{String,<:Any})

Receive information about a configuration.  AWS AppConfig uses the value of the
ClientConfigurationVersion parameter to identify the configuration version on your clients.
If you don’t send ClientConfigurationVersion with each call to GetConfiguration, your
clients receive the current configuration. You are charged each time your clients receive a
configuration. To avoid excess charges, we recommend that you include the
ClientConfigurationVersion value with every call to GetConfiguration. This value must be
saved on your client. Subsequent calls to GetConfiguration must pass this value by using
the ClientConfigurationVersion parameter.

# Arguments
- `application`: The application to get. Specify either the application name or the
  application ID.
- `configuration`: The configuration to get. Specify either the configuration name or the
  configuration ID.
- `environment`: The environment to get. Specify either the environment name or the
  environment ID.
- `client_id`: A unique ID to identify the client for the configuration. This ID enables
  AppConfig to deploy the configuration in intervals, as defined in the deployment strategy.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"client_configuration_version"`: The configuration version returned in the most recent
  GetConfiguration response.  AWS AppConfig uses the value of the ClientConfigurationVersion
  parameter to identify the configuration version on your clients. If you don’t send
  ClientConfigurationVersion with each call to GetConfiguration, your clients receive the
  current configuration. You are charged each time your clients receive a configuration. To
  avoid excess charges, we recommend that you include the ClientConfigurationVersion value
  with every call to GetConfiguration. This value must be saved on your client. Subsequent
  calls to GetConfiguration must pass this value by using the ClientConfigurationVersion
  parameter.   For more information about working with configurations, see Retrieving the
  Configuration in the AWS AppConfig User Guide.
"""
function get_configuration(
    Application,
    Configuration,
    Environment,
    client_id;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/applications/$(Application)/environments/$(Environment)/configurations/$(Configuration)",
        Dict{String,Any}("client_id" => client_id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_configuration(
    Application,
    Configuration,
    Environment,
    client_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/applications/$(Application)/environments/$(Environment)/configurations/$(Configuration)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("client_id" => client_id), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_configuration_profile(application_id, configuration_profile_id)
    get_configuration_profile(application_id, configuration_profile_id, params::Dict{String,<:Any})

Retrieve information about a configuration profile.

# Arguments
- `application_id`: The ID of the application that includes the configuration profile you
  want to get.
- `configuration_profile_id`: The ID of the configuration profile you want to get.

"""
function get_configuration_profile(
    ApplicationId, ConfigurationProfileId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_configuration_profile(
    ApplicationId,
    ConfigurationProfileId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_deployment(application_id, deployment_number, environment_id)
    get_deployment(application_id, deployment_number, environment_id, params::Dict{String,<:Any})

Retrieve information about a configuration deployment.

# Arguments
- `application_id`: The ID of the application that includes the deployment you want to get.
- `deployment_number`: The sequence number of the deployment.
- `environment_id`: The ID of the environment that includes the deployment you want to get.

"""
function get_deployment(
    ApplicationId,
    DeploymentNumber,
    EnvironmentId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)/deployments/$(DeploymentNumber)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_deployment(
    ApplicationId,
    DeploymentNumber,
    EnvironmentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)/deployments/$(DeploymentNumber)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_deployment_strategy(deployment_strategy_id)
    get_deployment_strategy(deployment_strategy_id, params::Dict{String,<:Any})

Retrieve information about a deployment strategy. A deployment strategy defines important
criteria for rolling out your configuration to the designated targets. A deployment
strategy includes: the overall duration required, a percentage of targets to receive the
deployment during each interval, an algorithm that defines how percentage grows, and bake
time.

# Arguments
- `deployment_strategy_id`: The ID of the deployment strategy to get.

"""
function get_deployment_strategy(
    DeploymentStrategyId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "GET",
        "/deploymentstrategies/$(DeploymentStrategyId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_deployment_strategy(
    DeploymentStrategyId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/deploymentstrategies/$(DeploymentStrategyId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_environment(application_id, environment_id)
    get_environment(application_id, environment_id, params::Dict{String,<:Any})

Retrieve information about an environment. An environment is a logical deployment group of
AppConfig applications, such as applications in a Production environment or in an EU_Region
environment. Each configuration deployment targets an environment. You can enable one or
more Amazon CloudWatch alarms for an environment. If an alarm is triggered during a
deployment, AppConfig roles back the configuration.

# Arguments
- `application_id`: The ID of the application that includes the environment you want to get.
- `environment_id`: The ID of the environment you wnat to get.

"""
function get_environment(
    ApplicationId, EnvironmentId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_environment(
    ApplicationId,
    EnvironmentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_hosted_configuration_version(application_id, configuration_profile_id, version_number)
    get_hosted_configuration_version(application_id, configuration_profile_id, version_number, params::Dict{String,<:Any})

Get information about a specific configuration version.

# Arguments
- `application_id`: The application ID.
- `configuration_profile_id`: The configuration profile ID.
- `version_number`: The version.

"""
function get_hosted_configuration_version(
    ApplicationId,
    ConfigurationProfileId,
    VersionNumber;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)/hostedconfigurationversions/$(VersionNumber)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_hosted_configuration_version(
    ApplicationId,
    ConfigurationProfileId,
    VersionNumber,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)/hostedconfigurationversions/$(VersionNumber)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_applications()
    list_applications(params::Dict{String,<:Any})

List all applications in your AWS account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max_results"`: The maximum number of items to return for this call. The call also
  returns a token that you can specify in a subsequent call to get the next set of results.
- `"next_token"`: A token to start the list. Use this token to get the next set of results.
"""
function list_applications(; aws_config::AbstractAWSConfig=global_aws_config())
    return appconfig(
        "GET", "/applications"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_applications(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "GET",
        "/applications",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_configuration_profiles(application_id)
    list_configuration_profiles(application_id, params::Dict{String,<:Any})

Lists the configuration profiles for an application.

# Arguments
- `application_id`: The application ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max_results"`: The maximum number of items to return for this call. The call also
  returns a token that you can specify in a subsequent call to get the next set of results.
- `"next_token"`: A token to start the list. Use this token to get the next set of results.
"""
function list_configuration_profiles(
    ApplicationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/configurationprofiles";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_configuration_profiles(
    ApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/configurationprofiles",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_deployment_strategies()
    list_deployment_strategies(params::Dict{String,<:Any})

List deployment strategies.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max_results"`: The maximum number of items to return for this call. The call also
  returns a token that you can specify in a subsequent call to get the next set of results.
- `"next_token"`: A token to start the list. Use this token to get the next set of results.
"""
function list_deployment_strategies(; aws_config::AbstractAWSConfig=global_aws_config())
    return appconfig(
        "GET",
        "/deploymentstrategies";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_deployment_strategies(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "GET",
        "/deploymentstrategies",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_deployments(application_id, environment_id)
    list_deployments(application_id, environment_id, params::Dict{String,<:Any})

Lists the deployments for an environment.

# Arguments
- `application_id`: The application ID.
- `environment_id`: The environment ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max_results"`: The maximum number of items to return for this call. The call also
  returns a token that you can specify in a subsequent call to get the next set of results.
- `"next_token"`: A token to start the list. Use this token to get the next set of results.
"""
function list_deployments(
    ApplicationId, EnvironmentId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)/deployments";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_deployments(
    ApplicationId,
    EnvironmentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)/deployments",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_environments(application_id)
    list_environments(application_id, params::Dict{String,<:Any})

List the environments for an application.

# Arguments
- `application_id`: The application ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max_results"`: The maximum number of items to return for this call. The call also
  returns a token that you can specify in a subsequent call to get the next set of results.
- `"next_token"`: A token to start the list. Use this token to get the next set of results.
"""
function list_environments(ApplicationId; aws_config::AbstractAWSConfig=global_aws_config())
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/environments";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_environments(
    ApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/environments",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_hosted_configuration_versions(application_id, configuration_profile_id)
    list_hosted_configuration_versions(application_id, configuration_profile_id, params::Dict{String,<:Any})

View a list of configurations stored in the AppConfig configuration store by version.

# Arguments
- `application_id`: The application ID.
- `configuration_profile_id`: The configuration profile ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max_results"`: The maximum number of items to return for this call. The call also
  returns a token that you can specify in a subsequent call to get the next set of results.
- `"next_token"`: A token to start the list. Use this token to get the next set of results.
"""
function list_hosted_configuration_versions(
    ApplicationId, ConfigurationProfileId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)/hostedconfigurationversions";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_hosted_configuration_versions(
    ApplicationId,
    ConfigurationProfileId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)/hostedconfigurationversions",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Retrieves the list of key-value tags assigned to the resource.

# Arguments
- `resource_arn`: The resource ARN.

"""
function list_tags_for_resource(
    ResourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "GET",
        "/tags/$(ResourceArn)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    ResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "GET",
        "/tags/$(ResourceArn)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_deployment(application_id, configuration_profile_id, configuration_version, deployment_strategy_id, environment_id)
    start_deployment(application_id, configuration_profile_id, configuration_version, deployment_strategy_id, environment_id, params::Dict{String,<:Any})

Starts a deployment.

# Arguments
- `application_id`: The application ID.
- `configuration_profile_id`: The configuration profile ID.
- `configuration_version`: The configuration version to deploy.
- `deployment_strategy_id`: The deployment strategy ID.
- `environment_id`: The environment ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: A description of the deployment.
- `"Tags"`: Metadata to assign to the deployment. Tags help organize and categorize your
  AppConfig resources. Each tag consists of a key and an optional value, both of which you
  define.
"""
function start_deployment(
    ApplicationId,
    ConfigurationProfileId,
    ConfigurationVersion,
    DeploymentStrategyId,
    EnvironmentId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "POST",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)/deployments",
        Dict{String,Any}(
            "ConfigurationProfileId" => ConfigurationProfileId,
            "ConfigurationVersion" => ConfigurationVersion,
            "DeploymentStrategyId" => DeploymentStrategyId,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_deployment(
    ApplicationId,
    ConfigurationProfileId,
    ConfigurationVersion,
    DeploymentStrategyId,
    EnvironmentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "POST",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)/deployments",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ConfigurationProfileId" => ConfigurationProfileId,
                    "ConfigurationVersion" => ConfigurationVersion,
                    "DeploymentStrategyId" => DeploymentStrategyId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_deployment(application_id, deployment_number, environment_id)
    stop_deployment(application_id, deployment_number, environment_id, params::Dict{String,<:Any})

Stops a deployment. This API action works only on deployments that have a status of
DEPLOYING. This action moves the deployment to a status of ROLLED_BACK.

# Arguments
- `application_id`: The application ID.
- `deployment_number`: The sequence number of the deployment.
- `environment_id`: The environment ID.

"""
function stop_deployment(
    ApplicationId,
    DeploymentNumber,
    EnvironmentId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "DELETE",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)/deployments/$(DeploymentNumber)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function stop_deployment(
    ApplicationId,
    DeploymentNumber,
    EnvironmentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "DELETE",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)/deployments/$(DeploymentNumber)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Metadata to assign to an AppConfig resource. Tags help organize and categorize your
AppConfig resources. Each tag consists of a key and an optional value, both of which you
define. You can specify a maximum of 50 tags for a resource.

# Arguments
- `resource_arn`: The ARN of the resource for which to retrieve tags.
- `tags`: The key-value string map. The valid character set is [a-zA-Z+-=._:/]. The tag key
  can be up to 128 characters and must not start with aws:. The tag value can be up to 256
  characters.

"""
function tag_resource(ResourceArn, Tags; aws_config::AbstractAWSConfig=global_aws_config())
    return appconfig(
        "POST",
        "/tags/$(ResourceArn)",
        Dict{String,Any}("Tags" => Tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    ResourceArn,
    Tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "POST",
        "/tags/$(ResourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Tags" => Tags), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Deletes a tag key and value from an AppConfig resource.

# Arguments
- `resource_arn`: The ARN of the resource for which to remove tags.
- `tag_keys`: The tag keys to delete.

"""
function untag_resource(
    ResourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "DELETE",
        "/tags/$(ResourceArn)",
        Dict{String,Any}("tagKeys" => tagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    ResourceArn,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "DELETE",
        "/tags/$(ResourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tagKeys" => tagKeys), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_application(application_id)
    update_application(application_id, params::Dict{String,<:Any})

Updates an application.

# Arguments
- `application_id`: The application ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: A description of the application.
- `"Name"`: The name of the application.
"""
function update_application(
    ApplicationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "PATCH",
        "/applications/$(ApplicationId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_application(
    ApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "PATCH",
        "/applications/$(ApplicationId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_configuration_profile(application_id, configuration_profile_id)
    update_configuration_profile(application_id, configuration_profile_id, params::Dict{String,<:Any})

Updates a configuration profile.

# Arguments
- `application_id`: The application ID.
- `configuration_profile_id`: The ID of the configuration profile.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: A description of the configuration profile.
- `"Name"`: The name of the configuration profile.
- `"RetrievalRoleArn"`: The ARN of an IAM role with permission to access the configuration
  at the specified LocationUri.
- `"Validators"`: A list of methods for validating the configuration.
"""
function update_configuration_profile(
    ApplicationId, ConfigurationProfileId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "PATCH",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_configuration_profile(
    ApplicationId,
    ConfigurationProfileId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "PATCH",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_deployment_strategy(deployment_strategy_id)
    update_deployment_strategy(deployment_strategy_id, params::Dict{String,<:Any})

Updates a deployment strategy.

# Arguments
- `deployment_strategy_id`: The deployment strategy ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DeploymentDurationInMinutes"`: Total amount of time for a deployment to last.
- `"Description"`: A description of the deployment strategy.
- `"FinalBakeTimeInMinutes"`: The amount of time AppConfig monitors for alarms before
  considering the deployment to be complete and no longer eligible for automatic roll back.
- `"GrowthFactor"`: The percentage of targets to receive a deployed configuration during
  each interval.
- `"GrowthType"`: The algorithm used to define how percentage grows over time. AWS
  AppConfig supports the following growth types:  Linear: For this type, AppConfig processes
  the deployment by increments of the growth factor evenly distributed over the deployment
  time. For example, a linear deployment that uses a growth factor of 20 initially makes the
  configuration available to 20 percent of the targets. After 1/5th of the deployment time
  has passed, the system updates the percentage to 40 percent. This continues until 100% of
  the targets are set to receive the deployed configuration.  Exponential: For this type,
  AppConfig processes the deployment exponentially using the following formula: G*(2^N). In
  this formula, G is the growth factor specified by the user and N is the number of steps
  until the configuration is deployed to all targets. For example, if you specify a growth
  factor of 2, then the system rolls out the configuration as follows:  2*(2^0)   2*(2^1)
  2*(2^2)  Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4%
  of the targets, 8% of the targets, and continues until the configuration has been deployed
  to all targets.
"""
function update_deployment_strategy(
    DeploymentStrategyId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "PATCH",
        "/deploymentstrategies/$(DeploymentStrategyId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_deployment_strategy(
    DeploymentStrategyId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "PATCH",
        "/deploymentstrategies/$(DeploymentStrategyId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_environment(application_id, environment_id)
    update_environment(application_id, environment_id, params::Dict{String,<:Any})

Updates an environment.

# Arguments
- `application_id`: The application ID.
- `environment_id`: The environment ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: A description of the environment.
- `"Monitors"`: Amazon CloudWatch alarms to monitor during the deployment process.
- `"Name"`: The name of the environment.
"""
function update_environment(
    ApplicationId, EnvironmentId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return appconfig(
        "PATCH",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_environment(
    ApplicationId,
    EnvironmentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "PATCH",
        "/applications/$(ApplicationId)/environments/$(EnvironmentId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    validate_configuration(application_id, configuration_profile_id, configuration_version)
    validate_configuration(application_id, configuration_profile_id, configuration_version, params::Dict{String,<:Any})

Uses the validators in a configuration profile to validate a configuration.

# Arguments
- `application_id`: The application ID.
- `configuration_profile_id`: The configuration profile ID.
- `configuration_version`: The version of the configuration to validate.

"""
function validate_configuration(
    ApplicationId,
    ConfigurationProfileId,
    configuration_version;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "POST",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)/validators",
        Dict{String,Any}("configuration_version" => configuration_version);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function validate_configuration(
    ApplicationId,
    ConfigurationProfileId,
    configuration_version,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return appconfig(
        "POST",
        "/applications/$(ApplicationId)/configurationprofiles/$(ConfigurationProfileId)/validators",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("configuration_version" => configuration_version),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
