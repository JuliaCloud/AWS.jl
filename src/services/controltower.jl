# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: controltower
using AWS.Compat
using AWS.UUIDs

"""
    disable_control(control_identifier, target_identifier)
    disable_control(control_identifier, target_identifier, params::Dict{String,<:Any})

This API call turns off a control. It starts an asynchronous operation that deletes AWS
resources on the specified organizational unit and the accounts it contains. The resources
will vary according to the control that you specify.

# Arguments
- `control_identifier`: The ARN of the control. Only Strongly recommended and Elective
  controls are permitted, with the exception of the Region deny guardrail.
- `target_identifier`: The ARN of the organizational unit.

"""
function disable_control(
    controlIdentifier, targetIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return controltower(
        "POST",
        "/disable-control",
        Dict{String,Any}(
            "controlIdentifier" => controlIdentifier, "targetIdentifier" => targetIdentifier
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function disable_control(
    controlIdentifier,
    targetIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return controltower(
        "POST",
        "/disable-control",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "controlIdentifier" => controlIdentifier,
                    "targetIdentifier" => targetIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    enable_control(control_identifier, target_identifier)
    enable_control(control_identifier, target_identifier, params::Dict{String,<:Any})

This API call activates a control. It starts an asynchronous operation that creates AWS
resources on the specified organizational unit and the accounts it contains. The resources
created will vary according to the control that you specify.

# Arguments
- `control_identifier`: The ARN of the control. Only Strongly recommended and Elective
  controls are permitted, with the exception of the Region deny guardrail.
- `target_identifier`: The ARN of the organizational unit.

"""
function enable_control(
    controlIdentifier, targetIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return controltower(
        "POST",
        "/enable-control",
        Dict{String,Any}(
            "controlIdentifier" => controlIdentifier, "targetIdentifier" => targetIdentifier
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function enable_control(
    controlIdentifier,
    targetIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return controltower(
        "POST",
        "/enable-control",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "controlIdentifier" => controlIdentifier,
                    "targetIdentifier" => targetIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_control_operation(operation_identifier)
    get_control_operation(operation_identifier, params::Dict{String,<:Any})

Returns the status of a particular EnableControl or DisableControl operation. Displays a
message in case of error. Details for an operation are available for 90 days.

# Arguments
- `operation_identifier`: The ID of the asynchronous operation, which is used to track
  status. The operation is available for 90 days.

"""
function get_control_operation(
    operationIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return controltower(
        "POST",
        "/get-control-operation",
        Dict{String,Any}("operationIdentifier" => operationIdentifier);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_control_operation(
    operationIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return controltower(
        "POST",
        "/get-control-operation",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("operationIdentifier" => operationIdentifier),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_enabled_controls(target_identifier)
    list_enabled_controls(target_identifier, params::Dict{String,<:Any})

Lists the controls enabled by AWS Control Tower on the specified organizational unit and
the accounts it contains.

# Arguments
- `target_identifier`: The ARN of the organizational unit.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: How many results to return per API call.
- `"nextToken"`: The token to continue the list from a previous API call with the same
  parameters.
"""
function list_enabled_controls(
    targetIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return controltower(
        "POST",
        "/list-enabled-controls",
        Dict{String,Any}("targetIdentifier" => targetIdentifier);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_enabled_controls(
    targetIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return controltower(
        "POST",
        "/list-enabled-controls",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("targetIdentifier" => targetIdentifier), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
