# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
using .AWSServices: app_mesh

"""
    CreateMesh()

Creates a service mesh.
          A service mesh is a logical boundary for network traffic between services that are
         represented by resources within the mesh. After you create your service mesh, you can
         create virtual services, virtual nodes, virtual routers, and routes to distribute traffic
         between the applications in your mesh.
         For more information about service meshes, see Service meshes.

Required Parameters
{
  "meshName": "The name to use for the service mesh."
}

Optional Parameters
{
  "clientToken": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
  "spec": "The service mesh specification to apply.",
  "tags": "Optional metadata that you can apply to the service mesh to assist with categorization\n         and organization. Each tag consists of a key and an optional value, both of which you\n         define. Tag keys can have a maximum character length of 128 characters, and tag values can have\n            a maximum length of 256 characters."
}
"""
CreateMesh(args) = app_mesh("PUT", "/v20190125/meshes", args)

"""
    CreateRoute()

Creates a route that is associated with a virtual router.
          You can route several different protocols and define a retry policy for a route.
         Traffic can be routed to one or more virtual nodes.
         For more information about routes, see Routes.

Required Parameters
{
  "meshName": "The name of the service mesh to create the route in.",
  "routeName": "The name to use for the route.",
  "spec": "The route specification to apply.",
  "virtualRouterName": "The name of the virtual router in which to create the route. If the virtual router is in\n         a shared mesh, then you must be the owner of the virtual router resource."
}

Optional Parameters
{
  "clientToken": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then\n               the account that you specify must share the mesh with your account before you can create \n             the resource in the service mesh. For more information about mesh sharing, see Working with Shared Meshes.",
  "tags": "Optional metadata that you can apply to the route to assist with categorization and\n         organization. Each tag consists of a key and an optional value, both of which you define.\n         Tag keys can have a maximum character length of 128 characters, and tag values can have\n            a maximum length of 256 characters."
}
"""
CreateRoute(args) = app_mesh("PUT", "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes", args)

"""
    CreateVirtualNode()

Creates a virtual node within a service mesh.
          A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS
         service or a Kubernetes deployment. When you create a virtual node, you can specify the
         service discovery information for your task group, and whether the proxy running in a task
         group will communicate with other proxies using Transport Layer Security (TLS).
         You define a listener for any inbound traffic that your virtual node
         expects. Any virtual service that your virtual node expects to communicate to is specified
         as a backend.
         The response metadata for your new virtual node contains the arn that is
         associated with the virtual node. Set this value (either the full ARN or the truncated
         resource name: for example, mesh/default/virtualNode/simpleapp) as the
            APPMESH_VIRTUAL_NODE_NAME environment variable for your task group's Envoy
         proxy container in your task definition or pod spec. This is then mapped to the
            node.id and node.cluster Envoy parameters.
         
            If you require your Envoy stats or tracing to use a different name, you can override
            the node.cluster value that is set by
               APPMESH_VIRTUAL_NODE_NAME with the
               APPMESH_VIRTUAL_NODE_CLUSTER environment variable.
         
         For more information about virtual nodes, see Virtual nodes.

Required Parameters
{
  "meshName": "The name of the service mesh to create the virtual node in.",
  "spec": "The virtual node specification to apply.",
  "virtualNodeName": "The name to use for the virtual node."
}

Optional Parameters
{
  "clientToken": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then\n               the account that you specify must share the mesh with your account before you can create \n             the resource in the service mesh. For more information about mesh sharing, see Working with Shared Meshes.",
  "tags": "Optional metadata that you can apply to the virtual node to assist with categorization\n         and organization. Each tag consists of a key and an optional value, both of which you\n         define. Tag keys can have a maximum character length of 128 characters, and tag values can have\n            a maximum length of 256 characters."
}
"""
CreateVirtualNode(args) = app_mesh("PUT", "/v20190125/meshes/{meshName}/virtualNodes", args)

"""
    CreateVirtualRouter()

Creates a virtual router within a service mesh.
         Specify a listener for any inbound traffic that your virtual router
         receives. Create a virtual router for each protocol and port that you need to route.
         Virtual routers handle traffic for one or more virtual services within your mesh. After you
         create your virtual router, create and associate routes for your virtual router that direct
         incoming requests to different virtual nodes.
         For more information about virtual routers, see Virtual routers.

Required Parameters
{
  "meshName": "The name of the service mesh to create the virtual router in.",
  "spec": "The virtual router specification to apply.",
  "virtualRouterName": "The name to use for the virtual router."
}

Optional Parameters
{
  "clientToken": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then\n               the account that you specify must share the mesh with your account before you can create \n             the resource in the service mesh. For more information about mesh sharing, see Working with Shared Meshes.",
  "tags": "Optional metadata that you can apply to the virtual router to assist with categorization\n         and organization. Each tag consists of a key and an optional value, both of which you\n         define. Tag keys can have a maximum character length of 128 characters, and tag values can have\n            a maximum length of 256 characters."
}
"""
CreateVirtualRouter(args) = app_mesh("PUT", "/v20190125/meshes/{meshName}/virtualRouters", args)

"""
    CreateVirtualService()

Creates a virtual service within a service mesh.
         A virtual service is an abstraction of a real service that is provided by a virtual node
         directly or indirectly by means of a virtual router. Dependent services call your virtual
         service by its virtualServiceName, and those requests are routed to the
         virtual node or virtual router that is specified as the provider for the virtual
         service.
         For more information about virtual services, see Virtual services.

Required Parameters
{
  "meshName": "The name of the service mesh to create the virtual service in.",
  "spec": "The virtual service specification to apply.",
  "virtualServiceName": "The name to use for the virtual service."
}

Optional Parameters
{
  "clientToken": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then\n               the account that you specify must share the mesh with your account before you can create \n             the resource in the service mesh. For more information about mesh sharing, see Working with Shared Meshes.",
  "tags": "Optional metadata that you can apply to the virtual service to assist with\n         categorization and organization. Each tag consists of a key and an optional value, both of\n         which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have\n            a maximum length of 256 characters."
}
"""
CreateVirtualService(args) = app_mesh("PUT", "/v20190125/meshes/{meshName}/virtualServices", args)

"""
    DeleteMesh()

Deletes an existing service mesh.
         You must delete all resources (virtual services, routes, virtual routers, and virtual
         nodes) in the service mesh before you can delete the mesh itself.

Required Parameters
{
  "meshName": "The name of the service mesh to delete."
}
"""
DeleteMesh(args) = app_mesh("DELETE", "/v20190125/meshes/{meshName}", args)

"""
    DeleteRoute()

Deletes an existing route.

Required Parameters
{
  "meshName": "The name of the service mesh to delete the route in.",
  "routeName": "The name of the route to delete.",
  "virtualRouterName": "The name of the virtual router to delete the route in."
}

Optional Parameters
{
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes."
}
"""
DeleteRoute(args) = app_mesh("DELETE", "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}", args)

"""
    DeleteVirtualNode()

Deletes an existing virtual node.
         You must delete any virtual services that list a virtual node as a service provider
         before you can delete the virtual node itself.

Required Parameters
{
  "meshName": "The name of the service mesh to delete the virtual node in.",
  "virtualNodeName": "The name of the virtual node to delete."
}

Optional Parameters
{
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes."
}
"""
DeleteVirtualNode(args) = app_mesh("DELETE", "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}", args)

"""
    DeleteVirtualRouter()

Deletes an existing virtual router.
         You must delete any routes associated with the virtual router before you can delete the
         router itself.

Required Parameters
{
  "meshName": "The name of the service mesh to delete the virtual router in.",
  "virtualRouterName": "The name of the virtual router to delete."
}

Optional Parameters
{
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes."
}
"""
DeleteVirtualRouter(args) = app_mesh("DELETE", "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}", args)

"""
    DeleteVirtualService()

Deletes an existing virtual service.

Required Parameters
{
  "meshName": "The name of the service mesh to delete the virtual service in.",
  "virtualServiceName": "The name of the virtual service to delete."
}

Optional Parameters
{
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes."
}
"""
DeleteVirtualService(args) = app_mesh("DELETE", "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}", args)

"""
    DescribeMesh()

Describes an existing service mesh.

Required Parameters
{
  "meshName": "The name of the service mesh to describe."
}

Optional Parameters
{
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes."
}
"""
DescribeMesh(args) = app_mesh("GET", "/v20190125/meshes/{meshName}", args)

"""
    DescribeRoute()

Describes an existing route.

Required Parameters
{
  "meshName": "The name of the service mesh that the route resides in.",
  "routeName": "The name of the route to describe.",
  "virtualRouterName": "The name of the virtual router that the route is associated with."
}

Optional Parameters
{
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes."
}
"""
DescribeRoute(args) = app_mesh("GET", "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}", args)

"""
    DescribeVirtualNode()

Describes an existing virtual node.

Required Parameters
{
  "meshName": "The name of the service mesh that the virtual node resides in.",
  "virtualNodeName": "The name of the virtual node to describe."
}

Optional Parameters
{
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes."
}
"""
DescribeVirtualNode(args) = app_mesh("GET", "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}", args)

"""
    DescribeVirtualRouter()

Describes an existing virtual router.

Required Parameters
{
  "meshName": "The name of the service mesh that the virtual router resides in.",
  "virtualRouterName": "The name of the virtual router to describe."
}

Optional Parameters
{
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes."
}
"""
DescribeVirtualRouter(args) = app_mesh("GET", "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}", args)

"""
    DescribeVirtualService()

Describes an existing virtual service.

Required Parameters
{
  "meshName": "The name of the service mesh that the virtual service resides in.",
  "virtualServiceName": "The name of the virtual service to describe."
}

Optional Parameters
{
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes."
}
"""
DescribeVirtualService(args) = app_mesh("GET", "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}", args)

"""
    ListMeshes()

Returns a list of existing service meshes.

Optional Parameters
{
  "limit": "The maximum number of results returned by ListMeshes in paginated output.\n         When you use this parameter, ListMeshes returns only limit\n         results in a single page along with a nextToken response element. You can see\n         the remaining results of the initial request by sending another ListMeshes\n         request with the returned nextToken value. This value can be between\n         1 and 100. If you don't use this parameter,\n            ListMeshes returns up to 100 results and a\n            nextToken value if applicable.",
  "nextToken": "The nextToken value returned from a previous paginated\n            ListMeshes request where limit was used and the results\n         exceeded the value of that parameter. Pagination continues from the end of the previous\n         results that returned the nextToken value. \n         \n            This token should be treated as an opaque identifier that is used only to\n                retrieve the next items in a list and not for other programmatic purposes.\n        "
}
"""
ListMeshes() = app_mesh("GET", "/v20190125/meshes")
ListMeshes(args) = app_mesh("GET", "/v20190125/meshes", args)

"""
    ListRoutes()

Returns a list of existing routes in a service mesh.

Required Parameters
{
  "meshName": "The name of the service mesh to list routes in.",
  "virtualRouterName": "The name of the virtual router to list routes in."
}

Optional Parameters
{
  "limit": "The maximum number of results returned by ListRoutes in paginated output.\n         When you use this parameter, ListRoutes returns only limit\n         results in a single page along with a nextToken response element. You can see\n         the remaining results of the initial request by sending another ListRoutes\n         request with the returned nextToken value. This value can be between\n         1 and 100. If you don't use this parameter,\n            ListRoutes returns up to 100 results and a\n            nextToken value if applicable.",
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes.",
  "nextToken": "The nextToken value returned from a previous paginated\n            ListRoutes request where limit was used and the results\n         exceeded the value of that parameter. Pagination continues from the end of the previous\n         results that returned the nextToken value."
}
"""
ListRoutes(args) = app_mesh("GET", "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes", args)

"""
    ListTagsForResource()

List the tags for an App Mesh resource.

Required Parameters
{
  "resourceArn": "The Amazon Resource Name (ARN) that identifies the resource to list the tags for."
}

Optional Parameters
{
  "limit": "The maximum number of tag results returned by ListTagsForResource in\n         paginated output. When this parameter is used, ListTagsForResource returns\n         only limit results in a single page along with a nextToken\n         response element. You can see the remaining results of the initial request by sending\n         another ListTagsForResource request with the returned nextToken\n         value. This value can be between 1 and 100. If you don't use\n         this parameter, ListTagsForResource returns up to 100\n         results and a nextToken value if applicable.",
  "nextToken": "The nextToken value returned from a previous paginated\n            ListTagsForResource request where limit was used and the\n         results exceeded the value of that parameter. Pagination continues from the end of the\n         previous results that returned the nextToken value."
}
"""
ListTagsForResource(args) = app_mesh("GET", "/v20190125/tags", args)

"""
    ListVirtualNodes()

Returns a list of existing virtual nodes.

Required Parameters
{
  "meshName": "The name of the service mesh to list virtual nodes in."
}

Optional Parameters
{
  "limit": "The maximum number of results returned by ListVirtualNodes in paginated\n         output. When you use this parameter, ListVirtualNodes returns only\n            limit results in a single page along with a nextToken response\n         element. You can see the remaining results of the initial request by sending another\n            ListVirtualNodes request with the returned nextToken value.\n         This value can be between 1 and 100. If you don't use this\n         parameter, ListVirtualNodes returns up to 100 results and a\n            nextToken value if applicable.",
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes.",
  "nextToken": "The nextToken value returned from a previous paginated\n            ListVirtualNodes request where limit was used and the results\n         exceeded the value of that parameter. Pagination continues from the end of the previous\n         results that returned the nextToken value."
}
"""
ListVirtualNodes(args) = app_mesh("GET", "/v20190125/meshes/{meshName}/virtualNodes", args)

"""
    ListVirtualRouters()

Returns a list of existing virtual routers in a service mesh.

Required Parameters
{
  "meshName": "The name of the service mesh to list virtual routers in."
}

Optional Parameters
{
  "limit": "The maximum number of results returned by ListVirtualRouters in paginated\n         output. When you use this parameter, ListVirtualRouters returns only\n            limit results in a single page along with a nextToken response\n         element. You can see the remaining results of the initial request by sending another\n            ListVirtualRouters request with the returned nextToken value.\n         This value can be between 1 and 100. If you don't use this\n         parameter, ListVirtualRouters returns up to 100 results and\n         a nextToken value if applicable.",
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes.",
  "nextToken": "The nextToken value returned from a previous paginated\n            ListVirtualRouters request where limit was used and the\n         results exceeded the value of that parameter. Pagination continues from the end of the\n         previous results that returned the nextToken value."
}
"""
ListVirtualRouters(args) = app_mesh("GET", "/v20190125/meshes/{meshName}/virtualRouters", args)

"""
    ListVirtualServices()

Returns a list of existing virtual services in a service mesh.

Required Parameters
{
  "meshName": "The name of the service mesh to list virtual services in."
}

Optional Parameters
{
  "limit": "The maximum number of results returned by ListVirtualServices in paginated\n         output. When you use this parameter, ListVirtualServices returns only\n            limit results in a single page along with a nextToken response\n         element. You can see the remaining results of the initial request by sending another\n            ListVirtualServices request with the returned nextToken value.\n         This value can be between 1 and 100. If you don't use this\n         parameter, ListVirtualServices returns up to 100 results and\n         a nextToken value if applicable.",
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes.",
  "nextToken": "The nextToken value returned from a previous paginated\n            ListVirtualServices request where limit was used and the\n         results exceeded the value of that parameter. Pagination continues from the end of the\n         previous results that returned the nextToken value."
}
"""
ListVirtualServices(args) = app_mesh("GET", "/v20190125/meshes/{meshName}/virtualServices", args)

"""
    TagResource()

Associates the specified tags to a resource with the specified resourceArn.
         If existing tags on a resource aren't specified in the request parameters, they aren't
         changed. When a resource is deleted, the tags associated with that resource are also
         deleted.

Required Parameters
{
  "resourceArn": "The Amazon Resource Name (ARN) of the resource to add tags to.",
  "tags": "The tags to add to the resource. A tag is an array of key-value pairs.\n         Tag keys can have a maximum character length of 128 characters, and tag values can have\n            a maximum length of 256 characters."
}
"""
TagResource(args) = app_mesh("PUT", "/v20190125/tag", args)

"""
    UntagResource()

Deletes specified tags from a resource.

Required Parameters
{
  "resourceArn": "The Amazon Resource Name (ARN) of the resource to delete tags from.",
  "tagKeys": "The keys of the tags to be removed."
}
"""
UntagResource(args) = app_mesh("PUT", "/v20190125/untag", args)

"""
    UpdateMesh()

Updates an existing service mesh.

Required Parameters
{
  "meshName": "The name of the service mesh to update."
}

Optional Parameters
{
  "clientToken": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
  "spec": "The service mesh specification to apply."
}
"""
UpdateMesh(args) = app_mesh("PUT", "/v20190125/meshes/{meshName}", args)

"""
    UpdateRoute()

Updates an existing route for a specified service mesh and virtual router.

Required Parameters
{
  "meshName": "The name of the service mesh that the route resides in.",
  "routeName": "The name of the route to update.",
  "spec": "The new route specification to apply. This overwrites the existing data.",
  "virtualRouterName": "The name of the virtual router that the route is associated with."
}

Optional Parameters
{
  "clientToken": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes."
}
"""
UpdateRoute(args) = app_mesh("PUT", "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}", args)

"""
    UpdateVirtualNode()

Updates an existing virtual node in a specified service mesh.

Required Parameters
{
  "meshName": "The name of the service mesh that the virtual node resides in.",
  "spec": "The new virtual node specification to apply. This overwrites the existing data.",
  "virtualNodeName": "The name of the virtual node to update."
}

Optional Parameters
{
  "clientToken": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes."
}
"""
UpdateVirtualNode(args) = app_mesh("PUT", "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}", args)

"""
    UpdateVirtualRouter()

Updates an existing virtual router in a specified service mesh.

Required Parameters
{
  "meshName": "The name of the service mesh that the virtual router resides in.",
  "spec": "The new virtual router specification to apply. This overwrites the existing data.",
  "virtualRouterName": "The name of the virtual router to update."
}

Optional Parameters
{
  "clientToken": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes."
}
"""
UpdateVirtualRouter(args) = app_mesh("PUT", "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}", args)

"""
    UpdateVirtualService()

Updates an existing virtual service in a specified service mesh.

Required Parameters
{
  "meshName": "The name of the service mesh that the virtual service resides in.",
  "spec": "The new virtual service specification to apply. This overwrites the existing\n         data.",
  "virtualServiceName": "The name of the virtual service to update."
}

Optional Parameters
{
  "clientToken": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
  "meshOwner": "The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's\n               the ID of the account that shared the mesh with your account. For more information about mesh sharing, see Working with Shared Meshes."
}
"""
UpdateVirtualService(args) = app_mesh("PUT", "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}", args)
