# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: cleanrooms
using AWS.Compat
using AWS.UUIDs

"""
    batch_get_schema(collaboration_identifier, names)
    batch_get_schema(collaboration_identifier, names, params::Dict{String,<:Any})

Retrieves multiple schemas by their identifiers.

# Arguments
- `collaboration_identifier`: A unique identifier for the collaboration that the schemas
  belong to. Currently accepts collaboration ID.
- `names`: The names for the schema objects to retrieve.&gt;

"""
function batch_get_schema(
    collaborationIdentifier, names; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "POST",
        "/collaborations/$(collaborationIdentifier)/batch-schema",
        Dict{String,Any}("names" => names);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function batch_get_schema(
    collaborationIdentifier,
    names,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/collaborations/$(collaborationIdentifier)/batch-schema",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("names" => names), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_collaboration(creator_display_name, creator_member_abilities, description, members, name, query_log_status)
    create_collaboration(creator_display_name, creator_member_abilities, description, members, name, query_log_status, params::Dict{String,<:Any})

Creates a new collaboration.

# Arguments
- `creator_display_name`: The display name of the collaboration creator.
- `creator_member_abilities`: The abilities granted to the collaboration creator.
- `description`: A description of the collaboration provided by the collaboration owner.
- `members`: A list of initial members, not including the creator. This list is immutable.
- `name`: The display name for a collaboration.
- `query_log_status`: An indicator as to whether query logging has been enabled or disabled
  for the collaboration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"dataEncryptionMetadata"`: The settings for client-side encryption with Cryptographic
  Computing for Clean Rooms.
- `"tags"`: An optional label that you can assign to a resource when you create it. Each
  tag consists of a key and an optional value, both of which you define. When you use
  tagging, you can also use tag-based access control in IAM policies to control access to
  this resource.
"""
function create_collaboration(
    creatorDisplayName,
    creatorMemberAbilities,
    description,
    members,
    name,
    queryLogStatus;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/collaborations",
        Dict{String,Any}(
            "creatorDisplayName" => creatorDisplayName,
            "creatorMemberAbilities" => creatorMemberAbilities,
            "description" => description,
            "members" => members,
            "name" => name,
            "queryLogStatus" => queryLogStatus,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_collaboration(
    creatorDisplayName,
    creatorMemberAbilities,
    description,
    members,
    name,
    queryLogStatus,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/collaborations",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "creatorDisplayName" => creatorDisplayName,
                    "creatorMemberAbilities" => creatorMemberAbilities,
                    "description" => description,
                    "members" => members,
                    "name" => name,
                    "queryLogStatus" => queryLogStatus,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_configured_table(allowed_columns, analysis_method, name, table_reference)
    create_configured_table(allowed_columns, analysis_method, name, table_reference, params::Dict{String,<:Any})

Creates a new configured table resource.

# Arguments
- `allowed_columns`: The columns of the underlying table that can be used by collaborations
  or analysis rules.
- `analysis_method`: The analysis method for the configured tables. The only valid value is
  currently `DIRECT_QUERY`.
- `name`: The name of the configured table.
- `table_reference`: A reference to the AWS Glue table being configured.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: A description for the configured table.
- `"tags"`: An optional label that you can assign to a resource when you create it. Each
  tag consists of a key and an optional value, both of which you define. When you use
  tagging, you can also use tag-based access control in IAM policies to control access to
  this resource.
"""
function create_configured_table(
    allowedColumns,
    analysisMethod,
    name,
    tableReference;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/configuredTables",
        Dict{String,Any}(
            "allowedColumns" => allowedColumns,
            "analysisMethod" => analysisMethod,
            "name" => name,
            "tableReference" => tableReference,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_configured_table(
    allowedColumns,
    analysisMethod,
    name,
    tableReference,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/configuredTables",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "allowedColumns" => allowedColumns,
                    "analysisMethod" => analysisMethod,
                    "name" => name,
                    "tableReference" => tableReference,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_configured_table_analysis_rule(analysis_rule_policy, analysis_rule_type, configured_table_identifier)
    create_configured_table_analysis_rule(analysis_rule_policy, analysis_rule_type, configured_table_identifier, params::Dict{String,<:Any})

Creates a new analysis rule for a configured table. Currently, only one analysis rule can
be created for a given configured table.

# Arguments
- `analysis_rule_policy`: The entire created configured table analysis rule object.
- `analysis_rule_type`: The type of analysis rule. Valid values are AGGREGATION and LIST.
- `configured_table_identifier`: The identifier for the configured table to create the
  analysis rule for. Currently accepts the configured table ID.

"""
function create_configured_table_analysis_rule(
    analysisRulePolicy,
    analysisRuleType,
    configuredTableIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/configuredTables/$(configuredTableIdentifier)/analysisRule",
        Dict{String,Any}(
            "analysisRulePolicy" => analysisRulePolicy,
            "analysisRuleType" => analysisRuleType,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_configured_table_analysis_rule(
    analysisRulePolicy,
    analysisRuleType,
    configuredTableIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/configuredTables/$(configuredTableIdentifier)/analysisRule",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "analysisRulePolicy" => analysisRulePolicy,
                    "analysisRuleType" => analysisRuleType,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_configured_table_association(configured_table_identifier, membership_identifier, name, role_arn)
    create_configured_table_association(configured_table_identifier, membership_identifier, name, role_arn, params::Dict{String,<:Any})

Creates a configured table association. A configured table association links a configured
table with a collaboration.

# Arguments
- `configured_table_identifier`: A unique identifier for the configured table to be
  associated to. Currently accepts a configured table ID.
- `membership_identifier`: A unique identifier for one of your memberships for a
  collaboration. The configured table is associated to the collaboration that this membership
  belongs to. Currently accepts a membership ID.
- `name`: The name of the configured table association. This name is used to query the
  underlying configured table.
- `role_arn`: The service will assume this role to access catalog metadata and query the
  table.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: A description for the configured table association.
- `"tags"`: An optional label that you can assign to a resource when you create it. Each
  tag consists of a key and an optional value, both of which you define. When you use
  tagging, you can also use tag-based access control in IAM policies to control access to
  this resource.
"""
function create_configured_table_association(
    configuredTableIdentifier,
    membershipIdentifier,
    name,
    roleArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/memberships/$(membershipIdentifier)/configuredTableAssociations",
        Dict{String,Any}(
            "configuredTableIdentifier" => configuredTableIdentifier,
            "name" => name,
            "roleArn" => roleArn,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_configured_table_association(
    configuredTableIdentifier,
    membershipIdentifier,
    name,
    roleArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/memberships/$(membershipIdentifier)/configuredTableAssociations",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "configuredTableIdentifier" => configuredTableIdentifier,
                    "name" => name,
                    "roleArn" => roleArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_membership(collaboration_identifier, query_log_status)
    create_membership(collaboration_identifier, query_log_status, params::Dict{String,<:Any})

Creates a membership for a specific collaboration identifier and joins the collaboration.

# Arguments
- `collaboration_identifier`: The unique ID for the associated collaboration.
- `query_log_status`: An indicator as to whether query logging has been enabled or disabled
  for the collaboration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"tags"`: An optional label that you can assign to a resource when you create it. Each
  tag consists of a key and an optional value, both of which you define. When you use
  tagging, you can also use tag-based access control in IAM policies to control access to
  this resource.
"""
function create_membership(
    collaborationIdentifier,
    queryLogStatus;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/memberships",
        Dict{String,Any}(
            "collaborationIdentifier" => collaborationIdentifier,
            "queryLogStatus" => queryLogStatus,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_membership(
    collaborationIdentifier,
    queryLogStatus,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/memberships",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "collaborationIdentifier" => collaborationIdentifier,
                    "queryLogStatus" => queryLogStatus,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_collaboration(collaboration_identifier)
    delete_collaboration(collaboration_identifier, params::Dict{String,<:Any})

Deletes a collaboration. It can only be called by the collaboration owner.

# Arguments
- `collaboration_identifier`: The identifier for the collaboration.

"""
function delete_collaboration(
    collaborationIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "DELETE",
        "/collaborations/$(collaborationIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_collaboration(
    collaborationIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "DELETE",
        "/collaborations/$(collaborationIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_configured_table(configured_table_identifier)
    delete_configured_table(configured_table_identifier, params::Dict{String,<:Any})

Deletes a configured table.

# Arguments
- `configured_table_identifier`: The unique ID for the configured table to delete.

"""
function delete_configured_table(
    configuredTableIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "DELETE",
        "/configuredTables/$(configuredTableIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_configured_table(
    configuredTableIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "DELETE",
        "/configuredTables/$(configuredTableIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_configured_table_analysis_rule(analysis_rule_type, configured_table_identifier)
    delete_configured_table_analysis_rule(analysis_rule_type, configured_table_identifier, params::Dict{String,<:Any})

Deletes a configured table analysis rule.

# Arguments
- `analysis_rule_type`: The analysis rule type to be deleted. Configured table analysis
  rules are uniquely identified by their configured table identifier and analysis rule type.
- `configured_table_identifier`: The unique identifier for the configured table that the
  analysis rule applies to. Currently accepts the configured table ID.

"""
function delete_configured_table_analysis_rule(
    analysisRuleType,
    configuredTableIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "DELETE",
        "/configuredTables/$(configuredTableIdentifier)/analysisRule/$(analysisRuleType)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_configured_table_analysis_rule(
    analysisRuleType,
    configuredTableIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "DELETE",
        "/configuredTables/$(configuredTableIdentifier)/analysisRule/$(analysisRuleType)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_configured_table_association(configured_table_association_identifier, membership_identifier)
    delete_configured_table_association(configured_table_association_identifier, membership_identifier, params::Dict{String,<:Any})

Deletes a configured table association.

# Arguments
- `configured_table_association_identifier`: The unique ID for the configured table
  association to be deleted. Currently accepts the configured table ID.
- `membership_identifier`: A unique identifier for the membership that the configured table
  association belongs to. Currently accepts the membership ID.

"""
function delete_configured_table_association(
    configuredTableAssociationIdentifier,
    membershipIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "DELETE",
        "/memberships/$(membershipIdentifier)/configuredTableAssociations/$(configuredTableAssociationIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_configured_table_association(
    configuredTableAssociationIdentifier,
    membershipIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "DELETE",
        "/memberships/$(membershipIdentifier)/configuredTableAssociations/$(configuredTableAssociationIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_member(account_id, collaboration_identifier)
    delete_member(account_id, collaboration_identifier, params::Dict{String,<:Any})

Removes the specified member from a collaboration. The removed member is placed in the
Removed status and can't interact with the collaboration. The removed member's data is
inaccessible to active members of the collaboration.

# Arguments
- `account_id`: The account ID of the member to remove.
- `collaboration_identifier`: The unique identifier for the associated collaboration.

"""
function delete_member(
    accountId, collaborationIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "DELETE",
        "/collaborations/$(collaborationIdentifier)/member/$(accountId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_member(
    accountId,
    collaborationIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "DELETE",
        "/collaborations/$(collaborationIdentifier)/member/$(accountId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_membership(membership_identifier)
    delete_membership(membership_identifier, params::Dict{String,<:Any})

Deletes a specified membership. All resources under a membership must be deleted.

# Arguments
- `membership_identifier`: The identifier for a membership resource.

"""
function delete_membership(
    membershipIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "DELETE",
        "/memberships/$(membershipIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_membership(
    membershipIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "DELETE",
        "/memberships/$(membershipIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_collaboration(collaboration_identifier)
    get_collaboration(collaboration_identifier, params::Dict{String,<:Any})

Returns metadata about a collaboration.

# Arguments
- `collaboration_identifier`: The identifier for the collaboration.

"""
function get_collaboration(
    collaborationIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "GET",
        "/collaborations/$(collaborationIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_collaboration(
    collaborationIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/collaborations/$(collaborationIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_configured_table(configured_table_identifier)
    get_configured_table(configured_table_identifier, params::Dict{String,<:Any})

Retrieves a configured table.

# Arguments
- `configured_table_identifier`: The unique ID for the configured table to retrieve.

"""
function get_configured_table(
    configuredTableIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "GET",
        "/configuredTables/$(configuredTableIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_configured_table(
    configuredTableIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/configuredTables/$(configuredTableIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_configured_table_analysis_rule(analysis_rule_type, configured_table_identifier)
    get_configured_table_analysis_rule(analysis_rule_type, configured_table_identifier, params::Dict{String,<:Any})

Retrieves a configured table analysis rule.

# Arguments
- `analysis_rule_type`: The analysis rule to be retrieved. Configured table analysis rules
  are uniquely identified by their configured table identifier and analysis rule type.
- `configured_table_identifier`: The unique identifier for the configured table to
  retrieve. Currently accepts the configured table ID.

"""
function get_configured_table_analysis_rule(
    analysisRuleType,
    configuredTableIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/configuredTables/$(configuredTableIdentifier)/analysisRule/$(analysisRuleType)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_configured_table_analysis_rule(
    analysisRuleType,
    configuredTableIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/configuredTables/$(configuredTableIdentifier)/analysisRule/$(analysisRuleType)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_configured_table_association(configured_table_association_identifier, membership_identifier)
    get_configured_table_association(configured_table_association_identifier, membership_identifier, params::Dict{String,<:Any})

Retrieves a configured table association.

# Arguments
- `configured_table_association_identifier`: The unique ID for the configured table
  association to retrieve. Currently accepts the configured table ID.
- `membership_identifier`: A unique identifier for the membership that the configured table
  association belongs to. Currently accepts the membership ID.

"""
function get_configured_table_association(
    configuredTableAssociationIdentifier,
    membershipIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/memberships/$(membershipIdentifier)/configuredTableAssociations/$(configuredTableAssociationIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_configured_table_association(
    configuredTableAssociationIdentifier,
    membershipIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/memberships/$(membershipIdentifier)/configuredTableAssociations/$(configuredTableAssociationIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_membership(membership_identifier)
    get_membership(membership_identifier, params::Dict{String,<:Any})

Retrieves a specified membership for an identifier.

# Arguments
- `membership_identifier`: The identifier for a membership resource.

"""
function get_membership(
    membershipIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "GET",
        "/memberships/$(membershipIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_membership(
    membershipIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/memberships/$(membershipIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_protected_query(membership_identifier, protected_query_identifier)
    get_protected_query(membership_identifier, protected_query_identifier, params::Dict{String,<:Any})

Returns query processing metadata.

# Arguments
- `membership_identifier`: The identifier for a membership in a protected query instance.
- `protected_query_identifier`: The identifier for a protected query instance.

"""
function get_protected_query(
    membershipIdentifier,
    protectedQueryIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/memberships/$(membershipIdentifier)/protectedQueries/$(protectedQueryIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_protected_query(
    membershipIdentifier,
    protectedQueryIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/memberships/$(membershipIdentifier)/protectedQueries/$(protectedQueryIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_schema(collaboration_identifier, name)
    get_schema(collaboration_identifier, name, params::Dict{String,<:Any})

Retrieves the schema for a relation within a collaboration.

# Arguments
- `collaboration_identifier`: A unique identifier for the collaboration that the schema
  belongs to. Currently accepts a collaboration ID.
- `name`: The name of the relation to retrieve the schema for.

"""
function get_schema(
    collaborationIdentifier, name; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "GET",
        "/collaborations/$(collaborationIdentifier)/schemas/$(name)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_schema(
    collaborationIdentifier,
    name,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/collaborations/$(collaborationIdentifier)/schemas/$(name)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_schema_analysis_rule(collaboration_identifier, name, type)
    get_schema_analysis_rule(collaboration_identifier, name, type, params::Dict{String,<:Any})

Retrieves a schema analysis rule.

# Arguments
- `collaboration_identifier`: A unique identifier for the collaboration that the schema
  belongs to. Currently accepts a collaboration ID.
- `name`: The name of the schema to retrieve the analysis rule for.
- `type`: The type of the schema analysis rule to retrieve. Schema analysis rules are
  uniquely identified by a combination of the collaboration, the schema name, and their type.

"""
function get_schema_analysis_rule(
    collaborationIdentifier, name, type; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "GET",
        "/collaborations/$(collaborationIdentifier)/schemas/$(name)/analysisRule/$(type)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_schema_analysis_rule(
    collaborationIdentifier,
    name,
    type,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/collaborations/$(collaborationIdentifier)/schemas/$(name)/analysisRule/$(type)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_collaborations()
    list_collaborations(params::Dict{String,<:Any})

Lists collaborations the caller owns, is active in, or has been invited to.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum size of the results that is returned per call. Service
  chooses a default if it has not been set. Service may return a nextToken even if the
  maximum results has not been met.
- `"memberStatus"`: The caller's status in a collaboration.
- `"nextToken"`: The token value retrieved from a previous call to access the next page of
  results.
"""
function list_collaborations(; aws_config::AbstractAWSConfig=global_aws_config())
    return cleanrooms(
        "GET", "/collaborations"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_collaborations(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "GET",
        "/collaborations",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_configured_table_associations(membership_identifier)
    list_configured_table_associations(membership_identifier, params::Dict{String,<:Any})

Lists configured table associations for a membership.

# Arguments
- `membership_identifier`: A unique identifier for the membership to list configured table
  associations for. Currently accepts the membership ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum size of the results that is returned per call.
- `"nextToken"`: The token value retrieved from a previous call to access the next page of
  results.
"""
function list_configured_table_associations(
    membershipIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "GET",
        "/memberships/$(membershipIdentifier)/configuredTableAssociations";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_configured_table_associations(
    membershipIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/memberships/$(membershipIdentifier)/configuredTableAssociations",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_configured_tables()
    list_configured_tables(params::Dict{String,<:Any})

Lists configured tables.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum size of the results that is returned per call.
- `"nextToken"`: The token value retrieved from a previous call to access the next page of
  results.
"""
function list_configured_tables(; aws_config::AbstractAWSConfig=global_aws_config())
    return cleanrooms(
        "GET", "/configuredTables"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_configured_tables(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "GET",
        "/configuredTables",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_members(collaboration_identifier)
    list_members(collaboration_identifier, params::Dict{String,<:Any})

Lists all members within a collaboration.

# Arguments
- `collaboration_identifier`: The identifier of the collaboration in which the members are
  listed.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum size of the results that is returned per call.
- `"nextToken"`: The token value retrieved from a previous call to access the next page of
  results.
"""
function list_members(
    collaborationIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "GET",
        "/collaborations/$(collaborationIdentifier)/members";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_members(
    collaborationIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/collaborations/$(collaborationIdentifier)/members",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_memberships()
    list_memberships(params::Dict{String,<:Any})

Lists all memberships resources within the caller's account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum size of the results that is returned per call.
- `"nextToken"`: The token value retrieved from a previous call to access the next page of
  results.
- `"status"`: A filter which will return only memberships in the specified status.
"""
function list_memberships(; aws_config::AbstractAWSConfig=global_aws_config())
    return cleanrooms(
        "GET", "/memberships"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_memberships(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "GET",
        "/memberships",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_protected_queries(membership_identifier)
    list_protected_queries(membership_identifier, params::Dict{String,<:Any})

Lists protected queries, sorted by the most recent query.

# Arguments
- `membership_identifier`: The identifier for the membership in the collaboration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum size of the results that is returned per call. Service
  chooses a default if it has not been set. Service can return a nextToken even if the
  maximum results has not been met.
- `"nextToken"`: The token value retrieved from a previous call to access the next page of
  results.
- `"status"`: A filter on the status of the protected query.
"""
function list_protected_queries(
    membershipIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "GET",
        "/memberships/$(membershipIdentifier)/protectedQueries";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_protected_queries(
    membershipIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/memberships/$(membershipIdentifier)/protectedQueries",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_schemas(collaboration_identifier)
    list_schemas(collaboration_identifier, params::Dict{String,<:Any})

Lists the schemas for relations within a collaboration.

# Arguments
- `collaboration_identifier`: A unique identifier for the collaboration that the schema
  belongs to. Currently accepts a collaboration ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum size of the results that is returned per call.
- `"nextToken"`: The token value retrieved from a previous call to access the next page of
  results.
- `"schemaType"`: If present, filter schemas by schema type. The only valid schema type is
  currently `TABLE`.
"""
function list_schemas(
    collaborationIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "GET",
        "/collaborations/$(collaborationIdentifier)/schemas";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_schemas(
    collaborationIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/collaborations/$(collaborationIdentifier)/schemas",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Lists all of the tags that have been added to a resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) associated with the resource you want to
  list tags on.

"""
function list_tags_for_resource(
    resourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "GET",
        "/tags/$(resourceArn)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    resourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "GET",
        "/tags/$(resourceArn)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_protected_query(membership_identifier, result_configuration, sql_parameters, type)
    start_protected_query(membership_identifier, result_configuration, sql_parameters, type, params::Dict{String,<:Any})

Creates a protected query that is started by AWS Clean Rooms.

# Arguments
- `membership_identifier`: A unique identifier for the membership to run this query
  against. Currently accepts a membership ID.
- `result_configuration`: The details needed to write the query results.
- `sql_parameters`: The protected SQL query parameters.
- `type`: The type of the protected query to be started.

"""
function start_protected_query(
    membershipIdentifier,
    resultConfiguration,
    sqlParameters,
    type;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/memberships/$(membershipIdentifier)/protectedQueries",
        Dict{String,Any}(
            "resultConfiguration" => resultConfiguration,
            "sqlParameters" => sqlParameters,
            "type" => type,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_protected_query(
    membershipIdentifier,
    resultConfiguration,
    sqlParameters,
    type,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/memberships/$(membershipIdentifier)/protectedQueries",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "resultConfiguration" => resultConfiguration,
                    "sqlParameters" => sqlParameters,
                    "type" => type,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Tags a resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) associated with the resource you want to
  tag.
- `tags`: A map of objects specifying each key name and value.

"""
function tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config())
    return cleanrooms(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}("tags" => tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    resourceArn,
    tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tags" => tags), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Removes a tag or list of tags from a resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) associated with the resource you want to
  remove the tag from.
- `tag_keys`: A list of key names of tags to be removed.

"""
function untag_resource(
    resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}("tagKeys" => tagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    resourceArn,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tagKeys" => tagKeys), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_collaboration(collaboration_identifier)
    update_collaboration(collaboration_identifier, params::Dict{String,<:Any})

Updates collaboration metadata and can only be called by the collaboration owner.

# Arguments
- `collaboration_identifier`: The identifier for the collaboration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: A description of the collaboration.
- `"name"`: A human-readable identifier provided by the collaboration owner. Display names
  are not unique.
"""
function update_collaboration(
    collaborationIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "PATCH",
        "/collaborations/$(collaborationIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_collaboration(
    collaborationIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "PATCH",
        "/collaborations/$(collaborationIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_configured_table(configured_table_identifier)
    update_configured_table(configured_table_identifier, params::Dict{String,<:Any})

Updates a configured table.

# Arguments
- `configured_table_identifier`: The identifier for the configured table to update.
  Currently accepts the configured table ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: A new description for the configured table.
- `"name"`: A new name for the configured table.
"""
function update_configured_table(
    configuredTableIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "PATCH",
        "/configuredTables/$(configuredTableIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_configured_table(
    configuredTableIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "PATCH",
        "/configuredTables/$(configuredTableIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_configured_table_analysis_rule(analysis_rule_policy, analysis_rule_type, configured_table_identifier)
    update_configured_table_analysis_rule(analysis_rule_policy, analysis_rule_type, configured_table_identifier, params::Dict{String,<:Any})

Updates a configured table analysis rule.

# Arguments
- `analysis_rule_policy`: The new analysis rule policy for the configured table analysis
  rule.
- `analysis_rule_type`: The analysis rule type to be updated. Configured table analysis
  rules are uniquely identified by their configured table identifier and analysis rule type.
- `configured_table_identifier`: The unique identifier for the configured table that the
  analysis rule applies to. Currently accepts the configured table ID.

"""
function update_configured_table_analysis_rule(
    analysisRulePolicy,
    analysisRuleType,
    configuredTableIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "PATCH",
        "/configuredTables/$(configuredTableIdentifier)/analysisRule/$(analysisRuleType)",
        Dict{String,Any}("analysisRulePolicy" => analysisRulePolicy);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_configured_table_analysis_rule(
    analysisRulePolicy,
    analysisRuleType,
    configuredTableIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "PATCH",
        "/configuredTables/$(configuredTableIdentifier)/analysisRule/$(analysisRuleType)",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("analysisRulePolicy" => analysisRulePolicy), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_configured_table_association(configured_table_association_identifier, membership_identifier)
    update_configured_table_association(configured_table_association_identifier, membership_identifier, params::Dict{String,<:Any})

Updates a configured table association.

# Arguments
- `configured_table_association_identifier`: The unique identifier for the configured table
  association to update. Currently accepts the configured table association ID.
- `membership_identifier`: The unique ID for the membership that the configured table
  association belongs to.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: A new description for the configured table association.
- `"roleArn"`: The service will assume this role to access catalog metadata and query the
  table.
"""
function update_configured_table_association(
    configuredTableAssociationIdentifier,
    membershipIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "PATCH",
        "/memberships/$(membershipIdentifier)/configuredTableAssociations/$(configuredTableAssociationIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_configured_table_association(
    configuredTableAssociationIdentifier,
    membershipIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "PATCH",
        "/memberships/$(membershipIdentifier)/configuredTableAssociations/$(configuredTableAssociationIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_membership(membership_identifier)
    update_membership(membership_identifier, params::Dict{String,<:Any})

Updates a membership.

# Arguments
- `membership_identifier`: The unique identifier of the membership.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"queryLogStatus"`: An indicator as to whether query logging has been enabled or disabled
  for the collaboration.
"""
function update_membership(
    membershipIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cleanrooms(
        "PATCH",
        "/memberships/$(membershipIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_membership(
    membershipIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "PATCH",
        "/memberships/$(membershipIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_protected_query(membership_identifier, protected_query_identifier, target_status)
    update_protected_query(membership_identifier, protected_query_identifier, target_status, params::Dict{String,<:Any})

Updates the processing of a currently running query.

# Arguments
- `membership_identifier`: The identifier for a member of a protected query instance.
- `protected_query_identifier`: The identifier for a protected query instance.
- `target_status`: The target status of a query. Used to update the execution status of a
  currently running query.

"""
function update_protected_query(
    membershipIdentifier,
    protectedQueryIdentifier,
    targetStatus;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "PATCH",
        "/memberships/$(membershipIdentifier)/protectedQueries/$(protectedQueryIdentifier)",
        Dict{String,Any}("targetStatus" => targetStatus);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_protected_query(
    membershipIdentifier,
    protectedQueryIdentifier,
    targetStatus,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cleanrooms(
        "PATCH",
        "/memberships/$(membershipIdentifier)/protectedQueries/$(protectedQueryIdentifier)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("targetStatus" => targetStatus), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
