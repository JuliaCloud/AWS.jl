# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: iot_roborunner
using AWS.Compat
using AWS.UUIDs

"""
    create_destination(name, site)
    create_destination(name, site, params::Dict{String,<:Any})

Grants permission to create a destination

# Arguments
- `name`:
- `site`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"additionalFixedProperties"`:
- `"clientToken"`:
- `"state"`: The state of the destination. Default used if not specified.
"""
function create_destination(name, site; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "POST",
        "/createDestination",
        Dict{String,Any}("name" => name, "site" => site, "clientToken" => string(uuid4()));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_destination(
    name,
    site,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return iot_roborunner(
        "POST",
        "/createDestination",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "name" => name, "site" => site, "clientToken" => string(uuid4())
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_site(country_code, name)
    create_site(country_code, name, params::Dict{String,<:Any})

Grants permission to create a site

# Arguments
- `country_code`:
- `name`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`:
- `"description"`:
"""
function create_site(countryCode, name; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "POST",
        "/createSite",
        Dict{String,Any}(
            "countryCode" => countryCode, "name" => name, "clientToken" => string(uuid4())
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_site(
    countryCode,
    name,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return iot_roborunner(
        "POST",
        "/createSite",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "countryCode" => countryCode,
                    "name" => name,
                    "clientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_worker(fleet, name)
    create_worker(fleet, name, params::Dict{String,<:Any})

Grants permission to create a worker

# Arguments
- `fleet`:
- `name`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"additionalFixedProperties"`:
- `"additionalTransientProperties"`:
- `"clientToken"`:
- `"orientation"`:
- `"position"`:
- `"vendorProperties"`:
"""
function create_worker(fleet, name; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "POST",
        "/createWorker",
        Dict{String,Any}(
            "fleet" => fleet, "name" => name, "clientToken" => string(uuid4())
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_worker(
    fleet,
    name,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return iot_roborunner(
        "POST",
        "/createWorker",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "fleet" => fleet, "name" => name, "clientToken" => string(uuid4())
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_worker_fleet(name, site)
    create_worker_fleet(name, site, params::Dict{String,<:Any})

Grants permission to create a worker fleet

# Arguments
- `name`:
- `site`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"additionalFixedProperties"`:
- `"clientToken"`:
"""
function create_worker_fleet(name, site; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "POST",
        "/createWorkerFleet",
        Dict{String,Any}("name" => name, "site" => site, "clientToken" => string(uuid4()));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_worker_fleet(
    name,
    site,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return iot_roborunner(
        "POST",
        "/createWorkerFleet",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "name" => name, "site" => site, "clientToken" => string(uuid4())
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_destination(id)
    delete_destination(id, params::Dict{String,<:Any})

Grants permission to delete a destination

# Arguments
- `id`:

"""
function delete_destination(id; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "POST",
        "/deleteDestination",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_destination(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "POST",
        "/deleteDestination",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_site(id)
    delete_site(id, params::Dict{String,<:Any})

Grants permission to delete a site

# Arguments
- `id`:

"""
function delete_site(id; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "POST",
        "/deleteSite",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_site(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "POST",
        "/deleteSite",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_worker(id)
    delete_worker(id, params::Dict{String,<:Any})

Grants permission to delete a worker

# Arguments
- `id`:

"""
function delete_worker(id; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "POST",
        "/deleteWorker",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_worker(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "POST",
        "/deleteWorker",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_worker_fleet(id)
    delete_worker_fleet(id, params::Dict{String,<:Any})

Grants permission to delete a worker fleet

# Arguments
- `id`:

"""
function delete_worker_fleet(id; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "POST",
        "/deleteWorkerFleet",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_worker_fleet(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "POST",
        "/deleteWorkerFleet",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_destination(id)
    get_destination(id, params::Dict{String,<:Any})

Grants permission to get a destination

# Arguments
- `id`:

"""
function get_destination(id; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "GET",
        "/getDestination",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_destination(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "GET",
        "/getDestination",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_site(id)
    get_site(id, params::Dict{String,<:Any})

Grants permission to get a site

# Arguments
- `id`:

"""
function get_site(id; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "GET",
        "/getSite",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_site(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "GET",
        "/getSite",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_worker(id)
    get_worker(id, params::Dict{String,<:Any})

Grants permission to get a worker

# Arguments
- `id`:

"""
function get_worker(id; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "GET",
        "/getWorker",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_worker(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "GET",
        "/getWorker",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_worker_fleet(id)
    get_worker_fleet(id, params::Dict{String,<:Any})

Grants permission to get a worker fleet

# Arguments
- `id`:

"""
function get_worker_fleet(id; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "GET",
        "/getWorkerFleet",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_worker_fleet(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "GET",
        "/getWorkerFleet",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_destinations(site)
    list_destinations(site, params::Dict{String,<:Any})

Grants permission to list destinations

# Arguments
- `site`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`:
- `"nextToken"`:
- `"state"`:
"""
function list_destinations(site; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "GET",
        "/listDestinations",
        Dict{String,Any}("site" => site);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_destinations(
    site, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "GET",
        "/listDestinations",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("site" => site), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_sites()
    list_sites(params::Dict{String,<:Any})

Grants permission to list sites

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`:
- `"nextToken"`:
"""
function list_sites(; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "GET", "/listSites"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_sites(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "GET", "/listSites", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_worker_fleets(site)
    list_worker_fleets(site, params::Dict{String,<:Any})

Grants permission to list worker fleets

# Arguments
- `site`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`:
- `"nextToken"`:
"""
function list_worker_fleets(site; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "GET",
        "/listWorkerFleets",
        Dict{String,Any}("site" => site);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_worker_fleets(
    site, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "GET",
        "/listWorkerFleets",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("site" => site), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_workers(site)
    list_workers(site, params::Dict{String,<:Any})

Grants permission to list workers

# Arguments
- `site`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"fleet"`:
- `"maxResults"`:
- `"nextToken"`:
"""
function list_workers(site; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "GET",
        "/listWorkers",
        Dict{String,Any}("site" => site);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_workers(
    site, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "GET",
        "/listWorkers",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("site" => site), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_destination(id)
    update_destination(id, params::Dict{String,<:Any})

Grants permission to update a destination

# Arguments
- `id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"additionalFixedProperties"`:
- `"name"`:
- `"state"`:
"""
function update_destination(id; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "POST",
        "/updateDestination",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_destination(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "POST",
        "/updateDestination",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_site(id)
    update_site(id, params::Dict{String,<:Any})

Grants permission to update a site

# Arguments
- `id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"countryCode"`:
- `"description"`:
- `"name"`:
"""
function update_site(id; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "POST",
        "/updateSite",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_site(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "POST",
        "/updateSite",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_worker(id)
    update_worker(id, params::Dict{String,<:Any})

Grants permission to update a worker

# Arguments
- `id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"additionalFixedProperties"`:
- `"additionalTransientProperties"`:
- `"name"`:
- `"orientation"`:
- `"position"`:
- `"vendorProperties"`:
"""
function update_worker(id; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "POST",
        "/updateWorker",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_worker(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "POST",
        "/updateWorker",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_worker_fleet(id)
    update_worker_fleet(id, params::Dict{String,<:Any})

Grants permission to update a worker fleet

# Arguments
- `id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"additionalFixedProperties"`:
- `"name"`:
"""
function update_worker_fleet(id; aws_config::AbstractAWSConfig=global_aws_config())
    return iot_roborunner(
        "POST",
        "/updateWorkerFleet",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_worker_fleet(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return iot_roborunner(
        "POST",
        "/updateWorkerFleet",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
