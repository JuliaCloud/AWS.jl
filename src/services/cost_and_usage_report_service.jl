# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: cost_and_usage_report_service

using Compat
using UUIDs
"""
    DeleteReportDefinition()

Deletes the specified report.

# Optional Parameters
- `ReportName`: 
"""
DeleteReportDefinition(; aws::AWSConfig=AWSConfig()) = cost_and_usage_report_service("DeleteReportDefinition"; aws=aws)
DeleteReportDefinition(args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = cost_and_usage_report_service("DeleteReportDefinition", args; aws=aws)

"""
    DescribeReportDefinitions()

Lists the AWS Cost and Usage reports available to this account.

# Optional Parameters
- `MaxResults`: 
- `NextToken`: 
"""
DescribeReportDefinitions(; aws::AWSConfig=AWSConfig()) = cost_and_usage_report_service("DescribeReportDefinitions"; aws=aws)
DescribeReportDefinitions(args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = cost_and_usage_report_service("DescribeReportDefinitions", args; aws=aws)

"""
    ModifyReportDefinition()

Allows you to programatically update your report preferences.

# Required Parameters
- `ReportDefinition`: 
- `ReportName`: 

"""
ModifyReportDefinition(ReportDefinition, ReportName; aws::AWSConfig=AWSConfig()) = cost_and_usage_report_service("ModifyReportDefinition", Dict{String, Any}("ReportDefinition"=>ReportDefinition, "ReportName"=>ReportName); aws=aws)
ModifyReportDefinition(ReportDefinition, ReportName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = cost_and_usage_report_service("ModifyReportDefinition", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ReportDefinition"=>ReportDefinition, "ReportName"=>ReportName), args)); aws=aws)

"""
    PutReportDefinition()

Creates a new report using the description that you provide.

# Required Parameters
- `ReportDefinition`: Represents the output of the PutReportDefinition operation. The content consists of the detailed metadata and data file information. 

"""
PutReportDefinition(ReportDefinition; aws::AWSConfig=AWSConfig()) = cost_and_usage_report_service("PutReportDefinition", Dict{String, Any}("ReportDefinition"=>ReportDefinition); aws=aws)
PutReportDefinition(ReportDefinition, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = cost_and_usage_report_service("PutReportDefinition", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ReportDefinition"=>ReportDefinition), args)); aws=aws)
