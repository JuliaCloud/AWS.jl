# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: workmail
using AWS.Compat
using AWS.UUIDs

"""
    associate_delegate_to_resource(entity_id, organization_id, resource_id)
    associate_delegate_to_resource(entity_id, organization_id, resource_id, params::Dict{String,<:Any})

Adds a member (user or group) to the resource's set of delegates.

# Arguments
- `entity_id`: The member (user or group) to associate to the resource.
- `organization_id`: The organization under which the resource exists.
- `resource_id`: The resource for which members (users or groups) are associated.

"""
function associate_delegate_to_resource(
    EntityId, OrganizationId, ResourceId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "AssociateDelegateToResource",
        Dict{String,Any}(
            "EntityId" => EntityId,
            "OrganizationId" => OrganizationId,
            "ResourceId" => ResourceId,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function associate_delegate_to_resource(
    EntityId,
    OrganizationId,
    ResourceId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "AssociateDelegateToResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "EntityId" => EntityId,
                    "OrganizationId" => OrganizationId,
                    "ResourceId" => ResourceId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    associate_member_to_group(group_id, member_id, organization_id)
    associate_member_to_group(group_id, member_id, organization_id, params::Dict{String,<:Any})

Adds a member (user or group) to the group's set.

# Arguments
- `group_id`: The group to which the member (user or group) is associated.
- `member_id`: The member (user or group) to associate to the group.
- `organization_id`: The organization under which the group exists.

"""
function associate_member_to_group(
    GroupId, MemberId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "AssociateMemberToGroup",
        Dict{String,Any}(
            "GroupId" => GroupId, "MemberId" => MemberId, "OrganizationId" => OrganizationId
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function associate_member_to_group(
    GroupId,
    MemberId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "AssociateMemberToGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "GroupId" => GroupId,
                    "MemberId" => MemberId,
                    "OrganizationId" => OrganizationId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    cancel_mailbox_export_job(client_token, job_id, organization_id)
    cancel_mailbox_export_job(client_token, job_id, organization_id, params::Dict{String,<:Any})

Cancels a mailbox export job.  If the mailbox export job is near completion, it might not
be possible to cancel it.

# Arguments
- `client_token`: The idempotency token for the client request.
- `job_id`: The job ID.
- `organization_id`: The organization ID.

"""
function cancel_mailbox_export_job(
    ClientToken, JobId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "CancelMailboxExportJob",
        Dict{String,Any}(
            "ClientToken" => ClientToken,
            "JobId" => JobId,
            "OrganizationId" => OrganizationId,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function cancel_mailbox_export_job(
    ClientToken,
    JobId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "CancelMailboxExportJob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ClientToken" => ClientToken,
                    "JobId" => JobId,
                    "OrganizationId" => OrganizationId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_alias(alias, entity_id, organization_id)
    create_alias(alias, entity_id, organization_id, params::Dict{String,<:Any})

Adds an alias to the set of a given member (user or group) of Amazon WorkMail.

# Arguments
- `alias`: The alias to add to the member set.
- `entity_id`: The member (user or group) to which this alias is added.
- `organization_id`: The organization under which the member (user or group) exists.

"""
function create_alias(
    Alias, EntityId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "CreateAlias",
        Dict{String,Any}(
            "Alias" => Alias, "EntityId" => EntityId, "OrganizationId" => OrganizationId
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_alias(
    Alias,
    EntityId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "CreateAlias",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Alias" => Alias,
                    "EntityId" => EntityId,
                    "OrganizationId" => OrganizationId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_group(name, organization_id)
    create_group(name, organization_id, params::Dict{String,<:Any})

Creates a group that can be used in Amazon WorkMail by calling the RegisterToWorkMail
operation.

# Arguments
- `name`: The name of the group.
- `organization_id`: The organization under which the group is to be created.

"""
function create_group(
    Name, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "CreateGroup",
        Dict{String,Any}("Name" => Name, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_group(
    Name,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "CreateGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("Name" => Name, "OrganizationId" => OrganizationId),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_mobile_device_access_rule(effect, name, organization_id)
    create_mobile_device_access_rule(effect, name, organization_id, params::Dict{String,<:Any})

Creates a new mobile device access rule for the specified Amazon WorkMail organization.

# Arguments
- `effect`: The effect of the rule when it matches. Allowed values are ALLOW or DENY.
- `name`: The rule name.
- `organization_id`: The Amazon WorkMail organization under which the rule will be created.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientToken"`: The idempotency token for the client request.
- `"Description"`: The rule description.
- `"DeviceModels"`: Device models that the rule will match.
- `"DeviceOperatingSystems"`: Device operating systems that the rule will match.
- `"DeviceTypes"`: Device types that the rule will match.
- `"DeviceUserAgents"`: Device user agents that the rule will match.
- `"NotDeviceModels"`: Device models that the rule will not match. All other device models
  will match.
- `"NotDeviceOperatingSystems"`: Device operating systems that the rule will not match. All
  other device operating systems will match.
- `"NotDeviceTypes"`: Device types that the rule will not match. All other device types
  will match.
- `"NotDeviceUserAgents"`: Device user agents that the rule will not match. All other
  device user agents will match.
"""
function create_mobile_device_access_rule(
    Effect, Name, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "CreateMobileDeviceAccessRule",
        Dict{String,Any}(
            "Effect" => Effect,
            "Name" => Name,
            "OrganizationId" => OrganizationId,
            "ClientToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_mobile_device_access_rule(
    Effect,
    Name,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "CreateMobileDeviceAccessRule",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Effect" => Effect,
                    "Name" => Name,
                    "OrganizationId" => OrganizationId,
                    "ClientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_organization(alias)
    create_organization(alias, params::Dict{String,<:Any})

Creates a new Amazon WorkMail organization. Optionally, you can choose to associate an
existing AWS Directory Service directory with your organization. If an AWS Directory
Service directory ID is specified, the organization alias must match the directory alias.
If you choose not to associate an existing directory with your organization, then we create
a new Amazon WorkMail directory for you. For more information, see Adding an organization
in the Amazon WorkMail Administrator Guide. You can associate multiple email domains with
an organization, then set your default email domain from the Amazon WorkMail console. You
can also associate a domain that is managed in an Amazon Route 53 public hosted zone. For
more information, see Adding a domain and Choosing the default domain in the Amazon
WorkMail Administrator Guide. Optionally, you can use a customer managed master key from
AWS Key Management Service (AWS KMS) to encrypt email for your organization. If you don't
associate an AWS KMS key, Amazon WorkMail creates a default AWS managed master key for you.

# Arguments
- `alias`: The organization alias.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientToken"`: The idempotency token associated with the request.
- `"DirectoryId"`: The AWS Directory Service directory ID.
- `"Domains"`: The email domains to associate with the organization.
- `"EnableInteroperability"`: When true, allows organization interoperability between
  Amazon WorkMail and Microsoft Exchange. Can only be set to true if an AD Connector
  directory ID is included in the request.
- `"KmsKeyArn"`: The Amazon Resource Name (ARN) of a customer managed master key from AWS
  KMS.
"""
function create_organization(Alias; aws_config::AbstractAWSConfig=global_aws_config())
    return workmail(
        "CreateOrganization",
        Dict{String,Any}("Alias" => Alias, "ClientToken" => string(uuid4()));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_organization(
    Alias, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "CreateOrganization",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("Alias" => Alias, "ClientToken" => string(uuid4())),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_resource(name, organization_id, type)
    create_resource(name, organization_id, type, params::Dict{String,<:Any})

Creates a new Amazon WorkMail resource.

# Arguments
- `name`: The name of the new resource.
- `organization_id`: The identifier associated with the organization for which the resource
  is created.
- `type`: The type of the new resource. The available types are equipment and room.

"""
function create_resource(
    Name, OrganizationId, Type; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "CreateResource",
        Dict{String,Any}(
            "Name" => Name, "OrganizationId" => OrganizationId, "Type" => Type
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_resource(
    Name,
    OrganizationId,
    Type,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "CreateResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Name" => Name, "OrganizationId" => OrganizationId, "Type" => Type
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_user(display_name, name, organization_id, password)
    create_user(display_name, name, organization_id, password, params::Dict{String,<:Any})

Creates a user who can be used in Amazon WorkMail by calling the RegisterToWorkMail
operation.

# Arguments
- `display_name`: The display name for the new user.
- `name`: The name for the new user. WorkMail directory user names have a maximum length of
  64. All others have a maximum length of 20.
- `organization_id`: The identifier of the organization for which the user is created.
- `password`: The password for the new user.

"""
function create_user(
    DisplayName,
    Name,
    OrganizationId,
    Password;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "CreateUser",
        Dict{String,Any}(
            "DisplayName" => DisplayName,
            "Name" => Name,
            "OrganizationId" => OrganizationId,
            "Password" => Password,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_user(
    DisplayName,
    Name,
    OrganizationId,
    Password,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "CreateUser",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DisplayName" => DisplayName,
                    "Name" => Name,
                    "OrganizationId" => OrganizationId,
                    "Password" => Password,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_access_control_rule(name, organization_id)
    delete_access_control_rule(name, organization_id, params::Dict{String,<:Any})

Deletes an access control rule for the specified WorkMail organization.  Deleting already
deleted and non-existing rules does not produce an error. In those cases, the service sends
back an HTTP 200 response with an empty HTTP body.

# Arguments
- `name`: The name of the access control rule.
- `organization_id`: The identifier for the organization.

"""
function delete_access_control_rule(
    Name, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DeleteAccessControlRule",
        Dict{String,Any}("Name" => Name, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_access_control_rule(
    Name,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DeleteAccessControlRule",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("Name" => Name, "OrganizationId" => OrganizationId),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_alias(alias, entity_id, organization_id)
    delete_alias(alias, entity_id, organization_id, params::Dict{String,<:Any})

Remove one or more specified aliases from a set of aliases for a given user.

# Arguments
- `alias`: The aliases to be removed from the user's set of aliases. Duplicate entries in
  the list are collapsed into single entries (the list is transformed into a set).
- `entity_id`: The identifier for the member (user or group) from which to have the aliases
  removed.
- `organization_id`: The identifier for the organization under which the user exists.

"""
function delete_alias(
    Alias, EntityId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DeleteAlias",
        Dict{String,Any}(
            "Alias" => Alias, "EntityId" => EntityId, "OrganizationId" => OrganizationId
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_alias(
    Alias,
    EntityId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DeleteAlias",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Alias" => Alias,
                    "EntityId" => EntityId,
                    "OrganizationId" => OrganizationId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_group(group_id, organization_id)
    delete_group(group_id, organization_id, params::Dict{String,<:Any})

Deletes a group from Amazon WorkMail.

# Arguments
- `group_id`: The identifier of the group to be deleted.
- `organization_id`: The organization that contains the group.

"""
function delete_group(
    GroupId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DeleteGroup",
        Dict{String,Any}("GroupId" => GroupId, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_group(
    GroupId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DeleteGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("GroupId" => GroupId, "OrganizationId" => OrganizationId),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_mailbox_permissions(entity_id, grantee_id, organization_id)
    delete_mailbox_permissions(entity_id, grantee_id, organization_id, params::Dict{String,<:Any})

Deletes permissions granted to a member (user or group).

# Arguments
- `entity_id`: The identifier of the member (user or group) that owns the mailbox.
- `grantee_id`: The identifier of the member (user or group) for which to delete granted
  permissions.
- `organization_id`: The identifier of the organization under which the member (user or
  group) exists.

"""
function delete_mailbox_permissions(
    EntityId, GranteeId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DeleteMailboxPermissions",
        Dict{String,Any}(
            "EntityId" => EntityId,
            "GranteeId" => GranteeId,
            "OrganizationId" => OrganizationId,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_mailbox_permissions(
    EntityId,
    GranteeId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DeleteMailboxPermissions",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "EntityId" => EntityId,
                    "GranteeId" => GranteeId,
                    "OrganizationId" => OrganizationId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_mobile_device_access_override(device_id, organization_id, user_id)
    delete_mobile_device_access_override(device_id, organization_id, user_id, params::Dict{String,<:Any})

Deletes the mobile device access override for the given WorkMail organization, user, and
device.  Deleting already deleted and non-existing overrides does not produce an error. In
those cases, the service sends back an HTTP 200 response with an empty HTTP body.

# Arguments
- `device_id`: The mobile device for which you delete the override. DeviceId is case
  insensitive.
- `organization_id`: The Amazon WorkMail organization for which the access override will be
  deleted.
- `user_id`: The WorkMail user for which you want to delete the override. Accepts the
  following types of user identities:   User ID: 12345678-1234-1234-1234-123456789012 or
  S-1-1-12-1234567890-123456789-123456789-1234    Email address: user@domain.tld    User
  name: user

"""
function delete_mobile_device_access_override(
    DeviceId, OrganizationId, UserId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DeleteMobileDeviceAccessOverride",
        Dict{String,Any}(
            "DeviceId" => DeviceId, "OrganizationId" => OrganizationId, "UserId" => UserId
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_mobile_device_access_override(
    DeviceId,
    OrganizationId,
    UserId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DeleteMobileDeviceAccessOverride",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DeviceId" => DeviceId,
                    "OrganizationId" => OrganizationId,
                    "UserId" => UserId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_mobile_device_access_rule(mobile_device_access_rule_id, organization_id)
    delete_mobile_device_access_rule(mobile_device_access_rule_id, organization_id, params::Dict{String,<:Any})

Deletes a mobile device access rule for the specified Amazon WorkMail organization.
Deleting already deleted and non-existing rules does not produce an error. In those cases,
the service sends back an HTTP 200 response with an empty HTTP body.

# Arguments
- `mobile_device_access_rule_id`: The identifier of the rule to be deleted.
- `organization_id`: The Amazon WorkMail organization under which the rule will be deleted.

"""
function delete_mobile_device_access_rule(
    MobileDeviceAccessRuleId,
    OrganizationId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DeleteMobileDeviceAccessRule",
        Dict{String,Any}(
            "MobileDeviceAccessRuleId" => MobileDeviceAccessRuleId,
            "OrganizationId" => OrganizationId,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_mobile_device_access_rule(
    MobileDeviceAccessRuleId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DeleteMobileDeviceAccessRule",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "MobileDeviceAccessRuleId" => MobileDeviceAccessRuleId,
                    "OrganizationId" => OrganizationId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_organization(delete_directory, organization_id)
    delete_organization(delete_directory, organization_id, params::Dict{String,<:Any})

Deletes an Amazon WorkMail organization and all underlying AWS resources managed by Amazon
WorkMail as part of the organization. You can choose whether to delete the associated
directory. For more information, see Removing an organization in the Amazon WorkMail
Administrator Guide.

# Arguments
- `delete_directory`: If true, deletes the AWS Directory Service directory associated with
  the organization.
- `organization_id`: The organization ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientToken"`: The idempotency token associated with the request.
"""
function delete_organization(
    DeleteDirectory, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DeleteOrganization",
        Dict{String,Any}(
            "DeleteDirectory" => DeleteDirectory,
            "OrganizationId" => OrganizationId,
            "ClientToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_organization(
    DeleteDirectory,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DeleteOrganization",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DeleteDirectory" => DeleteDirectory,
                    "OrganizationId" => OrganizationId,
                    "ClientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_resource(organization_id, resource_id)
    delete_resource(organization_id, resource_id, params::Dict{String,<:Any})

Deletes the specified resource.

# Arguments
- `organization_id`: The identifier associated with the organization from which the
  resource is deleted.
- `resource_id`: The identifier of the resource to be deleted.

"""
function delete_resource(
    OrganizationId, ResourceId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DeleteResource",
        Dict{String,Any}("OrganizationId" => OrganizationId, "ResourceId" => ResourceId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_resource(
    OrganizationId,
    ResourceId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DeleteResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "OrganizationId" => OrganizationId, "ResourceId" => ResourceId
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_retention_policy(id, organization_id)
    delete_retention_policy(id, organization_id, params::Dict{String,<:Any})

Deletes the specified retention policy from the specified organization.

# Arguments
- `id`: The retention policy ID.
- `organization_id`: The organization ID.

"""
function delete_retention_policy(
    Id, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DeleteRetentionPolicy",
        Dict{String,Any}("Id" => Id, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_retention_policy(
    Id,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DeleteRetentionPolicy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("Id" => Id, "OrganizationId" => OrganizationId),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_user(organization_id, user_id)
    delete_user(organization_id, user_id, params::Dict{String,<:Any})

Deletes a user from Amazon WorkMail and all subsequent systems. Before you can delete a
user, the user state must be DISABLED. Use the DescribeUser action to confirm the user
state. Deleting a user is permanent and cannot be undone. WorkMail archives user mailboxes
for 30 days before they are permanently removed.

# Arguments
- `organization_id`: The organization that contains the user to be deleted.
- `user_id`: The identifier of the user to be deleted.

"""
function delete_user(
    OrganizationId, UserId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DeleteUser",
        Dict{String,Any}("OrganizationId" => OrganizationId, "UserId" => UserId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_user(
    OrganizationId,
    UserId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DeleteUser",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("OrganizationId" => OrganizationId, "UserId" => UserId),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    deregister_from_work_mail(entity_id, organization_id)
    deregister_from_work_mail(entity_id, organization_id, params::Dict{String,<:Any})

Mark a user, group, or resource as no longer used in Amazon WorkMail. This action
disassociates the mailbox and schedules it for clean-up. WorkMail keeps mailboxes for 30
days before they are permanently removed. The functionality in the console is Disable.

# Arguments
- `entity_id`: The identifier for the member (user or group) to be updated.
- `organization_id`: The identifier for the organization under which the Amazon WorkMail
  entity exists.

"""
function deregister_from_work_mail(
    EntityId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DeregisterFromWorkMail",
        Dict{String,Any}("EntityId" => EntityId, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function deregister_from_work_mail(
    EntityId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DeregisterFromWorkMail",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "EntityId" => EntityId, "OrganizationId" => OrganizationId
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    deregister_mail_domain(domain_name, organization_id)
    deregister_mail_domain(domain_name, organization_id, params::Dict{String,<:Any})

Removes a domain from Amazon WorkMail, stops email routing to WorkMail, and removes the
authorization allowing WorkMail use. SES keeps the domain because other applications may
use it. You must first remove any email address used by WorkMail entities before you remove
the domain.

# Arguments
- `domain_name`: The domain to deregister in WorkMail and SES.
- `organization_id`: The Amazon WorkMail organization for which the domain will be
  deregistered.

"""
function deregister_mail_domain(
    DomainName, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DeregisterMailDomain",
        Dict{String,Any}("DomainName" => DomainName, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function deregister_mail_domain(
    DomainName,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DeregisterMailDomain",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DomainName" => DomainName, "OrganizationId" => OrganizationId
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_group(group_id, organization_id)
    describe_group(group_id, organization_id, params::Dict{String,<:Any})

Returns the data available for the group.

# Arguments
- `group_id`: The identifier for the group to be described.
- `organization_id`: The identifier for the organization under which the group exists.

"""
function describe_group(
    GroupId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DescribeGroup",
        Dict{String,Any}("GroupId" => GroupId, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_group(
    GroupId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DescribeGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("GroupId" => GroupId, "OrganizationId" => OrganizationId),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_inbound_dmarc_settings(organization_id)
    describe_inbound_dmarc_settings(organization_id, params::Dict{String,<:Any})

Lists the settings in a DMARC policy for a specified organization.

# Arguments
- `organization_id`: Lists the ID of the given organization.

"""
function describe_inbound_dmarc_settings(
    OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DescribeInboundDmarcSettings",
        Dict{String,Any}("OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_inbound_dmarc_settings(
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DescribeInboundDmarcSettings",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("OrganizationId" => OrganizationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_mailbox_export_job(job_id, organization_id)
    describe_mailbox_export_job(job_id, organization_id, params::Dict{String,<:Any})

Describes the current status of a mailbox export job.

# Arguments
- `job_id`: The mailbox export job ID.
- `organization_id`: The organization ID.

"""
function describe_mailbox_export_job(
    JobId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DescribeMailboxExportJob",
        Dict{String,Any}("JobId" => JobId, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_mailbox_export_job(
    JobId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DescribeMailboxExportJob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("JobId" => JobId, "OrganizationId" => OrganizationId),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_organization(organization_id)
    describe_organization(organization_id, params::Dict{String,<:Any})

Provides more information regarding a given organization based on its identifier.

# Arguments
- `organization_id`: The identifier for the organization to be described.

"""
function describe_organization(
    OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DescribeOrganization",
        Dict{String,Any}("OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_organization(
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DescribeOrganization",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("OrganizationId" => OrganizationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_resource(organization_id, resource_id)
    describe_resource(organization_id, resource_id, params::Dict{String,<:Any})

Returns the data available for the resource.

# Arguments
- `organization_id`: The identifier associated with the organization for which the resource
  is described.
- `resource_id`: The identifier of the resource to be described.

"""
function describe_resource(
    OrganizationId, ResourceId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DescribeResource",
        Dict{String,Any}("OrganizationId" => OrganizationId, "ResourceId" => ResourceId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_resource(
    OrganizationId,
    ResourceId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DescribeResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "OrganizationId" => OrganizationId, "ResourceId" => ResourceId
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_user(organization_id, user_id)
    describe_user(organization_id, user_id, params::Dict{String,<:Any})

Provides information regarding the user.

# Arguments
- `organization_id`: The identifier for the organization under which the user exists.
- `user_id`: The identifier for the user to be described.

"""
function describe_user(
    OrganizationId, UserId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DescribeUser",
        Dict{String,Any}("OrganizationId" => OrganizationId, "UserId" => UserId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_user(
    OrganizationId,
    UserId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DescribeUser",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("OrganizationId" => OrganizationId, "UserId" => UserId),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    disassociate_delegate_from_resource(entity_id, organization_id, resource_id)
    disassociate_delegate_from_resource(entity_id, organization_id, resource_id, params::Dict{String,<:Any})

Removes a member from the resource's set of delegates.

# Arguments
- `entity_id`: The identifier for the member (user, group) to be removed from the
  resource's delegates.
- `organization_id`: The identifier for the organization under which the resource exists.
- `resource_id`: The identifier of the resource from which delegates' set members are
  removed.

"""
function disassociate_delegate_from_resource(
    EntityId, OrganizationId, ResourceId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DisassociateDelegateFromResource",
        Dict{String,Any}(
            "EntityId" => EntityId,
            "OrganizationId" => OrganizationId,
            "ResourceId" => ResourceId,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function disassociate_delegate_from_resource(
    EntityId,
    OrganizationId,
    ResourceId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DisassociateDelegateFromResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "EntityId" => EntityId,
                    "OrganizationId" => OrganizationId,
                    "ResourceId" => ResourceId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    disassociate_member_from_group(group_id, member_id, organization_id)
    disassociate_member_from_group(group_id, member_id, organization_id, params::Dict{String,<:Any})

Removes a member from a group.

# Arguments
- `group_id`: The identifier for the group from which members are removed.
- `member_id`: The identifier for the member to be removed to the group.
- `organization_id`: The identifier for the organization under which the group exists.

"""
function disassociate_member_from_group(
    GroupId, MemberId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "DisassociateMemberFromGroup",
        Dict{String,Any}(
            "GroupId" => GroupId, "MemberId" => MemberId, "OrganizationId" => OrganizationId
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function disassociate_member_from_group(
    GroupId,
    MemberId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "DisassociateMemberFromGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "GroupId" => GroupId,
                    "MemberId" => MemberId,
                    "OrganizationId" => OrganizationId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_access_control_effect(action, ip_address, organization_id, user_id)
    get_access_control_effect(action, ip_address, organization_id, user_id, params::Dict{String,<:Any})

Gets the effects of an organization's access control rules as they apply to a specified
IPv4 address, access protocol action, or user ID.

# Arguments
- `action`: The access protocol action. Valid values include ActiveSync, AutoDiscover, EWS,
  IMAP, SMTP, WindowsOutlook, and WebMail.
- `ip_address`: The IPv4 address.
- `organization_id`: The identifier for the organization.
- `user_id`: The user ID.

"""
function get_access_control_effect(
    Action,
    IpAddress,
    OrganizationId,
    UserId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "GetAccessControlEffect",
        Dict{String,Any}(
            "Action" => Action,
            "IpAddress" => IpAddress,
            "OrganizationId" => OrganizationId,
            "UserId" => UserId,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_access_control_effect(
    Action,
    IpAddress,
    OrganizationId,
    UserId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "GetAccessControlEffect",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Action" => Action,
                    "IpAddress" => IpAddress,
                    "OrganizationId" => OrganizationId,
                    "UserId" => UserId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_default_retention_policy(organization_id)
    get_default_retention_policy(organization_id, params::Dict{String,<:Any})

Gets the default retention policy details for the specified organization.

# Arguments
- `organization_id`: The organization ID.

"""
function get_default_retention_policy(
    OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "GetDefaultRetentionPolicy",
        Dict{String,Any}("OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_default_retention_policy(
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "GetDefaultRetentionPolicy",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("OrganizationId" => OrganizationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_mail_domain(domain_name, organization_id)
    get_mail_domain(domain_name, organization_id, params::Dict{String,<:Any})

Gets details for a mail domain, including domain records required to configure your domain
with recommended security.

# Arguments
- `domain_name`: The domain from which you want to retrieve details.
- `organization_id`: The Amazon WorkMail organization for which the domain is retrieved.

"""
function get_mail_domain(
    DomainName, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "GetMailDomain",
        Dict{String,Any}("DomainName" => DomainName, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_mail_domain(
    DomainName,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "GetMailDomain",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DomainName" => DomainName, "OrganizationId" => OrganizationId
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_mailbox_details(organization_id, user_id)
    get_mailbox_details(organization_id, user_id, params::Dict{String,<:Any})

Requests a user's mailbox details for a specified organization and user.

# Arguments
- `organization_id`: The identifier for the organization that contains the user whose
  mailbox details are being requested.
- `user_id`: The identifier for the user whose mailbox details are being requested.

"""
function get_mailbox_details(
    OrganizationId, UserId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "GetMailboxDetails",
        Dict{String,Any}("OrganizationId" => OrganizationId, "UserId" => UserId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_mailbox_details(
    OrganizationId,
    UserId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "GetMailboxDetails",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("OrganizationId" => OrganizationId, "UserId" => UserId),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_mobile_device_access_effect(organization_id)
    get_mobile_device_access_effect(organization_id, params::Dict{String,<:Any})

Simulates the effect of the mobile device access rules for the given attributes of a sample
access event. Use this method to test the effects of the current set of mobile device
access rules for the Amazon WorkMail organization for a particular user's attributes.

# Arguments
- `organization_id`: The Amazon WorkMail organization to simulate the access effect for.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DeviceModel"`: Device model the simulated user will report.
- `"DeviceOperatingSystem"`: Device operating system the simulated user will report.
- `"DeviceType"`: Device type the simulated user will report.
- `"DeviceUserAgent"`: Device user agent the simulated user will report.
"""
function get_mobile_device_access_effect(
    OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "GetMobileDeviceAccessEffect",
        Dict{String,Any}("OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_mobile_device_access_effect(
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "GetMobileDeviceAccessEffect",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("OrganizationId" => OrganizationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_mobile_device_access_override(device_id, organization_id, user_id)
    get_mobile_device_access_override(device_id, organization_id, user_id, params::Dict{String,<:Any})

Gets the mobile device access override for the given WorkMail organization, user, and
device.

# Arguments
- `device_id`: The mobile device to which the override applies. DeviceId is case
  insensitive.
- `organization_id`: The Amazon WorkMail organization to which you want to apply the
  override.
- `user_id`: Identifies the WorkMail user for the override. Accepts the following types of
  user identities:    User ID: 12345678-1234-1234-1234-123456789012 or
  S-1-1-12-1234567890-123456789-123456789-1234    Email address: user@domain.tld    User
  name: user

"""
function get_mobile_device_access_override(
    DeviceId, OrganizationId, UserId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "GetMobileDeviceAccessOverride",
        Dict{String,Any}(
            "DeviceId" => DeviceId, "OrganizationId" => OrganizationId, "UserId" => UserId
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_mobile_device_access_override(
    DeviceId,
    OrganizationId,
    UserId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "GetMobileDeviceAccessOverride",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DeviceId" => DeviceId,
                    "OrganizationId" => OrganizationId,
                    "UserId" => UserId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_access_control_rules(organization_id)
    list_access_control_rules(organization_id, params::Dict{String,<:Any})

Lists the access control rules for the specified organization.

# Arguments
- `organization_id`: The identifier for the organization.

"""
function list_access_control_rules(
    OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "ListAccessControlRules",
        Dict{String,Any}("OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_access_control_rules(
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ListAccessControlRules",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("OrganizationId" => OrganizationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_aliases(entity_id, organization_id)
    list_aliases(entity_id, organization_id, params::Dict{String,<:Any})

Creates a paginated call to list the aliases associated with a given entity.

# Arguments
- `entity_id`: The identifier for the entity for which to list the aliases.
- `organization_id`: The identifier for the organization under which the entity exists.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return in a single call.
- `"NextToken"`: The token to use to retrieve the next page of results. The first call does
  not contain any tokens.
"""
function list_aliases(
    EntityId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "ListAliases",
        Dict{String,Any}("EntityId" => EntityId, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_aliases(
    EntityId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ListAliases",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "EntityId" => EntityId, "OrganizationId" => OrganizationId
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_group_members(group_id, organization_id)
    list_group_members(group_id, organization_id, params::Dict{String,<:Any})

Returns an overview of the members of a group. Users and groups can be members of a group.

# Arguments
- `group_id`: The identifier for the group to which the members (users or groups) are
  associated.
- `organization_id`: The identifier for the organization under which the group exists.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return in a single call.
- `"NextToken"`:  The token to use to retrieve the next page of results. The first call
  does not contain any tokens.
"""
function list_group_members(
    GroupId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "ListGroupMembers",
        Dict{String,Any}("GroupId" => GroupId, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_group_members(
    GroupId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ListGroupMembers",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("GroupId" => GroupId, "OrganizationId" => OrganizationId),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_groups(organization_id)
    list_groups(organization_id, params::Dict{String,<:Any})

Returns summaries of the organization's groups.

# Arguments
- `organization_id`: The identifier for the organization under which the groups exist.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return in a single call.
- `"NextToken"`: The token to use to retrieve the next page of results. The first call does
  not contain any tokens.
"""
function list_groups(OrganizationId; aws_config::AbstractAWSConfig=global_aws_config())
    return workmail(
        "ListGroups",
        Dict{String,Any}("OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_groups(
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ListGroups",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("OrganizationId" => OrganizationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_mail_domains(organization_id)
    list_mail_domains(organization_id, params::Dict{String,<:Any})

Lists the mail domains in a given Amazon WorkMail organization.

# Arguments
- `organization_id`: The Amazon WorkMail organization for which to list domains.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return in a single call.
- `"NextToken"`: The token to use to retrieve the next page of results. The first call does
  not require a token.
"""
function list_mail_domains(
    OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "ListMailDomains",
        Dict{String,Any}("OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_mail_domains(
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ListMailDomains",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("OrganizationId" => OrganizationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_mailbox_export_jobs(organization_id)
    list_mailbox_export_jobs(organization_id, params::Dict{String,<:Any})

Lists the mailbox export jobs started for the specified organization within the last seven
days.

# Arguments
- `organization_id`: The organization ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return in a single call.
- `"NextToken"`: The token to use to retrieve the next page of results.
"""
function list_mailbox_export_jobs(
    OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "ListMailboxExportJobs",
        Dict{String,Any}("OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_mailbox_export_jobs(
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ListMailboxExportJobs",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("OrganizationId" => OrganizationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_mailbox_permissions(entity_id, organization_id)
    list_mailbox_permissions(entity_id, organization_id, params::Dict{String,<:Any})

Lists the mailbox permissions associated with a user, group, or resource mailbox.

# Arguments
- `entity_id`: The identifier of the user, group, or resource for which to list mailbox
  permissions.
- `organization_id`: The identifier of the organization under which the user, group, or
  resource exists.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return in a single call.
- `"NextToken"`: The token to use to retrieve the next page of results. The first call does
  not contain any tokens.
"""
function list_mailbox_permissions(
    EntityId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "ListMailboxPermissions",
        Dict{String,Any}("EntityId" => EntityId, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_mailbox_permissions(
    EntityId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ListMailboxPermissions",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "EntityId" => EntityId, "OrganizationId" => OrganizationId
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_mobile_device_access_overrides(organization_id)
    list_mobile_device_access_overrides(organization_id, params::Dict{String,<:Any})

Lists all the mobile device access overrides for any given combination of WorkMail
organization, user, or device.

# Arguments
- `organization_id`: The Amazon WorkMail organization under which to list mobile device
  access overrides.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DeviceId"`: The mobile device to which the access override applies.
- `"MaxResults"`: The maximum number of results to return in a single call.
- `"NextToken"`: The token to use to retrieve the next page of results. The first call does
  not require a token.
- `"UserId"`: The WorkMail user under which you list the mobile device access overrides.
  Accepts the following types of user identities:   User ID:
  12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234
  Email address: user@domain.tld    User name: user
"""
function list_mobile_device_access_overrides(
    OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "ListMobileDeviceAccessOverrides",
        Dict{String,Any}("OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_mobile_device_access_overrides(
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ListMobileDeviceAccessOverrides",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("OrganizationId" => OrganizationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_mobile_device_access_rules(organization_id)
    list_mobile_device_access_rules(organization_id, params::Dict{String,<:Any})

Lists the mobile device access rules for the specified Amazon WorkMail organization.

# Arguments
- `organization_id`: The Amazon WorkMail organization for which to list the rules.

"""
function list_mobile_device_access_rules(
    OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "ListMobileDeviceAccessRules",
        Dict{String,Any}("OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_mobile_device_access_rules(
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ListMobileDeviceAccessRules",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("OrganizationId" => OrganizationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_organizations()
    list_organizations(params::Dict{String,<:Any})

Returns summaries of the customer's organizations.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return in a single call.
- `"NextToken"`: The token to use to retrieve the next page of results. The first call does
  not contain any tokens.
"""
function list_organizations(; aws_config::AbstractAWSConfig=global_aws_config())
    return workmail(
        "ListOrganizations"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_organizations(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "ListOrganizations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_resource_delegates(organization_id, resource_id)
    list_resource_delegates(organization_id, resource_id, params::Dict{String,<:Any})

Lists the delegates associated with a resource. Users and groups can be resource delegates
and answer requests on behalf of the resource.

# Arguments
- `organization_id`: The identifier for the organization that contains the resource for
  which delegates are listed.
- `resource_id`: The identifier for the resource whose delegates are listed.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The number of maximum results in a page.
- `"NextToken"`: The token used to paginate through the delegates associated with a
  resource.
"""
function list_resource_delegates(
    OrganizationId, ResourceId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "ListResourceDelegates",
        Dict{String,Any}("OrganizationId" => OrganizationId, "ResourceId" => ResourceId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_resource_delegates(
    OrganizationId,
    ResourceId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ListResourceDelegates",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "OrganizationId" => OrganizationId, "ResourceId" => ResourceId
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_resources(organization_id)
    list_resources(organization_id, params::Dict{String,<:Any})

Returns summaries of the organization's resources.

# Arguments
- `organization_id`: The identifier for the organization under which the resources exist.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return in a single call.
- `"NextToken"`: The token to use to retrieve the next page of results. The first call does
  not contain any tokens.
"""
function list_resources(OrganizationId; aws_config::AbstractAWSConfig=global_aws_config())
    return workmail(
        "ListResources",
        Dict{String,Any}("OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_resources(
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ListResources",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("OrganizationId" => OrganizationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Lists the tags applied to an Amazon WorkMail organization resource.

# Arguments
- `resource_arn`: The resource ARN.

"""
function list_tags_for_resource(
    ResourceARN; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "ListTagsForResource",
        Dict{String,Any}("ResourceARN" => ResourceARN);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    ResourceARN,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ListTagsForResource",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ResourceARN" => ResourceARN), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_users(organization_id)
    list_users(organization_id, params::Dict{String,<:Any})

Returns summaries of the organization's users.

# Arguments
- `organization_id`: The identifier for the organization under which the users exist.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return in a single call.
- `"NextToken"`: The token to use to retrieve the next page of results. The first call does
  not contain any tokens.
"""
function list_users(OrganizationId; aws_config::AbstractAWSConfig=global_aws_config())
    return workmail(
        "ListUsers",
        Dict{String,Any}("OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_users(
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ListUsers",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("OrganizationId" => OrganizationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_access_control_rule(description, effect, name, organization_id)
    put_access_control_rule(description, effect, name, organization_id, params::Dict{String,<:Any})

Adds a new access control rule for the specified organization. The rule allows or denies
access to the organization for the specified IPv4 addresses, access protocol actions, and
user IDs. Adding a new rule with the same name as an existing rule replaces the older rule.

# Arguments
- `description`: The rule description.
- `effect`: The rule effect.
- `name`: The rule name.
- `organization_id`: The identifier of the organization.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Actions"`: Access protocol actions to include in the rule. Valid values include
  ActiveSync, AutoDiscover, EWS, IMAP, SMTP, WindowsOutlook, and WebMail.
- `"IpRanges"`: IPv4 CIDR ranges to include in the rule.
- `"NotActions"`: Access protocol actions to exclude from the rule. Valid values include
  ActiveSync, AutoDiscover, EWS, IMAP, SMTP, WindowsOutlook, and WebMail.
- `"NotIpRanges"`: IPv4 CIDR ranges to exclude from the rule.
- `"NotUserIds"`: User IDs to exclude from the rule.
- `"UserIds"`: User IDs to include in the rule.
"""
function put_access_control_rule(
    Description,
    Effect,
    Name,
    OrganizationId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "PutAccessControlRule",
        Dict{String,Any}(
            "Description" => Description,
            "Effect" => Effect,
            "Name" => Name,
            "OrganizationId" => OrganizationId,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_access_control_rule(
    Description,
    Effect,
    Name,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "PutAccessControlRule",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Description" => Description,
                    "Effect" => Effect,
                    "Name" => Name,
                    "OrganizationId" => OrganizationId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_inbound_dmarc_settings(enforced, organization_id)
    put_inbound_dmarc_settings(enforced, organization_id, params::Dict{String,<:Any})

Enables or disables a DMARC policy for a given organization.

# Arguments
- `enforced`: Enforces or suspends a policy after it's applied.
- `organization_id`: The ID of the organization that you are applying the DMARC policy to.

"""
function put_inbound_dmarc_settings(
    Enforced, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "PutInboundDmarcSettings",
        Dict{String,Any}("Enforced" => Enforced, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_inbound_dmarc_settings(
    Enforced,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "PutInboundDmarcSettings",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Enforced" => Enforced, "OrganizationId" => OrganizationId
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_mailbox_permissions(entity_id, grantee_id, organization_id, permission_values)
    put_mailbox_permissions(entity_id, grantee_id, organization_id, permission_values, params::Dict{String,<:Any})

Sets permissions for a user, group, or resource. This replaces any pre-existing permissions.

# Arguments
- `entity_id`: The identifier of the user, group, or resource for which to update mailbox
  permissions.
- `grantee_id`: The identifier of the user, group, or resource to which to grant the
  permissions.
- `organization_id`: The identifier of the organization under which the user, group, or
  resource exists.
- `permission_values`: The permissions granted to the grantee. SEND_AS allows the grantee
  to send email as the owner of the mailbox (the grantee is not mentioned on these emails).
  SEND_ON_BEHALF allows the grantee to send email on behalf of the owner of the mailbox (the
  grantee is not mentioned as the physical sender of these emails). FULL_ACCESS allows the
  grantee full access to the mailbox, irrespective of other folder-level permissions set on
  the mailbox.

"""
function put_mailbox_permissions(
    EntityId,
    GranteeId,
    OrganizationId,
    PermissionValues;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "PutMailboxPermissions",
        Dict{String,Any}(
            "EntityId" => EntityId,
            "GranteeId" => GranteeId,
            "OrganizationId" => OrganizationId,
            "PermissionValues" => PermissionValues,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_mailbox_permissions(
    EntityId,
    GranteeId,
    OrganizationId,
    PermissionValues,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "PutMailboxPermissions",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "EntityId" => EntityId,
                    "GranteeId" => GranteeId,
                    "OrganizationId" => OrganizationId,
                    "PermissionValues" => PermissionValues,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_mobile_device_access_override(device_id, effect, organization_id, user_id)
    put_mobile_device_access_override(device_id, effect, organization_id, user_id, params::Dict{String,<:Any})

Creates or updates a mobile device access override for the given WorkMail organization,
user, and device.

# Arguments
- `device_id`: The mobile device for which you create the override. DeviceId is case
  insensitive.
- `effect`: The effect of the override, ALLOW or DENY.
- `organization_id`: Identifies the Amazon WorkMail organization for which you create the
  override.
- `user_id`: The WorkMail user for which you create the override. Accepts the following
  types of user identities:   User ID: 12345678-1234-1234-1234-123456789012 or
  S-1-1-12-1234567890-123456789-123456789-1234    Email address: user@domain.tld    User
  name: user

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: A description of the override.
"""
function put_mobile_device_access_override(
    DeviceId,
    Effect,
    OrganizationId,
    UserId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "PutMobileDeviceAccessOverride",
        Dict{String,Any}(
            "DeviceId" => DeviceId,
            "Effect" => Effect,
            "OrganizationId" => OrganizationId,
            "UserId" => UserId,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_mobile_device_access_override(
    DeviceId,
    Effect,
    OrganizationId,
    UserId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "PutMobileDeviceAccessOverride",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DeviceId" => DeviceId,
                    "Effect" => Effect,
                    "OrganizationId" => OrganizationId,
                    "UserId" => UserId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_retention_policy(folder_configurations, name, organization_id)
    put_retention_policy(folder_configurations, name, organization_id, params::Dict{String,<:Any})

Puts a retention policy to the specified organization.

# Arguments
- `folder_configurations`: The retention policy folder configurations.
- `name`: The retention policy name.
- `organization_id`: The organization ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: The retention policy description.
- `"Id"`: The retention policy ID.
"""
function put_retention_policy(
    FolderConfigurations,
    Name,
    OrganizationId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "PutRetentionPolicy",
        Dict{String,Any}(
            "FolderConfigurations" => FolderConfigurations,
            "Name" => Name,
            "OrganizationId" => OrganizationId,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_retention_policy(
    FolderConfigurations,
    Name,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "PutRetentionPolicy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "FolderConfigurations" => FolderConfigurations,
                    "Name" => Name,
                    "OrganizationId" => OrganizationId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    register_mail_domain(domain_name, organization_id)
    register_mail_domain(domain_name, organization_id, params::Dict{String,<:Any})

Registers a new domain in Amazon WorkMail and SES, and configures it for use by WorkMail.
Emails received by SES for this domain are routed to the specified WorkMail organization,
and WorkMail has permanent permission to use the specified domain for sending your users'
emails.

# Arguments
- `domain_name`: The name of the mail domain to create in Amazon WorkMail and SES.
- `organization_id`: The Amazon WorkMail organization under which you're creating the
  domain.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientToken"`: Idempotency token used when retrying requests.
"""
function register_mail_domain(
    DomainName, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "RegisterMailDomain",
        Dict{String,Any}(
            "DomainName" => DomainName,
            "OrganizationId" => OrganizationId,
            "ClientToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function register_mail_domain(
    DomainName,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "RegisterMailDomain",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DomainName" => DomainName,
                    "OrganizationId" => OrganizationId,
                    "ClientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    register_to_work_mail(email, entity_id, organization_id)
    register_to_work_mail(email, entity_id, organization_id, params::Dict{String,<:Any})

Registers an existing and disabled user, group, or resource for Amazon WorkMail use by
associating a mailbox and calendaring capabilities. It performs no change if the user,
group, or resource is enabled and fails if the user, group, or resource is deleted. This
operation results in the accumulation of costs. For more information, see Pricing. The
equivalent console functionality for this operation is Enable.  Users can either be created
by calling the CreateUser API operation or they can be synchronized from your directory.
For more information, see DeregisterFromWorkMail.

# Arguments
- `email`: The email for the user, group, or resource to be updated.
- `entity_id`: The identifier for the user, group, or resource to be updated.
- `organization_id`: The identifier for the organization under which the user, group, or
  resource exists.

"""
function register_to_work_mail(
    Email, EntityId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "RegisterToWorkMail",
        Dict{String,Any}(
            "Email" => Email, "EntityId" => EntityId, "OrganizationId" => OrganizationId
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function register_to_work_mail(
    Email,
    EntityId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "RegisterToWorkMail",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Email" => Email,
                    "EntityId" => EntityId,
                    "OrganizationId" => OrganizationId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    reset_password(organization_id, password, user_id)
    reset_password(organization_id, password, user_id, params::Dict{String,<:Any})

Allows the administrator to reset the password for a user.

# Arguments
- `organization_id`: The identifier of the organization that contains the user for which
  the password is reset.
- `password`: The new password for the user.
- `user_id`: The identifier of the user for whom the password is reset.

"""
function reset_password(
    OrganizationId, Password, UserId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "ResetPassword",
        Dict{String,Any}(
            "OrganizationId" => OrganizationId, "Password" => Password, "UserId" => UserId
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function reset_password(
    OrganizationId,
    Password,
    UserId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "ResetPassword",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "OrganizationId" => OrganizationId,
                    "Password" => Password,
                    "UserId" => UserId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_mailbox_export_job(client_token, entity_id, kms_key_arn, organization_id, role_arn, s3_bucket_name, s3_prefix)
    start_mailbox_export_job(client_token, entity_id, kms_key_arn, organization_id, role_arn, s3_bucket_name, s3_prefix, params::Dict{String,<:Any})

Starts a mailbox export job to export MIME-format email messages and calendar items from
the specified mailbox to the specified Amazon Simple Storage Service (Amazon S3) bucket.
For more information, see Exporting mailbox content in the Amazon WorkMail Administrator
Guide.

# Arguments
- `client_token`: The idempotency token for the client request.
- `entity_id`: The identifier of the user or resource associated with the mailbox.
- `kms_key_arn`: The Amazon Resource Name (ARN) of the symmetric AWS Key Management Service
  (AWS KMS) key that encrypts the exported mailbox content.
- `organization_id`: The identifier associated with the organization.
- `role_arn`: The ARN of the AWS Identity and Access Management (IAM) role that grants
  write permission to the S3 bucket.
- `s3_bucket_name`: The name of the S3 bucket.
- `s3_prefix`: The S3 bucket prefix.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: The mailbox export job description.
"""
function start_mailbox_export_job(
    ClientToken,
    EntityId,
    KmsKeyArn,
    OrganizationId,
    RoleArn,
    S3BucketName,
    S3Prefix;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "StartMailboxExportJob",
        Dict{String,Any}(
            "ClientToken" => ClientToken,
            "EntityId" => EntityId,
            "KmsKeyArn" => KmsKeyArn,
            "OrganizationId" => OrganizationId,
            "RoleArn" => RoleArn,
            "S3BucketName" => S3BucketName,
            "S3Prefix" => S3Prefix,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_mailbox_export_job(
    ClientToken,
    EntityId,
    KmsKeyArn,
    OrganizationId,
    RoleArn,
    S3BucketName,
    S3Prefix,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "StartMailboxExportJob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ClientToken" => ClientToken,
                    "EntityId" => EntityId,
                    "KmsKeyArn" => KmsKeyArn,
                    "OrganizationId" => OrganizationId,
                    "RoleArn" => RoleArn,
                    "S3BucketName" => S3BucketName,
                    "S3Prefix" => S3Prefix,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Applies the specified tags to the specified Amazon WorkMail organization resource.

# Arguments
- `resource_arn`: The resource ARN.
- `tags`: The tag key-value pairs.

"""
function tag_resource(ResourceARN, Tags; aws_config::AbstractAWSConfig=global_aws_config())
    return workmail(
        "TagResource",
        Dict{String,Any}("ResourceARN" => ResourceARN, "Tags" => Tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    ResourceARN,
    Tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "TagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceARN" => ResourceARN, "Tags" => Tags),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Untags the specified tags from the specified Amazon WorkMail organization resource.

# Arguments
- `resource_arn`: The resource ARN.
- `tag_keys`: The tag keys.

"""
function untag_resource(
    ResourceARN, TagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "UntagResource",
        Dict{String,Any}("ResourceARN" => ResourceARN, "TagKeys" => TagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    ResourceARN,
    TagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "UntagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceARN" => ResourceARN, "TagKeys" => TagKeys),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_default_mail_domain(domain_name, organization_id)
    update_default_mail_domain(domain_name, organization_id, params::Dict{String,<:Any})

Updates the default mail domain for an organization. The default mail domain is used by the
WorkMail AWS Console to suggest an email address when enabling a mail user. You can only
have one default domain.

# Arguments
- `domain_name`: The domain name that will become the default domain.
- `organization_id`: The Amazon WorkMail organization for which to list domains.

"""
function update_default_mail_domain(
    DomainName, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "UpdateDefaultMailDomain",
        Dict{String,Any}("DomainName" => DomainName, "OrganizationId" => OrganizationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_default_mail_domain(
    DomainName,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "UpdateDefaultMailDomain",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DomainName" => DomainName, "OrganizationId" => OrganizationId
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_mailbox_quota(mailbox_quota, organization_id, user_id)
    update_mailbox_quota(mailbox_quota, organization_id, user_id, params::Dict{String,<:Any})

Updates a user's current mailbox quota for a specified organization and user.

# Arguments
- `mailbox_quota`: The updated mailbox quota, in MB, for the specified user.
- `organization_id`: The identifier for the organization that contains the user for whom to
  update the mailbox quota.
- `user_id`: The identifer for the user for whom to update the mailbox quota.

"""
function update_mailbox_quota(
    MailboxQuota, OrganizationId, UserId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "UpdateMailboxQuota",
        Dict{String,Any}(
            "MailboxQuota" => MailboxQuota,
            "OrganizationId" => OrganizationId,
            "UserId" => UserId,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_mailbox_quota(
    MailboxQuota,
    OrganizationId,
    UserId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "UpdateMailboxQuota",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "MailboxQuota" => MailboxQuota,
                    "OrganizationId" => OrganizationId,
                    "UserId" => UserId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_mobile_device_access_rule(effect, mobile_device_access_rule_id, name, organization_id)
    update_mobile_device_access_rule(effect, mobile_device_access_rule_id, name, organization_id, params::Dict{String,<:Any})

Updates a mobile device access rule for the specified Amazon WorkMail organization.

# Arguments
- `effect`: The effect of the rule when it matches. Allowed values are ALLOW or DENY.
- `mobile_device_access_rule_id`: The identifier of the rule to be updated.
- `name`: The updated rule name.
- `organization_id`: The Amazon WorkMail organization under which the rule will be updated.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: The updated rule description.
- `"DeviceModels"`: Device models that the updated rule will match.
- `"DeviceOperatingSystems"`: Device operating systems that the updated rule will match.
- `"DeviceTypes"`: Device types that the updated rule will match.
- `"DeviceUserAgents"`: User agents that the updated rule will match.
- `"NotDeviceModels"`: Device models that the updated rule will not match. All other device
  models will match.
- `"NotDeviceOperatingSystems"`: Device operating systems that the updated rule will not
  match. All other device operating systems will match.
- `"NotDeviceTypes"`: Device types that the updated rule will not match. All other device
  types will match.
- `"NotDeviceUserAgents"`: User agents that the updated rule will not match. All other user
  agents will match.
"""
function update_mobile_device_access_rule(
    Effect,
    MobileDeviceAccessRuleId,
    Name,
    OrganizationId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "UpdateMobileDeviceAccessRule",
        Dict{String,Any}(
            "Effect" => Effect,
            "MobileDeviceAccessRuleId" => MobileDeviceAccessRuleId,
            "Name" => Name,
            "OrganizationId" => OrganizationId,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_mobile_device_access_rule(
    Effect,
    MobileDeviceAccessRuleId,
    Name,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "UpdateMobileDeviceAccessRule",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Effect" => Effect,
                    "MobileDeviceAccessRuleId" => MobileDeviceAccessRuleId,
                    "Name" => Name,
                    "OrganizationId" => OrganizationId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_primary_email_address(email, entity_id, organization_id)
    update_primary_email_address(email, entity_id, organization_id, params::Dict{String,<:Any})

Updates the primary email for a user, group, or resource. The current email is moved into
the list of aliases (or swapped between an existing alias and the current primary email),
and the email provided in the input is promoted as the primary.

# Arguments
- `email`: The value of the email to be updated as primary.
- `entity_id`: The user, group, or resource to update.
- `organization_id`: The organization that contains the user, group, or resource to update.

"""
function update_primary_email_address(
    Email, EntityId, OrganizationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "UpdatePrimaryEmailAddress",
        Dict{String,Any}(
            "Email" => Email, "EntityId" => EntityId, "OrganizationId" => OrganizationId
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_primary_email_address(
    Email,
    EntityId,
    OrganizationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "UpdatePrimaryEmailAddress",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Email" => Email,
                    "EntityId" => EntityId,
                    "OrganizationId" => OrganizationId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_resource(organization_id, resource_id)
    update_resource(organization_id, resource_id, params::Dict{String,<:Any})

Updates data for the resource. To have the latest information, it must be preceded by a
DescribeResource call. The dataset in the request should be the one expected when
performing another DescribeResource call.

# Arguments
- `organization_id`: The identifier associated with the organization for which the resource
  is updated.
- `resource_id`: The identifier of the resource to be updated.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"BookingOptions"`: The resource's booking options to be updated.
- `"Name"`: The name of the resource to be updated.
"""
function update_resource(
    OrganizationId, ResourceId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return workmail(
        "UpdateResource",
        Dict{String,Any}("OrganizationId" => OrganizationId, "ResourceId" => ResourceId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_resource(
    OrganizationId,
    ResourceId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return workmail(
        "UpdateResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "OrganizationId" => OrganizationId, "ResourceId" => ResourceId
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
