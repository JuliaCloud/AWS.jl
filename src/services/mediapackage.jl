# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: mediapackage

using Compat
using UUIDs
"""
    CreateChannel()

Creates a new Channel.

# Required Parameters
- `id`: The ID of the Channel. The ID must be unique within the region and it
cannot be changed after a Channel is created.


# Optional Parameters
- `description`: A short text description of the Channel.
- `tags`: 
"""
CreateChannel(id; aws::AWSConfig=AWSConfig()) = mediapackage("POST", "/channels", Dict{String, Any}("id"=>id))
CreateChannel(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("POST", "/channels", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("id"=>id), args)); aws=aws)

"""
    CreateHarvestJob()

Creates a new HarvestJob record.

# Required Parameters
- `endTime`: The end of the time-window which will be harvested

- `id`: The ID of the HarvestJob. The ID must be unique within the region
and it cannot be changed after the HarvestJob is submitted

- `originEndpointId`: The ID of the OriginEndpoint that the HarvestJob will harvest from.
This cannot be changed after the HarvestJob is submitted.

- `s3Destination`: 
- `startTime`: The start of the time-window which will be harvested


"""
CreateHarvestJob(endTime, id, originEndpointId, s3Destination, startTime; aws::AWSConfig=AWSConfig()) = mediapackage("POST", "/harvest_jobs", Dict{String, Any}("endTime"=>endTime, "id"=>id, "originEndpointId"=>originEndpointId, "s3Destination"=>s3Destination, "startTime"=>startTime))
CreateHarvestJob(endTime, id, originEndpointId, s3Destination, startTime, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("POST", "/harvest_jobs", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("endTime"=>endTime, "id"=>id, "originEndpointId"=>originEndpointId, "s3Destination"=>s3Destination, "startTime"=>startTime), args)); aws=aws)

"""
    CreateOriginEndpoint()

Creates a new OriginEndpoint record.

# Required Parameters
- `channelId`: The ID of the Channel that the OriginEndpoint will be associated with.
This cannot be changed after the OriginEndpoint is created.

- `id`: The ID of the OriginEndpoint.  The ID must be unique within the region
and it cannot be changed after the OriginEndpoint is created.


# Optional Parameters
- `authorization`: 
- `cmafPackage`: 
- `dashPackage`: 
- `description`: A short text description of the OriginEndpoint.
- `hlsPackage`: 
- `manifestName`: A short string that will be used as the filename of the OriginEndpoint URL (defaults to \"index\").
- `mssPackage`: 
- `origination`: Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination

- `startoverWindowSeconds`: Maximum duration (seconds) of content to retain for startover playback.
If not specified, startover playback will be disabled for the OriginEndpoint.

- `tags`: 
- `timeDelaySeconds`: Amount of delay (seconds) to enforce on the playback of live content.
If not specified, there will be no time delay in effect for the OriginEndpoint.

- `whitelist`: A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
"""
CreateOriginEndpoint(channelId, id; aws::AWSConfig=AWSConfig()) = mediapackage("POST", "/origin_endpoints", Dict{String, Any}("channelId"=>channelId, "id"=>id))
CreateOriginEndpoint(channelId, id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("POST", "/origin_endpoints", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("channelId"=>channelId, "id"=>id), args)); aws=aws)

"""
    DeleteChannel()

Deletes an existing Channel.

# Required Parameters
- `id`: The ID of the Channel to delete.

"""
DeleteChannel(id; aws::AWSConfig=AWSConfig()) = mediapackage("DELETE", "/channels/$(id)"; aws=aws)
DeleteChannel(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("DELETE", "/channels/$(id)", args; aws=aws)

"""
    DeleteOriginEndpoint()

Deletes an existing OriginEndpoint.

# Required Parameters
- `id`: The ID of the OriginEndpoint to delete.

"""
DeleteOriginEndpoint(id; aws::AWSConfig=AWSConfig()) = mediapackage("DELETE", "/origin_endpoints/$(id)"; aws=aws)
DeleteOriginEndpoint(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("DELETE", "/origin_endpoints/$(id)", args; aws=aws)

"""
    DescribeChannel()

Gets details about a Channel.

# Required Parameters
- `id`: The ID of a Channel.

"""
DescribeChannel(id; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/channels/$(id)"; aws=aws)
DescribeChannel(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/channels/$(id)", args; aws=aws)

"""
    DescribeHarvestJob()

Gets details about an existing HarvestJob.

# Required Parameters
- `id`: The ID of the HarvestJob.

"""
DescribeHarvestJob(id; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/harvest_jobs/$(id)"; aws=aws)
DescribeHarvestJob(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/harvest_jobs/$(id)", args; aws=aws)

"""
    DescribeOriginEndpoint()

Gets details about an existing OriginEndpoint.

# Required Parameters
- `id`: The ID of the OriginEndpoint.

"""
DescribeOriginEndpoint(id; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/origin_endpoints/$(id)"; aws=aws)
DescribeOriginEndpoint(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/origin_endpoints/$(id)", args; aws=aws)

"""
    ListChannels()

Returns a collection of Channels.

# Optional Parameters
- `maxResults`: Upper bound on number of records to return.
- `nextToken`: A token used to resume pagination from the end of a previous request.
"""
ListChannels(; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/channels"; aws=aws)
ListChannels(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/channels", args; aws=aws)

"""
    ListHarvestJobs()

Returns a collection of HarvestJob records.

# Optional Parameters
- `includeChannelId`: When specified, the request will return only HarvestJobs associated with the given Channel ID.
- `includeStatus`: When specified, the request will return only HarvestJobs in the given status.
- `maxResults`: The upper bound on the number of records to return.
- `nextToken`: A token used to resume pagination from the end of a previous request.
"""
ListHarvestJobs(; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/harvest_jobs"; aws=aws)
ListHarvestJobs(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/harvest_jobs", args; aws=aws)

"""
    ListOriginEndpoints()

Returns a collection of OriginEndpoint records.

# Optional Parameters
- `channelId`: When specified, the request will return only OriginEndpoints associated with the given Channel ID.
- `maxResults`: The upper bound on the number of records to return.
- `nextToken`: A token used to resume pagination from the end of a previous request.
"""
ListOriginEndpoints(; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/origin_endpoints"; aws=aws)
ListOriginEndpoints(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/origin_endpoints", args; aws=aws)

"""
    ListTagsForResource()



# Required Parameters
- `resource-arn`: 

"""
ListTagsForResource(resource_arn; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/tags/$(resource-arn)"; aws=aws)
ListTagsForResource(resource_arn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("GET", "/tags/$(resource-arn)", args; aws=aws)

"""
    RotateChannelCredentials()

Changes the Channel's first IngestEndpoint's username and password. WARNING - This API is deprecated. Please use RotateIngestEndpointCredentials instead

# Required Parameters
- `id`: The ID of the channel to update.

"""
RotateChannelCredentials(id; aws::AWSConfig=AWSConfig()) = mediapackage("PUT", "/channels/$(id)/credentials"; aws=aws)
RotateChannelCredentials(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("PUT", "/channels/$(id)/credentials", args; aws=aws)

"""
    RotateIngestEndpointCredentials()

Rotate the IngestEndpoint's username and password, as specified by the IngestEndpoint's id.

# Required Parameters
- `id`: The ID of the channel the IngestEndpoint is on.
- `ingest_endpoint_id`: The id of the IngestEndpoint whose credentials should be rotated

"""
RotateIngestEndpointCredentials(id, ingest_endpoint_id; aws::AWSConfig=AWSConfig()) = mediapackage("PUT", "/channels/$(id)/ingest_endpoints/$(ingest_endpoint_id)/credentials"; aws=aws)
RotateIngestEndpointCredentials(id, ingest_endpoint_id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("PUT", "/channels/$(id)/ingest_endpoints/$(ingest_endpoint_id)/credentials", args; aws=aws)

"""
    TagResource()



# Required Parameters
- `resource-arn`: 
- `tags`: 

"""
TagResource(resource_arn, tags; aws::AWSConfig=AWSConfig()) = mediapackage("POST", "/tags/$(resource-arn)", Dict{String, Any}("tags"=>tags))
TagResource(resource_arn, tags, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("POST", "/tags/$(resource-arn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tags"=>tags), args)); aws=aws)

"""
    UntagResource()



# Required Parameters
- `resource-arn`: 
- `tagKeys`: The key(s) of tag to be deleted

"""
UntagResource(resource_arn, tagKeys; aws::AWSConfig=AWSConfig()) = mediapackage("DELETE", "/tags/$(resource-arn)", Dict{String, Any}("tagKeys"=>tagKeys))
UntagResource(resource_arn, tagKeys, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("DELETE", "/tags/$(resource-arn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), args)); aws=aws)

"""
    UpdateChannel()

Updates an existing Channel.

# Required Parameters
- `id`: The ID of the Channel to update.

# Optional Parameters
- `description`: A short text description of the Channel.
"""
UpdateChannel(id; aws::AWSConfig=AWSConfig()) = mediapackage("PUT", "/channels/$(id)"; aws=aws)
UpdateChannel(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("PUT", "/channels/$(id)", args; aws=aws)

"""
    UpdateOriginEndpoint()

Updates an existing OriginEndpoint.

# Required Parameters
- `id`: The ID of the OriginEndpoint to update.

# Optional Parameters
- `authorization`: 
- `cmafPackage`: 
- `dashPackage`: 
- `description`: A short text description of the OriginEndpoint.
- `hlsPackage`: 
- `manifestName`: A short string that will be appended to the end of the Endpoint URL.
- `mssPackage`: 
- `origination`: Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination

- `startoverWindowSeconds`: Maximum duration (in seconds) of content to retain for startover playback.
If not specified, startover playback will be disabled for the OriginEndpoint.

- `timeDelaySeconds`: Amount of delay (in seconds) to enforce on the playback of live content.
If not specified, there will be no time delay in effect for the OriginEndpoint.

- `whitelist`: A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
"""
UpdateOriginEndpoint(id; aws::AWSConfig=AWSConfig()) = mediapackage("PUT", "/origin_endpoints/$(id)"; aws=aws)
UpdateOriginEndpoint(id, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = mediapackage("PUT", "/origin_endpoints/$(id)", args; aws=aws)
