# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: chime_sdk_messaging
using AWS.Compat
using AWS.UUIDs

"""
    batch_create_channel_membership(member_arns, channel_arn, x-amz-chime-bearer)
    batch_create_channel_membership(member_arns, channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Adds a specified number of users to a channel.

# Arguments
- `member_arns`: The ARNs of the members you want to add to the channel.
- `channel_arn`: The ARN of the channel to which you're adding users.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Type"`: The membership type of a user, DEFAULT or HIDDEN. Default members are always
  returned as part of ListChannelMemberships. Hidden members are only returned if the type
  filter in ListChannelMemberships equals HIDDEN. Otherwise hidden members are not returned.
  This is only supported by moderators.
"""
function batch_create_channel_membership(
    MemberArns,
    channelArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels/$(channelArn)/memberships?operation=batch-create",
        Dict{String,Any}(
            "MemberArns" => MemberArns,
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
        );
        aws_config=aws_config,
    )
end
function batch_create_channel_membership(
    MemberArns,
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels/$(channelArn)/memberships?operation=batch-create",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "MemberArns" => MemberArns,
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_channel(app_instance_arn, client_request_token, name, x-amz-chime-bearer)
    create_channel(app_instance_arn, client_request_token, name, x-amz-chime-bearer, params::Dict{String,<:Any})

Creates a channel to which you can add users and send messages.  Restriction: You can't
change a channel's privacy.  The x-amz-chime-bearer request header is mandatory. Use the
AppInstanceUserArn of the user that makes the API call as the value in the header.

# Arguments
- `app_instance_arn`: The ARN of the channel request.
- `client_request_token`: The client token for the request. An Idempotency token.
- `name`: The name of the channel.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Metadata"`: The metadata of the creation request. Limited to 1KB and UTF-8.
- `"Mode"`: The channel mode: UNRESTRICTED or RESTRICTED. Administrators, moderators, and
  channel members can add themselves and other members to unrestricted channels. Only
  administrators and moderators can add members to restricted channels.
- `"Privacy"`: The channel's privacy level: PUBLIC or PRIVATE. Private channels aren't
  discoverable by users outside the channel. Public channels are discoverable by anyone in
  the AppInstance.
- `"Tags"`: The tags for the creation request.
"""
function create_channel(
    AppInstanceArn,
    ClientRequestToken,
    Name,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels",
        Dict{String,Any}(
            "AppInstanceArn" => AppInstanceArn,
            "ClientRequestToken" => ClientRequestToken,
            "Name" => Name,
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
        );
        aws_config=aws_config,
    )
end
function create_channel(
    AppInstanceArn,
    ClientRequestToken,
    Name,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "AppInstanceArn" => AppInstanceArn,
                    "ClientRequestToken" => ClientRequestToken,
                    "Name" => Name,
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_channel_ban(member_arn, channel_arn, x-amz-chime-bearer)
    create_channel_ban(member_arn, channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Permanently bans a member from a channel. Moderators can't add banned members to a channel.
To undo a ban, you first have to DeleteChannelBan, and then CreateChannelMembership. Bans
are cleaned up when you delete users or channels. If you ban a user who is already part of
a channel, that user is automatically kicked from the channel.  The x-amz-chime-bearer
request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call
as the value in the header.

# Arguments
- `member_arn`: The ARN of the member being banned.
- `channel_arn`: The ARN of the ban request.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function create_channel_ban(
    MemberArn,
    channelArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels/$(channelArn)/bans",
        Dict{String,Any}(
            "MemberArn" => MemberArn,
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
        );
        aws_config=aws_config,
    )
end
function create_channel_ban(
    MemberArn,
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels/$(channelArn)/bans",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "MemberArn" => MemberArn,
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_channel_membership(member_arn, type, channel_arn, x-amz-chime-bearer)
    create_channel_membership(member_arn, type, channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Adds a user to a channel. The InvitedBy response field is derived from the request header.
A channel member can:   List messages   Send messages   Receive messages   Edit their own
messages   Leave the channel   Privacy settings impact this action as follows:   Public
Channels: You do not need to be a member to list messages, but you must be a member to send
messages.   Private Channels: You must be a member to list or send messages.    The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Arguments
- `member_arn`: The ARN of the member you want to add to the channel.
- `type`: The membership type of a user, DEFAULT or HIDDEN. Default members are always
  returned as part of ListChannelMemberships. Hidden members are only returned if the type
  filter in ListChannelMemberships equals HIDDEN. Otherwise hidden members are not returned.
  This is only supported by moderators.
- `channel_arn`: The ARN of the channel to which you're adding users.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function create_channel_membership(
    MemberArn,
    Type,
    channelArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels/$(channelArn)/memberships",
        Dict{String,Any}(
            "MemberArn" => MemberArn,
            "Type" => Type,
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
        );
        aws_config=aws_config,
    )
end
function create_channel_membership(
    MemberArn,
    Type,
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels/$(channelArn)/memberships",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "MemberArn" => MemberArn,
                    "Type" => Type,
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_channel_moderator(channel_moderator_arn, channel_arn, x-amz-chime-bearer)
    create_channel_moderator(channel_moderator_arn, channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Creates a new ChannelModerator. A channel moderator can:   Add and remove other members of
the channel.   Add and remove other moderators of the channel.   Add and remove user bans
for the channel.   Redact messages in the channel.   List messages in the channel.    The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Arguments
- `channel_moderator_arn`: The ARN of the moderator.
- `channel_arn`: The ARN of the channel.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function create_channel_moderator(
    ChannelModeratorArn,
    channelArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels/$(channelArn)/moderators",
        Dict{String,Any}(
            "ChannelModeratorArn" => ChannelModeratorArn,
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
        );
        aws_config=aws_config,
    )
end
function create_channel_moderator(
    ChannelModeratorArn,
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels/$(channelArn)/moderators",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ChannelModeratorArn" => ChannelModeratorArn,
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_channel(channel_arn, x-amz-chime-bearer)
    delete_channel(channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Immediately makes a channel and its memberships inaccessible and marks them for deletion.
This is an irreversible process.  The x-amz-chime-bearer request header is mandatory. Use
the AppInstanceUserArn of the user that makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel being deleted.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function delete_channel(
    channelArn, x_amz_chime_bearer; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_messaging(
        "DELETE",
        "/channels/$(channelArn)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function delete_channel(
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "DELETE",
        "/channels/$(channelArn)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_channel_ban(channel_arn, member_arn, x-amz-chime-bearer)
    delete_channel_ban(channel_arn, member_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Removes a user from a channel's ban list.  The x-amz-chime-bearer request header is
mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in
the header.

# Arguments
- `channel_arn`: The ARN of the channel from which the AppInstanceUser was banned.
- `member_arn`: The ARN of the AppInstanceUser that you want to reinstate.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function delete_channel_ban(
    channelArn,
    memberArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "DELETE",
        "/channels/$(channelArn)/bans/$(memberArn)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function delete_channel_ban(
    channelArn,
    memberArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "DELETE",
        "/channels/$(channelArn)/bans/$(memberArn)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_channel_membership(channel_arn, member_arn, x-amz-chime-bearer)
    delete_channel_membership(channel_arn, member_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Removes a member from a channel.  The x-amz-chime-bearer request header is mandatory. Use
the AppInstanceUserArn of the user that makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel from which you want to remove the user.
- `member_arn`: The ARN of the member that you're removing from the channel.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function delete_channel_membership(
    channelArn,
    memberArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "DELETE",
        "/channels/$(channelArn)/memberships/$(memberArn)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function delete_channel_membership(
    channelArn,
    memberArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "DELETE",
        "/channels/$(channelArn)/memberships/$(memberArn)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_channel_message(channel_arn, message_id, x-amz-chime-bearer)
    delete_channel_message(channel_arn, message_id, x-amz-chime-bearer, params::Dict{String,<:Any})

Deletes a channel message. Only admins can perform this action. Deletion makes messages
inaccessible immediately. A background process deletes any revisions created by
UpdateChannelMessage.  The x-amz-chime-bearer request header is mandatory. Use the
AppInstanceUserArn of the user that makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `message_id`: The ID of the message being deleted.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function delete_channel_message(
    channelArn,
    messageId,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "DELETE",
        "/channels/$(channelArn)/messages/$(messageId)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function delete_channel_message(
    channelArn,
    messageId,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "DELETE",
        "/channels/$(channelArn)/messages/$(messageId)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_channel_moderator(channel_arn, channel_moderator_arn, x-amz-chime-bearer)
    delete_channel_moderator(channel_arn, channel_moderator_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Deletes a channel moderator.  The x-amz-chime-bearer request header is mandatory. Use the
AppInstanceUserArn of the user that makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `channel_moderator_arn`: The ARN of the moderator being deleted.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function delete_channel_moderator(
    channelArn,
    channelModeratorArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "DELETE",
        "/channels/$(channelArn)/moderators/$(channelModeratorArn)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function delete_channel_moderator(
    channelArn,
    channelModeratorArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "DELETE",
        "/channels/$(channelArn)/moderators/$(channelModeratorArn)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_channel(channel_arn, x-amz-chime-bearer)
    describe_channel(channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Returns the full details of a channel in an Amazon Chime AppInstance.  The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function describe_channel(
    channelArn, x_amz_chime_bearer; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function describe_channel(
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_channel_ban(channel_arn, member_arn, x-amz-chime-bearer)
    describe_channel_ban(channel_arn, member_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Returns the full details of a channel ban.  The x-amz-chime-bearer request header is
mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in
the header.

# Arguments
- `channel_arn`: The ARN of the channel from which the user is banned.
- `member_arn`: The ARN of the member being banned.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function describe_channel_ban(
    channelArn,
    memberArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/bans/$(memberArn)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function describe_channel_ban(
    channelArn,
    memberArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/bans/$(memberArn)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_channel_membership(channel_arn, member_arn, x-amz-chime-bearer)
    describe_channel_membership(channel_arn, member_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Returns the full details of a user's channel membership.  The x-amz-chime-bearer request
header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the
value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `member_arn`: The ARN of the member.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function describe_channel_membership(
    channelArn,
    memberArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/memberships/$(memberArn)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function describe_channel_membership(
    channelArn,
    memberArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/memberships/$(memberArn)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_channel_membership_for_app_instance_user(app-instance-user-arn, channel_arn, x-amz-chime-bearer)
    describe_channel_membership_for_app_instance_user(app-instance-user-arn, channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

 Returns the details of a channel based on the membership of the specified AppInstanceUser.
 The x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user
that makes the API call as the value in the header.

# Arguments
- `app-instance-user-arn`: The ARN of the user in a channel.
- `channel_arn`: The ARN of the channel to which the user belongs.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function describe_channel_membership_for_app_instance_user(
    app_instance_user_arn,
    channelArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)?scope=app-instance-user-membership",
        Dict{String,Any}(
            "app-instance-user-arn" => app_instance_user_arn,
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
        );
        aws_config=aws_config,
    )
end
function describe_channel_membership_for_app_instance_user(
    app_instance_user_arn,
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)?scope=app-instance-user-membership",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "app-instance-user-arn" => app_instance_user_arn,
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_channel_moderated_by_app_instance_user(app-instance-user-arn, channel_arn, x-amz-chime-bearer)
    describe_channel_moderated_by_app_instance_user(app-instance-user-arn, channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Returns the full details of a channel moderated by the specified AppInstanceUser.  The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Arguments
- `app-instance-user-arn`: The ARN of the AppInstanceUser in the moderated channel.
- `channel_arn`: The ARN of the moderated channel.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function describe_channel_moderated_by_app_instance_user(
    app_instance_user_arn,
    channelArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)?scope=app-instance-user-moderated-channel",
        Dict{String,Any}(
            "app-instance-user-arn" => app_instance_user_arn,
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
        );
        aws_config=aws_config,
    )
end
function describe_channel_moderated_by_app_instance_user(
    app_instance_user_arn,
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)?scope=app-instance-user-moderated-channel",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "app-instance-user-arn" => app_instance_user_arn,
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    describe_channel_moderator(channel_arn, channel_moderator_arn, x-amz-chime-bearer)
    describe_channel_moderator(channel_arn, channel_moderator_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Returns the full details of a single ChannelModerator.  The x-amz-chime-bearer request
header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the
value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `channel_moderator_arn`: The ARN of the channel moderator.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function describe_channel_moderator(
    channelArn,
    channelModeratorArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/moderators/$(channelModeratorArn)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function describe_channel_moderator(
    channelArn,
    channelModeratorArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/moderators/$(channelModeratorArn)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    get_channel_message(channel_arn, message_id, x-amz-chime-bearer)
    get_channel_message(channel_arn, message_id, x-amz-chime-bearer, params::Dict{String,<:Any})

Gets the full details of a channel message.  The x-amz-chime-bearer request header is
mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in
the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `message_id`: The ID of the message.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function get_channel_message(
    channelArn,
    messageId,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/messages/$(messageId)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function get_channel_message(
    channelArn,
    messageId,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/messages/$(messageId)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    get_messaging_session_endpoint()
    get_messaging_session_endpoint(params::Dict{String,<:Any})

The details of the endpoint for the messaging session.

"""
function get_messaging_session_endpoint(; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_messaging("GET", "/endpoints/messaging-session"; aws_config=aws_config)
end
function get_messaging_session_endpoint(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_messaging(
        "GET", "/endpoints/messaging-session", params; aws_config=aws_config
    )
end

"""
    list_channel_bans(channel_arn, x-amz-chime-bearer)
    list_channel_bans(channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Lists all the users banned from a particular channel.  The x-amz-chime-bearer request
header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the
value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of bans that you want returned.
- `"next-token"`: The token passed by previous API calls until all requested bans are
  returned.
"""
function list_channel_bans(
    channelArn, x_amz_chime_bearer; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/bans",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function list_channel_bans(
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/bans",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    list_channel_memberships(channel_arn, x-amz-chime-bearer)
    list_channel_memberships(channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Lists all channel memberships in a channel.  The x-amz-chime-bearer request header is
mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in
the header.

# Arguments
- `channel_arn`: The maximum number of channel memberships that you want returned.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of channel memberships that you want returned.
- `"next-token"`: The token passed by previous API calls until all requested channel
  memberships are returned.
- `"type"`: The membership type of a user, DEFAULT or HIDDEN. Default members are always
  returned as part of ListChannelMemberships. Hidden members are only returned if the type
  filter in ListChannelMemberships equals HIDDEN. Otherwise hidden members are not returned.
"""
function list_channel_memberships(
    channelArn, x_amz_chime_bearer; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/memberships",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function list_channel_memberships(
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/memberships",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    list_channel_memberships_for_app_instance_user(x-amz-chime-bearer)
    list_channel_memberships_for_app_instance_user(x-amz-chime-bearer, params::Dict{String,<:Any})

 Lists all channels that a particular AppInstanceUser is a part of. Only an
AppInstanceAdmin can call the API with a user ARN that is not their own.   The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Arguments
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"app-instance-user-arn"`: The ARN of the AppInstanceUsers
- `"max-results"`: The maximum number of users that you want returned.
- `"next-token"`: The token returned from previous API requests until the number of channel
  memberships is reached.
"""
function list_channel_memberships_for_app_instance_user(
    x_amz_chime_bearer; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_messaging(
        "GET",
        "/channels?scope=app-instance-user-memberships",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function list_channel_memberships_for_app_instance_user(
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels?scope=app-instance-user-memberships",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    list_channel_messages(channel_arn, x-amz-chime-bearer)
    list_channel_messages(channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

List all the messages in a channel. Returns a paginated list of ChannelMessages. By
default, sorted by creation timestamp in descending order.  Redacted messages appear in the
results as empty, since they are only redacted, not deleted. Deleted messages do not appear
in the results. This action always returns the latest version of an edited message. Also,
the x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user
that makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of messages that you want returned.
- `"next-token"`: The token passed by previous API calls until all requested messages are
  returned.
- `"not-after"`: The final or ending time stamp for your requested messages.
- `"not-before"`: The initial or starting time stamp for your requested messages.
- `"sort-order"`: The order in which you want messages sorted. Default is Descending, based
  on time created.
"""
function list_channel_messages(
    channelArn, x_amz_chime_bearer; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/messages",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function list_channel_messages(
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/messages",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    list_channel_moderators(channel_arn, x-amz-chime-bearer)
    list_channel_moderators(channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Lists all the moderators for a channel.  The x-amz-chime-bearer request header is
mandatory. Use the AppInstanceUserArn of the user that makes the API call as the value in
the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of moderators that you want returned.
- `"next-token"`: The token passed by previous API calls until all requested moderators are
  returned.
"""
function list_channel_moderators(
    channelArn, x_amz_chime_bearer; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/moderators",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function list_channel_moderators(
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels/$(channelArn)/moderators",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    list_channels(app-instance-arn, x-amz-chime-bearer)
    list_channels(app-instance-arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Lists all Channels created under a single Chime App as a paginated list. You can specify
filters to narrow results.  Functionality &amp; restrictions    Use privacy = PUBLIC to
retrieve all public channels in the account.   Only an AppInstanceAdmin can set privacy =
PRIVATE to list the private channels in an account.    The x-amz-chime-bearer request
header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the
value in the header.

# Arguments
- `app-instance-arn`: The ARN of the AppInstance.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of channels that you want to return.
- `"next-token"`: The token passed by previous API calls until all requested channels are
  returned.
- `"privacy"`: The privacy setting. PUBLIC retrieves all the public channels. PRIVATE
  retrieves private channels. Only an AppInstanceAdmin can retrieve private channels.
"""
function list_channels(
    app_instance_arn, x_amz_chime_bearer; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_messaging(
        "GET",
        "/channels",
        Dict{String,Any}(
            "app-instance-arn" => app_instance_arn,
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
        );
        aws_config=aws_config,
    )
end
function list_channels(
    app_instance_arn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "app-instance-arn" => app_instance_arn,
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    list_channels_moderated_by_app_instance_user(x-amz-chime-bearer)
    list_channels_moderated_by_app_instance_user(x-amz-chime-bearer, params::Dict{String,<:Any})

A list of the channels moderated by an AppInstanceUser.  The x-amz-chime-bearer request
header is mandatory. Use the AppInstanceUserArn of the user that makes the API call as the
value in the header.

# Arguments
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"app-instance-user-arn"`: The ARN of the user in the moderated channel.
- `"max-results"`: The maximum number of channels in the request.
- `"next-token"`: The token returned from previous API requests until the number of
  channels moderated by the user is reached.
"""
function list_channels_moderated_by_app_instance_user(
    x_amz_chime_bearer; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_messaging(
        "GET",
        "/channels?scope=app-instance-user-moderated-channels",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function list_channels_moderated_by_app_instance_user(
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "GET",
        "/channels?scope=app-instance-user-moderated-channels",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    redact_channel_message(channel_arn, message_id, x-amz-chime-bearer)
    redact_channel_message(channel_arn, message_id, x-amz-chime-bearer, params::Dict{String,<:Any})

Redacts message content, but not metadata. The message exists in the back end, but the
action returns null content, and the state shows as redacted.  The x-amz-chime-bearer
request header is mandatory. Use the AppInstanceUserArn of the user that makes the API call
as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel containing the messages that you want to redact.
- `message_id`: The ID of the message being redacted.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function redact_channel_message(
    channelArn,
    messageId,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels/$(channelArn)/messages/$(messageId)?operation=redact",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function redact_channel_message(
    channelArn,
    messageId,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels/$(channelArn)/messages/$(messageId)?operation=redact",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    send_channel_message(client_request_token, content, persistence, type, channel_arn, x-amz-chime-bearer)
    send_channel_message(client_request_token, content, persistence, type, channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Sends a message to a particular channel that the member is a part of.  The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header. Also, STANDARD messages can contain 4KB of
data and the 1KB of metadata. CONTROL messages can contain 30 bytes of data and no
metadata.

# Arguments
- `client_request_token`: The Idempotency token for each client request.
- `content`: The content of the message.
- `persistence`: Boolean that controls whether the message is persisted on the back end.
  Required.
- `type`: The type of message, STANDARD or CONTROL.
- `channel_arn`: The ARN of the channel.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Metadata"`: The optional metadata for each message.
"""
function send_channel_message(
    ClientRequestToken,
    Content,
    Persistence,
    Type,
    channelArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels/$(channelArn)/messages",
        Dict{String,Any}(
            "ClientRequestToken" => ClientRequestToken,
            "Content" => Content,
            "Persistence" => Persistence,
            "Type" => Type,
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
        );
        aws_config=aws_config,
    )
end
function send_channel_message(
    ClientRequestToken,
    Content,
    Persistence,
    Type,
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "POST",
        "/channels/$(channelArn)/messages",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ClientRequestToken" => ClientRequestToken,
                    "Content" => Content,
                    "Persistence" => Persistence,
                    "Type" => Type,
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    update_channel(mode, name, channel_arn, x-amz-chime-bearer)
    update_channel(mode, name, channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

Update a channel's attributes.  Restriction: You can't change a channel's privacy.   The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Arguments
- `mode`: The mode of the update request.
- `name`: The name of the channel.
- `channel_arn`: The ARN of the channel.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Metadata"`: The metadata for the update request.
"""
function update_channel(
    Mode,
    Name,
    channelArn,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "PUT",
        "/channels/$(channelArn)",
        Dict{String,Any}(
            "Mode" => Mode,
            "Name" => Name,
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
        );
        aws_config=aws_config,
    )
end
function update_channel(
    Mode,
    Name,
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "PUT",
        "/channels/$(channelArn)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Mode" => Mode,
                    "Name" => Name,
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    update_channel_message(channel_arn, message_id, x-amz-chime-bearer)
    update_channel_message(channel_arn, message_id, x-amz-chime-bearer, params::Dict{String,<:Any})

Updates the content of a message.  The x-amz-chime-bearer request header is mandatory. Use
the AppInstanceUserArn of the user that makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `message_id`: The ID string of the message being updated.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Content"`: The content of the message being updated.
- `"Metadata"`: The metadata of the message being updated.
"""
function update_channel_message(
    channelArn,
    messageId,
    x_amz_chime_bearer;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "PUT",
        "/channels/$(channelArn)/messages/$(messageId)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function update_channel_message(
    channelArn,
    messageId,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "PUT",
        "/channels/$(channelArn)/messages/$(messageId)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    update_channel_read_marker(channel_arn, x-amz-chime-bearer)
    update_channel_read_marker(channel_arn, x-amz-chime-bearer, params::Dict{String,<:Any})

The details of the time when a user last read messages in a channel.  The
x-amz-chime-bearer request header is mandatory. Use the AppInstanceUserArn of the user that
makes the API call as the value in the header.

# Arguments
- `channel_arn`: The ARN of the channel.
- `x-amz-chime-bearer`: The AppInstanceUserArn of the user that makes the API call.

"""
function update_channel_read_marker(
    channelArn, x_amz_chime_bearer; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_messaging(
        "PUT",
        "/channels/$(channelArn)/readMarker",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer)
        );
        aws_config=aws_config,
    )
end
function update_channel_read_marker(
    channelArn,
    x_amz_chime_bearer,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_messaging(
        "PUT",
        "/channels/$(channelArn)/readMarker",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" =>
                        Dict{String,Any}("x-amz-chime-bearer" => x_amz_chime_bearer),
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end
