# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: chime

using Compat
using UUIDs
"""
    AssociatePhoneNumberWithUser()

Associates a phone number with the specified Amazon Chime user.

# Required Parameters
- `E164PhoneNumber`: The phone number, in E.164 format.
- `accountId`: The Amazon Chime account ID.
- `userId`: The user ID.

"""
AssociatePhoneNumberWithUser(E164PhoneNumber, accountId, userId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users/$(userId)?operation=associate-phone-number", Dict{String, Any}("E164PhoneNumber"=>E164PhoneNumber))
AssociatePhoneNumberWithUser(E164PhoneNumber, accountId, userId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users/$(userId)?operation=associate-phone-number", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("E164PhoneNumber"=>E164PhoneNumber), args)); aws=aws)

"""
    AssociatePhoneNumbersWithVoiceConnector()

Associates phone numbers with the specified Amazon Chime Voice Connector.

# Required Parameters
- `E164PhoneNumbers`: List of phone numbers, in E.164 format.
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

# Optional Parameters
- `ForceAssociate`: If true, associates the provided phone numbers with the provided Amazon Chime Voice Connector and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.
"""
AssociatePhoneNumbersWithVoiceConnector(E164PhoneNumbers, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors/$(voiceConnectorId)?operation=associate-phone-numbers", Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers))
AssociatePhoneNumbersWithVoiceConnector(E164PhoneNumbers, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors/$(voiceConnectorId)?operation=associate-phone-numbers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers), args)); aws=aws)

"""
    AssociatePhoneNumbersWithVoiceConnectorGroup()

Associates phone numbers with the specified Amazon Chime Voice Connector group.

# Required Parameters
- `E164PhoneNumbers`: List of phone numbers, in E.164 format.
- `voiceConnectorGroupId`: The Amazon Chime Voice Connector group ID.

# Optional Parameters
- `ForceAssociate`: If true, associates the provided phone numbers with the provided Amazon Chime Voice Connector Group and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.
"""
AssociatePhoneNumbersWithVoiceConnectorGroup(E164PhoneNumbers, voiceConnectorGroupId; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connector-groups/$(voiceConnectorGroupId)?operation=associate-phone-numbers", Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers))
AssociatePhoneNumbersWithVoiceConnectorGroup(E164PhoneNumbers, voiceConnectorGroupId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connector-groups/$(voiceConnectorGroupId)?operation=associate-phone-numbers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers), args)); aws=aws)

"""
    AssociateSigninDelegateGroupsWithAccount()

Associates the specified sign-in delegate groups with the specified Amazon Chime account.

# Required Parameters
- `SigninDelegateGroups`: The sign-in delegate groups.
- `accountId`: The Amazon Chime account ID.

"""
AssociateSigninDelegateGroupsWithAccount(SigninDelegateGroups, accountId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)?operation=associate-signin-delegate-groups", Dict{String, Any}("SigninDelegateGroups"=>SigninDelegateGroups))
AssociateSigninDelegateGroupsWithAccount(SigninDelegateGroups, accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)?operation=associate-signin-delegate-groups", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SigninDelegateGroups"=>SigninDelegateGroups), args)); aws=aws)

"""
    BatchCreateAttendee()

Creates up to 100 new attendees for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide. 

# Required Parameters
- `Attendees`: The request containing the attendees to create.
- `meetingId`: The Amazon Chime SDK meeting ID.

"""
BatchCreateAttendee(Attendees, meetingId; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings/$(meetingId)/attendees?operation=batch-create", Dict{String, Any}("Attendees"=>Attendees))
BatchCreateAttendee(Attendees, meetingId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings/$(meetingId)/attendees?operation=batch-create", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Attendees"=>Attendees), args)); aws=aws)

"""
    BatchCreateRoomMembership()

Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be either users or bots. The member role designates whether the member is a chat room administrator or a general chat room member.

# Required Parameters
- `MembershipItemList`: The list of membership items.
- `accountId`: The Amazon Chime account ID.
- `roomId`: The room ID.

"""
BatchCreateRoomMembership(MembershipItemList, accountId, roomId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/rooms/$(roomId)/memberships?operation=batch-create", Dict{String, Any}("MembershipItemList"=>MembershipItemList))
BatchCreateRoomMembership(MembershipItemList, accountId, roomId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/rooms/$(roomId)/memberships?operation=batch-create", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("MembershipItemList"=>MembershipItemList), args)); aws=aws)

"""
    BatchDeletePhoneNumber()

Moves phone numbers into the Deletion queue. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted. Phone numbers remain in the Deletion queue for 7 days before they are deleted permanently.

# Required Parameters
- `PhoneNumberIds`: List of phone number IDs.

"""
BatchDeletePhoneNumber(PhoneNumberIds; aws::AWSConfig=AWSConfig()) = chime("POST", "/phone-numbers?operation=batch-delete", Dict{String, Any}("PhoneNumberIds"=>PhoneNumberIds))
BatchDeletePhoneNumber(PhoneNumberIds, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/phone-numbers?operation=batch-delete", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("PhoneNumberIds"=>PhoneNumberIds), args)); aws=aws)

"""
    BatchSuspendUser()

Suspends up to 50 users from a Team or EnterpriseLWA Amazon Chime account. For more information about different account types, see Managing Your Amazon Chime Accounts in the Amazon Chime Administration Guide. Users suspended from a Team account are disassociated from the account, but they can continue to use Amazon Chime as free users. To remove the suspension from suspended Team account users, invite them to the Team account again. You can use the InviteUsers action to do so. Users suspended from an EnterpriseLWA account are immediately signed out of Amazon Chime and can no longer sign in. To remove the suspension from suspended EnterpriseLWA account users, use the BatchUnsuspendUser action.  To sign out users without suspending them, use the LogoutUser action.

# Required Parameters
- `UserIdList`: The request containing the user IDs to suspend.
- `accountId`: The Amazon Chime account ID.

"""
BatchSuspendUser(UserIdList, accountId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users?operation=suspend", Dict{String, Any}("UserIdList"=>UserIdList))
BatchSuspendUser(UserIdList, accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users?operation=suspend", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UserIdList"=>UserIdList), args)); aws=aws)

"""
    BatchUnsuspendUser()

Removes the suspension from up to 50 previously suspended users for the specified Amazon Chime EnterpriseLWA account. Only users on EnterpriseLWA accounts can be unsuspended using this action. For more information about different account types, see Managing Your Amazon Chime Accounts in the Amazon Chime Administration Guide. Previously suspended users who are unsuspended using this action are returned to Registered status. Users who are not previously suspended are ignored.

# Required Parameters
- `UserIdList`: The request containing the user IDs to unsuspend.
- `accountId`: The Amazon Chime account ID.

"""
BatchUnsuspendUser(UserIdList, accountId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users?operation=unsuspend", Dict{String, Any}("UserIdList"=>UserIdList))
BatchUnsuspendUser(UserIdList, accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users?operation=unsuspend", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UserIdList"=>UserIdList), args)); aws=aws)

"""
    BatchUpdatePhoneNumber()

Updates phone number product types or calling names. You can update one attribute at a time for each UpdatePhoneNumberRequestItem. For example, you can update either the product type or the calling name. For product types, choose from Amazon Chime Business Calling and Amazon Chime Voice Connector. For toll-free numbers, you must use the Amazon Chime Voice Connector product type. Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.

# Required Parameters
- `UpdatePhoneNumberRequestItems`: The request containing the phone number IDs and product types or calling names to update.

"""
BatchUpdatePhoneNumber(UpdatePhoneNumberRequestItems; aws::AWSConfig=AWSConfig()) = chime("POST", "/phone-numbers?operation=batch-update", Dict{String, Any}("UpdatePhoneNumberRequestItems"=>UpdatePhoneNumberRequestItems))
BatchUpdatePhoneNumber(UpdatePhoneNumberRequestItems, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/phone-numbers?operation=batch-update", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UpdatePhoneNumberRequestItems"=>UpdatePhoneNumberRequestItems), args)); aws=aws)

"""
    BatchUpdateUser()

Updates user details within the UpdateUserRequestItem object for up to 20 users for the specified Amazon Chime account. Currently, only LicenseType updates are supported for this action.

# Required Parameters
- `UpdateUserRequestItems`: The request containing the user IDs and details to update.
- `accountId`: The Amazon Chime account ID.

"""
BatchUpdateUser(UpdateUserRequestItems, accountId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users", Dict{String, Any}("UpdateUserRequestItems"=>UpdateUserRequestItems))
BatchUpdateUser(UpdateUserRequestItems, accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UpdateUserRequestItems"=>UpdateUserRequestItems), args)); aws=aws)

"""
    CreateAccount()

Creates an Amazon Chime account under the administrator's AWS account. Only Team account types are currently supported for this action. For more information about different account types, see Managing Your Amazon Chime Accounts in the Amazon Chime Administration Guide.

# Required Parameters
- `Name`: The name of the Amazon Chime account.

"""
CreateAccount(Name; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts", Dict{String, Any}("Name"=>Name))
CreateAccount(Name, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name), args)); aws=aws)

"""
    CreateAttendee()

Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.

# Required Parameters
- `ExternalUserId`: The Amazon Chime SDK external user ID. Links the attendee to an identity managed by a builder application.
- `meetingId`: The Amazon Chime SDK meeting ID.

# Optional Parameters
- `Tags`: The tag key-value pairs.
"""
CreateAttendee(ExternalUserId, meetingId; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings/$(meetingId)/attendees", Dict{String, Any}("ExternalUserId"=>ExternalUserId))
CreateAttendee(ExternalUserId, meetingId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings/$(meetingId)/attendees", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ExternalUserId"=>ExternalUserId), args)); aws=aws)

"""
    CreateBot()

Creates a bot for an Amazon Chime Enterprise account.

# Required Parameters
- `DisplayName`: The bot display name.
- `accountId`: The Amazon Chime account ID.

# Optional Parameters
- `Domain`: The domain of the Amazon Chime Enterprise account.
"""
CreateBot(DisplayName, accountId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/bots", Dict{String, Any}("DisplayName"=>DisplayName))
CreateBot(DisplayName, accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/bots", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DisplayName"=>DisplayName), args)); aws=aws)

"""
    CreateMeeting()

Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about specifying media Regions, see Amazon Chime SDK Media Regions in the Amazon Chime Developer Guide. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.

# Required Parameters
- `ClientRequestToken`: The unique identifier for the client request. Use a different token for different meetings.

# Optional Parameters
- `ExternalMeetingId`: The external meeting ID.
- `MediaRegion`: The Region in which to create the meeting. Default: us-east-1. Available values: ap-northeast-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2.
- `MeetingHostId`: Reserved.
- `NotificationsConfiguration`: The configuration for resource targets to receive notifications when meeting and attendee events occur.
- `Tags`: The tag key-value pairs.
"""
CreateMeeting(ClientRequestToken; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings", Dict{String, Any}("ClientRequestToken"=>ClientRequestToken))
CreateMeeting(ClientRequestToken, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClientRequestToken"=>ClientRequestToken), args)); aws=aws)

"""
    CreateMeetingWithAttendees()

Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For more information about specifying media Regions, see Amazon Chime SDK Media Regions in the Amazon Chime Developer Guide. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.

# Required Parameters
- `ClientRequestToken`: The unique identifier for the client request. Use a different token for different meetings.

# Optional Parameters
- `Attendees`: The request containing the attendees to create.
- `ExternalMeetingId`: The external meeting ID.
- `MediaRegion`: The Region in which to create the meeting. Default: us-east-1. Available values: ap-northeast-1, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-north-1, eu-west-1, eu-west-2, eu-west-3, sa-east-1, us-east-1, us-east-2, us-west-1, us-west-2.
- `MeetingHostId`: Reserved.
- `NotificationsConfiguration`: 
- `Tags`: The tag key-value pairs.
"""
CreateMeetingWithAttendees(ClientRequestToken; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings?operation=create-attendees", Dict{String, Any}("ClientRequestToken"=>ClientRequestToken))
CreateMeetingWithAttendees(ClientRequestToken, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings?operation=create-attendees", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClientRequestToken"=>ClientRequestToken), args)); aws=aws)

"""
    CreatePhoneNumberOrder()

Creates an order for phone numbers to be provisioned. Choose from Amazon Chime Business Calling and Amazon Chime Voice Connector product types. For toll-free numbers, you must use the Amazon Chime Voice Connector product type.

# Required Parameters
- `E164PhoneNumbers`: List of phone numbers, in E.164 format.
- `ProductType`: The phone number product type.

"""
CreatePhoneNumberOrder(E164PhoneNumbers, ProductType; aws::AWSConfig=AWSConfig()) = chime("POST", "/phone-number-orders", Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers, "ProductType"=>ProductType))
CreatePhoneNumberOrder(E164PhoneNumbers, ProductType, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/phone-number-orders", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers, "ProductType"=>ProductType), args)); aws=aws)

"""
    CreateProxySession()

Creates a proxy session on the specified Amazon Chime Voice Connector for the specified participant phone numbers.

# Required Parameters
- `Capabilities`: The proxy session capabilities.
- `ParticipantPhoneNumbers`: The participant phone numbers.
- `voiceConnectorId`: The Amazon Chime voice connector ID.

# Optional Parameters
- `ExpiryMinutes`: The number of minutes allowed for the proxy session.
- `GeoMatchLevel`: The preference for matching the country or area code of the proxy phone number with that of the first participant.
- `GeoMatchParams`: The country and area code for the proxy phone number.
- `Name`: The name of the proxy session.
- `NumberSelectionBehavior`: The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.
"""
CreateProxySession(Capabilities, ParticipantPhoneNumbers, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors/$(voiceConnectorId)/proxy-sessions", Dict{String, Any}("Capabilities"=>Capabilities, "ParticipantPhoneNumbers"=>ParticipantPhoneNumbers))
CreateProxySession(Capabilities, ParticipantPhoneNumbers, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors/$(voiceConnectorId)/proxy-sessions", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Capabilities"=>Capabilities, "ParticipantPhoneNumbers"=>ParticipantPhoneNumbers), args)); aws=aws)

"""
    CreateRoom()

Creates a chat room for the specified Amazon Chime Enterprise account.

# Required Parameters
- `Name`: The room name.
- `accountId`: The Amazon Chime account ID.

# Optional Parameters
- `ClientRequestToken`: The idempotency token for the request.
"""
CreateRoom(Name, accountId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/rooms", Dict{String, Any}("Name"=>Name, "ClientRequestToken"=>string(uuid4())); aws=aws)
CreateRoom(Name, accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/rooms", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "ClientRequestToken"=>string(uuid4())), args)); aws=aws)

"""
    CreateRoomMembership()

Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.

# Required Parameters
- `MemberId`: The Amazon Chime member ID (user ID or bot ID).
- `accountId`: The Amazon Chime account ID.
- `roomId`: The room ID.

# Optional Parameters
- `Role`: The role of the member.
"""
CreateRoomMembership(MemberId, accountId, roomId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/rooms/$(roomId)/memberships", Dict{String, Any}("MemberId"=>MemberId))
CreateRoomMembership(MemberId, accountId, roomId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/rooms/$(roomId)/memberships", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("MemberId"=>MemberId), args)); aws=aws)

"""
    CreateUser()

Creates a user under the specified Amazon Chime account.

# Required Parameters
- `accountId`: The Amazon Chime account ID.

# Optional Parameters
- `Email`: The user's email address.
- `UserType`: The user type.
- `Username`: The user name.
"""
CreateUser(accountId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users?operation=create"; aws=aws)
CreateUser(accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users?operation=create", args; aws=aws)

"""
    CreateVoiceConnector()

Creates an Amazon Chime Voice Connector under the administrator's AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region. Enabling CreateVoiceConnectorRequest RequireEncryption configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked.

# Required Parameters
- `Name`: The name of the Amazon Chime Voice Connector.
- `RequireEncryption`: When enabled, requires encryption for the Amazon Chime Voice Connector.

# Optional Parameters
- `AwsRegion`: The AWS Region in which the Amazon Chime Voice Connector is created. Default value: us-east-1.
"""
CreateVoiceConnector(Name, RequireEncryption; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors", Dict{String, Any}("Name"=>Name, "RequireEncryption"=>RequireEncryption))
CreateVoiceConnector(Name, RequireEncryption, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "RequireEncryption"=>RequireEncryption), args)); aws=aws)

"""
    CreateVoiceConnectorGroup()

Creates an Amazon Chime Voice Connector group under the administrator's AWS account. You can associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by including VoiceConnectorItems in the request. You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.

# Required Parameters
- `Name`: The name of the Amazon Chime Voice Connector group.

# Optional Parameters
- `VoiceConnectorItems`: The Amazon Chime Voice Connectors to route inbound calls to.
"""
CreateVoiceConnectorGroup(Name; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connector-groups", Dict{String, Any}("Name"=>Name))
CreateVoiceConnectorGroup(Name, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connector-groups", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name), args)); aws=aws)

"""
    DeleteAccount()

Deletes the specified Amazon Chime account. You must suspend all users before deleting a Team account. You can use the BatchSuspendUser action to do so. For EnterpriseLWA and EnterpriseAD accounts, you must release the claimed domains for your Amazon Chime account before deletion. As soon as you release the domain, all users under that account are suspended. Deleted accounts appear in your Disabled accounts list for 90 days. To restore a deleted account from your Disabled accounts list, you must contact AWS Support. After 90 days, deleted accounts are permanently removed from your Disabled accounts list.

# Required Parameters
- `accountId`: The Amazon Chime account ID.

"""
DeleteAccount(accountId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/accounts/$(accountId)"; aws=aws)
DeleteAccount(accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/accounts/$(accountId)", args; aws=aws)

"""
    DeleteAttendee()

Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their JoinToken. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.

# Required Parameters
- `attendeeId`: The Amazon Chime SDK attendee ID.
- `meetingId`: The Amazon Chime SDK meeting ID.

"""
DeleteAttendee(attendeeId, meetingId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/meetings/$(meetingId)/attendees/$(attendeeId)"; aws=aws)
DeleteAttendee(attendeeId, meetingId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/meetings/$(meetingId)/attendees/$(attendeeId)", args; aws=aws)

"""
    DeleteEventsConfiguration()

Deletes the events configuration that allows a bot to receive outgoing events.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `botId`: The bot ID.

"""
DeleteEventsConfiguration(accountId, botId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/accounts/$(accountId)/bots/$(botId)/events-configuration"; aws=aws)
DeleteEventsConfiguration(accountId, botId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/accounts/$(accountId)/bots/$(botId)/events-configuration", args; aws=aws)

"""
    DeleteMeeting()

Deletes the specified Amazon Chime SDK meeting. When a meeting is deleted, its attendees are also deleted and clients can no longer join it. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.

# Required Parameters
- `meetingId`: The Amazon Chime SDK meeting ID.

"""
DeleteMeeting(meetingId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/meetings/$(meetingId)"; aws=aws)
DeleteMeeting(meetingId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/meetings/$(meetingId)", args; aws=aws)

"""
    DeletePhoneNumber()

Moves the specified phone number into the Deletion queue. A phone number must be disassociated from any users or Amazon Chime Voice Connectors before it can be deleted. Deleted phone numbers remain in the Deletion queue for 7 days before they are deleted permanently.

# Required Parameters
- `phoneNumberId`: The phone number ID.

"""
DeletePhoneNumber(phoneNumberId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/phone-numbers/$(phoneNumberId)"; aws=aws)
DeletePhoneNumber(phoneNumberId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/phone-numbers/$(phoneNumberId)", args; aws=aws)

"""
    DeleteProxySession()

Deletes the specified proxy session from the specified Amazon Chime Voice Connector.

# Required Parameters
- `proxySessionId`: The proxy session ID.
- `voiceConnectorId`: The Amazon Chime voice connector ID.

"""
DeleteProxySession(proxySessionId, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)"; aws=aws)
DeleteProxySession(proxySessionId, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)", args; aws=aws)

"""
    DeleteRoom()

Deletes a chat room in an Amazon Chime Enterprise account.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `roomId`: The chat room ID.

"""
DeleteRoom(accountId, roomId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/accounts/$(accountId)/rooms/$(roomId)"; aws=aws)
DeleteRoom(accountId, roomId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/accounts/$(accountId)/rooms/$(roomId)", args; aws=aws)

"""
    DeleteRoomMembership()

Removes a member from a chat room in an Amazon Chime Enterprise account.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `memberId`: The member ID (user ID or bot ID).
- `roomId`: The room ID.

"""
DeleteRoomMembership(accountId, memberId, roomId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/accounts/$(accountId)/rooms/$(roomId)/memberships/$(memberId)"; aws=aws)
DeleteRoomMembership(accountId, memberId, roomId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/accounts/$(accountId)/rooms/$(roomId)/memberships/$(memberId)", args; aws=aws)

"""
    DeleteVoiceConnector()

Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the Amazon Chime Voice Connector must be disassociated from it before it can be deleted.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
DeleteVoiceConnector(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)"; aws=aws)
DeleteVoiceConnector(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)", args; aws=aws)

"""
    DeleteVoiceConnectorEmergencyCallingConfiguration()

Deletes the emergency calling configuration details from the specified Amazon Chime Voice Connector.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
DeleteVoiceConnectorEmergencyCallingConfiguration(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration"; aws=aws)
DeleteVoiceConnectorEmergencyCallingConfiguration(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration", args; aws=aws)

"""
    DeleteVoiceConnectorGroup()

Deletes the specified Amazon Chime Voice Connector group. Any VoiceConnectorItems and phone numbers associated with the group must be removed before it can be deleted.

# Required Parameters
- `voiceConnectorGroupId`: The Amazon Chime Voice Connector group ID.

"""
DeleteVoiceConnectorGroup(voiceConnectorGroupId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connector-groups/$(voiceConnectorGroupId)"; aws=aws)
DeleteVoiceConnectorGroup(voiceConnectorGroupId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connector-groups/$(voiceConnectorGroupId)", args; aws=aws)

"""
    DeleteVoiceConnectorOrigination()

Deletes the origination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the origination settings. 

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
DeleteVoiceConnectorOrigination(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)/origination"; aws=aws)
DeleteVoiceConnectorOrigination(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)/origination", args; aws=aws)

"""
    DeleteVoiceConnectorProxy()

Deletes the proxy configuration from the specified Amazon Chime Voice Connector.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
DeleteVoiceConnectorProxy(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy"; aws=aws)
DeleteVoiceConnectorProxy(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy", args; aws=aws)

"""
    DeleteVoiceConnectorStreamingConfiguration()

Deletes the streaming configuration for the specified Amazon Chime Voice Connector.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
DeleteVoiceConnectorStreamingConfiguration(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)/streaming-configuration"; aws=aws)
DeleteVoiceConnectorStreamingConfiguration(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)/streaming-configuration", args; aws=aws)

"""
    DeleteVoiceConnectorTermination()

Deletes the termination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the termination settings. 

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
DeleteVoiceConnectorTermination(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)/termination"; aws=aws)
DeleteVoiceConnectorTermination(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("DELETE", "/voice-connectors/$(voiceConnectorId)/termination", args; aws=aws)

"""
    DeleteVoiceConnectorTerminationCredentials()

Deletes the specified SIP credentials used by your equipment to authenticate during call termination.

# Required Parameters
- `Usernames`: The RFC2617 compliant username associated with the SIP credentials, in US-ASCII format.
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
DeleteVoiceConnectorTerminationCredentials(Usernames, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors/$(voiceConnectorId)/termination/credentials?operation=delete", Dict{String, Any}("Usernames"=>Usernames))
DeleteVoiceConnectorTerminationCredentials(Usernames, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors/$(voiceConnectorId)/termination/credentials?operation=delete", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Usernames"=>Usernames), args)); aws=aws)

"""
    DisassociatePhoneNumberFromUser()

Disassociates the primary provisioned phone number from the specified Amazon Chime user.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `userId`: The user ID.

"""
DisassociatePhoneNumberFromUser(accountId, userId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users/$(userId)?operation=disassociate-phone-number"; aws=aws)
DisassociatePhoneNumberFromUser(accountId, userId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users/$(userId)?operation=disassociate-phone-number", args; aws=aws)

"""
    DisassociatePhoneNumbersFromVoiceConnector()

Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.

# Required Parameters
- `E164PhoneNumbers`: List of phone numbers, in E.164 format.
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
DisassociatePhoneNumbersFromVoiceConnector(E164PhoneNumbers, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors/$(voiceConnectorId)?operation=disassociate-phone-numbers", Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers))
DisassociatePhoneNumbersFromVoiceConnector(E164PhoneNumbers, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors/$(voiceConnectorId)?operation=disassociate-phone-numbers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers), args)); aws=aws)

"""
    DisassociatePhoneNumbersFromVoiceConnectorGroup()

Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.

# Required Parameters
- `E164PhoneNumbers`: List of phone numbers, in E.164 format.
- `voiceConnectorGroupId`: The Amazon Chime Voice Connector group ID.

"""
DisassociatePhoneNumbersFromVoiceConnectorGroup(E164PhoneNumbers, voiceConnectorGroupId; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connector-groups/$(voiceConnectorGroupId)?operation=disassociate-phone-numbers", Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers))
DisassociatePhoneNumbersFromVoiceConnectorGroup(E164PhoneNumbers, voiceConnectorGroupId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connector-groups/$(voiceConnectorGroupId)?operation=disassociate-phone-numbers", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("E164PhoneNumbers"=>E164PhoneNumbers), args)); aws=aws)

"""
    DisassociateSigninDelegateGroupsFromAccount()

Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.

# Required Parameters
- `GroupNames`: The sign-in delegate group names.
- `accountId`: The Amazon Chime account ID.

"""
DisassociateSigninDelegateGroupsFromAccount(GroupNames, accountId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)?operation=disassociate-signin-delegate-groups", Dict{String, Any}("GroupNames"=>GroupNames))
DisassociateSigninDelegateGroupsFromAccount(GroupNames, accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)?operation=disassociate-signin-delegate-groups", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("GroupNames"=>GroupNames), args)); aws=aws)

"""
    GetAccount()

Retrieves details for the specified Amazon Chime account, such as account type and supported licenses.

# Required Parameters
- `accountId`: The Amazon Chime account ID.

"""
GetAccount(accountId; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)"; aws=aws)
GetAccount(accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)", args; aws=aws)

"""
    GetAccountSettings()

Retrieves account settings for the specified Amazon Chime account ID, such as remote control and dial out settings. For more information about these settings, see Use the Policies Page in the Amazon Chime Administration Guide.

# Required Parameters
- `accountId`: The Amazon Chime account ID.

"""
GetAccountSettings(accountId; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/settings"; aws=aws)
GetAccountSettings(accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/settings", args; aws=aws)

"""
    GetAttendee()

Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.

# Required Parameters
- `attendeeId`: The Amazon Chime SDK attendee ID.
- `meetingId`: The Amazon Chime SDK meeting ID.

"""
GetAttendee(attendeeId, meetingId; aws::AWSConfig=AWSConfig()) = chime("GET", "/meetings/$(meetingId)/attendees/$(attendeeId)"; aws=aws)
GetAttendee(attendeeId, meetingId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/meetings/$(meetingId)/attendees/$(attendeeId)", args; aws=aws)

"""
    GetBot()

Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `botId`: The bot ID.

"""
GetBot(accountId, botId; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/bots/$(botId)"; aws=aws)
GetBot(accountId, botId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/bots/$(botId)", args; aws=aws)

"""
    GetEventsConfiguration()

Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN. 

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `botId`: The bot ID.

"""
GetEventsConfiguration(accountId, botId; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/bots/$(botId)/events-configuration"; aws=aws)
GetEventsConfiguration(accountId, botId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/bots/$(botId)/events-configuration", args; aws=aws)

"""
    GetGlobalSettings()

Retrieves global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.

"""
GetGlobalSettings(; aws::AWSConfig=AWSConfig()) = chime("GET", "/settings"; aws=aws)
GetGlobalSettings(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/settings", args; aws=aws)

"""
    GetMeeting()

Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.

# Required Parameters
- `meetingId`: The Amazon Chime SDK meeting ID.

"""
GetMeeting(meetingId; aws::AWSConfig=AWSConfig()) = chime("GET", "/meetings/$(meetingId)"; aws=aws)
GetMeeting(meetingId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/meetings/$(meetingId)", args; aws=aws)

"""
    GetPhoneNumber()

Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.

# Required Parameters
- `phoneNumberId`: The phone number ID.

"""
GetPhoneNumber(phoneNumberId; aws::AWSConfig=AWSConfig()) = chime("GET", "/phone-numbers/$(phoneNumberId)"; aws=aws)
GetPhoneNumber(phoneNumberId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/phone-numbers/$(phoneNumberId)", args; aws=aws)

"""
    GetPhoneNumberOrder()

Retrieves details for the specified phone number order, such as order creation timestamp, phone numbers in E.164 format, product type, and order status.

# Required Parameters
- `phoneNumberOrderId`: The ID for the phone number order.

"""
GetPhoneNumberOrder(phoneNumberOrderId; aws::AWSConfig=AWSConfig()) = chime("GET", "/phone-number-orders/$(phoneNumberOrderId)"; aws=aws)
GetPhoneNumberOrder(phoneNumberOrderId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/phone-number-orders/$(phoneNumberOrderId)", args; aws=aws)

"""
    GetPhoneNumberSettings()

Retrieves the phone number settings for the administrator's AWS account, such as the default outbound calling name.

"""
GetPhoneNumberSettings(; aws::AWSConfig=AWSConfig()) = chime("GET", "/settings/phone-number"; aws=aws)
GetPhoneNumberSettings(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/settings/phone-number", args; aws=aws)

"""
    GetProxySession()

Gets the specified proxy session details for the specified Amazon Chime Voice Connector.

# Required Parameters
- `proxySessionId`: The proxy session ID.
- `voiceConnectorId`: The Amazon Chime voice connector ID.

"""
GetProxySession(proxySessionId, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)"; aws=aws)
GetProxySession(proxySessionId, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)", args; aws=aws)

"""
    GetRetentionSettings()

Gets the retention settings for the specified Amazon Chime Enterprise account. For more information about retention settings, see Managing Chat Retention Policies in the Amazon Chime Administration Guide.

# Required Parameters
- `accountId`: The Amazon Chime account ID.

"""
GetRetentionSettings(accountId; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/retention-settings"; aws=aws)
GetRetentionSettings(accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/retention-settings", args; aws=aws)

"""
    GetRoom()

Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `roomId`: The room ID.

"""
GetRoom(accountId, roomId; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/rooms/$(roomId)"; aws=aws)
GetRoom(accountId, roomId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/rooms/$(roomId)", args; aws=aws)

"""
    GetUser()

Retrieves details for the specified user ID, such as primary email address, license type, and personal meeting PIN. To retrieve user details with an email address instead of a user ID, use the ListUsers action, and then filter by email address.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `userId`: The user ID.

"""
GetUser(accountId, userId; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/users/$(userId)"; aws=aws)
GetUser(accountId, userId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/users/$(userId)", args; aws=aws)

"""
    GetUserSettings()

Retrieves settings for the specified user ID, such as any associated phone number settings.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `userId`: The user ID.

"""
GetUserSettings(accountId, userId; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/users/$(userId)/settings"; aws=aws)
GetUserSettings(accountId, userId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/users/$(userId)/settings", args; aws=aws)

"""
    GetVoiceConnector()

Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps, name, outbound host, and encryption requirements.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
GetVoiceConnector(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)"; aws=aws)
GetVoiceConnector(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)", args; aws=aws)

"""
    GetVoiceConnectorEmergencyCallingConfiguration()

Gets the emergency calling configuration details for the specified Amazon Chime Voice Connector.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
GetVoiceConnectorEmergencyCallingConfiguration(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration"; aws=aws)
GetVoiceConnectorEmergencyCallingConfiguration(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration", args; aws=aws)

"""
    GetVoiceConnectorGroup()

Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps, name, and associated VoiceConnectorItems.

# Required Parameters
- `voiceConnectorGroupId`: The Amazon Chime Voice Connector group ID.

"""
GetVoiceConnectorGroup(voiceConnectorGroupId; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connector-groups/$(voiceConnectorGroupId)"; aws=aws)
GetVoiceConnectorGroup(voiceConnectorGroupId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connector-groups/$(voiceConnectorGroupId)", args; aws=aws)

"""
    GetVoiceConnectorLoggingConfiguration()

Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
GetVoiceConnectorLoggingConfiguration(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/logging-configuration"; aws=aws)
GetVoiceConnectorLoggingConfiguration(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/logging-configuration", args; aws=aws)

"""
    GetVoiceConnectorOrigination()

Retrieves origination setting details for the specified Amazon Chime Voice Connector.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
GetVoiceConnectorOrigination(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/origination"; aws=aws)
GetVoiceConnectorOrigination(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/origination", args; aws=aws)

"""
    GetVoiceConnectorProxy()

Gets the proxy configuration details for the specified Amazon Chime Voice Connector.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime voice connector ID.

"""
GetVoiceConnectorProxy(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy"; aws=aws)
GetVoiceConnectorProxy(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy", args; aws=aws)

"""
    GetVoiceConnectorStreamingConfiguration()

Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows the retention period, in hours, for the Amazon Kinesis data.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
GetVoiceConnectorStreamingConfiguration(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/streaming-configuration"; aws=aws)
GetVoiceConnectorStreamingConfiguration(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/streaming-configuration", args; aws=aws)

"""
    GetVoiceConnectorTermination()

Retrieves termination setting details for the specified Amazon Chime Voice Connector.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
GetVoiceConnectorTermination(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/termination"; aws=aws)
GetVoiceConnectorTermination(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/termination", args; aws=aws)

"""
    GetVoiceConnectorTerminationHealth()

Retrieves information about the last time a SIP OPTIONS ping was received from your SIP infrastructure for the specified Amazon Chime Voice Connector.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
GetVoiceConnectorTerminationHealth(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/termination/health"; aws=aws)
GetVoiceConnectorTerminationHealth(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/termination/health", args; aws=aws)

"""
    InviteUsers()

Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime Team account. Only Team account types are currently supported for this action. 

# Required Parameters
- `UserEmailList`: The user email addresses to which to send the email invitation.
- `accountId`: The Amazon Chime account ID.

# Optional Parameters
- `UserType`: The user type.
"""
InviteUsers(UserEmailList, accountId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users?operation=add", Dict{String, Any}("UserEmailList"=>UserEmailList))
InviteUsers(UserEmailList, accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users?operation=add", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UserEmailList"=>UserEmailList), args)); aws=aws)

"""
    ListAccounts()

Lists the Amazon Chime accounts under the administrator's AWS account. You can filter accounts by account name prefix. To find out which Amazon Chime account a user belongs to, you can filter by the user's email address, which returns one account result.

# Optional Parameters
- `max-results`: The maximum number of results to return in a single call. Defaults to 100.
- `name`: Amazon Chime account name prefix with which to filter results.
- `next-token`: The token to use to retrieve the next page of results.
- `user-email`: User email address with which to filter results.
"""
ListAccounts(; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts"; aws=aws)
ListAccounts(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts", args; aws=aws)

"""
    ListAttendeeTags()

Lists the tags applied to an Amazon Chime SDK attendee resource.

# Required Parameters
- `attendeeId`: The Amazon Chime SDK attendee ID.
- `meetingId`: The Amazon Chime SDK meeting ID.

"""
ListAttendeeTags(attendeeId, meetingId; aws::AWSConfig=AWSConfig()) = chime("GET", "/meetings/$(meetingId)/attendees/$(attendeeId)/tags"; aws=aws)
ListAttendeeTags(attendeeId, meetingId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/meetings/$(meetingId)/attendees/$(attendeeId)/tags", args; aws=aws)

"""
    ListAttendees()

Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.

# Required Parameters
- `meetingId`: The Amazon Chime SDK meeting ID.

# Optional Parameters
- `max-results`: The maximum number of results to return in a single call.
- `next-token`: The token to use to retrieve the next page of results.
"""
ListAttendees(meetingId; aws::AWSConfig=AWSConfig()) = chime("GET", "/meetings/$(meetingId)/attendees"; aws=aws)
ListAttendees(meetingId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/meetings/$(meetingId)/attendees", args; aws=aws)

"""
    ListBots()

Lists the bots associated with the administrator's Amazon Chime Enterprise account ID.

# Required Parameters
- `accountId`: The Amazon Chime account ID.

# Optional Parameters
- `max-results`: The maximum number of results to return in a single call. The default is 10.
- `next-token`: The token to use to retrieve the next page of results.
"""
ListBots(accountId; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/bots"; aws=aws)
ListBots(accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/bots", args; aws=aws)

"""
    ListMeetingTags()

Lists the tags applied to an Amazon Chime SDK meeting resource.

# Required Parameters
- `meetingId`: The Amazon Chime SDK meeting ID.

"""
ListMeetingTags(meetingId; aws::AWSConfig=AWSConfig()) = chime("GET", "/meetings/$(meetingId)/tags"; aws=aws)
ListMeetingTags(meetingId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/meetings/$(meetingId)/tags", args; aws=aws)

"""
    ListMeetings()

Lists up to 100 active Amazon Chime SDK meetings. For more information about the Amazon Chime SDK, see Using the Amazon Chime SDK in the Amazon Chime Developer Guide.

# Optional Parameters
- `max-results`: The maximum number of results to return in a single call.
- `next-token`: The token to use to retrieve the next page of results.
"""
ListMeetings(; aws::AWSConfig=AWSConfig()) = chime("GET", "/meetings"; aws=aws)
ListMeetings(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/meetings", args; aws=aws)

"""
    ListPhoneNumberOrders()

Lists the phone number orders for the administrator's Amazon Chime account.

# Optional Parameters
- `max-results`: The maximum number of results to return in a single call.
- `next-token`: The token to use to retrieve the next page of results.
"""
ListPhoneNumberOrders(; aws::AWSConfig=AWSConfig()) = chime("GET", "/phone-number-orders"; aws=aws)
ListPhoneNumberOrders(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/phone-number-orders", args; aws=aws)

"""
    ListPhoneNumbers()

Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.

# Optional Parameters
- `filter-name`: The filter to use to limit the number of results.
- `filter-value`: The value to use for the filter.
- `max-results`: The maximum number of results to return in a single call.
- `next-token`: The token to use to retrieve the next page of results.
- `product-type`: The phone number product type.
- `status`: The phone number status.
"""
ListPhoneNumbers(; aws::AWSConfig=AWSConfig()) = chime("GET", "/phone-numbers"; aws=aws)
ListPhoneNumbers(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/phone-numbers", args; aws=aws)

"""
    ListProxySessions()

Lists the proxy sessions for the specified Amazon Chime Voice Connector.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime voice connector ID.

# Optional Parameters
- `max-results`: The maximum number of results to return in a single call.
- `next-token`: The token to use to retrieve the next page of results.
- `status`: The proxy session status.
"""
ListProxySessions(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/proxy-sessions"; aws=aws)
ListProxySessions(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/proxy-sessions", args; aws=aws)

"""
    ListRoomMemberships()

Lists the membership details for the specified room in an Amazon Chime Enterprise account, such as the members' IDs, email addresses, and names.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `roomId`: The room ID.

# Optional Parameters
- `max-results`: The maximum number of results to return in a single call.
- `next-token`: The token to use to retrieve the next page of results.
"""
ListRoomMemberships(accountId, roomId; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/rooms/$(roomId)/memberships"; aws=aws)
ListRoomMemberships(accountId, roomId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/rooms/$(roomId)/memberships", args; aws=aws)

"""
    ListRooms()

Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.

# Required Parameters
- `accountId`: The Amazon Chime account ID.

# Optional Parameters
- `max-results`: The maximum number of results to return in a single call.
- `member-id`: The member ID (user ID or bot ID).
- `next-token`: The token to use to retrieve the next page of results.
"""
ListRooms(accountId; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/rooms"; aws=aws)
ListRooms(accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/rooms", args; aws=aws)

"""
    ListTagsForResource()

Lists the tags applied to an Amazon Chime SDK meeting resource.

# Required Parameters
- `arn`: The resource ARN.

"""
ListTagsForResource(arn; aws::AWSConfig=AWSConfig()) = chime("GET", "/tags", Dict{String, Any}("arn"=>arn))
ListTagsForResource(arn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/tags", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("arn"=>arn), args)); aws=aws)

"""
    ListUsers()

Lists the users that belong to the specified Amazon Chime account. You can specify an email address to list only the user that the email address belongs to.

# Required Parameters
- `accountId`: The Amazon Chime account ID.

# Optional Parameters
- `max-results`: The maximum number of results to return in a single call. Defaults to 100.
- `next-token`: The token to use to retrieve the next page of results.
- `user-email`: Optional. The user email address used to filter results. Maximum 1.
- `user-type`: The user type.
"""
ListUsers(accountId; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/users"; aws=aws)
ListUsers(accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/accounts/$(accountId)/users", args; aws=aws)

"""
    ListVoiceConnectorGroups()

Lists the Amazon Chime Voice Connector groups for the administrator's AWS account.

# Optional Parameters
- `max-results`: The maximum number of results to return in a single call.
- `next-token`: The token to use to retrieve the next page of results.
"""
ListVoiceConnectorGroups(; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connector-groups"; aws=aws)
ListVoiceConnectorGroups(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connector-groups", args; aws=aws)

"""
    ListVoiceConnectorTerminationCredentials()

Lists the SIP credentials for the specified Amazon Chime Voice Connector.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
ListVoiceConnectorTerminationCredentials(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/termination/credentials"; aws=aws)
ListVoiceConnectorTerminationCredentials(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors/$(voiceConnectorId)/termination/credentials", args; aws=aws)

"""
    ListVoiceConnectors()

Lists the Amazon Chime Voice Connectors for the administrator's AWS account.

# Optional Parameters
- `max-results`: The maximum number of results to return in a single call.
- `next-token`: The token to use to retrieve the next page of results.
"""
ListVoiceConnectors(; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors"; aws=aws)
ListVoiceConnectors(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/voice-connectors", args; aws=aws)

"""
    LogoutUser()

Logs out the specified user from all of the devices they are currently logged into.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `userId`: The user ID.

"""
LogoutUser(accountId, userId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users/$(userId)?operation=logout"; aws=aws)
LogoutUser(accountId, userId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users/$(userId)?operation=logout", args; aws=aws)

"""
    PutEventsConfiguration()

Creates an events configuration that allows a bot to receive outgoing events sent by Amazon Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information, see Bot.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `botId`: The bot ID.

# Optional Parameters
- `LambdaFunctionArn`: Lambda function ARN that allows the bot to receive outgoing events.
- `OutboundEventsHTTPSEndpoint`: HTTPS endpoint that allows the bot to receive outgoing events.
"""
PutEventsConfiguration(accountId, botId; aws::AWSConfig=AWSConfig()) = chime("PUT", "/accounts/$(accountId)/bots/$(botId)/events-configuration"; aws=aws)
PutEventsConfiguration(accountId, botId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/accounts/$(accountId)/bots/$(botId)/events-configuration", args; aws=aws)

"""
    PutRetentionSettings()

Puts retention settings for the specified Amazon Chime Enterprise account. We recommend using AWS CloudTrail to monitor usage of this API for your account. For more information, see Logging Amazon Chime API Calls with AWS CloudTrail in the Amazon Chime Administration Guide. To turn off existing retention settings, remove the number of days from the corresponding RetentionDays field in the RetentionSettings object. For more information about retention settings, see Managing Chat Retention Policies in the Amazon Chime Administration Guide.

# Required Parameters
- `RetentionSettings`: The retention settings.
- `accountId`: The Amazon Chime account ID.

"""
PutRetentionSettings(RetentionSettings, accountId; aws::AWSConfig=AWSConfig()) = chime("PUT", "/accounts/$(accountId)/retention-settings", Dict{String, Any}("RetentionSettings"=>RetentionSettings))
PutRetentionSettings(RetentionSettings, accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/accounts/$(accountId)/retention-settings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("RetentionSettings"=>RetentionSettings), args)); aws=aws)

"""
    PutVoiceConnectorEmergencyCallingConfiguration()

Puts emergency calling configuration details to the specified Amazon Chime Voice Connector, such as emergency phone numbers and calling countries. Origination and termination settings must be enabled for the Amazon Chime Voice Connector before emergency calling can be configured.

# Required Parameters
- `EmergencyCallingConfiguration`: The emergency calling configuration details.
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
PutVoiceConnectorEmergencyCallingConfiguration(EmergencyCallingConfiguration, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration", Dict{String, Any}("EmergencyCallingConfiguration"=>EmergencyCallingConfiguration))
PutVoiceConnectorEmergencyCallingConfiguration(EmergencyCallingConfiguration, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EmergencyCallingConfiguration"=>EmergencyCallingConfiguration), args)); aws=aws)

"""
    PutVoiceConnectorLoggingConfiguration()

Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.

# Required Parameters
- `LoggingConfiguration`: The logging configuration details to add.
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
PutVoiceConnectorLoggingConfiguration(LoggingConfiguration, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)/logging-configuration", Dict{String, Any}("LoggingConfiguration"=>LoggingConfiguration))
PutVoiceConnectorLoggingConfiguration(LoggingConfiguration, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)/logging-configuration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("LoggingConfiguration"=>LoggingConfiguration), args)); aws=aws)

"""
    PutVoiceConnectorOrigination()

Adds origination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off origination settings. 

# Required Parameters
- `Origination`: The origination setting details to add.
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
PutVoiceConnectorOrigination(Origination, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)/origination", Dict{String, Any}("Origination"=>Origination))
PutVoiceConnectorOrigination(Origination, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)/origination", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Origination"=>Origination), args)); aws=aws)

"""
    PutVoiceConnectorProxy()

Puts the specified proxy configuration to the specified Amazon Chime Voice Connector.

# Required Parameters
- `DefaultSessionExpiryMinutes`: The default number of minutes allowed for proxy sessions.
- `PhoneNumberPoolCountries`: The countries for proxy phone numbers to be selected from.
- `voiceConnectorId`: The Amazon Chime voice connector ID.

# Optional Parameters
- `Disabled`: When true, stops proxy sessions from being created on the specified Amazon Chime Voice Connector.
- `FallBackPhoneNumber`: The phone number to route calls to after a proxy session expires.
"""
PutVoiceConnectorProxy(DefaultSessionExpiryMinutes, PhoneNumberPoolCountries, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy", Dict{String, Any}("DefaultSessionExpiryMinutes"=>DefaultSessionExpiryMinutes, "PhoneNumberPoolCountries"=>PhoneNumberPoolCountries))
PutVoiceConnectorProxy(DefaultSessionExpiryMinutes, PhoneNumberPoolCountries, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DefaultSessionExpiryMinutes"=>DefaultSessionExpiryMinutes, "PhoneNumberPoolCountries"=>PhoneNumberPoolCountries), args)); aws=aws)

"""
    PutVoiceConnectorStreamingConfiguration()

Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming configuration specifies whether media streaming is enabled for sending to Amazon Kinesis. It also sets the retention period, in hours, for the Amazon Kinesis data.

# Required Parameters
- `StreamingConfiguration`: The streaming configuration details to add.
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
PutVoiceConnectorStreamingConfiguration(StreamingConfiguration, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)/streaming-configuration", Dict{String, Any}("StreamingConfiguration"=>StreamingConfiguration))
PutVoiceConnectorStreamingConfiguration(StreamingConfiguration, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)/streaming-configuration", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("StreamingConfiguration"=>StreamingConfiguration), args)); aws=aws)

"""
    PutVoiceConnectorTermination()

Adds termination settings for the specified Amazon Chime Voice Connector.  If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off termination settings. 

# Required Parameters
- `Termination`: The termination setting details to add.
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
PutVoiceConnectorTermination(Termination, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)/termination", Dict{String, Any}("Termination"=>Termination))
PutVoiceConnectorTermination(Termination, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)/termination", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Termination"=>Termination), args)); aws=aws)

"""
    PutVoiceConnectorTerminationCredentials()

Adds termination SIP credentials for the specified Amazon Chime Voice Connector.

# Required Parameters
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

# Optional Parameters
- `Credentials`: The termination SIP credentials.
"""
PutVoiceConnectorTerminationCredentials(voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors/$(voiceConnectorId)/termination/credentials?operation=put"; aws=aws)
PutVoiceConnectorTerminationCredentials(voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors/$(voiceConnectorId)/termination/credentials?operation=put", args; aws=aws)

"""
    RedactConversationMessage()

Redacts the specified message from the specified Amazon Chime conversation.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `conversationId`: The conversation ID.
- `messageId`: The message ID.

"""
RedactConversationMessage(accountId, conversationId, messageId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/conversations/$(conversationId)/messages/$(messageId)?operation=redact"; aws=aws)
RedactConversationMessage(accountId, conversationId, messageId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/conversations/$(conversationId)/messages/$(messageId)?operation=redact", args; aws=aws)

"""
    RedactRoomMessage()

Redacts the specified message from the specified Amazon Chime chat room.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `messageId`: The message ID.
- `roomId`: The room ID.

"""
RedactRoomMessage(accountId, messageId, roomId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/rooms/$(roomId)/messages/$(messageId)?operation=redact"; aws=aws)
RedactRoomMessage(accountId, messageId, roomId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/rooms/$(roomId)/messages/$(messageId)?operation=redact", args; aws=aws)

"""
    RegenerateSecurityToken()

Regenerates the security token for a bot.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `botId`: The bot ID.

"""
RegenerateSecurityToken(accountId, botId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/bots/$(botId)?operation=regenerate-security-token"; aws=aws)
RegenerateSecurityToken(accountId, botId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/bots/$(botId)?operation=regenerate-security-token", args; aws=aws)

"""
    ResetPersonalPIN()

Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns the User object with the updated personal meeting PIN.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `userId`: The user ID.

"""
ResetPersonalPIN(accountId, userId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users/$(userId)?operation=reset-personal-pin"; aws=aws)
ResetPersonalPIN(accountId, userId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users/$(userId)?operation=reset-personal-pin", args; aws=aws)

"""
    RestorePhoneNumber()

Moves a phone number from the Deletion queue back into the phone number Inventory.

# Required Parameters
- `phoneNumberId`: The phone number.

"""
RestorePhoneNumber(phoneNumberId; aws::AWSConfig=AWSConfig()) = chime("POST", "/phone-numbers/$(phoneNumberId)?operation=restore"; aws=aws)
RestorePhoneNumber(phoneNumberId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/phone-numbers/$(phoneNumberId)?operation=restore", args; aws=aws)

"""
    SearchAvailablePhoneNumbers()

Searches phone numbers that can be ordered.

# Optional Parameters
- `area-code`: The area code used to filter results.
- `city`: The city used to filter results.
- `country`: The country used to filter results.
- `max-results`: The maximum number of results to return in a single call.
- `next-token`: The token to use to retrieve the next page of results.
- `state`: The state used to filter results.
- `toll-free-prefix`: The toll-free prefix that you use to filter results.
"""
SearchAvailablePhoneNumbers(; aws::AWSConfig=AWSConfig()) = chime("GET", "/search?type=phone-numbers"; aws=aws)
SearchAvailablePhoneNumbers(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = chime("GET", "/search?type=phone-numbers", args; aws=aws)

"""
    TagAttendee()

Applies the specified tags to the specified Amazon Chime SDK attendee.

# Required Parameters
- `Tags`: The tag key-value pairs.
- `attendeeId`: The Amazon Chime SDK attendee ID.
- `meetingId`: The Amazon Chime SDK meeting ID.

"""
TagAttendee(Tags, attendeeId, meetingId; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings/$(meetingId)/attendees/$(attendeeId)/tags?operation=add", Dict{String, Any}("Tags"=>Tags))
TagAttendee(Tags, attendeeId, meetingId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings/$(meetingId)/attendees/$(attendeeId)/tags?operation=add", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Tags"=>Tags), args)); aws=aws)

"""
    TagMeeting()

Applies the specified tags to the specified Amazon Chime SDK meeting.

# Required Parameters
- `Tags`: The tag key-value pairs.
- `meetingId`: The Amazon Chime SDK meeting ID.

"""
TagMeeting(Tags, meetingId; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings/$(meetingId)/tags?operation=add", Dict{String, Any}("Tags"=>Tags))
TagMeeting(Tags, meetingId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings/$(meetingId)/tags?operation=add", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Tags"=>Tags), args)); aws=aws)

"""
    TagResource()

Applies the specified tags to the specified Amazon Chime SDK meeting resource.

# Required Parameters
- `ResourceARN`: The resource ARN.
- `Tags`: The tag key-value pairs.

"""
TagResource(ResourceARN, Tags; aws::AWSConfig=AWSConfig()) = chime("POST", "/tags?operation=tag-resource", Dict{String, Any}("ResourceARN"=>ResourceARN, "Tags"=>Tags))
TagResource(ResourceARN, Tags, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/tags?operation=tag-resource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceARN"=>ResourceARN, "Tags"=>Tags), args)); aws=aws)

"""
    UntagAttendee()

Untags the specified tags from the specified Amazon Chime SDK attendee.

# Required Parameters
- `TagKeys`: The tag keys.
- `attendeeId`: The Amazon Chime SDK attendee ID.
- `meetingId`: The Amazon Chime SDK meeting ID.

"""
UntagAttendee(TagKeys, attendeeId, meetingId; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings/$(meetingId)/attendees/$(attendeeId)/tags?operation=delete", Dict{String, Any}("TagKeys"=>TagKeys))
UntagAttendee(TagKeys, attendeeId, meetingId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings/$(meetingId)/attendees/$(attendeeId)/tags?operation=delete", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TagKeys"=>TagKeys), args)); aws=aws)

"""
    UntagMeeting()

Untags the specified tags from the specified Amazon Chime SDK meeting.

# Required Parameters
- `TagKeys`: The tag keys.
- `meetingId`: The Amazon Chime SDK meeting ID.

"""
UntagMeeting(TagKeys, meetingId; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings/$(meetingId)/tags?operation=delete", Dict{String, Any}("TagKeys"=>TagKeys))
UntagMeeting(TagKeys, meetingId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/meetings/$(meetingId)/tags?operation=delete", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TagKeys"=>TagKeys), args)); aws=aws)

"""
    UntagResource()

Untags the specified tags from the specified Amazon Chime SDK meeting resource.

# Required Parameters
- `ResourceARN`: The resource ARN.
- `TagKeys`: The tag keys.

"""
UntagResource(ResourceARN, TagKeys; aws::AWSConfig=AWSConfig()) = chime("POST", "/tags?operation=untag-resource", Dict{String, Any}("ResourceARN"=>ResourceARN, "TagKeys"=>TagKeys))
UntagResource(ResourceARN, TagKeys, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/tags?operation=untag-resource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ResourceARN"=>ResourceARN, "TagKeys"=>TagKeys), args)); aws=aws)

"""
    UpdateAccount()

Updates account details for the specified Amazon Chime account. Currently, only account name updates are supported for this action.

# Required Parameters
- `accountId`: The Amazon Chime account ID.

# Optional Parameters
- `Name`: The new name for the specified Amazon Chime account.
"""
UpdateAccount(accountId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)"; aws=aws)
UpdateAccount(accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)", args; aws=aws)

"""
    UpdateAccountSettings()

Updates the settings for the specified Amazon Chime account. You can update settings for remote control of shared screens, or for the dial-out option. For more information about these settings, see Use the Policies Page in the Amazon Chime Administration Guide.

# Required Parameters
- `AccountSettings`: The Amazon Chime account settings to update.
- `accountId`: The Amazon Chime account ID.

"""
UpdateAccountSettings(AccountSettings, accountId; aws::AWSConfig=AWSConfig()) = chime("PUT", "/accounts/$(accountId)/settings", Dict{String, Any}("AccountSettings"=>AccountSettings))
UpdateAccountSettings(AccountSettings, accountId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/accounts/$(accountId)/settings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AccountSettings"=>AccountSettings), args)); aws=aws)

"""
    UpdateBot()

Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `botId`: The bot ID.

# Optional Parameters
- `Disabled`: When true, stops the specified bot from running in your account.
"""
UpdateBot(accountId, botId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/bots/$(botId)"; aws=aws)
UpdateBot(accountId, botId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/bots/$(botId)", args; aws=aws)

"""
    UpdateGlobalSettings()

Updates global settings for the administrator's AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.

# Required Parameters
- `BusinessCalling`: The Amazon Chime Business Calling settings.
- `VoiceConnector`: The Amazon Chime Voice Connector settings.

"""
UpdateGlobalSettings(BusinessCalling, VoiceConnector; aws::AWSConfig=AWSConfig()) = chime("PUT", "/settings", Dict{String, Any}("BusinessCalling"=>BusinessCalling, "VoiceConnector"=>VoiceConnector))
UpdateGlobalSettings(BusinessCalling, VoiceConnector, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/settings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("BusinessCalling"=>BusinessCalling, "VoiceConnector"=>VoiceConnector), args)); aws=aws)

"""
    UpdatePhoneNumber()

Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action. For toll-free numbers, you must use the Amazon Chime Voice Connector product type. Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.

# Required Parameters
- `phoneNumberId`: The phone number ID.

# Optional Parameters
- `CallingName`: The outbound calling name associated with the phone number.
- `ProductType`: The product type.
"""
UpdatePhoneNumber(phoneNumberId; aws::AWSConfig=AWSConfig()) = chime("POST", "/phone-numbers/$(phoneNumberId)"; aws=aws)
UpdatePhoneNumber(phoneNumberId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/phone-numbers/$(phoneNumberId)", args; aws=aws)

"""
    UpdatePhoneNumberSettings()

Updates the phone number settings for the administrator's AWS account, such as the default outbound calling name. You can update the default outbound calling name once every seven days. Outbound calling names can take up to 72 hours to update.

# Required Parameters
- `CallingName`: The default outbound calling name for the account.

"""
UpdatePhoneNumberSettings(CallingName; aws::AWSConfig=AWSConfig()) = chime("PUT", "/settings/phone-number", Dict{String, Any}("CallingName"=>CallingName))
UpdatePhoneNumberSettings(CallingName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/settings/phone-number", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("CallingName"=>CallingName), args)); aws=aws)

"""
    UpdateProxySession()

Updates the specified proxy session details, such as voice or SMS capabilities.

# Required Parameters
- `Capabilities`: The proxy session capabilities.
- `proxySessionId`: The proxy session ID.
- `voiceConnectorId`: The Amazon Chime voice connector ID.

# Optional Parameters
- `ExpiryMinutes`: The number of minutes allowed for the proxy session.
"""
UpdateProxySession(Capabilities, proxySessionId, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)", Dict{String, Any}("Capabilities"=>Capabilities))
UpdateProxySession(Capabilities, proxySessionId, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Capabilities"=>Capabilities), args)); aws=aws)

"""
    UpdateRoom()

Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `roomId`: The room ID.

# Optional Parameters
- `Name`: The room name.
"""
UpdateRoom(accountId, roomId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/rooms/$(roomId)"; aws=aws)
UpdateRoom(accountId, roomId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/rooms/$(roomId)", args; aws=aws)

"""
    UpdateRoomMembership()

Updates room membership details, such as the member role, for a room in an Amazon Chime Enterprise account. The member role designates whether the member is a chat room administrator or a general chat room member. The member role can be updated only for user IDs.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `memberId`: The member ID.
- `roomId`: The room ID.

# Optional Parameters
- `Role`: The role of the member.
"""
UpdateRoomMembership(accountId, memberId, roomId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/rooms/$(roomId)/memberships/$(memberId)"; aws=aws)
UpdateRoomMembership(accountId, memberId, roomId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/rooms/$(roomId)/memberships/$(memberId)", args; aws=aws)

"""
    UpdateUser()

Updates user details for a specified user ID. Currently, only LicenseType updates are supported for this action.

# Required Parameters
- `accountId`: The Amazon Chime account ID.
- `userId`: The user ID.

# Optional Parameters
- `AlexaForBusinessMetadata`: The Alexa for Business metadata.
- `LicenseType`: The user license type to update. This must be a supported license type for the Amazon Chime account that the user belongs to.
- `UserType`: The user type.
"""
UpdateUser(accountId, userId; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users/$(userId)"; aws=aws)
UpdateUser(accountId, userId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("POST", "/accounts/$(accountId)/users/$(userId)", args; aws=aws)

"""
    UpdateUserSettings()

Updates the settings for the specified user, such as phone number settings.

# Required Parameters
- `UserSettings`: The user settings to update.
- `accountId`: The Amazon Chime account ID.
- `userId`: The user ID.

"""
UpdateUserSettings(UserSettings, accountId, userId; aws::AWSConfig=AWSConfig()) = chime("PUT", "/accounts/$(accountId)/users/$(userId)/settings", Dict{String, Any}("UserSettings"=>UserSettings))
UpdateUserSettings(UserSettings, accountId, userId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/accounts/$(accountId)/users/$(userId)/settings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UserSettings"=>UserSettings), args)); aws=aws)

"""
    UpdateVoiceConnector()

Updates details for the specified Amazon Chime Voice Connector.

# Required Parameters
- `Name`: The name of the Amazon Chime Voice Connector.
- `RequireEncryption`: When enabled, requires encryption for the Amazon Chime Voice Connector.
- `voiceConnectorId`: The Amazon Chime Voice Connector ID.

"""
UpdateVoiceConnector(Name, RequireEncryption, voiceConnectorId; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)", Dict{String, Any}("Name"=>Name, "RequireEncryption"=>RequireEncryption))
UpdateVoiceConnector(Name, RequireEncryption, voiceConnectorId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connectors/$(voiceConnectorId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "RequireEncryption"=>RequireEncryption), args)); aws=aws)

"""
    UpdateVoiceConnectorGroup()

Updates details for the specified Amazon Chime Voice Connector group, such as the name and Amazon Chime Voice Connector priority ranking.

# Required Parameters
- `Name`: The name of the Amazon Chime Voice Connector group.
- `VoiceConnectorItems`: The VoiceConnectorItems to associate with the group.
- `voiceConnectorGroupId`: The Amazon Chime Voice Connector group ID.

"""
UpdateVoiceConnectorGroup(Name, VoiceConnectorItems, voiceConnectorGroupId; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connector-groups/$(voiceConnectorGroupId)", Dict{String, Any}("Name"=>Name, "VoiceConnectorItems"=>VoiceConnectorItems))
UpdateVoiceConnectorGroup(Name, VoiceConnectorItems, voiceConnectorGroupId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = chime("PUT", "/voice-connector-groups/$(voiceConnectorGroupId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "VoiceConnectorItems"=>VoiceConnectorItems), args)); aws=aws)
