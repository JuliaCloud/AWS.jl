# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: omics
using AWS.Compat
using AWS.UUIDs

"""
    batch_delete_read_set(ids, sequence_store_id)
    batch_delete_read_set(ids, sequence_store_id, params::Dict{String,<:Any})

Deletes one or more read sets.

# Arguments
- `ids`: The read sets' IDs.
- `sequence_store_id`: The read sets' sequence store ID.

"""
function batch_delete_read_set(
    ids, sequenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/readset/batch/delete",
        Dict{String,Any}("ids" => ids);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function batch_delete_read_set(
    ids,
    sequenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/readset/batch/delete",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("ids" => ids), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    cancel_annotation_import_job(job_id)
    cancel_annotation_import_job(job_id, params::Dict{String,<:Any})

Cancels an annotation import job.

# Arguments
- `job_id`: The job's ID.

"""
function cancel_annotation_import_job(
    jobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "DELETE",
        "/import/annotation/$(jobId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function cancel_annotation_import_job(
    jobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "DELETE",
        "/import/annotation/$(jobId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    cancel_run(id)
    cancel_run(id, params::Dict{String,<:Any})

Cancels a run.

# Arguments
- `id`: The run's ID.

"""
function cancel_run(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST", "/run/$(id)/cancel"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function cancel_run(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/run/$(id)/cancel",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    cancel_variant_import_job(job_id)
    cancel_variant_import_job(job_id, params::Dict{String,<:Any})

Cancels a variant import job.

# Arguments
- `job_id`: The job's ID.

"""
function cancel_variant_import_job(jobId; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "DELETE",
        "/import/variant/$(jobId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function cancel_variant_import_job(
    jobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "DELETE",
        "/import/variant/$(jobId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_annotation_store(store_format)
    create_annotation_store(store_format, params::Dict{String,<:Any})

Creates an annotation store.

# Arguments
- `store_format`: The annotation file format of the store.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: A description for the store.
- `"name"`: A name for the store.
- `"reference"`: The genome reference for the store's annotations.
- `"sseConfig"`: Server-side encryption (SSE) settings for the store.
- `"storeOptions"`: File parsing options for the annotation store.
- `"tags"`: Tags for the store.
"""
function create_annotation_store(
    storeFormat; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/annotationStore",
        Dict{String,Any}("storeFormat" => storeFormat);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_annotation_store(
    storeFormat,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/annotationStore",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("storeFormat" => storeFormat), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_reference_store(name)
    create_reference_store(name, params::Dict{String,<:Any})

Creates a reference store.

# Arguments
- `name`: A name for the store.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: To ensure that requests don't run multiple times, specify a unique token
  for each request.
- `"description"`: A description for the store.
- `"sseConfig"`: Server-side encryption (SSE) settings for the store.
- `"tags"`: Tags for the store.
"""
function create_reference_store(name; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST",
        "/referencestore",
        Dict{String,Any}("name" => name);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_reference_store(
    name, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/referencestore",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_run_group(request_id)
    create_run_group(request_id, params::Dict{String,<:Any})

Creates a run group.

# Arguments
- `request_id`: A request ID for the group.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxCpus"`: The maximum number of CPUs to use in the group.
- `"maxDuration"`: A max duration for the group.
- `"maxRuns"`: The maximum number of concurrent runs for the group.
- `"name"`: A name for the group.
- `"tags"`: Tags for the group.
"""
function create_run_group(requestId; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST",
        "/runGroup",
        Dict{String,Any}("requestId" => requestId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_run_group(
    requestId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/runGroup",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("requestId" => requestId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_sequence_store(name)
    create_sequence_store(name, params::Dict{String,<:Any})

Creates a sequence store.

# Arguments
- `name`: A name for the store.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: To ensure that requests don't run multiple times, specify a unique token
  for each request.
- `"description"`: A description for the store.
- `"sseConfig"`: Server-side encryption (SSE) settings for the store.
- `"tags"`: Tags for the store.
"""
function create_sequence_store(name; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST",
        "/sequencestore",
        Dict{String,Any}("name" => name);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_sequence_store(
    name, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/sequencestore",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_variant_store(reference)
    create_variant_store(reference, params::Dict{String,<:Any})

Creates a variant store.

# Arguments
- `reference`: The genome reference for the store's variants.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: A description for the store.
- `"name"`: A name for the store.
- `"sseConfig"`: Server-side encryption (SSE) settings for the store.
- `"tags"`: Tags for the store.
"""
function create_variant_store(reference; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST",
        "/variantStore",
        Dict{String,Any}("reference" => reference);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_variant_store(
    reference,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/variantStore",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("reference" => reference), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_workflow(request_id)
    create_workflow(request_id, params::Dict{String,<:Any})

Creates a workflow.

# Arguments
- `request_id`: A request ID for the workflow.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"definitionUri"`: The URI of a definition for the workflow.
- `"definitionZip"`: A ZIP archive for the workflow.
- `"description"`: A description for the workflow.
- `"engine"`: An engine for the workflow.
- `"main"`: The path of the main definition file for the workflow.
- `"name"`: A name for the workflow.
- `"parameterTemplate"`: A parameter template for the workflow.
- `"storageCapacity"`: A storage capacity for the workflow.
- `"tags"`: Tags for the workflow.
"""
function create_workflow(requestId; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST",
        "/workflow",
        Dict{String,Any}("requestId" => requestId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_workflow(
    requestId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/workflow",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("requestId" => requestId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_annotation_store(name)
    delete_annotation_store(name, params::Dict{String,<:Any})

Deletes an annotation store.

# Arguments
- `name`: The store's name.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"force"`: Whether to force deletion.
"""
function delete_annotation_store(name; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "DELETE",
        "/annotationStore/$(name)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_annotation_store(
    name, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "DELETE",
        "/annotationStore/$(name)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_reference(id, reference_store_id)
    delete_reference(id, reference_store_id, params::Dict{String,<:Any})

Deletes a genome reference.

# Arguments
- `id`: The reference's ID.
- `reference_store_id`: The reference's store ID.

"""
function delete_reference(
    id, referenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "DELETE",
        "/referencestore/$(referenceStoreId)/reference/$(id)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_reference(
    id,
    referenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "DELETE",
        "/referencestore/$(referenceStoreId)/reference/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_reference_store(id)
    delete_reference_store(id, params::Dict{String,<:Any})

Deletes a genome reference store.

# Arguments
- `id`: The store's ID.

"""
function delete_reference_store(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "DELETE",
        "/referencestore/$(id)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_reference_store(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "DELETE",
        "/referencestore/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_run(id)
    delete_run(id, params::Dict{String,<:Any})

Deletes a workflow run.

# Arguments
- `id`: The run's ID.

"""
function delete_run(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "DELETE", "/run/$(id)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function delete_run(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "DELETE",
        "/run/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_run_group(id)
    delete_run_group(id, params::Dict{String,<:Any})

Deletes a workflow run group.

# Arguments
- `id`: The run group's ID.

"""
function delete_run_group(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "DELETE", "/runGroup/$(id)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function delete_run_group(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "DELETE",
        "/runGroup/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_sequence_store(id)
    delete_sequence_store(id, params::Dict{String,<:Any})

Deletes a sequence store.

# Arguments
- `id`: The sequence store's ID.

"""
function delete_sequence_store(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "DELETE",
        "/sequencestore/$(id)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_sequence_store(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "DELETE",
        "/sequencestore/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_variant_store(name)
    delete_variant_store(name, params::Dict{String,<:Any})

Deletes a variant store.

# Arguments
- `name`: The store's name.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"force"`: Whether to force deletion.
"""
function delete_variant_store(name; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "DELETE",
        "/variantStore/$(name)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_variant_store(
    name, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "DELETE",
        "/variantStore/$(name)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_workflow(id)
    delete_workflow(id, params::Dict{String,<:Any})

Deletes a workflow.

# Arguments
- `id`: The workflow's ID.

"""
function delete_workflow(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "DELETE", "/workflow/$(id)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function delete_workflow(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "DELETE",
        "/workflow/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_annotation_import_job(job_id)
    get_annotation_import_job(job_id, params::Dict{String,<:Any})

Gets information about an annotation import job.

# Arguments
- `job_id`: The job's ID.

"""
function get_annotation_import_job(jobId; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "GET",
        "/import/annotation/$(jobId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_annotation_import_job(
    jobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/import/annotation/$(jobId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_annotation_store(name)
    get_annotation_store(name, params::Dict{String,<:Any})

Gets information about an annotation store.

# Arguments
- `name`: The store's name.

"""
function get_annotation_store(name; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "GET",
        "/annotationStore/$(name)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_annotation_store(
    name, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/annotationStore/$(name)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_read_set(id, part_number, sequence_store_id)
    get_read_set(id, part_number, sequence_store_id, params::Dict{String,<:Any})

Gets a file from a read set.

# Arguments
- `id`: The read set's ID.
- `part_number`: The part number to retrieve.
- `sequence_store_id`: The read set's sequence store ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"file"`: The file to retrieve.
"""
function get_read_set(
    id, partNumber, sequenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/sequencestore/$(sequenceStoreId)/readset/$(id)",
        Dict{String,Any}("partNumber" => partNumber);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_read_set(
    id,
    partNumber,
    sequenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "GET",
        "/sequencestore/$(sequenceStoreId)/readset/$(id)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("partNumber" => partNumber), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_read_set_activation_job(id, sequence_store_id)
    get_read_set_activation_job(id, sequence_store_id, params::Dict{String,<:Any})

Gets information about a read set activation job.

# Arguments
- `id`: The job's ID.
- `sequence_store_id`: The job's sequence store ID.

"""
function get_read_set_activation_job(
    id, sequenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/sequencestore/$(sequenceStoreId)/activationjob/$(id)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_read_set_activation_job(
    id,
    sequenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "GET",
        "/sequencestore/$(sequenceStoreId)/activationjob/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_read_set_export_job(id, sequence_store_id)
    get_read_set_export_job(id, sequence_store_id, params::Dict{String,<:Any})

Gets information about a read set export job.

# Arguments
- `id`: The job's ID.
- `sequence_store_id`: The job's sequence store ID.

"""
function get_read_set_export_job(
    id, sequenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/sequencestore/$(sequenceStoreId)/exportjob/$(id)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_read_set_export_job(
    id,
    sequenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "GET",
        "/sequencestore/$(sequenceStoreId)/exportjob/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_read_set_import_job(id, sequence_store_id)
    get_read_set_import_job(id, sequence_store_id, params::Dict{String,<:Any})

Gets information about a read set import job.

# Arguments
- `id`: The job's ID.
- `sequence_store_id`: The job's sequence store ID.

"""
function get_read_set_import_job(
    id, sequenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/sequencestore/$(sequenceStoreId)/importjob/$(id)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_read_set_import_job(
    id,
    sequenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "GET",
        "/sequencestore/$(sequenceStoreId)/importjob/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_read_set_metadata(id, sequence_store_id)
    get_read_set_metadata(id, sequence_store_id, params::Dict{String,<:Any})

Gets details about a read set.

# Arguments
- `id`: The read set's ID.
- `sequence_store_id`: The read set's sequence store ID.

"""
function get_read_set_metadata(
    id, sequenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/sequencestore/$(sequenceStoreId)/readset/$(id)/metadata";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_read_set_metadata(
    id,
    sequenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "GET",
        "/sequencestore/$(sequenceStoreId)/readset/$(id)/metadata",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_reference(id, part_number, reference_store_id)
    get_reference(id, part_number, reference_store_id, params::Dict{String,<:Any})

Gets a reference file.

# Arguments
- `id`: The reference's ID.
- `part_number`: The part number to retrieve.
- `reference_store_id`: The reference's store ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Range"`: The range to retrieve.
- `"file"`: The file to retrieve.
"""
function get_reference(
    id, partNumber, referenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/referencestore/$(referenceStoreId)/reference/$(id)",
        Dict{String,Any}("partNumber" => partNumber);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_reference(
    id,
    partNumber,
    referenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "GET",
        "/referencestore/$(referenceStoreId)/reference/$(id)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("partNumber" => partNumber), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_reference_import_job(id, reference_store_id)
    get_reference_import_job(id, reference_store_id, params::Dict{String,<:Any})

Gets information about a reference import job.

# Arguments
- `id`: The job's ID.
- `reference_store_id`: The job's reference store ID.

"""
function get_reference_import_job(
    id, referenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/referencestore/$(referenceStoreId)/importjob/$(id)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_reference_import_job(
    id,
    referenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "GET",
        "/referencestore/$(referenceStoreId)/importjob/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_reference_metadata(id, reference_store_id)
    get_reference_metadata(id, reference_store_id, params::Dict{String,<:Any})

Gets information about a genome reference's metadata.

# Arguments
- `id`: The reference's ID.
- `reference_store_id`: The reference's reference store ID.

"""
function get_reference_metadata(
    id, referenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/referencestore/$(referenceStoreId)/reference/$(id)/metadata";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_reference_metadata(
    id,
    referenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "GET",
        "/referencestore/$(referenceStoreId)/reference/$(id)/metadata",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_reference_store(id)
    get_reference_store(id, params::Dict{String,<:Any})

Gets information about a reference store.

# Arguments
- `id`: The store's ID.

"""
function get_reference_store(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "GET",
        "/referencestore/$(id)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_reference_store(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/referencestore/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_run(id)
    get_run(id, params::Dict{String,<:Any})

Gets information about a workflow run.

# Arguments
- `id`: The run's ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"export"`: The run's export format.
"""
function get_run(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "GET", "/run/$(id)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_run(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET", "/run/$(id)", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    get_run_group(id)
    get_run_group(id, params::Dict{String,<:Any})

Gets information about a workflow run group.

# Arguments
- `id`: The group's ID.

"""
function get_run_group(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "GET", "/runGroup/$(id)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_run_group(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/runGroup/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_run_task(id, task_id)
    get_run_task(id, task_id, params::Dict{String,<:Any})

Gets information about a workflow run task.

# Arguments
- `id`: The task's ID.
- `task_id`: The task's ID.

"""
function get_run_task(id, taskId; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "GET",
        "/run/$(id)/task/$(taskId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_run_task(
    id,
    taskId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "GET",
        "/run/$(id)/task/$(taskId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_sequence_store(id)
    get_sequence_store(id, params::Dict{String,<:Any})

Gets information about a sequence store.

# Arguments
- `id`: The store's ID.

"""
function get_sequence_store(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "GET",
        "/sequencestore/$(id)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_sequence_store(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/sequencestore/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_variant_import_job(job_id)
    get_variant_import_job(job_id, params::Dict{String,<:Any})

Gets information about a variant import job.

# Arguments
- `job_id`: The job's ID.

"""
function get_variant_import_job(jobId; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "GET",
        "/import/variant/$(jobId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_variant_import_job(
    jobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/import/variant/$(jobId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_variant_store(name)
    get_variant_store(name, params::Dict{String,<:Any})

Gets information about a variant store.

# Arguments
- `name`: The store's name.

"""
function get_variant_store(name; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "GET",
        "/variantStore/$(name)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_variant_store(
    name, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/variantStore/$(name)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_workflow(id)
    get_workflow(id, params::Dict{String,<:Any})

Gets information about a workflow.

# Arguments
- `id`: The workflow's ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"export"`: The export format for the workflow.
- `"type"`: The workflow's type.
"""
function get_workflow(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "GET", "/workflow/$(id)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_workflow(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/workflow/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_annotation_import_jobs()
    list_annotation_import_jobs(params::Dict{String,<:Any})

Retrieves a list of annotation import jobs.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filter"`: A filter to apply to the list.
- `"ids"`: IDs of annotation import jobs to retrieve.
- `"maxResults"`: The maximum number of jobs to return in one page of results.
- `"nextToken"`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_annotation_import_jobs(; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST",
        "/import/annotations";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_annotation_import_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/import/annotations",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_annotation_stores()
    list_annotation_stores(params::Dict{String,<:Any})

Retrieves a list of annotation stores.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filter"`: A filter to apply to the list.
- `"ids"`: IDs of stores to list.
- `"maxResults"`: The maximum number of stores to return in one page of results.
- `"nextToken"`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_annotation_stores(; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST", "/annotationStores"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_annotation_stores(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/annotationStores",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_read_set_activation_jobs(sequence_store_id)
    list_read_set_activation_jobs(sequence_store_id, params::Dict{String,<:Any})

Retrieves a list of read set activation jobs.

# Arguments
- `sequence_store_id`: The read set's sequence store ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filter"`: A filter to apply to the list.
- `"maxResults"`: The maximum number of read set activation jobs to return in one page of
  results.
- `"nextToken"`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_read_set_activation_jobs(
    sequenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/activationjobs";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_read_set_activation_jobs(
    sequenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/activationjobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_read_set_export_jobs(sequence_store_id)
    list_read_set_export_jobs(sequence_store_id, params::Dict{String,<:Any})

Retrieves a list of read set export jobs.

# Arguments
- `sequence_store_id`: The jobs' sequence store ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filter"`: A filter to apply to the list.
- `"maxResults"`: The maximum number of jobs to return in one page of results.
- `"nextToken"`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_read_set_export_jobs(
    sequenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/exportjobs";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_read_set_export_jobs(
    sequenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/exportjobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_read_set_import_jobs(sequence_store_id)
    list_read_set_import_jobs(sequence_store_id, params::Dict{String,<:Any})

Retrieves a list of read set import jobs.

# Arguments
- `sequence_store_id`: The jobs' sequence store ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filter"`: A filter to apply to the list.
- `"maxResults"`: The maximum number of jobs to return in one page of results.
- `"nextToken"`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_read_set_import_jobs(
    sequenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/importjobs";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_read_set_import_jobs(
    sequenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/importjobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_read_sets(sequence_store_id)
    list_read_sets(sequence_store_id, params::Dict{String,<:Any})

Retrieves a list of read sets.

# Arguments
- `sequence_store_id`: The jobs' sequence store ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filter"`: A filter to apply to the list.
- `"maxResults"`: The maximum number of read sets to return in one page of results.
- `"nextToken"`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_read_sets(sequenceStoreId; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/readsets";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_read_sets(
    sequenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/readsets",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_reference_import_jobs(reference_store_id)
    list_reference_import_jobs(reference_store_id, params::Dict{String,<:Any})

Retrieves a list of reference import jobs.

# Arguments
- `reference_store_id`: The job's reference store ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filter"`: A filter to apply to the list.
- `"maxResults"`: The maximum number of jobs to return in one page of results.
- `"nextToken"`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_reference_import_jobs(
    referenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/referencestore/$(referenceStoreId)/importjobs";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_reference_import_jobs(
    referenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/referencestore/$(referenceStoreId)/importjobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_reference_stores()
    list_reference_stores(params::Dict{String,<:Any})

Retrieves a list of reference stores.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filter"`: A filter to apply to the list.
- `"maxResults"`: The maximum number of stores to return in one page of results.
- `"nextToken"`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_reference_stores(; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST", "/referencestores"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_reference_stores(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/referencestores",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_references(reference_store_id)
    list_references(reference_store_id, params::Dict{String,<:Any})

Retrieves a list of references.

# Arguments
- `reference_store_id`: The references' reference store ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filter"`: A filter to apply to the list.
- `"maxResults"`: The maximum number of references to return in one page of results.
- `"nextToken"`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_references(
    referenceStoreId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/referencestore/$(referenceStoreId)/references";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_references(
    referenceStoreId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/referencestore/$(referenceStoreId)/references",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_run_groups()
    list_run_groups(params::Dict{String,<:Any})

Retrieves a list of run groups.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of run groups to return in one page of results.
- `"name"`: The run groups' name.
- `"startingToken"`: Specify the pagination token from a previous request to retrieve the
  next page of results.
"""
function list_run_groups(; aws_config::AbstractAWSConfig=global_aws_config())
    return omics("GET", "/runGroup"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
function list_run_groups(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET", "/runGroup", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_run_tasks(id)
    list_run_tasks(id, params::Dict{String,<:Any})

Retrieves a list of tasks for a run.

# Arguments
- `id`: The run's ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of run tasks to return in one page of results.
- `"startingToken"`: Specify the pagination token from a previous request to retrieve the
  next page of results.
- `"status"`: Filter the list by status.
"""
function list_run_tasks(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "GET", "/run/$(id)/task"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_run_tasks(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/run/$(id)/task",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_runs()
    list_runs(params::Dict{String,<:Any})

Retrieves a list of runs.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of runs to return in one page of results.
- `"name"`: Filter the list by run name.
- `"runGroupId"`: Filter the list by run group ID.
- `"startingToken"`: Specify the pagination token from a previous request to retrieve the
  next page of results.
"""
function list_runs(; aws_config::AbstractAWSConfig=global_aws_config())
    return omics("GET", "/run"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
function list_runs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET", "/run", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_sequence_stores()
    list_sequence_stores(params::Dict{String,<:Any})

Retrieves a list of sequence stores.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filter"`: A filter to apply to the list.
- `"maxResults"`: The maximum number of stores to return in one page of results.
- `"nextToken"`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_sequence_stores(; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST", "/sequencestores"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_sequence_stores(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/sequencestores",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Retrieves a list of tags for a resource.

# Arguments
- `resource_arn`: The resource's ARN.

"""
function list_tags_for_resource(
    resourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET",
        "/tags/$(resourceArn)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    resourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "GET",
        "/tags/$(resourceArn)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_variant_import_jobs()
    list_variant_import_jobs(params::Dict{String,<:Any})

Retrieves a list of variant import jobs.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filter"`: A filter to apply to the list.
- `"ids"`: A list of job IDs.
- `"maxResults"`: The maximum number of import jobs to return in one page of results.
- `"nextToken"`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_variant_import_jobs(; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST", "/import/variants"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_variant_import_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/import/variants",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_variant_stores()
    list_variant_stores(params::Dict{String,<:Any})

Retrieves a list of variant stores.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filter"`: A filter to apply to the list.
- `"ids"`: A list of store IDs.
- `"maxResults"`: The maximum number of stores to return in one page of results.
- `"nextToken"`: Specify the pagination token from a previous request to retrieve the next
  page of results.
"""
function list_variant_stores(; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST", "/variantStores"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_variant_stores(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/variantStores",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_workflows()
    list_workflows(params::Dict{String,<:Any})

Retrieves a list of workflows.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of workflows to return in one page of results.
- `"name"`: The workflows' name.
- `"startingToken"`: Specify the pagination token from a previous request to retrieve the
  next page of results.
- `"type"`: The workflows' type.
"""
function list_workflows(; aws_config::AbstractAWSConfig=global_aws_config())
    return omics("GET", "/workflow"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
function list_workflows(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "GET", "/workflow", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    start_annotation_import_job(destination_name, items, role_arn)
    start_annotation_import_job(destination_name, items, role_arn, params::Dict{String,<:Any})

Starts an annotation import job.

# Arguments
- `destination_name`: A destination annotation store for the job.
- `items`: Items to import.
- `role_arn`: A service role for the job.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"formatOptions"`: Formatting options for the annotation file.
- `"runLeftNormalization"`: The job's left normalization setting.
"""
function start_annotation_import_job(
    destinationName, items, roleArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/import/annotation",
        Dict{String,Any}(
            "destinationName" => destinationName, "items" => items, "roleArn" => roleArn
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_annotation_import_job(
    destinationName,
    items,
    roleArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/import/annotation",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "destinationName" => destinationName,
                    "items" => items,
                    "roleArn" => roleArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_read_set_activation_job(sequence_store_id, sources)
    start_read_set_activation_job(sequence_store_id, sources, params::Dict{String,<:Any})

Starts a read set activation job.

# Arguments
- `sequence_store_id`: The read set's sequence store ID.
- `sources`: The job's sources.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: To ensure that jobs don't run multiple times, specify a unique token for
  each job.
"""
function start_read_set_activation_job(
    sequenceStoreId, sources; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/activationjob",
        Dict{String,Any}("sources" => sources);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_read_set_activation_job(
    sequenceStoreId,
    sources,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/activationjob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("sources" => sources), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_read_set_export_job(destination, role_arn, sequence_store_id, sources)
    start_read_set_export_job(destination, role_arn, sequence_store_id, sources, params::Dict{String,<:Any})

Starts a read set export job.

# Arguments
- `destination`: A location for exported files in Amazon S3.
- `role_arn`: A service role for the job.
- `sequence_store_id`: The read set's sequence store ID.
- `sources`: Sources for the job.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: To ensure that jobs don't run multiple times, specify a unique token for
  each job.
"""
function start_read_set_export_job(
    destination,
    roleArn,
    sequenceStoreId,
    sources;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/exportjob",
        Dict{String,Any}(
            "destination" => destination, "roleArn" => roleArn, "sources" => sources
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_read_set_export_job(
    destination,
    roleArn,
    sequenceStoreId,
    sources,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/exportjob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "destination" => destination, "roleArn" => roleArn, "sources" => sources
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_read_set_import_job(role_arn, sequence_store_id, sources)
    start_read_set_import_job(role_arn, sequence_store_id, sources, params::Dict{String,<:Any})

Starts a read set import job.

# Arguments
- `role_arn`: A service role for the job.
- `sequence_store_id`: The read set's sequence store ID.
- `sources`: Source files to import.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: To ensure that jobs don't run multiple times, specify a unique token for
  each job.
"""
function start_read_set_import_job(
    roleArn, sequenceStoreId, sources; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/importjob",
        Dict{String,Any}("roleArn" => roleArn, "sources" => sources);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_read_set_import_job(
    roleArn,
    sequenceStoreId,
    sources,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/sequencestore/$(sequenceStoreId)/importjob",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("roleArn" => roleArn, "sources" => sources), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_reference_import_job(reference_store_id, role_arn, sources)
    start_reference_import_job(reference_store_id, role_arn, sources, params::Dict{String,<:Any})

Starts a reference import job.

# Arguments
- `reference_store_id`: The job's reference store ID.
- `role_arn`: A service role for the job.
- `sources`: Sources for the job.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: To ensure that jobs don't run multiple times, specify a unique token for
  each job.
"""
function start_reference_import_job(
    referenceStoreId, roleArn, sources; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/referencestore/$(referenceStoreId)/importjob",
        Dict{String,Any}("roleArn" => roleArn, "sources" => sources);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_reference_import_job(
    referenceStoreId,
    roleArn,
    sources,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/referencestore/$(referenceStoreId)/importjob",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("roleArn" => roleArn, "sources" => sources), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_run(request_id, role_arn)
    start_run(request_id, role_arn, params::Dict{String,<:Any})

Starts a run.

# Arguments
- `request_id`: A request ID for the run.
- `role_arn`: A service role for the run.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"logLevel"`: A log level for the run.
- `"name"`: A name for the run.
- `"outputUri"`: An output URI for the run.
- `"parameters"`: Parameters for the run.
- `"priority"`: A priority for the run.
- `"runGroupId"`: The run's group ID.
- `"runId"`: The run's ID.
- `"storageCapacity"`: A storage capacity for the run.
- `"tags"`: Tags for the run.
- `"workflowId"`: The run's workflow ID.
- `"workflowType"`: The run's workflows type.
"""
function start_run(requestId, roleArn; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST",
        "/run",
        Dict{String,Any}("requestId" => requestId, "roleArn" => roleArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_run(
    requestId,
    roleArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/run",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("requestId" => requestId, "roleArn" => roleArn),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_variant_import_job(destination_name, items, role_arn)
    start_variant_import_job(destination_name, items, role_arn, params::Dict{String,<:Any})

Starts a variant import job.

# Arguments
- `destination_name`: The destination variant store for the job.
- `items`: Items to import.
- `role_arn`: A service role for the job.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"runLeftNormalization"`: The job's left normalization setting.
"""
function start_variant_import_job(
    destinationName, items, roleArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/import/variant",
        Dict{String,Any}(
            "destinationName" => destinationName, "items" => items, "roleArn" => roleArn
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_variant_import_job(
    destinationName,
    items,
    roleArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/import/variant",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "destinationName" => destinationName,
                    "items" => items,
                    "roleArn" => roleArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Tags a resource.

# Arguments
- `resource_arn`: The resource's ARN.
- `tags`: Tags for the resource.

"""
function tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}("tags" => tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    resourceArn,
    tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tags" => tags), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Removes tags from a resource.

# Arguments
- `resource_arn`: The resource's ARN.
- `tag_keys`: Keys of tags to remove.

"""
function untag_resource(
    resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}("tagKeys" => tagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    resourceArn,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return omics(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tagKeys" => tagKeys), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_annotation_store(name)
    update_annotation_store(name, params::Dict{String,<:Any})

Updates an annotation store.

# Arguments
- `name`: A name for the store.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: A description for the store.
"""
function update_annotation_store(name; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST",
        "/annotationStore/$(name)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_annotation_store(
    name, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/annotationStore/$(name)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_run_group(id)
    update_run_group(id, params::Dict{String,<:Any})

Updates a run group.

# Arguments
- `id`: The group's ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxCpus"`: The maximum number of CPUs to use.
- `"maxDuration"`: The maximum amount of time to run.
- `"maxRuns"`: The maximum number of concurrent runs for the group.
- `"name"`: A name for the group.
"""
function update_run_group(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST", "/runGroup/$(id)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function update_run_group(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/runGroup/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_variant_store(name)
    update_variant_store(name, params::Dict{String,<:Any})

Updates a variant store.

# Arguments
- `name`: A name for the store.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: A description for the store.
"""
function update_variant_store(name; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST",
        "/variantStore/$(name)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_variant_store(
    name, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/variantStore/$(name)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_workflow(id)
    update_workflow(id, params::Dict{String,<:Any})

Updates a workflow.

# Arguments
- `id`: The workflow's ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: A description for the workflow.
- `"name"`: A name for the workflow.
"""
function update_workflow(id; aws_config::AbstractAWSConfig=global_aws_config())
    return omics(
        "POST", "/workflow/$(id)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function update_workflow(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return omics(
        "POST",
        "/workflow/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
