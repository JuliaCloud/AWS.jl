# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
using .AWSServices: s3_control

"""
    CreateAccessPoint()

Creates an access point and associates it with the specified bucket.

Required Parameters
{
  "AccountId": "The AWS account ID for the owner of the bucket for which you want to create an access point.",
  "Bucket": "The name of the bucket that you want to associate this access point with.",
  "Name": "The name you want to assign to this access point."
}

Optional Parameters
{
  "PublicAccessBlockConfiguration": "",
  "VpcConfiguration": "If you include this field, Amazon S3 restricts access to this access point to requests from the specified virtual private cloud (VPC)."
}
"""
CreateAccessPoint(AccountId, Bucket, Name) = s3_control("PUT", "/v20180820/accesspoint/$(name)")
CreateAccessPoint(AccountId, Bucket, Name, args) = s3_control("PUT", "/v20180820/accesspoint/$(name)", args)
CreateAccessPoint(a...; b...) = CreateAccessPoint(a..., b)

"""
    CreateJob()

You can use Amazon S3 Batch Operations to perform large-scale Batch Operations on Amazon S3 objects. Amazon S3 Batch Operations can execute a single operation or action on lists of Amazon S3 objects that you specify. For more information, see Amazon S3 Batch Operations in the Amazon Simple Storage Service Developer Guide. Related actions include:    DescribeJob     ListJobs     UpdateJobPriority     UpdateJobStatus   

Required Parameters
{
  "AccountId": "",
  "ClientRequestToken": "An idempotency token to ensure that you don't accidentally submit the same request twice. You can use any string up to the maximum length.",
  "Manifest": "Configuration parameters for the manifest.",
  "Operation": "The operation that you want this job to perform on each object listed in the manifest. For more information about the available operations, see Available Operations in the Amazon Simple Storage Service Developer Guide.",
  "Priority": "The numerical priority for this job. Higher numbers indicate higher priority.",
  "Report": "Configuration parameters for the optional job-completion report.",
  "RoleArn": "The Amazon Resource Name (ARN) for the AWS Identity and Access Management (IAM) role that Batch Operations will use to execute this job's operation on each object in the manifest."
}

Optional Parameters
{
  "ConfirmationRequired": "Indicates whether confirmation is required before Amazon S3 runs the job. Confirmation is only required for jobs created through the Amazon S3 console.",
  "Description": "A description for this job. You can use any string within the permitted length. Descriptions don't need to be unique and can be used for multiple jobs.",
  "Tags": "A set of tags to associate with the Amazon S3 Batch Operations job. This is an optional parameter. "
}
"""
CreateJob(AccountId, ClientRequestToken, Manifest, Operation, Priority, Report, RoleArn) = s3_control("POST", "/v20180820/jobs")
CreateJob(AccountId, ClientRequestToken, Manifest, Operation, Priority, Report, RoleArn, args) = s3_control("POST", "/v20180820/jobs", args)
CreateJob(a...; b...) = CreateJob(a..., b)

"""
    DeleteAccessPoint()

Deletes the specified access point.

Required Parameters
{
  "AccountId": "The account ID for the account that owns the specified access point.",
  "Name": "The name of the access point you want to delete."
}
"""
DeleteAccessPoint(AccountId, Name) = s3_control("DELETE", "/v20180820/accesspoint/$(name)")
DeleteAccessPoint(AccountId, Name, args) = s3_control("DELETE", "/v20180820/accesspoint/$(name)", args)
DeleteAccessPoint(a...; b...) = DeleteAccessPoint(a..., b)

"""
    DeleteAccessPointPolicy()

Deletes the access point policy for the specified access point.

Required Parameters
{
  "AccountId": "The account ID for the account that owns the specified access point.",
  "Name": "The name of the access point whose policy you want to delete."
}
"""
DeleteAccessPointPolicy(AccountId, Name) = s3_control("DELETE", "/v20180820/accesspoint/$(name)/policy")
DeleteAccessPointPolicy(AccountId, Name, args) = s3_control("DELETE", "/v20180820/accesspoint/$(name)/policy", args)
DeleteAccessPointPolicy(a...; b...) = DeleteAccessPointPolicy(a..., b)

"""
    DeleteJobTagging()

Removes the entire tag set from the specified Amazon S3 Batch Operations job. To use this operation, you must have permission to perform the s3:DeleteJobTagging action. For more information, see Using Job Tags in the Amazon Simple Storage Service Developer Guide.  Related actions include:    CreateJob     GetJobTagging     PutJobTagging   

Required Parameters
{
  "AccountId": "The AWS account ID associated with the Amazon S3 Batch Operations job.",
  "JobId": "The ID for the Amazon S3 Batch Operations job whose tags you want to delete."
}
"""
DeleteJobTagging(AccountId, JobId) = s3_control("DELETE", "/v20180820/jobs/$(id)/tagging")
DeleteJobTagging(AccountId, JobId, args) = s3_control("DELETE", "/v20180820/jobs/$(id)/tagging", args)
DeleteJobTagging(a...; b...) = DeleteJobTagging(a..., b)

"""
    DeletePublicAccessBlock()

Removes the PublicAccessBlock configuration for an Amazon Web Services account.

Required Parameters
{
  "AccountId": "The account ID for the Amazon Web Services account whose PublicAccessBlock configuration you want to remove."
}
"""
DeletePublicAccessBlock(AccountId) = s3_control("DELETE", "/v20180820/configuration/publicAccessBlock")
DeletePublicAccessBlock(AccountId, args) = s3_control("DELETE", "/v20180820/configuration/publicAccessBlock", args)
DeletePublicAccessBlock(a...; b...) = DeletePublicAccessBlock(a..., b)

"""
    DescribeJob()

Retrieves the configuration parameters and status for a Batch Operations job. For more information, see Amazon S3 Batch Operations in the Amazon Simple Storage Service Developer Guide.  Related actions include:    CreateJob     ListJobs     UpdateJobPriority     UpdateJobStatus   

Required Parameters
{
  "AccountId": "",
  "JobId": "The ID for the job whose information you want to retrieve."
}
"""
DescribeJob(AccountId, JobId) = s3_control("GET", "/v20180820/jobs/$(id)")
DescribeJob(AccountId, JobId, args) = s3_control("GET", "/v20180820/jobs/$(id)", args)
DescribeJob(a...; b...) = DescribeJob(a..., b)

"""
    GetAccessPoint()

Returns configuration information about the specified access point.

Required Parameters
{
  "AccountId": "The account ID for the account that owns the specified access point.",
  "Name": "The name of the access point whose configuration information you want to retrieve."
}
"""
GetAccessPoint(AccountId, Name) = s3_control("GET", "/v20180820/accesspoint/$(name)")
GetAccessPoint(AccountId, Name, args) = s3_control("GET", "/v20180820/accesspoint/$(name)", args)
GetAccessPoint(a...; b...) = GetAccessPoint(a..., b)

"""
    GetAccessPointPolicy()

Returns the access point policy associated with the specified access point.

Required Parameters
{
  "AccountId": "The account ID for the account that owns the specified access point.",
  "Name": "The name of the access point whose policy you want to retrieve."
}
"""
GetAccessPointPolicy(AccountId, Name) = s3_control("GET", "/v20180820/accesspoint/$(name)/policy")
GetAccessPointPolicy(AccountId, Name, args) = s3_control("GET", "/v20180820/accesspoint/$(name)/policy", args)
GetAccessPointPolicy(a...; b...) = GetAccessPointPolicy(a..., b)

"""
    GetAccessPointPolicyStatus()

Indicates whether the specified access point currently has a policy that allows public access. For more information about public access through access points, see Managing Data Access with Amazon S3 Access Points in the Amazon Simple Storage Service Developer Guide.

Required Parameters
{
  "AccountId": "The account ID for the account that owns the specified access point.",
  "Name": "The name of the access point whose policy status you want to retrieve."
}
"""
GetAccessPointPolicyStatus(AccountId, Name) = s3_control("GET", "/v20180820/accesspoint/$(name)/policyStatus")
GetAccessPointPolicyStatus(AccountId, Name, args) = s3_control("GET", "/v20180820/accesspoint/$(name)/policyStatus", args)
GetAccessPointPolicyStatus(a...; b...) = GetAccessPointPolicyStatus(a..., b)

"""
    GetJobTagging()

Returns the tags on an Amazon S3 Batch Operations job. To use this operation, you must have permission to perform the s3:GetJobTagging action. For more information, see Using Job Tags in the Amazon Simple Storage Service Developer Guide.  Related actions include:    CreateJob     PutJobTagging     DeleteJobTagging   

Required Parameters
{
  "AccountId": "The AWS account ID associated with the Amazon S3 Batch Operations job.",
  "JobId": "The ID for the Amazon S3 Batch Operations job whose tags you want to retrieve."
}
"""
GetJobTagging(AccountId, JobId) = s3_control("GET", "/v20180820/jobs/$(id)/tagging")
GetJobTagging(AccountId, JobId, args) = s3_control("GET", "/v20180820/jobs/$(id)/tagging", args)
GetJobTagging(a...; b...) = GetJobTagging(a..., b)

"""
    GetPublicAccessBlock()

Retrieves the PublicAccessBlock configuration for an Amazon Web Services account.

Required Parameters
{
  "AccountId": "The account ID for the Amazon Web Services account whose PublicAccessBlock configuration you want to retrieve."
}
"""
GetPublicAccessBlock(AccountId) = s3_control("GET", "/v20180820/configuration/publicAccessBlock")
GetPublicAccessBlock(AccountId, args) = s3_control("GET", "/v20180820/configuration/publicAccessBlock", args)
GetPublicAccessBlock(a...; b...) = GetPublicAccessBlock(a..., b)

"""
    ListAccessPoints()

Returns a list of the access points currently associated with the specified bucket. You can retrieve up to 1000 access points per call. If the specified bucket has more than 1,000 access points (or the number specified in maxResults, whichever is less), the response will include a continuation token that you can use to list the additional access points.

Required Parameters
{
  "AccountId": "The AWS account ID for owner of the bucket whose access points you want to list."
}

Optional Parameters
{
  "Bucket": "The name of the bucket whose associated access points you want to list.",
  "MaxResults": "The maximum number of access points that you want to include in the list. If the specified bucket has more than this number of access points, then the response will include a continuation token in the NextToken field that you can use to retrieve the next page of access points.",
  "NextToken": "A continuation token. If a previous call to ListAccessPoints returned a continuation token in the NextToken field, then providing that value here causes Amazon S3 to retrieve the next page of results."
}
"""
ListAccessPoints(AccountId) = s3_control("GET", "/v20180820/accesspoint")
ListAccessPoints(AccountId, args) = s3_control("GET", "/v20180820/accesspoint", args)
ListAccessPoints(a...; b...) = ListAccessPoints(a..., b)

"""
    ListJobs()

Lists current Amazon S3 Batch Operations jobs and jobs that have ended within the last 30 days for the AWS account making the request. For more information, see Amazon S3 Batch Operations in the Amazon Simple Storage Service Developer Guide. Related actions include:     CreateJob     DescribeJob     UpdateJobPriority     UpdateJobStatus   

Required Parameters
{
  "AccountId": ""
}

Optional Parameters
{
  "JobStatuses": "The List Jobs request returns jobs that match the statuses listed in this element.",
  "MaxResults": "The maximum number of jobs that Amazon S3 will include in the List Jobs response. If there are more jobs than this number, the response will include a pagination token in the NextToken field to enable you to retrieve the next page of results.",
  "NextToken": "A pagination token to request the next page of results. Use the token that Amazon S3 returned in the NextToken element of the ListJobsResult from the previous List Jobs request."
}
"""
ListJobs(AccountId) = s3_control("GET", "/v20180820/jobs")
ListJobs(AccountId, args) = s3_control("GET", "/v20180820/jobs", args)
ListJobs(a...; b...) = ListJobs(a..., b)

"""
    PutAccessPointPolicy()

Associates an access policy with the specified access point. Each access point can have only one policy, so a request made to this API replaces any existing policy associated with the specified access point.

Required Parameters
{
  "AccountId": "The AWS account ID for owner of the bucket associated with the specified access point.",
  "Name": "The name of the access point that you want to associate with the specified policy.",
  "Policy": "The policy that you want to apply to the specified access point. For more information about access point policies, see Managing Data Access with Amazon S3 Access Points in the Amazon Simple Storage Service Developer Guide."
}
"""
PutAccessPointPolicy(AccountId, Name, Policy) = s3_control("PUT", "/v20180820/accesspoint/$(name)/policy")
PutAccessPointPolicy(AccountId, Name, Policy, args) = s3_control("PUT", "/v20180820/accesspoint/$(name)/policy", args)
PutAccessPointPolicy(a...; b...) = PutAccessPointPolicy(a..., b)

"""
    PutJobTagging()

Set the supplied tag-set on an Amazon S3 Batch Operations job. A tag is a key-value pair. You can associate Amazon S3 Batch Operations tags with any job by sending a PUT request against the tagging subresource that is associated with the job. To modify the existing tag set, you can either replace the existing tag set entirely, or make changes within the existing tag set by retrieving the existing tag set using GetJobTagging, modify that tag set, and use this API action to replace the tag set with the one you have modified.. For more information, see Using Job Tags in the Amazon Simple Storage Service Developer Guide.      If you send this request with an empty tag set, Amazon S3 deletes the existing tag set on the Batch Operations job. If you use this method, you will be charged for a Tier 1 Request (PUT). For more information, see Amazon S3 pricing.   For deleting existing tags for your batch operations job, DeleteJobTagging request is preferred because it achieves the same result without incurring charges.   A few things to consider about using tags:   Amazon S3 limits the maximum number of tags to 50 tags per job.   You can associate up to 50 tags with a job as long as they have unique tag keys.   A tag key can be up to 128 Unicode characters in length, and tag values can be up to 256 Unicode characters in length.   The key and values are case sensitive.   For tagging-related restrictions related to characters and encodings, see User-Defined Tag Restrictions.       To use this operation, you must have permission to perform the s3:PutJobTagging action. Related actions include:    CreateJob     GetJobTagging     DeleteJobTagging   

Required Parameters
{
  "AccountId": "The AWS account ID associated with the Amazon S3 Batch Operations job.",
  "JobId": "The ID for the Amazon S3 Batch Operations job whose tags you want to replace.",
  "Tags": "The set of tags to associate with the Amazon S3 Batch Operations job."
}
"""
PutJobTagging(AccountId, JobId, Tags) = s3_control("PUT", "/v20180820/jobs/$(id)/tagging")
PutJobTagging(AccountId, JobId, Tags, args) = s3_control("PUT", "/v20180820/jobs/$(id)/tagging", args)
PutJobTagging(a...; b...) = PutJobTagging(a..., b)

"""
    PutPublicAccessBlock()

Creates or modifies the PublicAccessBlock configuration for an Amazon Web Services account.

Required Parameters
{
  "AccountId": "The account ID for the Amazon Web Services account whose PublicAccessBlock configuration you want to set.",
  "PublicAccessBlockConfiguration": "The PublicAccessBlock configuration that you want to apply to the specified Amazon Web Services account."
}
"""
PutPublicAccessBlock(AccountId, PublicAccessBlockConfiguration) = s3_control("PUT", "/v20180820/configuration/publicAccessBlock")
PutPublicAccessBlock(AccountId, PublicAccessBlockConfiguration, args) = s3_control("PUT", "/v20180820/configuration/publicAccessBlock", args)
PutPublicAccessBlock(a...; b...) = PutPublicAccessBlock(a..., b)

"""
    UpdateJobPriority()

Updates an existing Amazon S3 Batch Operations job's priority. For more information, see Amazon S3 Batch Operations in the Amazon Simple Storage Service Developer Guide.  Related actions include:    CreateJob     ListJobs     DescribeJob     UpdateJobStatus   

Required Parameters
{
  "AccountId": "",
  "JobId": "The ID for the job whose priority you want to update.",
  "Priority": "The priority you want to assign to this job."
}
"""
UpdateJobPriority(AccountId, JobId, Priority) = s3_control("POST", "/v20180820/jobs/$(id)/priority")
UpdateJobPriority(AccountId, JobId, Priority, args) = s3_control("POST", "/v20180820/jobs/$(id)/priority", args)
UpdateJobPriority(a...; b...) = UpdateJobPriority(a..., b)

"""
    UpdateJobStatus()

Updates the status for the specified job. Use this operation to confirm that you want to run a job or to cancel an existing job. For more information, see Amazon S3 Batch Operations in the Amazon Simple Storage Service Developer Guide.  Related actions include:    CreateJob     ListJobs     DescribeJob     UpdateJobStatus   

Required Parameters
{
  "AccountId": "",
  "JobId": "The ID of the job whose status you want to update.",
  "RequestedJobStatus": "The status that you want to move the specified job to."
}

Optional Parameters
{
  "StatusUpdateReason": "A description of the reason why you want to change the specified job's status. This field can be any string up to the maximum length."
}
"""
UpdateJobStatus(AccountId, JobId, RequestedJobStatus) = s3_control("POST", "/v20180820/jobs/$(id)/status")
UpdateJobStatus(AccountId, JobId, RequestedJobStatus, args) = s3_control("POST", "/v20180820/jobs/$(id)/status", args)
UpdateJobStatus(a...; b...) = UpdateJobStatus(a..., b)
