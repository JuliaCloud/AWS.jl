# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: s3_control
using AWS.Compat
using AWS.UUIDs

"""
    create_access_point(bucket, name, x-amz-account-id)
    create_access_point(bucket, name, x-amz-account-id, params::Dict{String,<:Any})

Creates an access point and associates it with the specified bucket. For more information,
see Managing Data Access with Amazon S3 Access Points in the Amazon S3 User Guide.   S3 on
Outposts only supports VPC-style access points.  For more information, see  Accessing
Amazon S3 on Outposts using virtual private cloud (VPC) only access points in the Amazon S3
User Guide.  All Amazon S3 on Outposts REST API requests for this action require an
additional parameter of x-amz-outpost-id to be passed with the request. In addition, you
must use an S3 on Outposts endpoint hostname prefix instead of s3-control. For an example
of the request syntax for Amazon S3 on Outposts that uses the S3 on Outposts endpoint
hostname prefix and the x-amz-outpost-id derived by using the access point ARN, see the
Examples section.  The following actions are related to CreateAccessPoint:
GetAccessPoint     DeleteAccessPoint     ListAccessPoints

# Arguments
- `bucket`: The name of the bucket that you want to associate this access point with. For
  using this parameter with Amazon S3 on Outposts with the REST API, you must specify the
  name and the x-amz-outpost-id as well. For using this parameter with S3 on Outposts with
  the Amazon Web Services SDK and CLI, you must specify the ARN of the bucket accessed in the
  format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt
  ;my-bucket-name&gt;. For example, to access the bucket reports through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value
  must be URL encoded.
- `name`: The name you want to assign to this access point.
- `x-amz-account-id`: The Amazon Web Services account ID for the owner of the bucket for
  which you want to create an access point.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"PublicAccessBlockConfiguration"`:  The PublicAccessBlock configuration that you want to
  apply to the access point.
- `"VpcConfiguration"`: If you include this field, Amazon S3 restricts access to this
  access point to requests from the specified virtual private cloud (VPC).  This is required
  for creating an access point for Amazon S3 on Outposts buckets.
"""
function create_access_point(
    Bucket, name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "PUT",
        "/v20180820/accesspoint/$(name)",
        Dict{String,Any}(
            "Bucket" => Bucket,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_access_point(
    Bucket,
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/accesspoint/$(name)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Bucket" => Bucket,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_access_point_for_object_lambda(configuration, name, x-amz-account-id)
    create_access_point_for_object_lambda(configuration, name, x-amz-account-id, params::Dict{String,<:Any})

Creates an Object Lambda Access Point. For more information, see Transforming objects with
Object Lambda Access Points in the Amazon S3 User Guide. The following actions are related
to CreateAccessPointForObjectLambda:    DeleteAccessPointForObjectLambda
GetAccessPointForObjectLambda     ListAccessPointsForObjectLambda

# Arguments
- `configuration`: Object Lambda Access Point configuration as a JSON document.
- `name`: The name you want to assign to this Object Lambda Access Point.
- `x-amz-account-id`: The Amazon Web Services account ID for owner of the specified Object
  Lambda Access Point.

"""
function create_access_point_for_object_lambda(
    Configuration, name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "PUT",
        "/v20180820/accesspointforobjectlambda/$(name)",
        Dict{String,Any}(
            "Configuration" => Configuration,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_access_point_for_object_lambda(
    Configuration,
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/accesspointforobjectlambda/$(name)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Configuration" => Configuration,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_bucket(name)
    create_bucket(name, params::Dict{String,<:Any})

 This action creates an Amazon S3 on Outposts bucket. To create an S3 bucket, see Create
Bucket in the Amazon S3 API Reference.   Creates a new Outposts bucket. By creating the
bucket, you become the bucket owner. To create an Outposts bucket, you must have S3 on
Outposts. For more information, see Using Amazon S3 on Outposts in Amazon S3 User Guide.
Not every string is an acceptable bucket name. For information on bucket naming
restrictions, see Working with Amazon S3 Buckets. S3 on Outposts buckets support:   Tags
LifecycleConfigurations for deleting expired objects   For a complete list of restrictions
and Amazon S3 feature limitations on S3 on Outposts, see  Amazon S3 on Outposts
Restrictions and Limitations. For an example of the request syntax for Amazon S3 on
Outposts that uses the S3 on Outposts endpoint hostname prefix and x-amz-outpost-id in your
API request, see the Examples section. The following actions are related to CreateBucket
for Amazon S3 on Outposts:    PutObject     GetBucket     DeleteBucket
CreateAccessPoint     PutAccessPointPolicy

# Arguments
- `name`: The name of the bucket.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CreateBucketConfiguration"`: The configuration information for the bucket.  This is not
  supported by Amazon S3 on Outposts buckets.
- `"x-amz-acl"`: The canned ACL to apply to the bucket.  This is not supported by Amazon S3
  on Outposts buckets.
- `"x-amz-bucket-object-lock-enabled"`: Specifies whether you want S3 Object Lock to be
  enabled for the new bucket.  This is not supported by Amazon S3 on Outposts buckets.
- `"x-amz-grant-full-control"`: Allows grantee the read, write, read ACP, and write ACP
  permissions on the bucket.  This is not supported by Amazon S3 on Outposts buckets.
- `"x-amz-grant-read"`: Allows grantee to list the objects in the bucket.  This is not
  supported by Amazon S3 on Outposts buckets.
- `"x-amz-grant-read-acp"`: Allows grantee to read the bucket ACL.  This is not supported
  by Amazon S3 on Outposts buckets.
- `"x-amz-grant-write"`: Allows grantee to create, overwrite, and delete any object in the
  bucket.  This is not supported by Amazon S3 on Outposts buckets.
- `"x-amz-grant-write-acp"`: Allows grantee to write the ACL for the applicable bucket.
  This is not supported by Amazon S3 on Outposts buckets.
- `"x-amz-outpost-id"`: The ID of the Outposts where the bucket is being created.  This ID
  is required by Amazon S3 on Outposts buckets.
"""
function create_bucket(name; aws_config::AbstractAWSConfig=global_aws_config())
    return s3_control(
        "PUT",
        "/v20180820/bucket/$(name)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_bucket(
    name, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "PUT",
        "/v20180820/bucket/$(name)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_job(client_request_token, operation, priority, report, role_arn, x-amz-account-id)
    create_job(client_request_token, operation, priority, report, role_arn, x-amz-account-id, params::Dict{String,<:Any})

You can use S3 Batch Operations to perform large-scale batch actions on Amazon S3 objects.
Batch Operations can run a single action on lists of Amazon S3 objects that you specify.
For more information, see S3 Batch Operations in the Amazon S3 User Guide. This action
creates a S3 Batch Operations job.  Related actions include:    DescribeJob     ListJobs
 UpdateJobPriority     UpdateJobStatus     JobOperation

# Arguments
- `client_request_token`: An idempotency token to ensure that you don't accidentally submit
  the same request twice. You can use any string up to the maximum length.
- `operation`: The action that you want this job to perform on every object listed in the
  manifest. For more information about the available actions, see Operations in the Amazon S3
  User Guide.
- `priority`: The numerical priority for this job. Higher numbers indicate higher priority.
- `report`: Configuration parameters for the optional job-completion report.
- `role_arn`: The Amazon Resource Name (ARN) for the Identity and Access Management (IAM)
  role that Batch Operations will use to run this job's action on every object in the
  manifest.
- `x-amz-account-id`: The Amazon Web Services account ID that creates the job.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ConfirmationRequired"`: Indicates whether confirmation is required before Amazon S3
  runs the job. Confirmation is only required for jobs created through the Amazon S3 console.
- `"Description"`: A description for this job. You can use any string within the permitted
  length. Descriptions don't need to be unique and can be used for multiple jobs.
- `"Manifest"`: Configuration parameters for the manifest.
- `"ManifestGenerator"`: The attribute container for the ManifestGenerator details. Jobs
  must be created with either a manifest file or a ManifestGenerator, but not both.
- `"Tags"`: A set of tags to associate with the S3 Batch Operations job. This is an
  optional parameter.
"""
function create_job(
    ClientRequestToken,
    Operation,
    Priority,
    Report,
    RoleArn,
    x_amz_account_id;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "POST",
        "/v20180820/jobs",
        Dict{String,Any}(
            "ClientRequestToken" => ClientRequestToken,
            "Operation" => Operation,
            "Priority" => Priority,
            "Report" => Report,
            "RoleArn" => RoleArn,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_job(
    ClientRequestToken,
    Operation,
    Priority,
    Report,
    RoleArn,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "POST",
        "/v20180820/jobs",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ClientRequestToken" => ClientRequestToken,
                    "Operation" => Operation,
                    "Priority" => Priority,
                    "Report" => Report,
                    "RoleArn" => RoleArn,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_multi_region_access_point(client_token, details, x-amz-account-id)
    create_multi_region_access_point(client_token, details, x-amz-account-id, params::Dict{String,<:Any})

Creates a Multi-Region Access Point and associates it with the specified buckets. For more
information about creating Multi-Region Access Points, see Creating Multi-Region Access
Points in the Amazon S3 User Guide. This action will always be routed to the US West
(Oregon) Region. For more information about the restrictions around managing Multi-Region
Access Points, see Managing Multi-Region Access Points in the Amazon S3 User Guide. This
request is asynchronous, meaning that you might receive a response before the command has
completed. When this request provides a response, it provides a token that you can use to
monitor the status of the request with DescribeMultiRegionAccessPointOperation. The
following actions are related to CreateMultiRegionAccessPoint:
DeleteMultiRegionAccessPoint     DescribeMultiRegionAccessPointOperation
GetMultiRegionAccessPoint     ListMultiRegionAccessPoints

# Arguments
- `client_token`: An idempotency token used to identify the request and guarantee that
  requests are unique.
- `details`: A container element containing details about the Multi-Region Access Point.
- `x-amz-account-id`: The Amazon Web Services account ID for the owner of the Multi-Region
  Access Point. The owner of the Multi-Region Access Point also must own the underlying
  buckets.

"""
function create_multi_region_access_point(
    ClientToken,
    Details,
    x_amz_account_id;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "POST",
        "/v20180820/async-requests/mrap/create",
        Dict{String,Any}(
            "ClientToken" => ClientToken,
            "Details" => Details,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_multi_region_access_point(
    ClientToken,
    Details,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "POST",
        "/v20180820/async-requests/mrap/create",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ClientToken" => ClientToken,
                    "Details" => Details,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_access_point(name, x-amz-account-id)
    delete_access_point(name, x-amz-account-id, params::Dict{String,<:Any})

Deletes the specified access point. All Amazon S3 on Outposts REST API requests for this
action require an additional parameter of x-amz-outpost-id to be passed with the request.
In addition, you must use an S3 on Outposts endpoint hostname prefix instead of s3-control.
For an example of the request syntax for Amazon S3 on Outposts that uses the S3 on Outposts
endpoint hostname prefix and the x-amz-outpost-id derived by using the access point ARN,
see the Examples section. The following actions are related to DeleteAccessPoint:
CreateAccessPoint     GetAccessPoint     ListAccessPoints

# Arguments
- `name`: The name of the access point you want to delete. For using this parameter with
  Amazon S3 on Outposts with the REST API, you must specify the name and the x-amz-outpost-id
  as well. For using this parameter with S3 on Outposts with the Amazon Web Services SDK and
  CLI, you must specify the ARN of the access point accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/accesspoint
  /&lt;my-accesspoint-name&gt;. For example, to access the access point reports-ap through
  outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding
  of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/accesspoint/reports-ap.
  The value must be URL encoded.
- `x-amz-account-id`: The account ID for the account that owns the specified access point.

"""
function delete_access_point(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "DELETE",
        "/v20180820/accesspoint/$(name)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_access_point(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "DELETE",
        "/v20180820/accesspoint/$(name)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_access_point_for_object_lambda(name, x-amz-account-id)
    delete_access_point_for_object_lambda(name, x-amz-account-id, params::Dict{String,<:Any})

Deletes the specified Object Lambda Access Point. The following actions are related to
DeleteAccessPointForObjectLambda:    CreateAccessPointForObjectLambda
GetAccessPointForObjectLambda     ListAccessPointsForObjectLambda

# Arguments
- `name`: The name of the access point you want to delete.
- `x-amz-account-id`: The account ID for the account that owns the specified Object Lambda
  Access Point.

"""
function delete_access_point_for_object_lambda(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "DELETE",
        "/v20180820/accesspointforobjectlambda/$(name)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_access_point_for_object_lambda(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "DELETE",
        "/v20180820/accesspointforobjectlambda/$(name)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_access_point_policy(name, x-amz-account-id)
    delete_access_point_policy(name, x-amz-account-id, params::Dict{String,<:Any})

Deletes the access point policy for the specified access point.  All Amazon S3 on Outposts
REST API requests for this action require an additional parameter of x-amz-outpost-id to be
passed with the request. In addition, you must use an S3 on Outposts endpoint hostname
prefix instead of s3-control. For an example of the request syntax for Amazon S3 on
Outposts that uses the S3 on Outposts endpoint hostname prefix and the x-amz-outpost-id
derived by using the access point ARN, see the Examples section. The following actions are
related to DeleteAccessPointPolicy:    PutAccessPointPolicy     GetAccessPointPolicy

# Arguments
- `name`: The name of the access point whose policy you want to delete. For using this
  parameter with Amazon S3 on Outposts with the REST API, you must specify the name and the
  x-amz-outpost-id as well. For using this parameter with S3 on Outposts with the Amazon Web
  Services SDK and CLI, you must specify the ARN of the access point accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/accesspoint
  /&lt;my-accesspoint-name&gt;. For example, to access the access point reports-ap through
  outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding
  of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/accesspoint/reports-ap.
  The value must be URL encoded.
- `x-amz-account-id`: The account ID for the account that owns the specified access point.

"""
function delete_access_point_policy(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "DELETE",
        "/v20180820/accesspoint/$(name)/policy",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_access_point_policy(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "DELETE",
        "/v20180820/accesspoint/$(name)/policy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_access_point_policy_for_object_lambda(name, x-amz-account-id)
    delete_access_point_policy_for_object_lambda(name, x-amz-account-id, params::Dict{String,<:Any})

Removes the resource policy for an Object Lambda Access Point. The following actions are
related to DeleteAccessPointPolicyForObjectLambda:    GetAccessPointPolicyForObjectLambda
  PutAccessPointPolicyForObjectLambda

# Arguments
- `name`: The name of the Object Lambda Access Point you want to delete the policy for.
- `x-amz-account-id`: The account ID for the account that owns the specified Object Lambda
  Access Point.

"""
function delete_access_point_policy_for_object_lambda(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "DELETE",
        "/v20180820/accesspointforobjectlambda/$(name)/policy",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_access_point_policy_for_object_lambda(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "DELETE",
        "/v20180820/accesspointforobjectlambda/$(name)/policy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket(name, x-amz-account-id)
    delete_bucket(name, x-amz-account-id, params::Dict{String,<:Any})

 This action deletes an Amazon S3 on Outposts bucket. To delete an S3 bucket, see
DeleteBucket in the Amazon S3 API Reference.   Deletes the Amazon S3 on Outposts bucket.
All objects (including all object versions and delete markers) in the bucket must be
deleted before the bucket itself can be deleted. For more information, see Using Amazon S3
on Outposts in Amazon S3 User Guide. All Amazon S3 on Outposts REST API requests for this
action require an additional parameter of x-amz-outpost-id to be passed with the request.
In addition, you must use an S3 on Outposts endpoint hostname prefix instead of s3-control.
For an example of the request syntax for Amazon S3 on Outposts that uses the S3 on Outposts
endpoint hostname prefix and the x-amz-outpost-id derived by using the access point ARN,
see the Examples section.  Related Resources     CreateBucket     GetBucket
DeleteObject

# Arguments
- `name`: Specifies the bucket being deleted. For using this parameter with Amazon S3 on
  Outposts with the REST API, you must specify the name and the x-amz-outpost-id as well. For
  using this parameter with S3 on Outposts with the Amazon Web Services SDK and CLI, you must
  specify the ARN of the bucket accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt
  ;my-bucket-name&gt;. For example, to access the bucket reports through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value
  must be URL encoded.
- `x-amz-account-id`: The account ID that owns the Outposts bucket.

"""
function delete_bucket(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "DELETE",
        "/v20180820/bucket/$(name)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "DELETE",
        "/v20180820/bucket/$(name)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_lifecycle_configuration(name, x-amz-account-id)
    delete_bucket_lifecycle_configuration(name, x-amz-account-id, params::Dict{String,<:Any})

 This action deletes an Amazon S3 on Outposts bucket's lifecycle configuration. To delete
an S3 bucket's lifecycle configuration, see DeleteBucketLifecycle in the Amazon S3 API
Reference.   Deletes the lifecycle configuration from the specified Outposts bucket. Amazon
S3 on Outposts removes all the lifecycle configuration rules in the lifecycle subresource
associated with the bucket. Your objects never expire, and Amazon S3 on Outposts no longer
automatically deletes any objects on the basis of rules contained in the deleted lifecycle
configuration. For more information, see Using Amazon S3 on Outposts in Amazon S3 User
Guide. To use this action, you must have permission to perform the
s3-outposts:DeleteLifecycleConfiguration action. By default, the bucket owner has this
permission and the Outposts bucket owner can grant this permission to others. All Amazon S3
on Outposts REST API requests for this action require an additional parameter of
x-amz-outpost-id to be passed with the request. In addition, you must use an S3 on Outposts
endpoint hostname prefix instead of s3-control. For an example of the request syntax for
Amazon S3 on Outposts that uses the S3 on Outposts endpoint hostname prefix and the
x-amz-outpost-id derived by using the access point ARN, see the Examples section. For more
information about object expiration, see Elements to Describe Lifecycle Actions. Related
actions include:    PutBucketLifecycleConfiguration     GetBucketLifecycleConfiguration

# Arguments
- `name`: Specifies the bucket. For using this parameter with Amazon S3 on Outposts with
  the REST API, you must specify the name and the x-amz-outpost-id as well. For using this
  parameter with S3 on Outposts with the Amazon Web Services SDK and CLI, you must specify
  the ARN of the bucket accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt
  ;my-bucket-name&gt;. For example, to access the bucket reports through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value
  must be URL encoded.
- `x-amz-account-id`: The account ID of the lifecycle configuration to delete.

"""
function delete_bucket_lifecycle_configuration(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "DELETE",
        "/v20180820/bucket/$(name)/lifecycleconfiguration",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_lifecycle_configuration(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "DELETE",
        "/v20180820/bucket/$(name)/lifecycleconfiguration",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_policy(name, x-amz-account-id)
    delete_bucket_policy(name, x-amz-account-id, params::Dict{String,<:Any})

 This action deletes an Amazon S3 on Outposts bucket policy. To delete an S3 bucket policy,
see DeleteBucketPolicy in the Amazon S3 API Reference.   This implementation of the DELETE
action uses the policy subresource to delete the policy of a specified Amazon S3 on
Outposts bucket. If you are using an identity other than the root user of the Amazon Web
Services account that owns the bucket, the calling identity must have the
s3-outposts:DeleteBucketPolicy permissions on the specified Outposts bucket and belong to
the bucket owner's account to use this action. For more information, see Using Amazon S3 on
Outposts in Amazon S3 User Guide. If you don't have DeleteBucketPolicy permissions, Amazon
S3 returns a 403 Access Denied error. If you have the correct permissions, but you're not
using an identity that belongs to the bucket owner's account, Amazon S3 returns a 405
Method Not Allowed error.   As a security precaution, the root user of the Amazon Web
Services account that owns a bucket can always use this action, even if the policy
explicitly denies the root user the ability to perform this action.  For more information
about bucket policies, see Using Bucket Policies and User Policies.  All Amazon S3 on
Outposts REST API requests for this action require an additional parameter of
x-amz-outpost-id to be passed with the request. In addition, you must use an S3 on Outposts
endpoint hostname prefix instead of s3-control. For an example of the request syntax for
Amazon S3 on Outposts that uses the S3 on Outposts endpoint hostname prefix and the
x-amz-outpost-id derived by using the access point ARN, see the Examples section. The
following actions are related to DeleteBucketPolicy:    GetBucketPolicy     PutBucketPolicy


# Arguments
- `name`: Specifies the bucket. For using this parameter with Amazon S3 on Outposts with
  the REST API, you must specify the name and the x-amz-outpost-id as well. For using this
  parameter with S3 on Outposts with the Amazon Web Services SDK and CLI, you must specify
  the ARN of the bucket accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt
  ;my-bucket-name&gt;. For example, to access the bucket reports through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value
  must be URL encoded.
- `x-amz-account-id`: The account ID of the Outposts bucket.

"""
function delete_bucket_policy(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "DELETE",
        "/v20180820/bucket/$(name)/policy",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_policy(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "DELETE",
        "/v20180820/bucket/$(name)/policy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_bucket_tagging(name, x-amz-account-id)
    delete_bucket_tagging(name, x-amz-account-id, params::Dict{String,<:Any})

 This action deletes an Amazon S3 on Outposts bucket's tags. To delete an S3 bucket tags,
see DeleteBucketTagging in the Amazon S3 API Reference.   Deletes the tags from the
Outposts bucket. For more information, see Using Amazon S3 on Outposts in Amazon S3 User
Guide. To use this action, you must have permission to perform the PutBucketTagging action.
By default, the bucket owner has this permission and can grant this permission to others.
All Amazon S3 on Outposts REST API requests for this action require an additional parameter
of x-amz-outpost-id to be passed with the request. In addition, you must use an S3 on
Outposts endpoint hostname prefix instead of s3-control. For an example of the request
syntax for Amazon S3 on Outposts that uses the S3 on Outposts endpoint hostname prefix and
the x-amz-outpost-id derived by using the access point ARN, see the Examples section. The
following actions are related to DeleteBucketTagging:    GetBucketTagging
PutBucketTagging

# Arguments
- `name`: The bucket ARN that has the tag set to be removed. For using this parameter with
  Amazon S3 on Outposts with the REST API, you must specify the name and the x-amz-outpost-id
  as well. For using this parameter with S3 on Outposts with the Amazon Web Services SDK and
  CLI, you must specify the ARN of the bucket accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt
  ;my-bucket-name&gt;. For example, to access the bucket reports through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value
  must be URL encoded.
- `x-amz-account-id`: The Amazon Web Services account ID of the Outposts bucket tag set to
  be removed.

"""
function delete_bucket_tagging(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "DELETE",
        "/v20180820/bucket/$(name)/tagging",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_bucket_tagging(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "DELETE",
        "/v20180820/bucket/$(name)/tagging",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_job_tagging(id, x-amz-account-id)
    delete_job_tagging(id, x-amz-account-id, params::Dict{String,<:Any})

Removes the entire tag set from the specified S3 Batch Operations job. To use this
operation, you must have permission to perform the s3:DeleteJobTagging action. For more
information, see Controlling access and labeling jobs using tags in the Amazon S3 User
Guide.  Related actions include:    CreateJob     GetJobTagging     PutJobTagging

# Arguments
- `id`: The ID for the S3 Batch Operations job whose tags you want to delete.
- `x-amz-account-id`: The Amazon Web Services account ID associated with the S3 Batch
  Operations job.

"""
function delete_job_tagging(
    id, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "DELETE",
        "/v20180820/jobs/$(id)/tagging",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_job_tagging(
    id,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "DELETE",
        "/v20180820/jobs/$(id)/tagging",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_multi_region_access_point(client_token, details, x-amz-account-id)
    delete_multi_region_access_point(client_token, details, x-amz-account-id, params::Dict{String,<:Any})

Deletes a Multi-Region Access Point. This action does not delete the buckets associated
with the Multi-Region Access Point, only the Multi-Region Access Point itself. This action
will always be routed to the US West (Oregon) Region. For more information about the
restrictions around managing Multi-Region Access Points, see Managing Multi-Region Access
Points in the Amazon S3 User Guide. This request is asynchronous, meaning that you might
receive a response before the command has completed. When this request provides a response,
it provides a token that you can use to monitor the status of the request with
DescribeMultiRegionAccessPointOperation. The following actions are related to
DeleteMultiRegionAccessPoint:    CreateMultiRegionAccessPoint
DescribeMultiRegionAccessPointOperation     GetMultiRegionAccessPoint
ListMultiRegionAccessPoints

# Arguments
- `client_token`: An idempotency token used to identify the request and guarantee that
  requests are unique.
- `details`: A container element containing details about the Multi-Region Access Point.
- `x-amz-account-id`: The Amazon Web Services account ID for the owner of the Multi-Region
  Access Point.

"""
function delete_multi_region_access_point(
    ClientToken,
    Details,
    x_amz_account_id;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "POST",
        "/v20180820/async-requests/mrap/delete",
        Dict{String,Any}(
            "ClientToken" => ClientToken,
            "Details" => Details,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_multi_region_access_point(
    ClientToken,
    Details,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "POST",
        "/v20180820/async-requests/mrap/delete",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ClientToken" => ClientToken,
                    "Details" => Details,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_public_access_block(x-amz-account-id)
    delete_public_access_block(x-amz-account-id, params::Dict{String,<:Any})

Removes the PublicAccessBlock configuration for an Amazon Web Services account. For more
information, see  Using Amazon S3 block public access. Related actions include:
GetPublicAccessBlock     PutPublicAccessBlock

# Arguments
- `x-amz-account-id`: The account ID for the Amazon Web Services account whose
  PublicAccessBlock configuration you want to remove.

"""
function delete_public_access_block(
    x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "DELETE",
        "/v20180820/configuration/publicAccessBlock",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_public_access_block(
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "DELETE",
        "/v20180820/configuration/publicAccessBlock",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_storage_lens_configuration(storagelensid, x-amz-account-id)
    delete_storage_lens_configuration(storagelensid, x-amz-account-id, params::Dict{String,<:Any})

Deletes the Amazon S3 Storage Lens configuration. For more information about S3 Storage
Lens, see Assessing your storage activity and usage with Amazon S3 Storage Lens  in the
Amazon S3 User Guide.  To use this action, you must have permission to perform the
s3:DeleteStorageLensConfiguration action. For more information, see Setting permissions to
use Amazon S3 Storage Lens in the Amazon S3 User Guide.

# Arguments
- `storagelensid`: The ID of the S3 Storage Lens configuration.
- `x-amz-account-id`: The account ID of the requester.

"""
function delete_storage_lens_configuration(
    storagelensid, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "DELETE",
        "/v20180820/storagelens/$(storagelensid)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_storage_lens_configuration(
    storagelensid,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "DELETE",
        "/v20180820/storagelens/$(storagelensid)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_storage_lens_configuration_tagging(storagelensid, x-amz-account-id)
    delete_storage_lens_configuration_tagging(storagelensid, x-amz-account-id, params::Dict{String,<:Any})

Deletes the Amazon S3 Storage Lens configuration tags. For more information about S3
Storage Lens, see Assessing your storage activity and usage with Amazon S3 Storage Lens  in
the Amazon S3 User Guide.  To use this action, you must have permission to perform the
s3:DeleteStorageLensConfigurationTagging action. For more information, see Setting
permissions to use Amazon S3 Storage Lens in the Amazon S3 User Guide.

# Arguments
- `storagelensid`: The ID of the S3 Storage Lens configuration.
- `x-amz-account-id`: The account ID of the requester.

"""
function delete_storage_lens_configuration_tagging(
    storagelensid, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "DELETE",
        "/v20180820/storagelens/$(storagelensid)/tagging",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_storage_lens_configuration_tagging(
    storagelensid,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "DELETE",
        "/v20180820/storagelens/$(storagelensid)/tagging",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_job(id, x-amz-account-id)
    describe_job(id, x-amz-account-id, params::Dict{String,<:Any})

Retrieves the configuration parameters and status for a Batch Operations job. For more
information, see S3 Batch Operations in the Amazon S3 User Guide.  Related actions include:
   CreateJob     ListJobs     UpdateJobPriority     UpdateJobStatus

# Arguments
- `id`: The ID for the job whose information you want to retrieve.
- `x-amz-account-id`: The Amazon Web Services account ID associated with the S3 Batch
  Operations job.

"""
function describe_job(
    id, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/jobs/$(id)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_job(
    id,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/jobs/$(id)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_multi_region_access_point_operation(request_token, x-amz-account-id)
    describe_multi_region_access_point_operation(request_token, x-amz-account-id, params::Dict{String,<:Any})

Retrieves the status of an asynchronous request to manage a Multi-Region Access Point. For
more information about managing Multi-Region Access Points and how asynchronous requests
work, see Managing Multi-Region Access Points in the Amazon S3 User Guide. The following
actions are related to GetMultiRegionAccessPoint:    CreateMultiRegionAccessPoint
DeleteMultiRegionAccessPoint     GetMultiRegionAccessPoint     ListMultiRegionAccessPoints


# Arguments
- `request_token`: The request token associated with the request you want to know about.
  This request token is returned as part of the response when you make an asynchronous
  request. You provide this token to query about the status of the asynchronous action.
- `x-amz-account-id`: The Amazon Web Services account ID for the owner of the Multi-Region
  Access Point.

"""
function describe_multi_region_access_point_operation(
    request_token, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/async-requests/mrap/$(request_token)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_multi_region_access_point_operation(
    request_token,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/async-requests/mrap/$(request_token)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_access_point(name, x-amz-account-id)
    get_access_point(name, x-amz-account-id, params::Dict{String,<:Any})

Returns configuration information about the specified access point.  All Amazon S3 on
Outposts REST API requests for this action require an additional parameter of
x-amz-outpost-id to be passed with the request. In addition, you must use an S3 on Outposts
endpoint hostname prefix instead of s3-control. For an example of the request syntax for
Amazon S3 on Outposts that uses the S3 on Outposts endpoint hostname prefix and the
x-amz-outpost-id derived by using the access point ARN, see the Examples section. The
following actions are related to GetAccessPoint:    CreateAccessPoint     DeleteAccessPoint
    ListAccessPoints

# Arguments
- `name`: The name of the access point whose configuration information you want to
  retrieve. For using this parameter with Amazon S3 on Outposts with the REST API, you must
  specify the name and the x-amz-outpost-id as well. For using this parameter with S3 on
  Outposts with the Amazon Web Services SDK and CLI, you must specify the ARN of the access
  point accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/accesspoint
  /&lt;my-accesspoint-name&gt;. For example, to access the access point reports-ap through
  outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding
  of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/accesspoint/reports-ap.
  The value must be URL encoded.
- `x-amz-account-id`: The account ID for the account that owns the specified access point.

"""
function get_access_point(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/accesspoint/$(name)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_access_point(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/accesspoint/$(name)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_access_point_configuration_for_object_lambda(name, x-amz-account-id)
    get_access_point_configuration_for_object_lambda(name, x-amz-account-id, params::Dict{String,<:Any})

Returns configuration for an Object Lambda Access Point. The following actions are related
to GetAccessPointConfigurationForObjectLambda:
PutAccessPointConfigurationForObjectLambda

# Arguments
- `name`: The name of the Object Lambda Access Point you want to return the configuration
  for.
- `x-amz-account-id`: The account ID for the account that owns the specified Object Lambda
  Access Point.

"""
function get_access_point_configuration_for_object_lambda(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/accesspointforobjectlambda/$(name)/configuration",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_access_point_configuration_for_object_lambda(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/accesspointforobjectlambda/$(name)/configuration",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_access_point_for_object_lambda(name, x-amz-account-id)
    get_access_point_for_object_lambda(name, x-amz-account-id, params::Dict{String,<:Any})

Returns configuration information about the specified Object Lambda Access Point The
following actions are related to GetAccessPointForObjectLambda:
CreateAccessPointForObjectLambda     DeleteAccessPointForObjectLambda
ListAccessPointsForObjectLambda

# Arguments
- `name`: The name of the Object Lambda Access Point.
- `x-amz-account-id`: The account ID for the account that owns the specified Object Lambda
  Access Point.

"""
function get_access_point_for_object_lambda(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/accesspointforobjectlambda/$(name)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_access_point_for_object_lambda(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/accesspointforobjectlambda/$(name)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_access_point_policy(name, x-amz-account-id)
    get_access_point_policy(name, x-amz-account-id, params::Dict{String,<:Any})

Returns the access point policy associated with the specified access point. The following
actions are related to GetAccessPointPolicy:    PutAccessPointPolicy
DeleteAccessPointPolicy

# Arguments
- `name`: The name of the access point whose policy you want to retrieve. For using this
  parameter with Amazon S3 on Outposts with the REST API, you must specify the name and the
  x-amz-outpost-id as well. For using this parameter with S3 on Outposts with the Amazon Web
  Services SDK and CLI, you must specify the ARN of the access point accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/accesspoint
  /&lt;my-accesspoint-name&gt;. For example, to access the access point reports-ap through
  outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding
  of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/accesspoint/reports-ap.
  The value must be URL encoded.
- `x-amz-account-id`: The account ID for the account that owns the specified access point.

"""
function get_access_point_policy(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/accesspoint/$(name)/policy",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_access_point_policy(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/accesspoint/$(name)/policy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_access_point_policy_for_object_lambda(name, x-amz-account-id)
    get_access_point_policy_for_object_lambda(name, x-amz-account-id, params::Dict{String,<:Any})

Returns the resource policy for an Object Lambda Access Point. The following actions are
related to GetAccessPointPolicyForObjectLambda:    DeleteAccessPointPolicyForObjectLambda
  PutAccessPointPolicyForObjectLambda

# Arguments
- `name`: The name of the Object Lambda Access Point.
- `x-amz-account-id`: The account ID for the account that owns the specified Object Lambda
  Access Point.

"""
function get_access_point_policy_for_object_lambda(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/accesspointforobjectlambda/$(name)/policy",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_access_point_policy_for_object_lambda(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/accesspointforobjectlambda/$(name)/policy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_access_point_policy_status(name, x-amz-account-id)
    get_access_point_policy_status(name, x-amz-account-id, params::Dict{String,<:Any})

Indicates whether the specified access point currently has a policy that allows public
access. For more information about public access through access points, see Managing Data
Access with Amazon S3 access points in the Amazon S3 User Guide.

# Arguments
- `name`: The name of the access point whose policy status you want to retrieve.
- `x-amz-account-id`: The account ID for the account that owns the specified access point.

"""
function get_access_point_policy_status(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/accesspoint/$(name)/policyStatus",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_access_point_policy_status(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/accesspoint/$(name)/policyStatus",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_access_point_policy_status_for_object_lambda(name, x-amz-account-id)
    get_access_point_policy_status_for_object_lambda(name, x-amz-account-id, params::Dict{String,<:Any})

Returns the status of the resource policy associated with an Object Lambda Access Point.

# Arguments
- `name`: The name of the Object Lambda Access Point.
- `x-amz-account-id`: The account ID for the account that owns the specified Object Lambda
  Access Point.

"""
function get_access_point_policy_status_for_object_lambda(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/accesspointforobjectlambda/$(name)/policyStatus",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_access_point_policy_status_for_object_lambda(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/accesspointforobjectlambda/$(name)/policyStatus",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket(name, x-amz-account-id)
    get_bucket(name, x-amz-account-id, params::Dict{String,<:Any})

Gets an Amazon S3 on Outposts bucket. For more information, see  Using Amazon S3 on
Outposts in the Amazon S3 User Guide. If you are using an identity other than the root user
of the Amazon Web Services account that owns the Outposts bucket, the calling identity must
have the s3-outposts:GetBucket permissions on the specified Outposts bucket and belong to
the Outposts bucket owner's account in order to use this action. Only users from Outposts
bucket owner account with the right permissions can perform actions on an Outposts bucket.
 If you don't have s3-outposts:GetBucket permissions or you're not using an identity that
belongs to the bucket owner's account, Amazon S3 returns a 403 Access Denied error. The
following actions are related to GetBucket for Amazon S3 on Outposts: All Amazon S3 on
Outposts REST API requests for this action require an additional parameter of
x-amz-outpost-id to be passed with the request. In addition, you must use an S3 on Outposts
endpoint hostname prefix instead of s3-control. For an example of the request syntax for
Amazon S3 on Outposts that uses the S3 on Outposts endpoint hostname prefix and the
x-amz-outpost-id derived by using the access point ARN, see the Examples section.
PutObject     CreateBucket     DeleteBucket

# Arguments
- `name`: Specifies the bucket. For using this parameter with Amazon S3 on Outposts with
  the REST API, you must specify the name and the x-amz-outpost-id as well. For using this
  parameter with S3 on Outposts with the Amazon Web Services SDK and CLI, you must specify
  the ARN of the bucket accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt
  ;my-bucket-name&gt;. For example, to access the bucket reports through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value
  must be URL encoded.
- `x-amz-account-id`: The Amazon Web Services account ID of the Outposts bucket.

"""
function get_bucket(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/bucket/$(name)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/bucket/$(name)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_lifecycle_configuration(name, x-amz-account-id)
    get_bucket_lifecycle_configuration(name, x-amz-account-id, params::Dict{String,<:Any})

 This action gets an Amazon S3 on Outposts bucket's lifecycle configuration. To get an S3
bucket's lifecycle configuration, see GetBucketLifecycleConfiguration in the Amazon S3 API
Reference.   Returns the lifecycle configuration information set on the Outposts bucket.
For more information, see Using Amazon S3 on Outposts and for information about lifecycle
configuration, see  Object Lifecycle Management in Amazon S3 User Guide. To use this
action, you must have permission to perform the s3-outposts:GetLifecycleConfiguration
action. The Outposts bucket owner has this permission, by default. The bucket owner can
grant this permission to others. For more information about permissions, see Permissions
Related to Bucket Subresource Operations and Managing Access Permissions to Your Amazon S3
Resources. All Amazon S3 on Outposts REST API requests for this action require an
additional parameter of x-amz-outpost-id to be passed with the request. In addition, you
must use an S3 on Outposts endpoint hostname prefix instead of s3-control. For an example
of the request syntax for Amazon S3 on Outposts that uses the S3 on Outposts endpoint
hostname prefix and the x-amz-outpost-id derived by using the access point ARN, see the
Examples section.  GetBucketLifecycleConfiguration has the following special error:   Error
code: NoSuchLifecycleConfiguration    Description: The lifecycle configuration does not
exist.   HTTP Status Code: 404 Not Found   SOAP Fault Code Prefix: Client     The following
actions are related to GetBucketLifecycleConfiguration:    PutBucketLifecycleConfiguration
   DeleteBucketLifecycleConfiguration

# Arguments
- `name`: The Amazon Resource Name (ARN) of the bucket. For using this parameter with
  Amazon S3 on Outposts with the REST API, you must specify the name and the x-amz-outpost-id
  as well. For using this parameter with S3 on Outposts with the Amazon Web Services SDK and
  CLI, you must specify the ARN of the bucket accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt
  ;my-bucket-name&gt;. For example, to access the bucket reports through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value
  must be URL encoded.
- `x-amz-account-id`: The Amazon Web Services account ID of the Outposts bucket.

"""
function get_bucket_lifecycle_configuration(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/bucket/$(name)/lifecycleconfiguration",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_lifecycle_configuration(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/bucket/$(name)/lifecycleconfiguration",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_policy(name, x-amz-account-id)
    get_bucket_policy(name, x-amz-account-id, params::Dict{String,<:Any})

 This action gets a bucket policy for an Amazon S3 on Outposts bucket. To get a policy for
an S3 bucket, see GetBucketPolicy in the Amazon S3 API Reference.   Returns the policy of a
specified Outposts bucket. For more information, see Using Amazon S3 on Outposts in the
Amazon S3 User Guide. If you are using an identity other than the root user of the Amazon
Web Services account that owns the bucket, the calling identity must have the
GetBucketPolicy permissions on the specified bucket and belong to the bucket owner's
account in order to use this action. Only users from Outposts bucket owner account with the
right permissions can perform actions on an Outposts bucket. If you don't have
s3-outposts:GetBucketPolicy permissions or you're not using an identity that belongs to the
bucket owner's account, Amazon S3 returns a 403 Access Denied error.  As a security
precaution, the root user of the Amazon Web Services account that owns a bucket can always
use this action, even if the policy explicitly denies the root user the ability to perform
this action.  For more information about bucket policies, see Using Bucket Policies and
User Policies. All Amazon S3 on Outposts REST API requests for this action require an
additional parameter of x-amz-outpost-id to be passed with the request. In addition, you
must use an S3 on Outposts endpoint hostname prefix instead of s3-control. For an example
of the request syntax for Amazon S3 on Outposts that uses the S3 on Outposts endpoint
hostname prefix and the x-amz-outpost-id derived by using the access point ARN, see the
Examples section. The following actions are related to GetBucketPolicy:    GetObject
PutBucketPolicy     DeleteBucketPolicy

# Arguments
- `name`: Specifies the bucket. For using this parameter with Amazon S3 on Outposts with
  the REST API, you must specify the name and the x-amz-outpost-id as well. For using this
  parameter with S3 on Outposts with the Amazon Web Services SDK and CLI, you must specify
  the ARN of the bucket accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt
  ;my-bucket-name&gt;. For example, to access the bucket reports through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value
  must be URL encoded.
- `x-amz-account-id`: The Amazon Web Services account ID of the Outposts bucket.

"""
function get_bucket_policy(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/bucket/$(name)/policy",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_policy(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/bucket/$(name)/policy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_tagging(name, x-amz-account-id)
    get_bucket_tagging(name, x-amz-account-id, params::Dict{String,<:Any})

 This action gets an Amazon S3 on Outposts bucket's tags. To get an S3 bucket tags, see
GetBucketTagging in the Amazon S3 API Reference.   Returns the tag set associated with the
Outposts bucket. For more information, see Using Amazon S3 on Outposts in the Amazon S3
User Guide. To use this action, you must have permission to perform the GetBucketTagging
action. By default, the bucket owner has this permission and can grant this permission to
others.  GetBucketTagging has the following special error:   Error code: NoSuchTagSetError
  Description: There is no tag set associated with the bucket.     All Amazon S3 on
Outposts REST API requests for this action require an additional parameter of
x-amz-outpost-id to be passed with the request. In addition, you must use an S3 on Outposts
endpoint hostname prefix instead of s3-control. For an example of the request syntax for
Amazon S3 on Outposts that uses the S3 on Outposts endpoint hostname prefix and the
x-amz-outpost-id derived by using the access point ARN, see the Examples section. The
following actions are related to GetBucketTagging:    PutBucketTagging
DeleteBucketTagging

# Arguments
- `name`: Specifies the bucket. For using this parameter with Amazon S3 on Outposts with
  the REST API, you must specify the name and the x-amz-outpost-id as well. For using this
  parameter with S3 on Outposts with the Amazon Web Services SDK and CLI, you must specify
  the ARN of the bucket accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt
  ;my-bucket-name&gt;. For example, to access the bucket reports through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value
  must be URL encoded.
- `x-amz-account-id`: The Amazon Web Services account ID of the Outposts bucket.

"""
function get_bucket_tagging(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/bucket/$(name)/tagging",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_tagging(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/bucket/$(name)/tagging",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_bucket_versioning(name, x-amz-account-id)
    get_bucket_versioning(name, x-amz-account-id, params::Dict{String,<:Any})

 This operation returns the versioning state only for S3 on Outposts buckets. To return the
versioning state for an S3 bucket, see GetBucketVersioning in the Amazon S3 API Reference.
 Returns the versioning state for an S3 on Outposts bucket. With versioning, you can save
multiple distinct copies of your data and recover from unintended user actions and
application failures. If you've never set versioning on your bucket, it has no versioning
state. In that case, the GetBucketVersioning request does not return a versioning state
value. For more information about versioning, see Versioning in the Amazon S3 User Guide.
All Amazon S3 on Outposts REST API requests for this action require an additional parameter
of x-amz-outpost-id to be passed with the request. In addition, you must use an S3 on
Outposts endpoint hostname prefix instead of s3-control. For an example of the request
syntax for Amazon S3 on Outposts that uses the S3 on Outposts endpoint hostname prefix and
the x-amz-outpost-id derived by using the access point ARN, see the Examples section. The
following operations are related to GetBucketVersioning for S3 on Outposts.
PutBucketVersioning     PutBucketLifecycleConfiguration     GetBucketLifecycleConfiguration


# Arguments
- `name`: The S3 on Outposts bucket to return the versioning state for.
- `x-amz-account-id`: The Amazon Web Services account ID of the S3 on Outposts bucket.

"""
function get_bucket_versioning(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/bucket/$(name)/versioning",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_bucket_versioning(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/bucket/$(name)/versioning",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_job_tagging(id, x-amz-account-id)
    get_job_tagging(id, x-amz-account-id, params::Dict{String,<:Any})

Returns the tags on an S3 Batch Operations job. To use this operation, you must have
permission to perform the s3:GetJobTagging action. For more information, see Controlling
access and labeling jobs using tags in the Amazon S3 User Guide.  Related actions include:
  CreateJob     PutJobTagging     DeleteJobTagging

# Arguments
- `id`: The ID for the S3 Batch Operations job whose tags you want to retrieve.
- `x-amz-account-id`: The Amazon Web Services account ID associated with the S3 Batch
  Operations job.

"""
function get_job_tagging(
    id, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/jobs/$(id)/tagging",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_job_tagging(
    id,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/jobs/$(id)/tagging",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_multi_region_access_point(name, x-amz-account-id)
    get_multi_region_access_point(name, x-amz-account-id, params::Dict{String,<:Any})

Returns configuration information about the specified Multi-Region Access Point. This
action will always be routed to the US West (Oregon) Region. For more information about the
restrictions around managing Multi-Region Access Points, see Managing Multi-Region Access
Points in the Amazon S3 User Guide. The following actions are related to
GetMultiRegionAccessPoint:    CreateMultiRegionAccessPoint     DeleteMultiRegionAccessPoint
    DescribeMultiRegionAccessPointOperation     ListMultiRegionAccessPoints

# Arguments
- `name`: The name of the Multi-Region Access Point whose configuration information you
  want to receive. The name of the Multi-Region Access Point is different from the alias. For
  more information about the distinction between the name and the alias of an Multi-Region
  Access Point, see Managing Multi-Region Access Points in the Amazon S3 User Guide.
- `x-amz-account-id`: The Amazon Web Services account ID for the owner of the Multi-Region
  Access Point.

"""
function get_multi_region_access_point(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/mrap/instances/$(name)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_multi_region_access_point(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/mrap/instances/$(name)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_multi_region_access_point_policy(name, x-amz-account-id)
    get_multi_region_access_point_policy(name, x-amz-account-id, params::Dict{String,<:Any})

Returns the access control policy of the specified Multi-Region Access Point. This action
will always be routed to the US West (Oregon) Region. For more information about the
restrictions around managing Multi-Region Access Points, see Managing Multi-Region Access
Points in the Amazon S3 User Guide. The following actions are related to
GetMultiRegionAccessPointPolicy:    GetMultiRegionAccessPointPolicyStatus
PutMultiRegionAccessPointPolicy

# Arguments
- `name`: Specifies the Multi-Region Access Point. The name of the Multi-Region Access
  Point is different from the alias. For more information about the distinction between the
  name and the alias of an Multi-Region Access Point, see Managing Multi-Region Access Points
  in the Amazon S3 User Guide.
- `x-amz-account-id`: The Amazon Web Services account ID for the owner of the Multi-Region
  Access Point.

"""
function get_multi_region_access_point_policy(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/mrap/instances/$(name)/policy",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_multi_region_access_point_policy(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/mrap/instances/$(name)/policy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_multi_region_access_point_policy_status(name, x-amz-account-id)
    get_multi_region_access_point_policy_status(name, x-amz-account-id, params::Dict{String,<:Any})

Indicates whether the specified Multi-Region Access Point has an access control policy that
allows public access. This action will always be routed to the US West (Oregon) Region. For
more information about the restrictions around managing Multi-Region Access Points, see
Managing Multi-Region Access Points in the Amazon S3 User Guide. The following actions are
related to GetMultiRegionAccessPointPolicyStatus:    GetMultiRegionAccessPointPolicy
PutMultiRegionAccessPointPolicy

# Arguments
- `name`: Specifies the Multi-Region Access Point. The name of the Multi-Region Access
  Point is different from the alias. For more information about the distinction between the
  name and the alias of an Multi-Region Access Point, see Managing Multi-Region Access Points
  in the Amazon S3 User Guide.
- `x-amz-account-id`: The Amazon Web Services account ID for the owner of the Multi-Region
  Access Point.

"""
function get_multi_region_access_point_policy_status(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/mrap/instances/$(name)/policystatus",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_multi_region_access_point_policy_status(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/mrap/instances/$(name)/policystatus",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_public_access_block(x-amz-account-id)
    get_public_access_block(x-amz-account-id, params::Dict{String,<:Any})

Retrieves the PublicAccessBlock configuration for an Amazon Web Services account. For more
information, see  Using Amazon S3 block public access. Related actions include:
DeletePublicAccessBlock     PutPublicAccessBlock

# Arguments
- `x-amz-account-id`: The account ID for the Amazon Web Services account whose
  PublicAccessBlock configuration you want to retrieve.

"""
function get_public_access_block(
    x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/configuration/publicAccessBlock",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_public_access_block(
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/configuration/publicAccessBlock",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_storage_lens_configuration(storagelensid, x-amz-account-id)
    get_storage_lens_configuration(storagelensid, x-amz-account-id, params::Dict{String,<:Any})

Gets the Amazon S3 Storage Lens configuration. For more information, see Assessing your
storage activity and usage with Amazon S3 Storage Lens  in the Amazon S3 User Guide.  To
use this action, you must have permission to perform the s3:GetStorageLensConfiguration
action. For more information, see Setting permissions to use Amazon S3 Storage Lens in the
Amazon S3 User Guide.

# Arguments
- `storagelensid`: The ID of the Amazon S3 Storage Lens configuration.
- `x-amz-account-id`: The account ID of the requester.

"""
function get_storage_lens_configuration(
    storagelensid, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/storagelens/$(storagelensid)",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_storage_lens_configuration(
    storagelensid,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/storagelens/$(storagelensid)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_storage_lens_configuration_tagging(storagelensid, x-amz-account-id)
    get_storage_lens_configuration_tagging(storagelensid, x-amz-account-id, params::Dict{String,<:Any})

Gets the tags of Amazon S3 Storage Lens configuration. For more information about S3
Storage Lens, see Assessing your storage activity and usage with Amazon S3 Storage Lens  in
the Amazon S3 User Guide.  To use this action, you must have permission to perform the
s3:GetStorageLensConfigurationTagging action. For more information, see Setting permissions
to use Amazon S3 Storage Lens in the Amazon S3 User Guide.

# Arguments
- `storagelensid`: The ID of the Amazon S3 Storage Lens configuration.
- `x-amz-account-id`: The account ID of the requester.

"""
function get_storage_lens_configuration_tagging(
    storagelensid, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/storagelens/$(storagelensid)/tagging",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_storage_lens_configuration_tagging(
    storagelensid,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/storagelens/$(storagelensid)/tagging",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_access_points(x-amz-account-id)
    list_access_points(x-amz-account-id, params::Dict{String,<:Any})

Returns a list of the access points currently associated with the specified bucket. You can
retrieve up to 1000 access points per call. If the specified bucket has more than 1,000
access points (or the number specified in maxResults, whichever is less), the response will
include a continuation token that you can use to list the additional access points.  All
Amazon S3 on Outposts REST API requests for this action require an additional parameter of
x-amz-outpost-id to be passed with the request. In addition, you must use an S3 on Outposts
endpoint hostname prefix instead of s3-control. For an example of the request syntax for
Amazon S3 on Outposts that uses the S3 on Outposts endpoint hostname prefix and the
x-amz-outpost-id derived by using the access point ARN, see the Examples section. The
following actions are related to ListAccessPoints:    CreateAccessPoint
DeleteAccessPoint     GetAccessPoint

# Arguments
- `x-amz-account-id`: The Amazon Web Services account ID for owner of the bucket whose
  access points you want to list.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"bucket"`: The name of the bucket whose associated access points you want to list. For
  using this parameter with Amazon S3 on Outposts with the REST API, you must specify the
  name and the x-amz-outpost-id as well. For using this parameter with S3 on Outposts with
  the Amazon Web Services SDK and CLI, you must specify the ARN of the bucket accessed in the
  format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt
  ;my-bucket-name&gt;. For example, to access the bucket reports through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value
  must be URL encoded.
- `"maxResults"`: The maximum number of access points that you want to include in the list.
  If the specified bucket has more than this number of access points, then the response will
  include a continuation token in the NextToken field that you can use to retrieve the next
  page of access points.
- `"nextToken"`: A continuation token. If a previous call to ListAccessPoints returned a
  continuation token in the NextToken field, then providing that value here causes Amazon S3
  to retrieve the next page of results.
"""
function list_access_points(
    x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/accesspoint",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_access_points(
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/accesspoint",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_access_points_for_object_lambda(x-amz-account-id)
    list_access_points_for_object_lambda(x-amz-account-id, params::Dict{String,<:Any})

Returns some or all (up to 1,000) access points associated with the Object Lambda Access
Point per call. If there are more access points than what can be returned in one call, the
response will include a continuation token that you can use to list the additional access
points. The following actions are related to ListAccessPointsForObjectLambda:
CreateAccessPointForObjectLambda     DeleteAccessPointForObjectLambda
GetAccessPointForObjectLambda

# Arguments
- `x-amz-account-id`: The account ID for the account that owns the specified Object Lambda
  Access Point.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of access points that you want to include in the list.
  The response may contain fewer access points but will never contain more. If there are more
  than this number of access points, then the response will include a continuation token in
  the NextToken field that you can use to retrieve the next page of access points.
- `"nextToken"`: If the list has more access points than can be returned in one call to
  this API, this field contains a continuation token that you can provide in subsequent calls
  to this API to retrieve additional access points.
"""
function list_access_points_for_object_lambda(
    x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/accesspointforobjectlambda",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_access_points_for_object_lambda(
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/accesspointforobjectlambda",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_jobs(x-amz-account-id)
    list_jobs(x-amz-account-id, params::Dict{String,<:Any})

Lists current S3 Batch Operations jobs and jobs that have ended within the last 30 days for
the Amazon Web Services account making the request. For more information, see S3 Batch
Operations in the Amazon S3 User Guide. Related actions include:     CreateJob
DescribeJob     UpdateJobPriority     UpdateJobStatus

# Arguments
- `x-amz-account-id`: The Amazon Web Services account ID associated with the S3 Batch
  Operations job.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"jobStatuses"`: The List Jobs request returns jobs that match the statuses listed in
  this element.
- `"maxResults"`: The maximum number of jobs that Amazon S3 will include in the List Jobs
  response. If there are more jobs than this number, the response will include a pagination
  token in the NextToken field to enable you to retrieve the next page of results.
- `"nextToken"`: A pagination token to request the next page of results. Use the token that
  Amazon S3 returned in the NextToken element of the ListJobsResult from the previous List
  Jobs request.
"""
function list_jobs(x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config())
    return s3_control(
        "GET",
        "/v20180820/jobs",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_jobs(
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/jobs",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_multi_region_access_points(x-amz-account-id)
    list_multi_region_access_points(x-amz-account-id, params::Dict{String,<:Any})

Returns a list of the Multi-Region Access Points currently associated with the specified
Amazon Web Services account. Each call can return up to 100 Multi-Region Access Points, the
maximum number of Multi-Region Access Points that can be associated with a single account.
This action will always be routed to the US West (Oregon) Region. For more information
about the restrictions around managing Multi-Region Access Points, see Managing
Multi-Region Access Points in the Amazon S3 User Guide. The following actions are related
to ListMultiRegionAccessPoint:    CreateMultiRegionAccessPoint
DeleteMultiRegionAccessPoint     DescribeMultiRegionAccessPointOperation
GetMultiRegionAccessPoint

# Arguments
- `x-amz-account-id`: The Amazon Web Services account ID for the owner of the Multi-Region
  Access Point.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: Not currently used. Do not use this parameter.
- `"nextToken"`: Not currently used. Do not use this parameter.
"""
function list_multi_region_access_points(
    x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/mrap/instances",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_multi_region_access_points(
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/mrap/instances",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_regional_buckets(x-amz-account-id)
    list_regional_buckets(x-amz-account-id, params::Dict{String,<:Any})

Returns a list of all Outposts buckets in an Outpost that are owned by the authenticated
sender of the request. For more information, see Using Amazon S3 on Outposts in the Amazon
S3 User Guide. For an example of the request syntax for Amazon S3 on Outposts that uses the
S3 on Outposts endpoint hostname prefix and x-amz-outpost-id in your request, see the
Examples section.

# Arguments
- `x-amz-account-id`: The Amazon Web Services account ID of the Outposts bucket.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`:
- `"nextToken"`:
- `"x-amz-outpost-id"`: The ID of the Outposts resource.  This ID is required by Amazon S3
  on Outposts buckets.
"""
function list_regional_buckets(
    x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/bucket",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_regional_buckets(
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/bucket",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_storage_lens_configurations(x-amz-account-id)
    list_storage_lens_configurations(x-amz-account-id, params::Dict{String,<:Any})

Gets a list of Amazon S3 Storage Lens configurations. For more information about S3 Storage
Lens, see Assessing your storage activity and usage with Amazon S3 Storage Lens  in the
Amazon S3 User Guide.  To use this action, you must have permission to perform the
s3:ListStorageLensConfigurations action. For more information, see Setting permissions to
use Amazon S3 Storage Lens in the Amazon S3 User Guide.

# Arguments
- `x-amz-account-id`: The account ID of the requester.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"nextToken"`: A pagination token to request the next page of results.
"""
function list_storage_lens_configurations(
    x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "GET",
        "/v20180820/storagelens",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_storage_lens_configurations(
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "GET",
        "/v20180820/storagelens",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_access_point_configuration_for_object_lambda(configuration, name, x-amz-account-id)
    put_access_point_configuration_for_object_lambda(configuration, name, x-amz-account-id, params::Dict{String,<:Any})

Replaces configuration for an Object Lambda Access Point. The following actions are related
to PutAccessPointConfigurationForObjectLambda:
GetAccessPointConfigurationForObjectLambda

# Arguments
- `configuration`: Object Lambda Access Point configuration document.
- `name`: The name of the Object Lambda Access Point.
- `x-amz-account-id`: The account ID for the account that owns the specified Object Lambda
  Access Point.

"""
function put_access_point_configuration_for_object_lambda(
    Configuration, name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "PUT",
        "/v20180820/accesspointforobjectlambda/$(name)/configuration",
        Dict{String,Any}(
            "Configuration" => Configuration,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_access_point_configuration_for_object_lambda(
    Configuration,
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/accesspointforobjectlambda/$(name)/configuration",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Configuration" => Configuration,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_access_point_policy(policy, name, x-amz-account-id)
    put_access_point_policy(policy, name, x-amz-account-id, params::Dict{String,<:Any})

Associates an access policy with the specified access point. Each access point can have
only one policy, so a request made to this API replaces any existing policy associated with
the specified access point.  All Amazon S3 on Outposts REST API requests for this action
require an additional parameter of x-amz-outpost-id to be passed with the request. In
addition, you must use an S3 on Outposts endpoint hostname prefix instead of s3-control.
For an example of the request syntax for Amazon S3 on Outposts that uses the S3 on Outposts
endpoint hostname prefix and the x-amz-outpost-id derived by using the access point ARN,
see the Examples section. The following actions are related to PutAccessPointPolicy:
GetAccessPointPolicy     DeleteAccessPointPolicy

# Arguments
- `policy`: The policy that you want to apply to the specified access point. For more
  information about access point policies, see Managing data access with Amazon S3 access
  points in the Amazon S3 User Guide.
- `name`: The name of the access point that you want to associate with the specified
  policy. For using this parameter with Amazon S3 on Outposts with the REST API, you must
  specify the name and the x-amz-outpost-id as well. For using this parameter with S3 on
  Outposts with the Amazon Web Services SDK and CLI, you must specify the ARN of the access
  point accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/accesspoint
  /&lt;my-accesspoint-name&gt;. For example, to access the access point reports-ap through
  outpost my-outpost owned by account 123456789012 in Region us-west-2, use the URL encoding
  of arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/accesspoint/reports-ap.
  The value must be URL encoded.
- `x-amz-account-id`: The Amazon Web Services account ID for owner of the bucket associated
  with the specified access point.

"""
function put_access_point_policy(
    Policy, name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "PUT",
        "/v20180820/accesspoint/$(name)/policy",
        Dict{String,Any}(
            "Policy" => Policy,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_access_point_policy(
    Policy,
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/accesspoint/$(name)/policy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Policy" => Policy,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_access_point_policy_for_object_lambda(policy, name, x-amz-account-id)
    put_access_point_policy_for_object_lambda(policy, name, x-amz-account-id, params::Dict{String,<:Any})

Creates or replaces resource policy for an Object Lambda Access Point. For an example
policy, see Creating Object Lambda Access Points in the Amazon S3 User Guide. The following
actions are related to PutAccessPointPolicyForObjectLambda:
DeleteAccessPointPolicyForObjectLambda     GetAccessPointPolicyForObjectLambda

# Arguments
- `policy`: Object Lambda Access Point resource policy document.
- `name`: The name of the Object Lambda Access Point.
- `x-amz-account-id`: The account ID for the account that owns the specified Object Lambda
  Access Point.

"""
function put_access_point_policy_for_object_lambda(
    Policy, name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "PUT",
        "/v20180820/accesspointforobjectlambda/$(name)/policy",
        Dict{String,Any}(
            "Policy" => Policy,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_access_point_policy_for_object_lambda(
    Policy,
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/accesspointforobjectlambda/$(name)/policy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Policy" => Policy,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_lifecycle_configuration(name, x-amz-account-id)
    put_bucket_lifecycle_configuration(name, x-amz-account-id, params::Dict{String,<:Any})

 This action puts a lifecycle configuration to an Amazon S3 on Outposts bucket. To put a
lifecycle configuration to an S3 bucket, see PutBucketLifecycleConfiguration in the Amazon
S3 API Reference.   Creates a new lifecycle configuration for the S3 on Outposts bucket or
replaces an existing lifecycle configuration. Outposts buckets only support lifecycle
configurations that delete/expire objects after a certain period of time and abort
incomplete multipart uploads.  All Amazon S3 on Outposts REST API requests for this action
require an additional parameter of x-amz-outpost-id to be passed with the request. In
addition, you must use an S3 on Outposts endpoint hostname prefix instead of s3-control.
For an example of the request syntax for Amazon S3 on Outposts that uses the S3 on Outposts
endpoint hostname prefix and the x-amz-outpost-id derived by using the access point ARN,
see the Examples section. The following actions are related to
PutBucketLifecycleConfiguration:    GetBucketLifecycleConfiguration
DeleteBucketLifecycleConfiguration

# Arguments
- `name`: The name of the bucket for which to set the configuration.
- `x-amz-account-id`: The Amazon Web Services account ID of the Outposts bucket.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"LifecycleConfiguration"`: Container for lifecycle rules. You can add as many as 1,000
  rules.
"""
function put_bucket_lifecycle_configuration(
    name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "PUT",
        "/v20180820/bucket/$(name)/lifecycleconfiguration",
        Dict{String,Any}(
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_lifecycle_configuration(
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/bucket/$(name)/lifecycleconfiguration",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_policy(policy, name, x-amz-account-id)
    put_bucket_policy(policy, name, x-amz-account-id, params::Dict{String,<:Any})

 This action puts a bucket policy to an Amazon S3 on Outposts bucket. To put a policy on an
S3 bucket, see PutBucketPolicy in the Amazon S3 API Reference.   Applies an Amazon S3
bucket policy to an Outposts bucket. For more information, see Using Amazon S3 on Outposts
in the Amazon S3 User Guide. If you are using an identity other than the root user of the
Amazon Web Services account that owns the Outposts bucket, the calling identity must have
the PutBucketPolicy permissions on the specified Outposts bucket and belong to the bucket
owner's account in order to use this action. If you don't have PutBucketPolicy permissions,
Amazon S3 returns a 403 Access Denied error. If you have the correct permissions, but
you're not using an identity that belongs to the bucket owner's account, Amazon S3 returns
a 405 Method Not Allowed error.   As a security precaution, the root user of the Amazon Web
Services account that owns a bucket can always use this action, even if the policy
explicitly denies the root user the ability to perform this action.   For more information
about bucket policies, see Using Bucket Policies and User Policies. All Amazon S3 on
Outposts REST API requests for this action require an additional parameter of
x-amz-outpost-id to be passed with the request. In addition, you must use an S3 on Outposts
endpoint hostname prefix instead of s3-control. For an example of the request syntax for
Amazon S3 on Outposts that uses the S3 on Outposts endpoint hostname prefix and the
x-amz-outpost-id derived by using the access point ARN, see the Examples section. The
following actions are related to PutBucketPolicy:    GetBucketPolicy     DeleteBucketPolicy


# Arguments
- `policy`: The bucket policy as a JSON document.
- `name`: Specifies the bucket. For using this parameter with Amazon S3 on Outposts with
  the REST API, you must specify the name and the x-amz-outpost-id as well. For using this
  parameter with S3 on Outposts with the Amazon Web Services SDK and CLI, you must specify
  the ARN of the bucket accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt
  ;my-bucket-name&gt;. For example, to access the bucket reports through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value
  must be URL encoded.
- `x-amz-account-id`: The Amazon Web Services account ID of the Outposts bucket.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-confirm-remove-self-bucket-access"`: Set this parameter to true to confirm that
  you want to remove your permissions to change this bucket policy in the future.  This is
  not supported by Amazon S3 on Outposts buckets.
"""
function put_bucket_policy(
    Policy, name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "PUT",
        "/v20180820/bucket/$(name)/policy",
        Dict{String,Any}(
            "Policy" => Policy,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_policy(
    Policy,
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/bucket/$(name)/policy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Policy" => Policy,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_tagging(tagging, name, x-amz-account-id)
    put_bucket_tagging(tagging, name, x-amz-account-id, params::Dict{String,<:Any})

 This action puts tags on an Amazon S3 on Outposts bucket. To put tags on an S3 bucket, see
PutBucketTagging in the Amazon S3 API Reference.   Sets the tags for an S3 on Outposts
bucket. For more information, see Using Amazon S3 on Outposts in the Amazon S3 User Guide.
Use tags to organize your Amazon Web Services bill to reflect your own cost structure. To
do this, sign up to get your Amazon Web Services account bill with tag key values included.
Then, to see the cost of combined resources, organize your billing information according to
resources with the same tag key values. For example, you can tag several resources with a
specific application name, and then organize your billing information to see the total cost
of that application across several services. For more information, see Cost allocation and
tagging.  Within a bucket, if you add a tag that has the same key as an existing tag, the
new value overwrites the old value. For more information, see  Using cost allocation in
Amazon S3 bucket tags.  To use this action, you must have permissions to perform the
s3-outposts:PutBucketTagging action. The Outposts bucket owner has this permission by
default and can grant this permission to others. For more information about permissions,
see  Permissions Related to Bucket Subresource Operations and Managing access permissions
to your Amazon S3 resources.  PutBucketTagging has the following special errors:   Error
code: InvalidTagError    Description: The tag provided was not a valid tag. This error can
occur if the tag did not pass input validation. For information about tag restrictions, see
 User-Defined Tag Restrictions and  Amazon Web Services-Generated Cost Allocation Tag
Restrictions.     Error code: MalformedXMLError    Description: The XML provided does not
match the schema.     Error code: OperationAbortedError     Description: A conflicting
conditional action is currently in progress against this resource. Try again.     Error
code: InternalError    Description: The service was unable to apply the provided tag to the
bucket.     All Amazon S3 on Outposts REST API requests for this action require an
additional parameter of x-amz-outpost-id to be passed with the request. In addition, you
must use an S3 on Outposts endpoint hostname prefix instead of s3-control. For an example
of the request syntax for Amazon S3 on Outposts that uses the S3 on Outposts endpoint
hostname prefix and the x-amz-outpost-id derived by using the access point ARN, see the
Examples section. The following actions are related to PutBucketTagging:
GetBucketTagging     DeleteBucketTagging

# Arguments
- `tagging`:
- `name`: The Amazon Resource Name (ARN) of the bucket. For using this parameter with
  Amazon S3 on Outposts with the REST API, you must specify the name and the x-amz-outpost-id
  as well. For using this parameter with S3 on Outposts with the Amazon Web Services SDK and
  CLI, you must specify the ARN of the bucket accessed in the format
  arn:aws:s3-outposts:&lt;Region&gt;:&lt;account-id&gt;:outpost/&lt;outpost-id&gt;/bucket/&lt
  ;my-bucket-name&gt;. For example, to access the bucket reports through outpost my-outpost
  owned by account 123456789012 in Region us-west-2, use the URL encoding of
  arn:aws:s3-outposts:us-west-2:123456789012:outpost/my-outpost/bucket/reports. The value
  must be URL encoded.
- `x-amz-account-id`: The Amazon Web Services account ID of the Outposts bucket.

"""
function put_bucket_tagging(
    Tagging, name, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "PUT",
        "/v20180820/bucket/$(name)/tagging",
        Dict{String,Any}(
            "Tagging" => Tagging,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_tagging(
    Tagging,
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/bucket/$(name)/tagging",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Tagging" => Tagging,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_bucket_versioning(versioning_configuration, name, x-amz-account-id)
    put_bucket_versioning(versioning_configuration, name, x-amz-account-id, params::Dict{String,<:Any})

 This operation sets the versioning state only for S3 on Outposts buckets. To set the
versioning state for an S3 bucket, see PutBucketVersioning in the Amazon S3 API Reference.
 Sets the versioning state for an S3 on Outposts bucket. With versioning, you can save
multiple distinct copies of your data and recover from unintended user actions and
application failures. You can set the versioning state to one of the following:    Enabled
- Enables versioning for the objects in the bucket. All objects added to the bucket receive
a unique version ID.    Suspended - Suspends versioning for the objects in the bucket. All
objects added to the bucket receive the version ID null.   If you've never set versioning
on your bucket, it has no versioning state. In that case, a  GetBucketVersioning request
does not return a versioning state value. When you enable S3 Versioning, for each object in
your bucket, you have a current version and zero or more noncurrent versions. You can
configure your bucket S3 Lifecycle rules to expire noncurrent versions after a specified
time period. For more information, see  Creating and managing a lifecycle configuration for
your S3 on Outposts bucket in the Amazon S3 User Guide. If you have an object expiration
lifecycle policy in your non-versioned bucket and you want to maintain the same permanent
delete behavior when you enable versioning, you must add a noncurrent expiration policy.
The noncurrent expiration lifecycle policy will manage the deletes of the noncurrent object
versions in the version-enabled bucket. For more information, see Versioning in the Amazon
S3 User Guide. All Amazon S3 on Outposts REST API requests for this action require an
additional parameter of x-amz-outpost-id to be passed with the request. In addition, you
must use an S3 on Outposts endpoint hostname prefix instead of s3-control. For an example
of the request syntax for Amazon S3 on Outposts that uses the S3 on Outposts endpoint
hostname prefix and the x-amz-outpost-id derived by using the access point ARN, see the
Examples section. The following operations are related to PutBucketVersioning for S3 on
Outposts.    GetBucketVersioning     PutBucketLifecycleConfiguration
GetBucketLifecycleConfiguration

# Arguments
- `versioning_configuration`: The root-level tag for the VersioningConfiguration parameters.
- `name`: The S3 on Outposts bucket to set the versioning state for.
- `x-amz-account-id`: The Amazon Web Services account ID of the S3 on Outposts bucket.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"x-amz-mfa"`: The concatenation of the authentication device's serial number, a space,
  and the value that is displayed on your authentication device.
"""
function put_bucket_versioning(
    VersioningConfiguration,
    name,
    x_amz_account_id;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/bucket/$(name)/versioning",
        Dict{String,Any}(
            "VersioningConfiguration" => VersioningConfiguration,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_bucket_versioning(
    VersioningConfiguration,
    name,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/bucket/$(name)/versioning",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "VersioningConfiguration" => VersioningConfiguration,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_job_tagging(tags, id, x-amz-account-id)
    put_job_tagging(tags, id, x-amz-account-id, params::Dict{String,<:Any})

Sets the supplied tag-set on an S3 Batch Operations job. A tag is a key-value pair. You can
associate S3 Batch Operations tags with any job by sending a PUT request against the
tagging subresource that is associated with the job. To modify the existing tag set, you
can either replace the existing tag set entirely, or make changes within the existing tag
set by retrieving the existing tag set using GetJobTagging, modify that tag set, and use
this action to replace the tag set with the one you modified. For more information, see
Controlling access and labeling jobs using tags in the Amazon S3 User Guide.      If you
send this request with an empty tag set, Amazon S3 deletes the existing tag set on the
Batch Operations job. If you use this method, you are charged for a Tier 1 Request (PUT).
For more information, see Amazon S3 pricing.   For deleting existing tags for your Batch
Operations job, a DeleteJobTagging request is preferred because it achieves the same result
without incurring charges.   A few things to consider about using tags:   Amazon S3 limits
the maximum number of tags to 50 tags per job.   You can associate up to 50 tags with a job
as long as they have unique tag keys.   A tag key can be up to 128 Unicode characters in
length, and tag values can be up to 256 Unicode characters in length.   The key and values
are case sensitive.   For tagging-related restrictions related to characters and encodings,
see User-Defined Tag Restrictions in the Billing and Cost Management User Guide.       To
use this action, you must have permission to perform the s3:PutJobTagging action. Related
actions include:    CreateJob     GetJobTagging     DeleteJobTagging

# Arguments
- `tags`: The set of tags to associate with the S3 Batch Operations job.
- `id`: The ID for the S3 Batch Operations job whose tags you want to replace.
- `x-amz-account-id`: The Amazon Web Services account ID associated with the S3 Batch
  Operations job.

"""
function put_job_tagging(
    Tags, id, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "PUT",
        "/v20180820/jobs/$(id)/tagging",
        Dict{String,Any}(
            "Tags" => Tags,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_job_tagging(
    Tags,
    id,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/jobs/$(id)/tagging",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Tags" => Tags,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_multi_region_access_point_policy(client_token, details, x-amz-account-id)
    put_multi_region_access_point_policy(client_token, details, x-amz-account-id, params::Dict{String,<:Any})

Associates an access control policy with the specified Multi-Region Access Point. Each
Multi-Region Access Point can have only one policy, so a request made to this action
replaces any existing policy that is associated with the specified Multi-Region Access
Point. This action will always be routed to the US West (Oregon) Region. For more
information about the restrictions around managing Multi-Region Access Points, see Managing
Multi-Region Access Points in the Amazon S3 User Guide. The following actions are related
to PutMultiRegionAccessPointPolicy:    GetMultiRegionAccessPointPolicy
GetMultiRegionAccessPointPolicyStatus

# Arguments
- `client_token`: An idempotency token used to identify the request and guarantee that
  requests are unique.
- `details`: A container element containing the details of the policy for the Multi-Region
  Access Point.
- `x-amz-account-id`: The Amazon Web Services account ID for the owner of the Multi-Region
  Access Point.

"""
function put_multi_region_access_point_policy(
    ClientToken,
    Details,
    x_amz_account_id;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "POST",
        "/v20180820/async-requests/mrap/put-policy",
        Dict{String,Any}(
            "ClientToken" => ClientToken,
            "Details" => Details,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_multi_region_access_point_policy(
    ClientToken,
    Details,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "POST",
        "/v20180820/async-requests/mrap/put-policy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ClientToken" => ClientToken,
                    "Details" => Details,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_public_access_block(public_access_block_configuration, x-amz-account-id)
    put_public_access_block(public_access_block_configuration, x-amz-account-id, params::Dict{String,<:Any})

Creates or modifies the PublicAccessBlock configuration for an Amazon Web Services account.
For this operation, users must have the s3:PutAccountPublicAccessBlock permission. For more
information, see  Using Amazon S3 block public access. Related actions include:
GetPublicAccessBlock     DeletePublicAccessBlock

# Arguments
- `public_access_block_configuration`: The PublicAccessBlock configuration that you want to
  apply to the specified Amazon Web Services account.
- `x-amz-account-id`: The account ID for the Amazon Web Services account whose
  PublicAccessBlock configuration you want to set.

"""
function put_public_access_block(
    PublicAccessBlockConfiguration,
    x_amz_account_id;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/configuration/publicAccessBlock",
        Dict{String,Any}(
            "PublicAccessBlockConfiguration" => PublicAccessBlockConfiguration,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_public_access_block(
    PublicAccessBlockConfiguration,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/configuration/publicAccessBlock",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "PublicAccessBlockConfiguration" => PublicAccessBlockConfiguration,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_storage_lens_configuration(storage_lens_configuration, storagelensid, x-amz-account-id)
    put_storage_lens_configuration(storage_lens_configuration, storagelensid, x-amz-account-id, params::Dict{String,<:Any})

Puts an Amazon S3 Storage Lens configuration. For more information about S3 Storage Lens,
see Working with Amazon S3 Storage Lens in the Amazon S3 User Guide.  To use this action,
you must have permission to perform the s3:PutStorageLensConfiguration action. For more
information, see Setting permissions to use Amazon S3 Storage Lens in the Amazon S3 User
Guide.

# Arguments
- `storage_lens_configuration`: The S3 Storage Lens configuration.
- `storagelensid`: The ID of the S3 Storage Lens configuration.
- `x-amz-account-id`: The account ID of the requester.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`: The tag set of the S3 Storage Lens configuration.  You can set up to a maximum
  of 50 tags.
"""
function put_storage_lens_configuration(
    StorageLensConfiguration,
    storagelensid,
    x_amz_account_id;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/storagelens/$(storagelensid)",
        Dict{String,Any}(
            "StorageLensConfiguration" => StorageLensConfiguration,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_storage_lens_configuration(
    StorageLensConfiguration,
    storagelensid,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/storagelens/$(storagelensid)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "StorageLensConfiguration" => StorageLensConfiguration,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_storage_lens_configuration_tagging(tag, storagelensid, x-amz-account-id)
    put_storage_lens_configuration_tagging(tag, storagelensid, x-amz-account-id, params::Dict{String,<:Any})

Put or replace tags on an existing Amazon S3 Storage Lens configuration. For more
information about S3 Storage Lens, see Assessing your storage activity and usage with
Amazon S3 Storage Lens  in the Amazon S3 User Guide.  To use this action, you must have
permission to perform the s3:PutStorageLensConfigurationTagging action. For more
information, see Setting permissions to use Amazon S3 Storage Lens in the Amazon S3 User
Guide.

# Arguments
- `tag`: The tag set of the S3 Storage Lens configuration.  You can set up to a maximum of
  50 tags.
- `storagelensid`: The ID of the S3 Storage Lens configuration.
- `x-amz-account-id`: The account ID of the requester.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`: The tag set of the S3 Storage Lens configuration.  You can set up to a maximum
  of 50 tags.
"""
function put_storage_lens_configuration_tagging(
    Tag, storagelensid, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "PUT",
        "/v20180820/storagelens/$(storagelensid)/tagging",
        Dict{String,Any}(
            "Tag" => Tag,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_storage_lens_configuration_tagging(
    Tag,
    storagelensid,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "PUT",
        "/v20180820/storagelens/$(storagelensid)/tagging",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Tag" => Tag,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_job_priority(id, priority, x-amz-account-id)
    update_job_priority(id, priority, x-amz-account-id, params::Dict{String,<:Any})

Updates an existing S3 Batch Operations job's priority. For more information, see S3 Batch
Operations in the Amazon S3 User Guide.  Related actions include:    CreateJob     ListJobs
    DescribeJob     UpdateJobStatus

# Arguments
- `id`: The ID for the job whose priority you want to update.
- `priority`: The priority you want to assign to this job.
- `x-amz-account-id`: The Amazon Web Services account ID associated with the S3 Batch
  Operations job.

"""
function update_job_priority(
    id, priority, x_amz_account_id; aws_config::AbstractAWSConfig=global_aws_config()
)
    return s3_control(
        "POST",
        "/v20180820/jobs/$(id)/priority",
        Dict{String,Any}(
            "priority" => priority,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_job_priority(
    id,
    priority,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "POST",
        "/v20180820/jobs/$(id)/priority",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "priority" => priority,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_job_status(id, requested_job_status, x-amz-account-id)
    update_job_status(id, requested_job_status, x-amz-account-id, params::Dict{String,<:Any})

Updates the status for the specified job. Use this action to confirm that you want to run a
job or to cancel an existing job. For more information, see S3 Batch Operations in the
Amazon S3 User Guide.  Related actions include:    CreateJob     ListJobs     DescribeJob
  UpdateJobStatus

# Arguments
- `id`: The ID of the job whose status you want to update.
- `requested_job_status`: The status that you want to move the specified job to.
- `x-amz-account-id`: The Amazon Web Services account ID associated with the S3 Batch
  Operations job.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"statusUpdateReason"`: A description of the reason why you want to change the specified
  job's status. This field can be any string up to the maximum length.
"""
function update_job_status(
    id,
    requestedJobStatus,
    x_amz_account_id;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "POST",
        "/v20180820/jobs/$(id)/status",
        Dict{String,Any}(
            "requestedJobStatus" => requestedJobStatus,
            "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_job_status(
    id,
    requestedJobStatus,
    x_amz_account_id,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return s3_control(
        "POST",
        "/v20180820/jobs/$(id)/status",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "requestedJobStatus" => requestedJobStatus,
                    "headers" => Dict{String,Any}("x-amz-account-id" => x_amz_account_id),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
