# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: ssm_sap
using AWS.Compat
using AWS.UUIDs

"""
    delete_resource_permission(resource_arn)
    delete_resource_permission(resource_arn, params::Dict{String,<:Any})

Removes permissions associated with the target database.

# Arguments
- `resource_arn`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ActionType"`:
- `"SourceResourceArn"`:
"""
function delete_resource_permission(
    ResourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_sap(
        "POST",
        "/delete-resource-permission",
        Dict{String,Any}("ResourceArn" => ResourceArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_resource_permission(
    ResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_sap(
        "POST",
        "/delete-resource-permission",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ResourceArn" => ResourceArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    deregister_application(application_id)
    deregister_application(application_id, params::Dict{String,<:Any})

Deregister an SAP application with AWS Systems Manager for SAP. This action does not
aï¬€ect the existing setup of your SAP workloads on Amazon EC2.

# Arguments
- `application_id`:

"""
function deregister_application(
    ApplicationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_sap(
        "POST",
        "/deregister-application",
        Dict{String,Any}("ApplicationId" => ApplicationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function deregister_application(
    ApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_sap(
        "POST",
        "/deregister-application",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ApplicationId" => ApplicationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_application()
    get_application(params::Dict{String,<:Any})

Gets an application registered with AWS Systems Manager for SAP. It also returns the
components of the application.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ApplicationArn"`:
- `"ApplicationId"`:
"""
function get_application(; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_sap(
        "POST", "/get-application"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_application(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_sap(
        "POST",
        "/get-application",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_component(application_id, component_id)
    get_component(application_id, component_id, params::Dict{String,<:Any})

Gets the component of an application registered with AWS Systems Manager for SAP.

# Arguments
- `application_id`:
- `component_id`:

"""
function get_component(
    ApplicationId, ComponentId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_sap(
        "POST",
        "/get-component",
        Dict{String,Any}("ApplicationId" => ApplicationId, "ComponentId" => ComponentId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_component(
    ApplicationId,
    ComponentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_sap(
        "POST",
        "/get-component",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ApplicationId" => ApplicationId, "ComponentId" => ComponentId
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_database()
    get_database(params::Dict{String,<:Any})

Gets the SAP HANA database of an application registered with AWS Systems Manager for SAP.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ApplicationId"`:
- `"ComponentId"`:
- `"DatabaseArn"`:
- `"DatabaseId"`:
"""
function get_database(; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_sap(
        "POST", "/get-database"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_database(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_sap(
        "POST",
        "/get-database",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_operation(operation_id)
    get_operation(operation_id, params::Dict{String,<:Any})

Gets the details of an operation by specifying the operation ID.

# Arguments
- `operation_id`:

"""
function get_operation(OperationId; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_sap(
        "POST",
        "/get-operation",
        Dict{String,Any}("OperationId" => OperationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_operation(
    OperationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_sap(
        "POST",
        "/get-operation",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("OperationId" => OperationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_resource_permission(resource_arn)
    get_resource_permission(resource_arn, params::Dict{String,<:Any})

Gets permissions associated with the target database.

# Arguments
- `resource_arn`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ActionType"`:
"""
function get_resource_permission(
    ResourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_sap(
        "POST",
        "/get-resource-permission",
        Dict{String,Any}("ResourceArn" => ResourceArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_resource_permission(
    ResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_sap(
        "POST",
        "/get-resource-permission",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ResourceArn" => ResourceArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_applications()
    list_applications(params::Dict{String,<:Any})

Lists all the applications registered with AWS Systems Manager for SAP.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`:
- `"NextToken"`:
"""
function list_applications(; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_sap(
        "POST", "/list-applications"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_applications(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_sap(
        "POST",
        "/list-applications",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_components()
    list_components(params::Dict{String,<:Any})

Lists all the components registered with AWS Systems Manager for SAP.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ApplicationId"`:
- `"MaxResults"`:
- `"NextToken"`:
"""
function list_components(; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_sap(
        "POST", "/list-components"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_components(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_sap(
        "POST",
        "/list-components",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_databases()
    list_databases(params::Dict{String,<:Any})

Lists the SAP HANA databases of an application registered with AWS Systems Manager for SAP.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ApplicationId"`:
- `"ComponentId"`:
- `"MaxResults"`:
- `"NextToken"`:
"""
function list_databases(; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_sap(
        "POST", "/list-databases"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_databases(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_sap(
        "POST",
        "/list-databases",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Lists all tags on an SAP HANA application and/or database registered with AWS Systems
Manager for SAP.

# Arguments
- `resource_arn`:

"""
function list_tags_for_resource(
    resourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_sap(
        "GET",
        "/tags/$(resourceArn)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    resourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_sap(
        "GET",
        "/tags/$(resourceArn)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_resource_permission(action_type, resource_arn, source_resource_arn)
    put_resource_permission(action_type, resource_arn, source_resource_arn, params::Dict{String,<:Any})

Adds permissions to the target database.

# Arguments
- `action_type`:
- `resource_arn`:
- `source_resource_arn`:

"""
function put_resource_permission(
    ActionType,
    ResourceArn,
    SourceResourceArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_sap(
        "POST",
        "/put-resource-permission",
        Dict{String,Any}(
            "ActionType" => ActionType,
            "ResourceArn" => ResourceArn,
            "SourceResourceArn" => SourceResourceArn,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_resource_permission(
    ActionType,
    ResourceArn,
    SourceResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_sap(
        "POST",
        "/put-resource-permission",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ActionType" => ActionType,
                    "ResourceArn" => ResourceArn,
                    "SourceResourceArn" => SourceResourceArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    register_application(application_id, application_type, credentials, instances)
    register_application(application_id, application_type, credentials, instances, params::Dict{String,<:Any})

Register an SAP application with AWS Systems Manager for SAP. You must meet the following
requirements before registering.  The SAP application you want to register with AWS Systems
Manager for SAP is running on Amazon EC2. AWS Systems Manager Agent must be setup on an
Amazon EC2 instance along with the required IAM permissions. Amazon EC2 instance(s) must
have access to the secrets created in AWS Secrets Manager to manage SAP applications and
components.

# Arguments
- `application_id`:
- `application_type`:
- `credentials`:
- `instances`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"SapInstanceNumber"`:
- `"Sid"`:
- `"Tags"`:
"""
function register_application(
    ApplicationId,
    ApplicationType,
    Credentials,
    Instances;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_sap(
        "POST",
        "/register-application",
        Dict{String,Any}(
            "ApplicationId" => ApplicationId,
            "ApplicationType" => ApplicationType,
            "Credentials" => Credentials,
            "Instances" => Instances,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function register_application(
    ApplicationId,
    ApplicationType,
    Credentials,
    Instances,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_sap(
        "POST",
        "/register-application",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ApplicationId" => ApplicationId,
                    "ApplicationType" => ApplicationType,
                    "Credentials" => Credentials,
                    "Instances" => Instances,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Creates tag for a resource by specifying the ARN.

# Arguments
- `resource_arn`:
- `tags`:

"""
function tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_sap(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}("tags" => tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    resourceArn,
    tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_sap(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tags" => tags), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Delete the tags for a resource.

# Arguments
- `resource_arn`:
- `tag_keys`: Adds/updates or removes credentials for applications registered with AWS
  Systems Manager for SAP.

"""
function untag_resource(
    resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_sap(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}("tagKeys" => tagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    resourceArn,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_sap(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tagKeys" => tagKeys), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_application_settings(application_id)
    update_application_settings(application_id, params::Dict{String,<:Any})



# Arguments
- `application_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CredentialsToAddOrUpdate"`:
- `"CredentialsToRemove"`:
"""
function update_application_settings(
    ApplicationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_sap(
        "POST",
        "/update-application-settings",
        Dict{String,Any}("ApplicationId" => ApplicationId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_application_settings(
    ApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_sap(
        "POST",
        "/update-application-settings",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ApplicationId" => ApplicationId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
