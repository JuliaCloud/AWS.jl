# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: comprehend
using AWS.Compat
using AWS.UUIDs

"""
    batch_detect_dominant_language(text_list)
    batch_detect_dominant_language(text_list, params::Dict{String,<:Any})

Determines the dominant language of the input text for a batch of documents. For a list of
languages that Amazon Comprehend can detect, see Amazon Comprehend Supported Languages.

# Arguments
- `text_list`: A list containing the text of the input documents. The list can contain a
  maximum of 25 documents. Each document should contain at least 20 characters and must
  contain fewer than 5,000 bytes of UTF-8 encoded characters.

"""
function batch_detect_dominant_language(
    TextList; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "BatchDetectDominantLanguage",
        Dict{String,Any}("TextList" => TextList);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function batch_detect_dominant_language(
    TextList,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "BatchDetectDominantLanguage",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("TextList" => TextList), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    batch_detect_entities(language_code, text_list)
    batch_detect_entities(language_code, text_list, params::Dict{String,<:Any})

Inspects the text of a batch of documents for named entities and returns information about
them. For more information about named entities, see how-entities

# Arguments
- `language_code`: The language of the input documents. You can specify any of the primary
  languages supported by Amazon Comprehend. All documents must be in the same language.
- `text_list`: A list containing the text of the input documents. The list can contain a
  maximum of 25 documents. Each document must contain fewer than 5,000 bytes of UTF-8 encoded
  characters.

"""
function batch_detect_entities(
    LanguageCode, TextList; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "BatchDetectEntities",
        Dict{String,Any}("LanguageCode" => LanguageCode, "TextList" => TextList);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function batch_detect_entities(
    LanguageCode,
    TextList,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "BatchDetectEntities",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("LanguageCode" => LanguageCode, "TextList" => TextList),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    batch_detect_key_phrases(language_code, text_list)
    batch_detect_key_phrases(language_code, text_list, params::Dict{String,<:Any})

Detects the key noun phrases found in a batch of documents.

# Arguments
- `language_code`: The language of the input documents. You can specify any of the primary
  languages supported by Amazon Comprehend. All documents must be in the same language.
- `text_list`: A list containing the text of the input documents. The list can contain a
  maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded
  characters.

"""
function batch_detect_key_phrases(
    LanguageCode, TextList; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "BatchDetectKeyPhrases",
        Dict{String,Any}("LanguageCode" => LanguageCode, "TextList" => TextList);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function batch_detect_key_phrases(
    LanguageCode,
    TextList,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "BatchDetectKeyPhrases",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("LanguageCode" => LanguageCode, "TextList" => TextList),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    batch_detect_sentiment(language_code, text_list)
    batch_detect_sentiment(language_code, text_list, params::Dict{String,<:Any})

Inspects a batch of documents and returns an inference of the prevailing sentiment,
POSITIVE, NEUTRAL, MIXED, or NEGATIVE, in each one.

# Arguments
- `language_code`: The language of the input documents. You can specify any of the primary
  languages supported by Amazon Comprehend. All documents must be in the same language.
- `text_list`: A list containing the text of the input documents. The list can contain a
  maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded
  characters.

"""
function batch_detect_sentiment(
    LanguageCode, TextList; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "BatchDetectSentiment",
        Dict{String,Any}("LanguageCode" => LanguageCode, "TextList" => TextList);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function batch_detect_sentiment(
    LanguageCode,
    TextList,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "BatchDetectSentiment",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("LanguageCode" => LanguageCode, "TextList" => TextList),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    batch_detect_syntax(language_code, text_list)
    batch_detect_syntax(language_code, text_list, params::Dict{String,<:Any})

Inspects the text of a batch of documents for the syntax and part of speech of the words in
the document and returns information about them. For more information, see how-syntax.

# Arguments
- `language_code`: The language of the input documents. You can specify any of the
  following languages supported by Amazon Comprehend: German (\"de\"), English (\"en\"),
  Spanish (\"es\"), French (\"fr\"), Italian (\"it\"), or Portuguese (\"pt\"). All documents
  must be in the same language.
- `text_list`: A list containing the text of the input documents. The list can contain a
  maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded
  characters.

"""
function batch_detect_syntax(
    LanguageCode, TextList; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "BatchDetectSyntax",
        Dict{String,Any}("LanguageCode" => LanguageCode, "TextList" => TextList);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function batch_detect_syntax(
    LanguageCode,
    TextList,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "BatchDetectSyntax",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("LanguageCode" => LanguageCode, "TextList" => TextList),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    classify_document(endpoint_arn, text)
    classify_document(endpoint_arn, text, params::Dict{String,<:Any})

Creates a new document classification request to analyze a single document in real-time,
using a previously created and trained custom model and an endpoint.

# Arguments
- `endpoint_arn`: The Amazon Resource Number (ARN) of the endpoint.
- `text`: The document text to be analyzed.

"""
function classify_document(
    EndpointArn, Text; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ClassifyDocument",
        Dict{String,Any}("EndpointArn" => EndpointArn, "Text" => Text);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function classify_document(
    EndpointArn,
    Text,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "ClassifyDocument",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("EndpointArn" => EndpointArn, "Text" => Text),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    contains_pii_entities(language_code, text)
    contains_pii_entities(language_code, text, params::Dict{String,<:Any})

Analyzes input text for the presence of personally identifiable information (PII) and
returns the labels of identified PII entity types such as name, address, bank account
number, or phone number.

# Arguments
- `language_code`: The language of the input documents.
- `text`: Creates a new document classification request to analyze a single document in
  real-time, returning personally identifiable information (PII) entity labels.

"""
function contains_pii_entities(
    LanguageCode, Text; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ContainsPiiEntities",
        Dict{String,Any}("LanguageCode" => LanguageCode, "Text" => Text);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function contains_pii_entities(
    LanguageCode,
    Text,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "ContainsPiiEntities",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("LanguageCode" => LanguageCode, "Text" => Text),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_document_classifier(data_access_role_arn, document_classifier_name, input_data_config, language_code)
    create_document_classifier(data_access_role_arn, document_classifier_name, input_data_config, language_code, params::Dict{String,<:Any})

Creates a new document classifier that you can use to categorize documents. To create a
classifier, you provide a set of training documents that labeled with the categories that
you want to use. After the classifier is trained you can use it to categorize a set of
labeled documents into the categories. For more information, see
how-document-classification.

# Arguments
- `data_access_role_arn`: The Amazon Resource Name (ARN) of the AWS Identity and Management
  (IAM) role that grants Amazon Comprehend read access to your input data.
- `document_classifier_name`: The name of the document classifier.
- `input_data_config`: Specifies the format and location of the input data for the job.
- `language_code`: The language of the input documents. You can specify any of the
  following languages supported by Amazon Comprehend: German (\"de\"), English (\"en\"),
  Spanish (\"es\"), French (\"fr\"), Italian (\"it\"), or Portuguese (\"pt\"). All documents
  must be in the same language.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientRequestToken"`: A unique identifier for the request. If you don't set the client
  request token, Amazon Comprehend generates one.
- `"Mode"`: Indicates the mode in which the classifier will be trained. The classifier can
  be trained in multi-class mode, which identifies one and only one class for each document,
  or multi-label mode, which identifies one or more labels for each document. In multi-label
  mode, multiple labels for an individual document are separated by a delimiter. The default
  delimiter between labels is a pipe (|).
- `"ModelKmsKeyId"`: ID for the AWS Key Management Service (KMS) key that Amazon Comprehend
  uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following
  formats:   KMS Key ID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"    Amazon Resource Name
  (ARN) of a KMS Key:
  \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"
- `"OutputDataConfig"`: Enables the addition of output results configuration parameters for
  custom classifier jobs.
- `"Tags"`: Tags to be associated with the document classifier being created. A tag is a
  key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For
  example, a tag with \"Sales\" as the key might be added to a resource to indicate its use
  by the sales department.
- `"VersionName"`: The version name given to the newly created classifier. Version names
  can have a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores
  (_) are allowed. The version name must be unique among all models with the same classifier
  name in the account/AWS Region.
- `"VolumeKmsKeyId"`: ID for the AWS Key Management Service (KMS) key that Amazon
  Comprehend uses to encrypt data on the storage volume attached to the ML compute
  instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the
  following formats:   KMS Key ID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"    Amazon
  Resource Name (ARN) of a KMS Key:
  \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"
- `"VpcConfig"`: Configuration parameters for an optional private Virtual Private Cloud
  (VPC) containing the resources you are using for your custom classifier. For more
  information, see Amazon VPC.
"""
function create_document_classifier(
    DataAccessRoleArn,
    DocumentClassifierName,
    InputDataConfig,
    LanguageCode;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "CreateDocumentClassifier",
        Dict{String,Any}(
            "DataAccessRoleArn" => DataAccessRoleArn,
            "DocumentClassifierName" => DocumentClassifierName,
            "InputDataConfig" => InputDataConfig,
            "LanguageCode" => LanguageCode,
            "ClientRequestToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_document_classifier(
    DataAccessRoleArn,
    DocumentClassifierName,
    InputDataConfig,
    LanguageCode,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "CreateDocumentClassifier",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DataAccessRoleArn" => DataAccessRoleArn,
                    "DocumentClassifierName" => DocumentClassifierName,
                    "InputDataConfig" => InputDataConfig,
                    "LanguageCode" => LanguageCode,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_endpoint(desired_inference_units, endpoint_name, model_arn)
    create_endpoint(desired_inference_units, endpoint_name, model_arn, params::Dict{String,<:Any})

Creates a model-specific endpoint for synchronous inference for a previously trained custom
model

# Arguments
- `desired_inference_units`:  The desired number of inference units to be used by the model
  using this endpoint. Each inference unit represents of a throughput of 100 characters per
  second.
- `endpoint_name`: This is the descriptive suffix that becomes part of the EndpointArn used
  for all subsequent requests to this resource.
- `model_arn`: The Amazon Resource Number (ARN) of the model to which the endpoint will be
  attached.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientRequestToken"`: An idempotency token provided by the customer. If this token
  matches a previous endpoint creation request, Amazon Comprehend will not return a
  ResourceInUseException.
- `"DataAccessRoleArn"`: The Amazon Resource Name (ARN) of the AWS identity and Access
  Management (IAM) role that grants Amazon Comprehend read access to trained custom models
  encrypted with a customer managed key (ModelKmsKeyId).
- `"Tags"`: Tags associated with the endpoint being created. A tag is a key-value pair that
  adds metadata to the endpoint. For example, a tag with \"Sales\" as the key might be added
  to an endpoint to indicate its use by the sales department.
"""
function create_endpoint(
    DesiredInferenceUnits,
    EndpointName,
    ModelArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "CreateEndpoint",
        Dict{String,Any}(
            "DesiredInferenceUnits" => DesiredInferenceUnits,
            "EndpointName" => EndpointName,
            "ModelArn" => ModelArn,
            "ClientRequestToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_endpoint(
    DesiredInferenceUnits,
    EndpointName,
    ModelArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "CreateEndpoint",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DesiredInferenceUnits" => DesiredInferenceUnits,
                    "EndpointName" => EndpointName,
                    "ModelArn" => ModelArn,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_entity_recognizer(data_access_role_arn, input_data_config, language_code, recognizer_name)
    create_entity_recognizer(data_access_role_arn, input_data_config, language_code, recognizer_name, params::Dict{String,<:Any})

Creates an entity recognizer using submitted files. After your CreateEntityRecognizer
request is submitted, you can check job status using the API.

# Arguments
- `data_access_role_arn`: The Amazon Resource Name (ARN) of the AWS Identity and Management
  (IAM) role that grants Amazon Comprehend read access to your input data.
- `input_data_config`: Specifies the format and location of the input data. The S3 bucket
  containing the input data must be located in the same region as the entity recognizer being
  created.
- `language_code`:  You can specify any of the following languages supported by Amazon
  Comprehend: English (\"en\"), Spanish (\"es\"), French (\"fr\"), Italian (\"it\"), German
  (\"de\"), or Portuguese (\"pt\"). All documents must be in the same language.
- `recognizer_name`: The name given to the newly created recognizer. Recognizer names can
  be a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_)
  are allowed. The name must be unique in the account/region.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientRequestToken"`:  A unique identifier for the request. If you don't set the client
  request token, Amazon Comprehend generates one.
- `"ModelKmsKeyId"`: ID for the AWS Key Management Service (KMS) key that Amazon Comprehend
  uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following
  formats   KMS Key ID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"    Amazon Resource Name
  (ARN) of a KMS Key:
  \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"
- `"Tags"`: Tags to be associated with the entity recognizer being created. A tag is a
  key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For
  example, a tag with \"Sales\" as the key might be added to a resource to indicate its use
  by the sales department.
- `"VersionName"`: The version name given to the newly created recognizer. Version names
  can be a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores
  (_) are allowed. The version name must be unique among all models with the same recognizer
  name in the account/ AWS Region.
- `"VolumeKmsKeyId"`: ID for the AWS Key Management Service (KMS) key that Amazon
  Comprehend uses to encrypt data on the storage volume attached to the ML compute
  instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the
  following formats:   KMS Key ID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"    Amazon
  Resource Name (ARN) of a KMS Key:
  \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"
- `"VpcConfig"`: Configuration parameters for an optional private Virtual Private Cloud
  (VPC) containing the resources you are using for your custom entity recognizer. For more
  information, see Amazon VPC.
"""
function create_entity_recognizer(
    DataAccessRoleArn,
    InputDataConfig,
    LanguageCode,
    RecognizerName;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "CreateEntityRecognizer",
        Dict{String,Any}(
            "DataAccessRoleArn" => DataAccessRoleArn,
            "InputDataConfig" => InputDataConfig,
            "LanguageCode" => LanguageCode,
            "RecognizerName" => RecognizerName,
            "ClientRequestToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_entity_recognizer(
    DataAccessRoleArn,
    InputDataConfig,
    LanguageCode,
    RecognizerName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "CreateEntityRecognizer",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DataAccessRoleArn" => DataAccessRoleArn,
                    "InputDataConfig" => InputDataConfig,
                    "LanguageCode" => LanguageCode,
                    "RecognizerName" => RecognizerName,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_document_classifier(document_classifier_arn)
    delete_document_classifier(document_classifier_arn, params::Dict{String,<:Any})

Deletes a previously created document classifier Only those classifiers that are in
terminated states (IN_ERROR, TRAINED) will be deleted. If an active inference job is using
the model, a ResourceInUseException will be returned. This is an asynchronous action that
puts the classifier into a DELETING state, and it is then removed by a background job. Once
removed, the classifier disappears from your account and is no longer available for use.

# Arguments
- `document_classifier_arn`: The Amazon Resource Name (ARN) that identifies the document
  classifier.

"""
function delete_document_classifier(
    DocumentClassifierArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DeleteDocumentClassifier",
        Dict{String,Any}("DocumentClassifierArn" => DocumentClassifierArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_document_classifier(
    DocumentClassifierArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "DeleteDocumentClassifier",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DocumentClassifierArn" => DocumentClassifierArn),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_endpoint(endpoint_arn)
    delete_endpoint(endpoint_arn, params::Dict{String,<:Any})

Deletes a model-specific endpoint for a previously-trained custom model. All endpoints must
be deleted in order for the model to be deleted.

# Arguments
- `endpoint_arn`: The Amazon Resource Number (ARN) of the endpoint being deleted.

"""
function delete_endpoint(EndpointArn; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "DeleteEndpoint",
        Dict{String,Any}("EndpointArn" => EndpointArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_endpoint(
    EndpointArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "DeleteEndpoint",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("EndpointArn" => EndpointArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_entity_recognizer(entity_recognizer_arn)
    delete_entity_recognizer(entity_recognizer_arn, params::Dict{String,<:Any})

Deletes an entity recognizer. Only those recognizers that are in terminated states
(IN_ERROR, TRAINED) will be deleted. If an active inference job is using the model, a
ResourceInUseException will be returned. This is an asynchronous action that puts the
recognizer into a DELETING state, and it is then removed by a background job. Once removed,
the recognizer disappears from your account and is no longer available for use.

# Arguments
- `entity_recognizer_arn`: The Amazon Resource Name (ARN) that identifies the entity
  recognizer.

"""
function delete_entity_recognizer(
    EntityRecognizerArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DeleteEntityRecognizer",
        Dict{String,Any}("EntityRecognizerArn" => EntityRecognizerArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_entity_recognizer(
    EntityRecognizerArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "DeleteEntityRecognizer",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("EntityRecognizerArn" => EntityRecognizerArn),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_document_classification_job(job_id)
    describe_document_classification_job(job_id, params::Dict{String,<:Any})

Gets the properties associated with a document classification job. Use this operation to
get the status of a classification job.

# Arguments
- `job_id`: The identifier that Amazon Comprehend generated for the job. The operation
  returns this identifier in its response.

"""
function describe_document_classification_job(
    JobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeDocumentClassificationJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_document_classification_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeDocumentClassificationJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_document_classifier(document_classifier_arn)
    describe_document_classifier(document_classifier_arn, params::Dict{String,<:Any})

Gets the properties associated with a document classifier.

# Arguments
- `document_classifier_arn`: The Amazon Resource Name (ARN) that identifies the document
  classifier. The operation returns this identifier in its response.

"""
function describe_document_classifier(
    DocumentClassifierArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeDocumentClassifier",
        Dict{String,Any}("DocumentClassifierArn" => DocumentClassifierArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_document_classifier(
    DocumentClassifierArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "DescribeDocumentClassifier",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DocumentClassifierArn" => DocumentClassifierArn),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_dominant_language_detection_job(job_id)
    describe_dominant_language_detection_job(job_id, params::Dict{String,<:Any})

Gets the properties associated with a dominant language detection job. Use this operation
to get the status of a detection job.

# Arguments
- `job_id`: The identifier that Amazon Comprehend generated for the job. The operation
  returns this identifier in its response.

"""
function describe_dominant_language_detection_job(
    JobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeDominantLanguageDetectionJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_dominant_language_detection_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeDominantLanguageDetectionJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_endpoint(endpoint_arn)
    describe_endpoint(endpoint_arn, params::Dict{String,<:Any})

Gets the properties associated with a specific endpoint. Use this operation to get the
status of an endpoint.

# Arguments
- `endpoint_arn`: The Amazon Resource Number (ARN) of the endpoint being described.

"""
function describe_endpoint(EndpointArn; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "DescribeEndpoint",
        Dict{String,Any}("EndpointArn" => EndpointArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_endpoint(
    EndpointArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "DescribeEndpoint",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("EndpointArn" => EndpointArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_entities_detection_job(job_id)
    describe_entities_detection_job(job_id, params::Dict{String,<:Any})

Gets the properties associated with an entities detection job. Use this operation to get
the status of a detection job.

# Arguments
- `job_id`: The identifier that Amazon Comprehend generated for the job. The operation
  returns this identifier in its response.

"""
function describe_entities_detection_job(
    JobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeEntitiesDetectionJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_entities_detection_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeEntitiesDetectionJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_entity_recognizer(entity_recognizer_arn)
    describe_entity_recognizer(entity_recognizer_arn, params::Dict{String,<:Any})

Provides details about an entity recognizer including status, S3 buckets containing
training data, recognizer metadata, metrics, and so on.

# Arguments
- `entity_recognizer_arn`: The Amazon Resource Name (ARN) that identifies the entity
  recognizer.

"""
function describe_entity_recognizer(
    EntityRecognizerArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeEntityRecognizer",
        Dict{String,Any}("EntityRecognizerArn" => EntityRecognizerArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_entity_recognizer(
    EntityRecognizerArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "DescribeEntityRecognizer",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("EntityRecognizerArn" => EntityRecognizerArn),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_events_detection_job(job_id)
    describe_events_detection_job(job_id, params::Dict{String,<:Any})

Gets the status and details of an events detection job.

# Arguments
- `job_id`: The identifier of the events detection job.

"""
function describe_events_detection_job(
    JobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeEventsDetectionJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_events_detection_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeEventsDetectionJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_key_phrases_detection_job(job_id)
    describe_key_phrases_detection_job(job_id, params::Dict{String,<:Any})

Gets the properties associated with a key phrases detection job. Use this operation to get
the status of a detection job.

# Arguments
- `job_id`: The identifier that Amazon Comprehend generated for the job. The operation
  returns this identifier in its response.

"""
function describe_key_phrases_detection_job(
    JobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeKeyPhrasesDetectionJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_key_phrases_detection_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeKeyPhrasesDetectionJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_pii_entities_detection_job(job_id)
    describe_pii_entities_detection_job(job_id, params::Dict{String,<:Any})

Gets the properties associated with a PII entities detection job. For example, you can use
this operation to get the job status.

# Arguments
- `job_id`: The identifier that Amazon Comprehend generated for the job. The operation
  returns this identifier in its response.

"""
function describe_pii_entities_detection_job(
    JobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribePiiEntitiesDetectionJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_pii_entities_detection_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribePiiEntitiesDetectionJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_sentiment_detection_job(job_id)
    describe_sentiment_detection_job(job_id, params::Dict{String,<:Any})

Gets the properties associated with a sentiment detection job. Use this operation to get
the status of a detection job.

# Arguments
- `job_id`: The identifier that Amazon Comprehend generated for the job. The operation
  returns this identifier in its response.

"""
function describe_sentiment_detection_job(
    JobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeSentimentDetectionJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_sentiment_detection_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeSentimentDetectionJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_topics_detection_job(job_id)
    describe_topics_detection_job(job_id, params::Dict{String,<:Any})

Gets the properties associated with a topic detection job. Use this operation to get the
status of a detection job.

# Arguments
- `job_id`: The identifier assigned by the user to the detection job.

"""
function describe_topics_detection_job(
    JobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeTopicsDetectionJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_topics_detection_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DescribeTopicsDetectionJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    detect_dominant_language(text)
    detect_dominant_language(text, params::Dict{String,<:Any})

Determines the dominant language of the input text. For a list of languages that Amazon
Comprehend can detect, see Amazon Comprehend Supported Languages.

# Arguments
- `text`: A UTF-8 text string. Each string should contain at least 20 characters and must
  contain fewer that 5,000 bytes of UTF-8 encoded characters.

"""
function detect_dominant_language(Text; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "DetectDominantLanguage",
        Dict{String,Any}("Text" => Text);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function detect_dominant_language(
    Text, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DetectDominantLanguage",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Text" => Text), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    detect_entities(text)
    detect_entities(text, params::Dict{String,<:Any})

Inspects text for named entities, and returns information about them. For more information,
about named entities, see how-entities.

# Arguments
- `text`: A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8
  encoded characters.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"EndpointArn"`: The Amazon Resource Name of an endpoint that is associated with a custom
  entity recognition model. Provide an endpoint if you want to detect entities by using your
  own custom model instead of the default model that is used by Amazon Comprehend. If you
  specify an endpoint, Amazon Comprehend uses the language of your custom model, and it
  ignores any language code that you provide in your request.
- `"LanguageCode"`: The language of the input documents. You can specify any of the primary
  languages supported by Amazon Comprehend. All documents must be in the same language. If
  your request includes the endpoint for a custom entity recognition model, Amazon Comprehend
  uses the language of your custom model, and it ignores any language code that you specify
  here.
"""
function detect_entities(Text; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "DetectEntities",
        Dict{String,Any}("Text" => Text);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function detect_entities(
    Text, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DetectEntities",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Text" => Text), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    detect_key_phrases(language_code, text)
    detect_key_phrases(language_code, text, params::Dict{String,<:Any})

Detects the key noun phrases found in the text.

# Arguments
- `language_code`: The language of the input documents. You can specify any of the primary
  languages supported by Amazon Comprehend. All documents must be in the same language.
- `text`: A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8
  encoded characters.

"""
function detect_key_phrases(
    LanguageCode, Text; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DetectKeyPhrases",
        Dict{String,Any}("LanguageCode" => LanguageCode, "Text" => Text);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function detect_key_phrases(
    LanguageCode,
    Text,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "DetectKeyPhrases",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("LanguageCode" => LanguageCode, "Text" => Text),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    detect_pii_entities(language_code, text)
    detect_pii_entities(language_code, text, params::Dict{String,<:Any})

Inspects the input text for entities that contain personally identifiable information (PII)
and returns information about them.

# Arguments
- `language_code`: The language of the input documents.
- `text`: A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8
  encoded characters.

"""
function detect_pii_entities(
    LanguageCode, Text; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DetectPiiEntities",
        Dict{String,Any}("LanguageCode" => LanguageCode, "Text" => Text);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function detect_pii_entities(
    LanguageCode,
    Text,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "DetectPiiEntities",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("LanguageCode" => LanguageCode, "Text" => Text),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    detect_sentiment(language_code, text)
    detect_sentiment(language_code, text, params::Dict{String,<:Any})

Inspects text and returns an inference of the prevailing sentiment (POSITIVE, NEUTRAL,
MIXED, or NEGATIVE).

# Arguments
- `language_code`: The language of the input documents. You can specify any of the primary
  languages supported by Amazon Comprehend. All documents must be in the same language.
- `text`: A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8
  encoded characters.

"""
function detect_sentiment(
    LanguageCode, Text; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DetectSentiment",
        Dict{String,Any}("LanguageCode" => LanguageCode, "Text" => Text);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function detect_sentiment(
    LanguageCode,
    Text,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "DetectSentiment",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("LanguageCode" => LanguageCode, "Text" => Text),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    detect_syntax(language_code, text)
    detect_syntax(language_code, text, params::Dict{String,<:Any})

Inspects text for syntax and the part of speech of words in the document. For more
information, how-syntax.

# Arguments
- `language_code`: The language code of the input documents. You can specify any of the
  following languages supported by Amazon Comprehend: German (\"de\"), English (\"en\"),
  Spanish (\"es\"), French (\"fr\"), Italian (\"it\"), or Portuguese (\"pt\").
- `text`: A UTF-8 string. Each string must contain fewer that 5,000 bytes of UTF encoded
  characters.

"""
function detect_syntax(
    LanguageCode, Text; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "DetectSyntax",
        Dict{String,Any}("LanguageCode" => LanguageCode, "Text" => Text);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function detect_syntax(
    LanguageCode,
    Text,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "DetectSyntax",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("LanguageCode" => LanguageCode, "Text" => Text),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_document_classification_jobs()
    list_document_classification_jobs(params::Dict{String,<:Any})

Gets a list of the documentation classification jobs that you have submitted.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filter"`: Filters the jobs that are returned. You can filter jobs on their names,
  status, or the date and time that they were submitted. You can only set one filter at a
  time.
- `"MaxResults"`: The maximum number of results to return in each page. The default is 100.
- `"NextToken"`: Identifies the next page of results to return.
"""
function list_document_classification_jobs(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListDocumentClassificationJobs";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_document_classification_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListDocumentClassificationJobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_document_classifier_summaries()
    list_document_classifier_summaries(params::Dict{String,<:Any})

Gets a list of summaries of the document classifiers that you have created

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return on each page. The default is 100.
- `"NextToken"`: Identifies the next page of results to return.
"""
function list_document_classifier_summaries(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListDocumentClassifierSummaries";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_document_classifier_summaries(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListDocumentClassifierSummaries",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_document_classifiers()
    list_document_classifiers(params::Dict{String,<:Any})

Gets a list of the document classifiers that you have created.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filter"`: Filters the jobs that are returned. You can filter jobs on their name,
  status, or the date and time that they were submitted. You can only set one filter at a
  time.
- `"MaxResults"`: The maximum number of results to return in each page. The default is 100.
- `"NextToken"`: Identifies the next page of results to return.
"""
function list_document_classifiers(; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "ListDocumentClassifiers"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_document_classifiers(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListDocumentClassifiers",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_dominant_language_detection_jobs()
    list_dominant_language_detection_jobs(params::Dict{String,<:Any})

Gets a list of the dominant language detection jobs that you have submitted.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filter"`: Filters that jobs that are returned. You can filter jobs on their name,
  status, or the date and time that they were submitted. You can only set one filter at a
  time.
- `"MaxResults"`: The maximum number of results to return in each page. The default is 100.
- `"NextToken"`: Identifies the next page of results to return.
"""
function list_dominant_language_detection_jobs(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListDominantLanguageDetectionJobs";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_dominant_language_detection_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListDominantLanguageDetectionJobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_endpoints()
    list_endpoints(params::Dict{String,<:Any})

Gets a list of all existing endpoints that you've created.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filter"`: Filters the endpoints that are returned. You can filter endpoints on their
  name, model, status, or the date and time that they were created. You can only set one
  filter at a time.
- `"MaxResults"`: The maximum number of results to return in each page. The default is 100.
- `"NextToken"`: Identifies the next page of results to return.
"""
function list_endpoints(; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "ListEndpoints"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_endpoints(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListEndpoints", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_entities_detection_jobs()
    list_entities_detection_jobs(params::Dict{String,<:Any})

Gets a list of the entity detection jobs that you have submitted.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filter"`: Filters the jobs that are returned. You can filter jobs on their name,
  status, or the date and time that they were submitted. You can only set one filter at a
  time.
- `"MaxResults"`: The maximum number of results to return in each page. The default is 100.
- `"NextToken"`: Identifies the next page of results to return.
"""
function list_entities_detection_jobs(; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "ListEntitiesDetectionJobs"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_entities_detection_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListEntitiesDetectionJobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_entity_recognizer_summaries()
    list_entity_recognizer_summaries(params::Dict{String,<:Any})

Gets a list of summaries for the entity recognizers that you have created.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return on each page. The default is 100.
- `"NextToken"`: Identifies the next page of results to return.
"""
function list_entity_recognizer_summaries(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListEntityRecognizerSummaries";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_entity_recognizer_summaries(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListEntityRecognizerSummaries",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_entity_recognizers()
    list_entity_recognizers(params::Dict{String,<:Any})

Gets a list of the properties of all entity recognizers that you created, including
recognizers currently in training. Allows you to filter the list of recognizers based on
criteria such as status and submission time. This call returns up to 500 entity recognizers
in the list, with a default number of 100 recognizers in the list. The results of this list
are not in any particular order. Please get the list and sort locally if needed.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filter"`: Filters the list of entities returned. You can filter on Status,
  SubmitTimeBefore, or SubmitTimeAfter. You can only set one filter at a time.
- `"MaxResults"`:  The maximum number of results to return on each page. The default is 100.
- `"NextToken"`: Identifies the next page of results to return.
"""
function list_entity_recognizers(; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "ListEntityRecognizers"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_entity_recognizers(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListEntityRecognizers",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_events_detection_jobs()
    list_events_detection_jobs(params::Dict{String,<:Any})

Gets a list of the events detection jobs that you have submitted.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filter"`: Filters the jobs that are returned. You can filter jobs on their name,
  status, or the date and time that they were submitted. You can only set one filter at a
  time.
- `"MaxResults"`: The maximum number of results to return in each page.
- `"NextToken"`: Identifies the next page of results to return.
"""
function list_events_detection_jobs(; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "ListEventsDetectionJobs"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_events_detection_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListEventsDetectionJobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_key_phrases_detection_jobs()
    list_key_phrases_detection_jobs(params::Dict{String,<:Any})

Get a list of key phrase detection jobs that you have submitted.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filter"`: Filters the jobs that are returned. You can filter jobs on their name,
  status, or the date and time that they were submitted. You can only set one filter at a
  time.
- `"MaxResults"`: The maximum number of results to return in each page. The default is 100.
- `"NextToken"`: Identifies the next page of results to return.
"""
function list_key_phrases_detection_jobs(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListKeyPhrasesDetectionJobs";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_key_phrases_detection_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListKeyPhrasesDetectionJobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_pii_entities_detection_jobs()
    list_pii_entities_detection_jobs(params::Dict{String,<:Any})

Gets a list of the PII entity detection jobs that you have submitted.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filter"`: Filters the jobs that are returned. You can filter jobs on their name,
  status, or the date and time that they were submitted. You can only set one filter at a
  time.
- `"MaxResults"`: The maximum number of results to return in each page.
- `"NextToken"`: Identifies the next page of results to return.
"""
function list_pii_entities_detection_jobs(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListPiiEntitiesDetectionJobs";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_pii_entities_detection_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListPiiEntitiesDetectionJobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_sentiment_detection_jobs()
    list_sentiment_detection_jobs(params::Dict{String,<:Any})

Gets a list of sentiment detection jobs that you have submitted.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filter"`: Filters the jobs that are returned. You can filter jobs on their name,
  status, or the date and time that they were submitted. You can only set one filter at a
  time.
- `"MaxResults"`: The maximum number of results to return in each page. The default is 100.
- `"NextToken"`: Identifies the next page of results to return.
"""
function list_sentiment_detection_jobs(; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "ListSentimentDetectionJobs"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_sentiment_detection_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListSentimentDetectionJobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Lists all tags associated with a given Amazon Comprehend resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the given Amazon Comprehend resource
  you are querying.

"""
function list_tags_for_resource(
    ResourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListTagsForResource",
        Dict{String,Any}("ResourceArn" => ResourceArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    ResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "ListTagsForResource",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ResourceArn" => ResourceArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_topics_detection_jobs()
    list_topics_detection_jobs(params::Dict{String,<:Any})

Gets a list of the topic detection jobs that you have submitted.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filter"`: Filters the jobs that are returned. Jobs can be filtered on their name,
  status, or the date and time that they were submitted. You can set only one filter at a
  time.
- `"MaxResults"`: The maximum number of results to return in each page. The default is 100.
- `"NextToken"`: Identifies the next page of results to return.
"""
function list_topics_detection_jobs(; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "ListTopicsDetectionJobs"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_topics_detection_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "ListTopicsDetectionJobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_document_classification_job(data_access_role_arn, document_classifier_arn, input_data_config, output_data_config)
    start_document_classification_job(data_access_role_arn, document_classifier_arn, input_data_config, output_data_config, params::Dict{String,<:Any})

Starts an asynchronous document classification job. Use the operation to track the progress
of the job.

# Arguments
- `data_access_role_arn`: The Amazon Resource Name (ARN) of the AWS Identity and Access
  Management (IAM) role that grants Amazon Comprehend read access to your input data.
- `document_classifier_arn`: The Amazon Resource Name (ARN) of the document classifier to
  use to process the job.
- `input_data_config`: Specifies the format and location of the input data for the job.
- `output_data_config`: Specifies where to send the output files.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientRequestToken"`: A unique identifier for the request. If you do not set the client
  request token, Amazon Comprehend generates one.
- `"JobName"`: The identifier of the job.
- `"Tags"`: Tags to be associated with the document classification job. A tag is a
  key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a
  tag with \"Sales\" as the key might be added to a resource to indicate its use by the sales
  department.
- `"VolumeKmsKeyId"`: ID for the AWS Key Management Service (KMS) key that Amazon
  Comprehend uses to encrypt data on the storage volume attached to the ML compute
  instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the
  following formats:   KMS Key ID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"    Amazon
  Resource Name (ARN) of a KMS Key:
  \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"
- `"VpcConfig"`: Configuration parameters for an optional private Virtual Private Cloud
  (VPC) containing the resources you are using for your document classification job. For more
  information, see Amazon VPC.
"""
function start_document_classification_job(
    DataAccessRoleArn,
    DocumentClassifierArn,
    InputDataConfig,
    OutputDataConfig;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartDocumentClassificationJob",
        Dict{String,Any}(
            "DataAccessRoleArn" => DataAccessRoleArn,
            "DocumentClassifierArn" => DocumentClassifierArn,
            "InputDataConfig" => InputDataConfig,
            "OutputDataConfig" => OutputDataConfig,
            "ClientRequestToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_document_classification_job(
    DataAccessRoleArn,
    DocumentClassifierArn,
    InputDataConfig,
    OutputDataConfig,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartDocumentClassificationJob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DataAccessRoleArn" => DataAccessRoleArn,
                    "DocumentClassifierArn" => DocumentClassifierArn,
                    "InputDataConfig" => InputDataConfig,
                    "OutputDataConfig" => OutputDataConfig,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_dominant_language_detection_job(data_access_role_arn, input_data_config, output_data_config)
    start_dominant_language_detection_job(data_access_role_arn, input_data_config, output_data_config, params::Dict{String,<:Any})

Starts an asynchronous dominant language detection job for a collection of documents. Use
the operation to track the status of a job.

# Arguments
- `data_access_role_arn`: The Amazon Resource Name (ARN) of the AWS Identity and Access
  Management (IAM) role that grants Amazon Comprehend read access to your input data. For
  more information, see
  https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#au
  th-role-permissions.
- `input_data_config`: Specifies the format and location of the input data for the job.
- `output_data_config`: Specifies where to send the output files.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientRequestToken"`: A unique identifier for the request. If you do not set the client
  request token, Amazon Comprehend generates one.
- `"JobName"`: An identifier for the job.
- `"Tags"`: Tags to be associated with the dominant language detection job. A tag is a
  key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a
  tag with \"Sales\" as the key might be added to a resource to indicate its use by the sales
  department.
- `"VolumeKmsKeyId"`: ID for the AWS Key Management Service (KMS) key that Amazon
  Comprehend uses to encrypt data on the storage volume attached to the ML compute
  instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the
  following formats:   KMS Key ID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"    Amazon
  Resource Name (ARN) of a KMS Key:
  \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"
- `"VpcConfig"`: Configuration parameters for an optional private Virtual Private Cloud
  (VPC) containing the resources you are using for your dominant language detection job. For
  more information, see Amazon VPC.
"""
function start_dominant_language_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    OutputDataConfig;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartDominantLanguageDetectionJob",
        Dict{String,Any}(
            "DataAccessRoleArn" => DataAccessRoleArn,
            "InputDataConfig" => InputDataConfig,
            "OutputDataConfig" => OutputDataConfig,
            "ClientRequestToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_dominant_language_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    OutputDataConfig,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartDominantLanguageDetectionJob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DataAccessRoleArn" => DataAccessRoleArn,
                    "InputDataConfig" => InputDataConfig,
                    "OutputDataConfig" => OutputDataConfig,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_entities_detection_job(data_access_role_arn, input_data_config, language_code, output_data_config)
    start_entities_detection_job(data_access_role_arn, input_data_config, language_code, output_data_config, params::Dict{String,<:Any})

Starts an asynchronous entity detection job for a collection of documents. Use the
operation to track the status of a job. This API can be used for either standard entity
detection or custom entity recognition. In order to be used for custom entity recognition,
the optional EntityRecognizerArn must be used in order to provide access to the recognizer
being used to detect the custom entity.

# Arguments
- `data_access_role_arn`: The Amazon Resource Name (ARN) of the AWS Identity and Access
  Management (IAM) role that grants Amazon Comprehend read access to your input data. For
  more information, see
  https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#au
  th-role-permissions.
- `input_data_config`: Specifies the format and location of the input data for the job.
- `language_code`: The language of the input documents. All documents must be in the same
  language. You can specify any of the languages supported by Amazon Comprehend. If custom
  entities recognition is used, this parameter is ignored and the language used for training
  the model is used instead.
- `output_data_config`: Specifies where to send the output files.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientRequestToken"`: A unique identifier for the request. If you don't set the client
  request token, Amazon Comprehend generates one.
- `"EntityRecognizerArn"`: The Amazon Resource Name (ARN) that identifies the specific
  entity recognizer to be used by the StartEntitiesDetectionJob. This ARN is optional and is
  only used for a custom entity recognition job.
- `"JobName"`: The identifier of the job.
- `"Tags"`: Tags to be associated with the entities detection job. A tag is a key-value
  pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with
  \"Sales\" as the key might be added to a resource to indicate its use by the sales
  department.
- `"VolumeKmsKeyId"`: ID for the AWS Key Management Service (KMS) key that Amazon
  Comprehend uses to encrypt data on the storage volume attached to the ML compute
  instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the
  following formats:   KMS Key ID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"    Amazon
  Resource Name (ARN) of a KMS Key:
  \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"
- `"VpcConfig"`: Configuration parameters for an optional private Virtual Private Cloud
  (VPC) containing the resources you are using for your entity detection job. For more
  information, see Amazon VPC.
"""
function start_entities_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    LanguageCode,
    OutputDataConfig;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartEntitiesDetectionJob",
        Dict{String,Any}(
            "DataAccessRoleArn" => DataAccessRoleArn,
            "InputDataConfig" => InputDataConfig,
            "LanguageCode" => LanguageCode,
            "OutputDataConfig" => OutputDataConfig,
            "ClientRequestToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_entities_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    LanguageCode,
    OutputDataConfig,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartEntitiesDetectionJob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DataAccessRoleArn" => DataAccessRoleArn,
                    "InputDataConfig" => InputDataConfig,
                    "LanguageCode" => LanguageCode,
                    "OutputDataConfig" => OutputDataConfig,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_events_detection_job(data_access_role_arn, input_data_config, language_code, output_data_config, target_event_types)
    start_events_detection_job(data_access_role_arn, input_data_config, language_code, output_data_config, target_event_types, params::Dict{String,<:Any})

Starts an asynchronous event detection job for a collection of documents.

# Arguments
- `data_access_role_arn`: The Amazon Resource Name (ARN) of the AWS Identity and Access
  Management (IAM) role that grants Amazon Comprehend read access to your input data.
- `input_data_config`: Specifies the format and location of the input data for the job.
- `language_code`: The language code of the input documents.
- `output_data_config`: Specifies where to send the output files.
- `target_event_types`: The types of events to detect in the input documents.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientRequestToken"`: An unique identifier for the request. If you don't set the client
  request token, Amazon Comprehend generates one.
- `"JobName"`: The identifier of the events detection job.
- `"Tags"`: Tags to be associated with the events detection job. A tag is a key-value pair
  that adds metadata to a resource used by Amazon Comprehend. For example, a tag with
  \"Sales\" as the key might be added to a resource to indicate its use by the sales
  department.
"""
function start_events_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    LanguageCode,
    OutputDataConfig,
    TargetEventTypes;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartEventsDetectionJob",
        Dict{String,Any}(
            "DataAccessRoleArn" => DataAccessRoleArn,
            "InputDataConfig" => InputDataConfig,
            "LanguageCode" => LanguageCode,
            "OutputDataConfig" => OutputDataConfig,
            "TargetEventTypes" => TargetEventTypes,
            "ClientRequestToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_events_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    LanguageCode,
    OutputDataConfig,
    TargetEventTypes,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartEventsDetectionJob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DataAccessRoleArn" => DataAccessRoleArn,
                    "InputDataConfig" => InputDataConfig,
                    "LanguageCode" => LanguageCode,
                    "OutputDataConfig" => OutputDataConfig,
                    "TargetEventTypes" => TargetEventTypes,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_key_phrases_detection_job(data_access_role_arn, input_data_config, language_code, output_data_config)
    start_key_phrases_detection_job(data_access_role_arn, input_data_config, language_code, output_data_config, params::Dict{String,<:Any})

Starts an asynchronous key phrase detection job for a collection of documents. Use the
operation to track the status of a job.

# Arguments
- `data_access_role_arn`: The Amazon Resource Name (ARN) of the AWS Identity and Access
  Management (IAM) role that grants Amazon Comprehend read access to your input data. For
  more information, see
  https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#au
  th-role-permissions.
- `input_data_config`: Specifies the format and location of the input data for the job.
- `language_code`: The language of the input documents. You can specify any of the primary
  languages supported by Amazon Comprehend. All documents must be in the same language.
- `output_data_config`: Specifies where to send the output files.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientRequestToken"`: A unique identifier for the request. If you don't set the client
  request token, Amazon Comprehend generates one.
- `"JobName"`: The identifier of the job.
- `"Tags"`: Tags to be associated with the key phrases detection job. A tag is a key-value
  pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with
  \"Sales\" as the key might be added to a resource to indicate its use by the sales
  department.
- `"VolumeKmsKeyId"`: ID for the AWS Key Management Service (KMS) key that Amazon
  Comprehend uses to encrypt data on the storage volume attached to the ML compute
  instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the
  following formats:   KMS Key ID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"    Amazon
  Resource Name (ARN) of a KMS Key:
  \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"
- `"VpcConfig"`:  Configuration parameters for an optional private Virtual Private Cloud
  (VPC) containing the resources you are using for your key phrases detection job. For more
  information, see Amazon VPC.
"""
function start_key_phrases_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    LanguageCode,
    OutputDataConfig;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartKeyPhrasesDetectionJob",
        Dict{String,Any}(
            "DataAccessRoleArn" => DataAccessRoleArn,
            "InputDataConfig" => InputDataConfig,
            "LanguageCode" => LanguageCode,
            "OutputDataConfig" => OutputDataConfig,
            "ClientRequestToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_key_phrases_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    LanguageCode,
    OutputDataConfig,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartKeyPhrasesDetectionJob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DataAccessRoleArn" => DataAccessRoleArn,
                    "InputDataConfig" => InputDataConfig,
                    "LanguageCode" => LanguageCode,
                    "OutputDataConfig" => OutputDataConfig,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_pii_entities_detection_job(data_access_role_arn, input_data_config, language_code, mode, output_data_config)
    start_pii_entities_detection_job(data_access_role_arn, input_data_config, language_code, mode, output_data_config, params::Dict{String,<:Any})

Starts an asynchronous PII entity detection job for a collection of documents.

# Arguments
- `data_access_role_arn`: The Amazon Resource Name (ARN) of the AWS Identity and Access
  Management (IAM) role that grants Amazon Comprehend read access to your input data.
- `input_data_config`: The input properties for a PII entities detection job.
- `language_code`: The language of the input documents.
- `mode`: Specifies whether the output provides the locations (offsets) of PII entities or
  a file in which PII entities are redacted.
- `output_data_config`: Provides conﬁguration parameters for the output of PII entity
  detection jobs.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientRequestToken"`: A unique identifier for the request. If you don't set the client
  request token, Amazon Comprehend generates one.
- `"JobName"`: The identifier of the job.
- `"RedactionConfig"`: Provides configuration parameters for PII entity redaction. This
  parameter is required if you set the Mode parameter to ONLY_REDACTION. In that case, you
  must provide a RedactionConfig definition that includes the PiiEntityTypes parameter.
- `"Tags"`: Tags to be associated with the PII entities detection job. A tag is a key-value
  pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with
  \"Sales\" as the key might be added to a resource to indicate its use by the sales
  department.
"""
function start_pii_entities_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    LanguageCode,
    Mode,
    OutputDataConfig;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartPiiEntitiesDetectionJob",
        Dict{String,Any}(
            "DataAccessRoleArn" => DataAccessRoleArn,
            "InputDataConfig" => InputDataConfig,
            "LanguageCode" => LanguageCode,
            "Mode" => Mode,
            "OutputDataConfig" => OutputDataConfig,
            "ClientRequestToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_pii_entities_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    LanguageCode,
    Mode,
    OutputDataConfig,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartPiiEntitiesDetectionJob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DataAccessRoleArn" => DataAccessRoleArn,
                    "InputDataConfig" => InputDataConfig,
                    "LanguageCode" => LanguageCode,
                    "Mode" => Mode,
                    "OutputDataConfig" => OutputDataConfig,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_sentiment_detection_job(data_access_role_arn, input_data_config, language_code, output_data_config)
    start_sentiment_detection_job(data_access_role_arn, input_data_config, language_code, output_data_config, params::Dict{String,<:Any})

Starts an asynchronous sentiment detection job for a collection of documents. use the
operation to track the status of a job.

# Arguments
- `data_access_role_arn`: The Amazon Resource Name (ARN) of the AWS Identity and Access
  Management (IAM) role that grants Amazon Comprehend read access to your input data. For
  more information, see
  https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#au
  th-role-permissions.
- `input_data_config`: Specifies the format and location of the input data for the job.
- `language_code`: The language of the input documents. You can specify any of the primary
  languages supported by Amazon Comprehend. All documents must be in the same language.
- `output_data_config`: Specifies where to send the output files.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientRequestToken"`: A unique identifier for the request. If you don't set the client
  request token, Amazon Comprehend generates one.
- `"JobName"`: The identifier of the job.
- `"Tags"`: Tags to be associated with the sentiment detection job. A tag is a key-value
  pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with
  \"Sales\" as the key might be added to a resource to indicate its use by the sales
  department.
- `"VolumeKmsKeyId"`: ID for the AWS Key Management Service (KMS) key that Amazon
  Comprehend uses to encrypt data on the storage volume attached to the ML compute
  instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the
  following formats:   KMS Key ID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"    Amazon
  Resource Name (ARN) of a KMS Key:
  \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"
- `"VpcConfig"`: Configuration parameters for an optional private Virtual Private Cloud
  (VPC) containing the resources you are using for your sentiment detection job. For more
  information, see Amazon VPC.
"""
function start_sentiment_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    LanguageCode,
    OutputDataConfig;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartSentimentDetectionJob",
        Dict{String,Any}(
            "DataAccessRoleArn" => DataAccessRoleArn,
            "InputDataConfig" => InputDataConfig,
            "LanguageCode" => LanguageCode,
            "OutputDataConfig" => OutputDataConfig,
            "ClientRequestToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_sentiment_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    LanguageCode,
    OutputDataConfig,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartSentimentDetectionJob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DataAccessRoleArn" => DataAccessRoleArn,
                    "InputDataConfig" => InputDataConfig,
                    "LanguageCode" => LanguageCode,
                    "OutputDataConfig" => OutputDataConfig,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_topics_detection_job(data_access_role_arn, input_data_config, output_data_config)
    start_topics_detection_job(data_access_role_arn, input_data_config, output_data_config, params::Dict{String,<:Any})

Starts an asynchronous topic detection job. Use the DescribeTopicDetectionJob operation to
track the status of a job.

# Arguments
- `data_access_role_arn`: The Amazon Resource Name (ARN) of the AWS Identity and Access
  Management (IAM) role that grants Amazon Comprehend read access to your input data. For
  more information, see
  https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions.html#au
  th-role-permissions.
- `input_data_config`: Specifies the format and location of the input data for the job.
- `output_data_config`: Specifies where to send the output files. The output is a
  compressed archive with two files, topic-terms.csv that lists the terms associated with
  each topic, and doc-topics.csv that lists the documents associated with each topic

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientRequestToken"`: A unique identifier for the request. If you do not set the client
  request token, Amazon Comprehend generates one.
- `"JobName"`: The identifier of the job.
- `"NumberOfTopics"`: The number of topics to detect.
- `"Tags"`: Tags to be associated with the topics detection job. A tag is a key-value pair
  that adds metadata to a resource used by Amazon Comprehend. For example, a tag with
  \"Sales\" as the key might be added to a resource to indicate its use by the sales
  department.
- `"VolumeKmsKeyId"`: ID for the AWS Key Management Service (KMS) key that Amazon
  Comprehend uses to encrypt data on the storage volume attached to the ML compute
  instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the
  following formats:   KMS Key ID: \"1234abcd-12ab-34cd-56ef-1234567890ab\"    Amazon
  Resource Name (ARN) of a KMS Key:
  \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"
- `"VpcConfig"`: Configuration parameters for an optional private Virtual Private Cloud
  (VPC) containing the resources you are using for your topic detection job. For more
  information, see Amazon VPC.
"""
function start_topics_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    OutputDataConfig;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartTopicsDetectionJob",
        Dict{String,Any}(
            "DataAccessRoleArn" => DataAccessRoleArn,
            "InputDataConfig" => InputDataConfig,
            "OutputDataConfig" => OutputDataConfig,
            "ClientRequestToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_topics_detection_job(
    DataAccessRoleArn,
    InputDataConfig,
    OutputDataConfig,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StartTopicsDetectionJob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DataAccessRoleArn" => DataAccessRoleArn,
                    "InputDataConfig" => InputDataConfig,
                    "OutputDataConfig" => OutputDataConfig,
                    "ClientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_dominant_language_detection_job(job_id)
    stop_dominant_language_detection_job(job_id, params::Dict{String,<:Any})

Stops a dominant language detection job in progress. If the job state is IN_PROGRESS the
job is marked for termination and put into the STOP_REQUESTED state. If the job completes
before it can be stopped, it is put into the COMPLETED state; otherwise the job is stopped
and put into the STOPPED state. If the job is in the COMPLETED or FAILED state when you
call the StopDominantLanguageDetectionJob operation, the operation returns a 400 Internal
Request Exception.  When a job is stopped, any documents already processed are written to
the output location.

# Arguments
- `job_id`: The identifier of the dominant language detection job to stop.

"""
function stop_dominant_language_detection_job(
    JobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "StopDominantLanguageDetectionJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function stop_dominant_language_detection_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "StopDominantLanguageDetectionJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_entities_detection_job(job_id)
    stop_entities_detection_job(job_id, params::Dict{String,<:Any})

Stops an entities detection job in progress. If the job state is IN_PROGRESS the job is
marked for termination and put into the STOP_REQUESTED state. If the job completes before
it can be stopped, it is put into the COMPLETED state; otherwise the job is stopped and put
into the STOPPED state. If the job is in the COMPLETED or FAILED state when you call the
StopDominantLanguageDetectionJob operation, the operation returns a 400 Internal Request
Exception.  When a job is stopped, any documents already processed are written to the
output location.

# Arguments
- `job_id`: The identifier of the entities detection job to stop.

"""
function stop_entities_detection_job(
    JobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "StopEntitiesDetectionJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function stop_entities_detection_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "StopEntitiesDetectionJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_events_detection_job(job_id)
    stop_events_detection_job(job_id, params::Dict{String,<:Any})

Stops an events detection job in progress.

# Arguments
- `job_id`: The identifier of the events detection job to stop.

"""
function stop_events_detection_job(JobId; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "StopEventsDetectionJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function stop_events_detection_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "StopEventsDetectionJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_key_phrases_detection_job(job_id)
    stop_key_phrases_detection_job(job_id, params::Dict{String,<:Any})

Stops a key phrases detection job in progress. If the job state is IN_PROGRESS the job is
marked for termination and put into the STOP_REQUESTED state. If the job completes before
it can be stopped, it is put into the COMPLETED state; otherwise the job is stopped and put
into the STOPPED state. If the job is in the COMPLETED or FAILED state when you call the
StopDominantLanguageDetectionJob operation, the operation returns a 400 Internal Request
Exception.  When a job is stopped, any documents already processed are written to the
output location.

# Arguments
- `job_id`: The identifier of the key phrases detection job to stop.

"""
function stop_key_phrases_detection_job(
    JobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "StopKeyPhrasesDetectionJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function stop_key_phrases_detection_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "StopKeyPhrasesDetectionJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_pii_entities_detection_job(job_id)
    stop_pii_entities_detection_job(job_id, params::Dict{String,<:Any})

Stops a PII entities detection job in progress.

# Arguments
- `job_id`: The identifier of the PII entities detection job to stop.

"""
function stop_pii_entities_detection_job(
    JobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "StopPiiEntitiesDetectionJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function stop_pii_entities_detection_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "StopPiiEntitiesDetectionJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_sentiment_detection_job(job_id)
    stop_sentiment_detection_job(job_id, params::Dict{String,<:Any})

Stops a sentiment detection job in progress. If the job state is IN_PROGRESS the job is
marked for termination and put into the STOP_REQUESTED state. If the job completes before
it can be stopped, it is put into the COMPLETED state; otherwise the job is be stopped and
put into the STOPPED state. If the job is in the COMPLETED or FAILED state when you call
the StopDominantLanguageDetectionJob operation, the operation returns a 400 Internal
Request Exception.  When a job is stopped, any documents already processed are written to
the output location.

# Arguments
- `job_id`: The identifier of the sentiment detection job to stop.

"""
function stop_sentiment_detection_job(
    JobId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "StopSentimentDetectionJob",
        Dict{String,Any}("JobId" => JobId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function stop_sentiment_detection_job(
    JobId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "StopSentimentDetectionJob",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("JobId" => JobId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_training_document_classifier(document_classifier_arn)
    stop_training_document_classifier(document_classifier_arn, params::Dict{String,<:Any})

Stops a document classifier training job while in progress. If the training job state is
TRAINING, the job is marked for termination and put into the STOP_REQUESTED state. If the
training job completes before it can be stopped, it is put into the TRAINED; otherwise the
training job is stopped and put into the STOPPED state and the service sends back an HTTP
200 response with an empty HTTP body.

# Arguments
- `document_classifier_arn`: The Amazon Resource Name (ARN) that identifies the document
  classifier currently being trained.

"""
function stop_training_document_classifier(
    DocumentClassifierArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "StopTrainingDocumentClassifier",
        Dict{String,Any}("DocumentClassifierArn" => DocumentClassifierArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function stop_training_document_classifier(
    DocumentClassifierArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StopTrainingDocumentClassifier",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DocumentClassifierArn" => DocumentClassifierArn),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_training_entity_recognizer(entity_recognizer_arn)
    stop_training_entity_recognizer(entity_recognizer_arn, params::Dict{String,<:Any})

Stops an entity recognizer training job while in progress. If the training job state is
TRAINING, the job is marked for termination and put into the STOP_REQUESTED state. If the
training job completes before it can be stopped, it is put into the TRAINED; otherwise the
training job is stopped and putted into the STOPPED state and the service sends back an
HTTP 200 response with an empty HTTP body.

# Arguments
- `entity_recognizer_arn`: The Amazon Resource Name (ARN) that identifies the entity
  recognizer currently being trained.

"""
function stop_training_entity_recognizer(
    EntityRecognizerArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "StopTrainingEntityRecognizer",
        Dict{String,Any}("EntityRecognizerArn" => EntityRecognizerArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function stop_training_entity_recognizer(
    EntityRecognizerArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "StopTrainingEntityRecognizer",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("EntityRecognizerArn" => EntityRecognizerArn),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Associates a specific tag with an Amazon Comprehend resource. A tag is a key-value pair
that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with
\"Sales\" as the key might be added to a resource to indicate its use by the sales
department.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the given Amazon Comprehend resource to
  which you want to associate the tags.
- `tags`: Tags being associated with a specific Amazon Comprehend resource. There can be a
  maximum of 50 tags (both existing and pending) associated with a specific resource.

"""
function tag_resource(ResourceArn, Tags; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "TagResource",
        Dict{String,Any}("ResourceArn" => ResourceArn, "Tags" => Tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    ResourceArn,
    Tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "TagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceArn" => ResourceArn, "Tags" => Tags),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Removes a specific tag associated with an Amazon Comprehend resource.

# Arguments
- `resource_arn`:  The Amazon Resource Name (ARN) of the given Amazon Comprehend resource
  from which you want to remove the tags.
- `tag_keys`: The initial part of a key-value pair that forms a tag being removed from a
  given resource. For example, a tag with \"Sales\" as the key might be added to a resource
  to indicate its use by the sales department. Keys must be unique and cannot be duplicated
  for a particular resource.

"""
function untag_resource(
    ResourceArn, TagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return comprehend(
        "UntagResource",
        Dict{String,Any}("ResourceArn" => ResourceArn, "TagKeys" => TagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    ResourceArn,
    TagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "UntagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceArn" => ResourceArn, "TagKeys" => TagKeys),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_endpoint(endpoint_arn)
    update_endpoint(endpoint_arn, params::Dict{String,<:Any})

Updates information about the specified endpoint.

# Arguments
- `endpoint_arn`: The Amazon Resource Number (ARN) of the endpoint being updated.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DesiredDataAccessRoleArn"`: Data access role ARN to use in case the new model is
  encrypted with a customer CMK.
- `"DesiredInferenceUnits"`:  The desired number of inference units to be used by the model
  using this endpoint. Each inference unit represents of a throughput of 100 characters per
  second.
- `"DesiredModelArn"`: The ARN of the new model to use when updating an existing endpoint.
"""
function update_endpoint(EndpointArn; aws_config::AbstractAWSConfig=global_aws_config())
    return comprehend(
        "UpdateEndpoint",
        Dict{String,Any}("EndpointArn" => EndpointArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_endpoint(
    EndpointArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return comprehend(
        "UpdateEndpoint",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("EndpointArn" => EndpointArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
