# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: xray

using Compat
using UUIDs
"""
    BatchGetTraces()

Retrieves a list of traces specified by ID. Each trace is a collection of segment documents that originates from a single request. Use GetTraceSummaries to get a list of trace IDs.

# Required Parameters
- `TraceIds`: Specify the trace IDs of requests for which to retrieve segments.

# Optional Parameters
- `NextToken`: Pagination token.
"""
BatchGetTraces(TraceIds; aws::AWSConfig=AWSConfig()) = xray("POST", "/Traces", Dict{String, Any}("TraceIds"=>TraceIds))
BatchGetTraces(TraceIds, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/Traces", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TraceIds"=>TraceIds), args)); aws=aws)

"""
    CreateGroup()

Creates a group resource with a name and a filter expression. 

# Required Parameters
- `GroupName`: The case-sensitive name of the new group. Default is a reserved name and names must be unique.

# Optional Parameters
- `FilterExpression`: The filter expression defining criteria by which to group traces.
"""
CreateGroup(GroupName; aws::AWSConfig=AWSConfig()) = xray("POST", "/CreateGroup", Dict{String, Any}("GroupName"=>GroupName))
CreateGroup(GroupName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/CreateGroup", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("GroupName"=>GroupName), args)); aws=aws)

"""
    CreateSamplingRule()

Creates a rule to control sampling behavior for instrumented applications. Services retrieve rules with GetSamplingRules, and evaluate each rule in ascending order of priority for each request. If a rule matches, the service records a trace, borrowing it from the reservoir size. After 10 seconds, the service reports back to X-Ray with GetSamplingTargets to get updated versions of each in-use rule. The updated rule contains a trace quota that the service can use instead of borrowing from the reservoir.

# Required Parameters
- `SamplingRule`: The rule definition.

"""
CreateSamplingRule(SamplingRule; aws::AWSConfig=AWSConfig()) = xray("POST", "/CreateSamplingRule", Dict{String, Any}("SamplingRule"=>SamplingRule))
CreateSamplingRule(SamplingRule, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/CreateSamplingRule", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SamplingRule"=>SamplingRule), args)); aws=aws)

"""
    DeleteGroup()

Deletes a group resource.

# Optional Parameters
- `GroupARN`: The ARN of the group that was generated on creation.
- `GroupName`: The case-sensitive name of the group.
"""
DeleteGroup(; aws::AWSConfig=AWSConfig()) = xray("POST", "/DeleteGroup"; aws=aws)
DeleteGroup(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/DeleteGroup", args; aws=aws)

"""
    DeleteSamplingRule()

Deletes a sampling rule.

# Optional Parameters
- `RuleARN`: The ARN of the sampling rule. Specify a rule by either name or ARN, but not both.
- `RuleName`: The name of the sampling rule. Specify a rule by either name or ARN, but not both.
"""
DeleteSamplingRule(; aws::AWSConfig=AWSConfig()) = xray("POST", "/DeleteSamplingRule"; aws=aws)
DeleteSamplingRule(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/DeleteSamplingRule", args; aws=aws)

"""
    GetEncryptionConfig()

Retrieves the current encryption configuration for X-Ray data.

"""
GetEncryptionConfig(; aws::AWSConfig=AWSConfig()) = xray("POST", "/EncryptionConfig"; aws=aws)
GetEncryptionConfig(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/EncryptionConfig", args; aws=aws)

"""
    GetGroup()

Retrieves group resource details.

# Optional Parameters
- `GroupARN`: The ARN of the group that was generated on creation.
- `GroupName`: The case-sensitive name of the group.
"""
GetGroup(; aws::AWSConfig=AWSConfig()) = xray("POST", "/GetGroup"; aws=aws)
GetGroup(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/GetGroup", args; aws=aws)

"""
    GetGroups()

Retrieves all active group details.

# Optional Parameters
- `NextToken`: Pagination token.
"""
GetGroups(; aws::AWSConfig=AWSConfig()) = xray("POST", "/Groups"; aws=aws)
GetGroups(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/Groups", args; aws=aws)

"""
    GetSamplingRules()

Retrieves all sampling rules.

# Optional Parameters
- `NextToken`: Pagination token.
"""
GetSamplingRules(; aws::AWSConfig=AWSConfig()) = xray("POST", "/GetSamplingRules"; aws=aws)
GetSamplingRules(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/GetSamplingRules", args; aws=aws)

"""
    GetSamplingStatisticSummaries()

Retrieves information about recent sampling results for all sampling rules.

# Optional Parameters
- `NextToken`: Pagination token.
"""
GetSamplingStatisticSummaries(; aws::AWSConfig=AWSConfig()) = xray("POST", "/SamplingStatisticSummaries"; aws=aws)
GetSamplingStatisticSummaries(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/SamplingStatisticSummaries", args; aws=aws)

"""
    GetSamplingTargets()

Requests a sampling quota for rules that the service is using to sample requests. 

# Required Parameters
- `SamplingStatisticsDocuments`: Information about rules that the service is using to sample requests.

"""
GetSamplingTargets(SamplingStatisticsDocuments; aws::AWSConfig=AWSConfig()) = xray("POST", "/SamplingTargets", Dict{String, Any}("SamplingStatisticsDocuments"=>SamplingStatisticsDocuments))
GetSamplingTargets(SamplingStatisticsDocuments, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/SamplingTargets", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SamplingStatisticsDocuments"=>SamplingStatisticsDocuments), args)); aws=aws)

"""
    GetServiceGraph()

Retrieves a document that describes services that process incoming requests, and downstream services that they call as a result. Root services process incoming requests and make calls to downstream services. Root services are applications that use the AWS X-Ray SDK. Downstream services can be other applications, AWS resources, HTTP web APIs, or SQL databases.

# Required Parameters
- `EndTime`: The end of the timeframe for which to generate a graph.
- `StartTime`: The start of the time frame for which to generate a graph.

# Optional Parameters
- `GroupARN`: The ARN of a group to generate a graph based on.
- `GroupName`: The name of a group to generate a graph based on.
- `NextToken`: Pagination token.
"""
GetServiceGraph(EndTime, StartTime; aws::AWSConfig=AWSConfig()) = xray("POST", "/ServiceGraph", Dict{String, Any}("EndTime"=>EndTime, "StartTime"=>StartTime))
GetServiceGraph(EndTime, StartTime, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/ServiceGraph", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EndTime"=>EndTime, "StartTime"=>StartTime), args)); aws=aws)

"""
    GetTimeSeriesServiceStatistics()

Get an aggregation of service statistics defined by a specific time range.

# Required Parameters
- `EndTime`: The end of the time frame for which to aggregate statistics.
- `StartTime`: The start of the time frame for which to aggregate statistics.

# Optional Parameters
- `EntitySelectorExpression`: A filter expression defining entities that will be aggregated for statistics. Supports ID, service, and edge functions. If no selector expression is specified, edge statistics are returned. 
- `GroupARN`: The ARN of the group for which to pull statistics from.
- `GroupName`: The case-sensitive name of the group for which to pull statistics from.
- `NextToken`: Pagination token.
- `Period`: Aggregation period in seconds.
"""
GetTimeSeriesServiceStatistics(EndTime, StartTime; aws::AWSConfig=AWSConfig()) = xray("POST", "/TimeSeriesServiceStatistics", Dict{String, Any}("EndTime"=>EndTime, "StartTime"=>StartTime))
GetTimeSeriesServiceStatistics(EndTime, StartTime, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/TimeSeriesServiceStatistics", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EndTime"=>EndTime, "StartTime"=>StartTime), args)); aws=aws)

"""
    GetTraceGraph()

Retrieves a service graph for one or more specific trace IDs.

# Required Parameters
- `TraceIds`: Trace IDs of requests for which to generate a service graph.

# Optional Parameters
- `NextToken`: Pagination token.
"""
GetTraceGraph(TraceIds; aws::AWSConfig=AWSConfig()) = xray("POST", "/TraceGraph", Dict{String, Any}("TraceIds"=>TraceIds))
GetTraceGraph(TraceIds, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/TraceGraph", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TraceIds"=>TraceIds), args)); aws=aws)

"""
    GetTraceSummaries()

Retrieves IDs and annotations for traces available for a specified time frame using an optional filter. To get the full traces, pass the trace IDs to BatchGetTraces. A filter expression can target traced requests that hit specific service nodes or edges, have errors, or come from a known user. For example, the following filter expression targets traces that pass through api.example.com:  service(\"api.example.com\")  This filter expression finds traces that have an annotation named account with the value 12345:  annotation.account = \"12345\"  For a full list of indexed fields and keywords that you can use in filter expressions, see Using Filter Expressions in the AWS X-Ray Developer Guide.

# Required Parameters
- `EndTime`: The end of the time frame for which to retrieve traces.
- `StartTime`: The start of the time frame for which to retrieve traces.

# Optional Parameters
- `FilterExpression`: Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.
- `NextToken`: Specify the pagination token returned by a previous request to retrieve the next page of results.
- `Sampling`: Set to true to get summaries for only a subset of available traces.
- `SamplingStrategy`: A paramater to indicate whether to enable sampling on trace summaries. Input parameters are Name and Value.
- `TimeRangeType`: A parameter to indicate whether to query trace summaries by TraceId or Event time.
"""
GetTraceSummaries(EndTime, StartTime; aws::AWSConfig=AWSConfig()) = xray("POST", "/TraceSummaries", Dict{String, Any}("EndTime"=>EndTime, "StartTime"=>StartTime))
GetTraceSummaries(EndTime, StartTime, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/TraceSummaries", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EndTime"=>EndTime, "StartTime"=>StartTime), args)); aws=aws)

"""
    PutEncryptionConfig()

Updates the encryption configuration for X-Ray data.

# Required Parameters
- `Type`: The type of encryption. Set to KMS to use your own key for encryption. Set to NONE for default encryption.

# Optional Parameters
- `KeyId`: An AWS KMS customer master key (CMK) in one of the following formats:    Alias - The name of the key. For example, alias/MyKey.    Key ID - The KMS key ID of the key. For example, ae4aa6d49-a4d8-9df9-a475-4ff6d7898456. AWS X-Ray does not support asymmetric CMKs.    ARN - The full Amazon Resource Name of the key ID or alias. For example, arn:aws:kms:us-east-2:123456789012:key/ae4aa6d49-a4d8-9df9-a475-4ff6d7898456. Use this format to specify a key in a different account.   Omit this key if you set Type to NONE.
"""
PutEncryptionConfig(Type; aws::AWSConfig=AWSConfig()) = xray("POST", "/PutEncryptionConfig", Dict{String, Any}("Type"=>Type))
PutEncryptionConfig(Type, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/PutEncryptionConfig", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Type"=>Type), args)); aws=aws)

"""
    PutTelemetryRecords()

Used by the AWS X-Ray daemon to upload telemetry.

# Required Parameters
- `TelemetryRecords`: 

# Optional Parameters
- `EC2InstanceId`: 
- `Hostname`: 
- `ResourceARN`: 
"""
PutTelemetryRecords(TelemetryRecords; aws::AWSConfig=AWSConfig()) = xray("POST", "/TelemetryRecords", Dict{String, Any}("TelemetryRecords"=>TelemetryRecords))
PutTelemetryRecords(TelemetryRecords, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/TelemetryRecords", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TelemetryRecords"=>TelemetryRecords), args)); aws=aws)

"""
    PutTraceSegments()

Uploads segment documents to AWS X-Ray. The X-Ray SDK generates segment documents and sends them to the X-Ray daemon, which uploads them in batches. A segment document can be a completed segment, an in-progress segment, or an array of subsegments. Segments must include the following fields. For the full segment document schema, see AWS X-Ray Segment Documents in the AWS X-Ray Developer Guide.  Required Segment Document Fields     name - The name of the service that handled the request.    id - A 64-bit identifier for the segment, unique among segments in the same trace, in 16 hexadecimal digits.    trace_id - A unique identifier that connects all segments and subsegments originating from a single client request.    start_time - Time the segment or subsegment was created, in floating point seconds in epoch time, accurate to milliseconds. For example, 1480615200.010 or 1.480615200010E9.    end_time - Time the segment or subsegment was closed. For example, 1480615200.090 or 1.480615200090E9. Specify either an end_time or in_progress.    in_progress - Set to true instead of specifying an end_time to record that a segment has been started, but is not complete. Send an in progress segment when your application receives a request that will take a long time to serve, to trace the fact that the request was received. When the response is sent, send the complete segment to overwrite the in-progress segment.   A trace_id consists of three numbers separated by hyphens. For example, 1-58406520-a006649127e371903a2de979. This includes:  Trace ID Format    The version number, i.e. 1.   The time of the original request, in Unix epoch time, in 8 hexadecimal digits. For example, 10:00AM December 2nd, 2016 PST in epoch time is 1480615200 seconds, or 58406520 in hexadecimal.   A 96-bit identifier for the trace, globally unique, in 24 hexadecimal digits.  

# Required Parameters
- `TraceSegmentDocuments`: A string containing a JSON document defining one or more segments or subsegments.

"""
PutTraceSegments(TraceSegmentDocuments; aws::AWSConfig=AWSConfig()) = xray("POST", "/TraceSegments", Dict{String, Any}("TraceSegmentDocuments"=>TraceSegmentDocuments))
PutTraceSegments(TraceSegmentDocuments, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/TraceSegments", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TraceSegmentDocuments"=>TraceSegmentDocuments), args)); aws=aws)

"""
    UpdateGroup()

Updates a group resource.

# Optional Parameters
- `FilterExpression`: The updated filter expression defining criteria by which to group traces.
- `GroupARN`: The ARN that was generated upon creation.
- `GroupName`: The case-sensitive name of the group.
"""
UpdateGroup(; aws::AWSConfig=AWSConfig()) = xray("POST", "/UpdateGroup"; aws=aws)
UpdateGroup(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/UpdateGroup", args; aws=aws)

"""
    UpdateSamplingRule()

Modifies a sampling rule's configuration.

# Required Parameters
- `SamplingRuleUpdate`: The rule and fields to change.

"""
UpdateSamplingRule(SamplingRuleUpdate; aws::AWSConfig=AWSConfig()) = xray("POST", "/UpdateSamplingRule", Dict{String, Any}("SamplingRuleUpdate"=>SamplingRuleUpdate))
UpdateSamplingRule(SamplingRuleUpdate, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = xray("POST", "/UpdateSamplingRule", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SamplingRuleUpdate"=>SamplingRuleUpdate), args)); aws=aws)
