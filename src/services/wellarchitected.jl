# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: wellarchitected
using AWS.Compat
using AWS.UUIDs

"""
    AssociateLenses()

Associate a lens to a workload.

# Required Parameters
- `LensAliases`: 
- `WorkloadId`: 

"""
associate_lenses(LensAliases, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/workloads/$(WorkloadId)/associateLenses", Dict{String, Any}("LensAliases"=>LensAliases); aws_config=aws_config)
associate_lenses(LensAliases, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/workloads/$(WorkloadId)/associateLenses", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("LensAliases"=>LensAliases), args)); aws_config=aws_config)

"""
    CreateMilestone()

Create a milestone for an existing workload.

# Required Parameters
- `ClientRequestToken`: 
- `MilestoneName`: 
- `WorkloadId`: 

"""
create_milestone(ClientRequestToken, MilestoneName, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("POST", "/workloads/$(WorkloadId)/milestones", Dict{String, Any}("ClientRequestToken"=>ClientRequestToken, "MilestoneName"=>MilestoneName); aws_config=aws_config)
create_milestone(ClientRequestToken, MilestoneName, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("POST", "/workloads/$(WorkloadId)/milestones", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClientRequestToken"=>ClientRequestToken, "MilestoneName"=>MilestoneName), args)); aws_config=aws_config)

"""
    CreateWorkload()

Create a new workload. The owner of a workload can share the workload with other AWS accounts and IAM users in the same AWS Region. Only the owner of a workload can delete it. For more information, see Defining a Workload in the AWS Well-Architected Tool User Guide.

# Required Parameters
- `ClientRequestToken`: 
- `Description`: 
- `Environment`: 
- `Lenses`: 
- `ReviewOwner`: 
- `WorkloadName`: 

# Optional Parameters
- `AccountIds`: 
- `ArchitecturalDesign`: 
- `AwsRegions`: 
- `Industry`: 
- `IndustryType`: 
- `NonAwsRegions`: 
- `Notes`: 
- `PillarPriorities`: 
"""
create_workload(ClientRequestToken, Description, Environment, Lenses, ReviewOwner, WorkloadName; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("POST", "/workloads", Dict{String, Any}("ClientRequestToken"=>ClientRequestToken, "Description"=>Description, "Environment"=>Environment, "Lenses"=>Lenses, "ReviewOwner"=>ReviewOwner, "WorkloadName"=>WorkloadName); aws_config=aws_config)
create_workload(ClientRequestToken, Description, Environment, Lenses, ReviewOwner, WorkloadName, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("POST", "/workloads", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClientRequestToken"=>ClientRequestToken, "Description"=>Description, "Environment"=>Environment, "Lenses"=>Lenses, "ReviewOwner"=>ReviewOwner, "WorkloadName"=>WorkloadName), args)); aws_config=aws_config)

"""
    CreateWorkloadShare()

Create a workload share. The owner of a workload can share it with other AWS accounts and IAM users in the same AWS Region. Shared access to a workload is not removed until the workload invitation is deleted. For more information, see Sharing a Workload in the AWS Well-Architected Tool User Guide.

# Required Parameters
- `ClientRequestToken`: 
- `PermissionType`: 
- `SharedWith`: 
- `WorkloadId`: 

"""
create_workload_share(ClientRequestToken, PermissionType, SharedWith, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("POST", "/workloads/$(WorkloadId)/shares", Dict{String, Any}("ClientRequestToken"=>ClientRequestToken, "PermissionType"=>PermissionType, "SharedWith"=>SharedWith); aws_config=aws_config)
create_workload_share(ClientRequestToken, PermissionType, SharedWith, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("POST", "/workloads/$(WorkloadId)/shares", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClientRequestToken"=>ClientRequestToken, "PermissionType"=>PermissionType, "SharedWith"=>SharedWith), args)); aws_config=aws_config)

"""
    DeleteWorkload()

Delete an existing workload.

# Required Parameters
- `ClientRequestToken`: 
- `WorkloadId`: 

"""
delete_workload(ClientRequestToken, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("DELETE", "/workloads/$(WorkloadId)", Dict{String, Any}("ClientRequestToken"=>ClientRequestToken); aws_config=aws_config)
delete_workload(ClientRequestToken, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("DELETE", "/workloads/$(WorkloadId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClientRequestToken"=>ClientRequestToken), args)); aws_config=aws_config)

"""
    DeleteWorkloadShare()

Delete a workload share.

# Required Parameters
- `ClientRequestToken`: 
- `ShareId`: 
- `WorkloadId`: 

"""
delete_workload_share(ClientRequestToken, ShareId, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("DELETE", "/workloads/$(WorkloadId)/shares/$(ShareId)", Dict{String, Any}("ClientRequestToken"=>ClientRequestToken); aws_config=aws_config)
delete_workload_share(ClientRequestToken, ShareId, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("DELETE", "/workloads/$(WorkloadId)/shares/$(ShareId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ClientRequestToken"=>ClientRequestToken), args)); aws_config=aws_config)

"""
    DisassociateLenses()

Disassociate a lens from a workload.  The AWS Well-Architected Framework lens (wellarchitected) cannot be removed from a workload. 

# Required Parameters
- `LensAliases`: 
- `WorkloadId`: 

"""
disassociate_lenses(LensAliases, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/workloads/$(WorkloadId)/disassociateLenses", Dict{String, Any}("LensAliases"=>LensAliases); aws_config=aws_config)
disassociate_lenses(LensAliases, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/workloads/$(WorkloadId)/disassociateLenses", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("LensAliases"=>LensAliases), args)); aws_config=aws_config)

"""
    GetAnswer()

Get lens review.

# Required Parameters
- `LensAlias`: 
- `QuestionId`: 
- `WorkloadId`: 

# Optional Parameters
- `MilestoneNumber`: 
"""
get_answer(LensAlias, QuestionId, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)/answers/$(QuestionId)"; aws_config=aws_config)
get_answer(LensAlias, QuestionId, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)/answers/$(QuestionId)", args; aws_config=aws_config)

"""
    GetLensReview()

Get lens review.

# Required Parameters
- `LensAlias`: 
- `WorkloadId`: 

# Optional Parameters
- `MilestoneNumber`: 
"""
get_lens_review(LensAlias, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)"; aws_config=aws_config)
get_lens_review(LensAlias, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)", args; aws_config=aws_config)

"""
    GetLensReviewReport()

Get lens review report.

# Required Parameters
- `LensAlias`: 
- `WorkloadId`: 

# Optional Parameters
- `MilestoneNumber`: 
"""
get_lens_review_report(LensAlias, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)/report"; aws_config=aws_config)
get_lens_review_report(LensAlias, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)/report", args; aws_config=aws_config)

"""
    GetLensVersionDifference()

Get lens version differences.

# Required Parameters
- `BaseLensVersion`: The base version of the lens.
- `LensAlias`: 

"""
get_lens_version_difference(BaseLensVersion, LensAlias; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/lenses/$(LensAlias)/versionDifference", Dict{String, Any}("BaseLensVersion"=>BaseLensVersion); aws_config=aws_config)
get_lens_version_difference(BaseLensVersion, LensAlias, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/lenses/$(LensAlias)/versionDifference", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("BaseLensVersion"=>BaseLensVersion), args)); aws_config=aws_config)

"""
    GetMilestone()

Get a milestone for an existing workload.

# Required Parameters
- `MilestoneNumber`: 
- `WorkloadId`: 

"""
get_milestone(MilestoneNumber, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/milestones/$(MilestoneNumber)"; aws_config=aws_config)
get_milestone(MilestoneNumber, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/milestones/$(MilestoneNumber)", args; aws_config=aws_config)

"""
    GetWorkload()

Get an existing workload.

# Required Parameters
- `WorkloadId`: 

"""
get_workload(WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)"; aws_config=aws_config)
get_workload(WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)", args; aws_config=aws_config)

"""
    ListAnswers()

List of answers.

# Required Parameters
- `LensAlias`: 
- `WorkloadId`: 

# Optional Parameters
- `MaxResults`: The maximum number of results to return for this request.
- `MilestoneNumber`: 
- `NextToken`: 
- `PillarId`: 
"""
list_answers(LensAlias, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)/answers"; aws_config=aws_config)
list_answers(LensAlias, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)/answers", args; aws_config=aws_config)

"""
    ListLensReviewImprovements()

List lens review improvements.

# Required Parameters
- `LensAlias`: 
- `WorkloadId`: 

# Optional Parameters
- `MaxResults`: The maximum number of results to return for this request.
- `MilestoneNumber`: 
- `NextToken`: 
- `PillarId`: 
"""
list_lens_review_improvements(LensAlias, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)/improvements"; aws_config=aws_config)
list_lens_review_improvements(LensAlias, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)/improvements", args; aws_config=aws_config)

"""
    ListLensReviews()

List lens reviews.

# Required Parameters
- `WorkloadId`: 

# Optional Parameters
- `MaxResults`: 
- `MilestoneNumber`: 
- `NextToken`: 
"""
list_lens_reviews(WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/lensReviews"; aws_config=aws_config)
list_lens_reviews(WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/lensReviews", args; aws_config=aws_config)

"""
    ListLenses()

List the available lenses.

# Optional Parameters
- `MaxResults`: 
- `NextToken`: 
"""
list_lenses(; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/lenses"; aws_config=aws_config)
list_lenses(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/lenses", args; aws_config=aws_config)

"""
    ListMilestones()

List all milestones for an existing workload.

# Required Parameters
- `WorkloadId`: 

# Optional Parameters
- `MaxResults`: 
- `NextToken`: 
"""
list_milestones(WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("POST", "/workloads/$(WorkloadId)/milestonesSummaries"; aws_config=aws_config)
list_milestones(WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("POST", "/workloads/$(WorkloadId)/milestonesSummaries", args; aws_config=aws_config)

"""
    ListNotifications()

List lens notifications.

# Optional Parameters
- `MaxResults`: The maximum number of results to return for this request.
- `NextToken`: 
- `WorkloadId`: 
"""
list_notifications(; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("POST", "/notifications"; aws_config=aws_config)
list_notifications(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("POST", "/notifications", args; aws_config=aws_config)

"""
    ListShareInvitations()

List the workload invitations.

# Optional Parameters
- `MaxResults`: The maximum number of results to return for this request.
- `NextToken`: 
- `WorkloadNamePrefix`: 
"""
list_share_invitations(; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/shareInvitations"; aws_config=aws_config)
list_share_invitations(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/shareInvitations", args; aws_config=aws_config)

"""
    ListWorkloadShares()

List the workload shares associated with the workload.

# Required Parameters
- `WorkloadId`: 

# Optional Parameters
- `MaxResults`: The maximum number of results to return for this request.
- `NextToken`: 
- `SharedWithPrefix`: The AWS account ID or IAM role with which the workload is shared.
"""
list_workload_shares(WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/shares"; aws_config=aws_config)
list_workload_shares(WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("GET", "/workloads/$(WorkloadId)/shares", args; aws_config=aws_config)

"""
    ListWorkloads()

List workloads. Paginated.

# Optional Parameters
- `MaxResults`: The maximum number of results to return for this request.
- `NextToken`: 
- `WorkloadNamePrefix`: 
"""
list_workloads(; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("POST", "/workloadsSummaries"; aws_config=aws_config)
list_workloads(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("POST", "/workloadsSummaries", args; aws_config=aws_config)

"""
    UpdateAnswer()

Update the answer.

# Required Parameters
- `LensAlias`: 
- `QuestionId`: 
- `WorkloadId`: 

# Optional Parameters
- `IsApplicable`: 
- `Notes`: 
- `SelectedChoices`: 
"""
update_answer(LensAlias, QuestionId, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)/answers/$(QuestionId)"; aws_config=aws_config)
update_answer(LensAlias, QuestionId, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)/answers/$(QuestionId)", args; aws_config=aws_config)

"""
    UpdateLensReview()

Update lens review.

# Required Parameters
- `LensAlias`: 
- `WorkloadId`: 

# Optional Parameters
- `LensNotes`: 
- `PillarNotes`: 
"""
update_lens_review(LensAlias, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)"; aws_config=aws_config)
update_lens_review(LensAlias, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)", args; aws_config=aws_config)

"""
    UpdateShareInvitation()

Update a workload invitation.

# Required Parameters
- `ShareInvitationAction`: 
- `ShareInvitationId`: The ID assigned to the share invitation.

"""
update_share_invitation(ShareInvitationAction, ShareInvitationId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/shareInvitations/$(ShareInvitationId)", Dict{String, Any}("ShareInvitationAction"=>ShareInvitationAction); aws_config=aws_config)
update_share_invitation(ShareInvitationAction, ShareInvitationId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/shareInvitations/$(ShareInvitationId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ShareInvitationAction"=>ShareInvitationAction), args)); aws_config=aws_config)

"""
    UpdateWorkload()

Update an existing workload.

# Required Parameters
- `WorkloadId`: 

# Optional Parameters
- `AccountIds`: 
- `ArchitecturalDesign`: 
- `AwsRegions`: 
- `Description`: 
- `Environment`: 
- `ImprovementStatus`: 
- `Industry`: 
- `IndustryType`: 
- `IsReviewOwnerUpdateAcknowledged`: Flag indicating whether the workload owner has acknowledged that the Review owner field is required. If a Review owner is not added to the workload within 60 days of acknowledgement, access to the workload is restricted until an owner is added.
- `NonAwsRegions`: 
- `Notes`: 
- `PillarPriorities`: 
- `ReviewOwner`: 
- `WorkloadName`: 
"""
update_workload(WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/workloads/$(WorkloadId)"; aws_config=aws_config)
update_workload(WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/workloads/$(WorkloadId)", args; aws_config=aws_config)

"""
    UpdateWorkloadShare()

Update a workload share.

# Required Parameters
- `PermissionType`: 
- `ShareId`: 
- `WorkloadId`: 

"""
update_workload_share(PermissionType, ShareId, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/workloads/$(WorkloadId)/shares/$(ShareId)", Dict{String, Any}("PermissionType"=>PermissionType); aws_config=aws_config)
update_workload_share(PermissionType, ShareId, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PATCH", "/workloads/$(WorkloadId)/shares/$(ShareId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("PermissionType"=>PermissionType), args)); aws_config=aws_config)

"""
    UpgradeLensReview()

Upgrade lens review.

# Required Parameters
- `LensAlias`: 
- `MilestoneName`: 
- `WorkloadId`: 

# Optional Parameters
- `ClientRequestToken`: 
"""
upgrade_lens_review(LensAlias, MilestoneName, WorkloadId; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PUT", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)/upgrade", Dict{String, Any}("MilestoneName"=>MilestoneName); aws_config=aws_config)
upgrade_lens_review(LensAlias, MilestoneName, WorkloadId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = wellarchitected("PUT", "/workloads/$(WorkloadId)/lensReviews/$(LensAlias)/upgrade", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("MilestoneName"=>MilestoneName), args)); aws_config=aws_config)
