# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: pinpoint

using Compat
using UUIDs
"""
    CreateApp()

 Creates an application.

# Required Parameters
- `CreateApplicationRequest`: 

"""

CreateApp(CreateApplicationRequest; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps", Dict{String, Any}("CreateApplicationRequest"=>CreateApplicationRequest); aws_config=aws_config)
CreateApp(CreateApplicationRequest, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("CreateApplicationRequest"=>CreateApplicationRequest), args)); aws_config=aws_config)

"""
    CreateCampaign()

Creates a new campaign for an application or updates the settings of an existing campaign for an application.

# Required Parameters
- `WriteCampaignRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

CreateCampaign(WriteCampaignRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/campaigns", Dict{String, Any}("WriteCampaignRequest"=>WriteCampaignRequest); aws_config=aws_config)
CreateCampaign(WriteCampaignRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/campaigns", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("WriteCampaignRequest"=>WriteCampaignRequest), args)); aws_config=aws_config)

"""
    CreateEmailTemplate()

Creates a message template for messages that are sent through the email channel.

# Required Parameters
- `EmailTemplateRequest`: 
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

"""

CreateEmailTemplate(EmailTemplateRequest, template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/templates/$(template-name)/email", Dict{String, Any}("EmailTemplateRequest"=>EmailTemplateRequest); aws_config=aws_config)
CreateEmailTemplate(EmailTemplateRequest, template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/templates/$(template-name)/email", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EmailTemplateRequest"=>EmailTemplateRequest), args)); aws_config=aws_config)

"""
    CreateExportJob()

Creates an export job for an application.

# Required Parameters
- `ExportJobRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

CreateExportJob(ExportJobRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/jobs/export", Dict{String, Any}("ExportJobRequest"=>ExportJobRequest); aws_config=aws_config)
CreateExportJob(ExportJobRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/jobs/export", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ExportJobRequest"=>ExportJobRequest), args)); aws_config=aws_config)

"""
    CreateImportJob()

Creates an import job for an application.

# Required Parameters
- `ImportJobRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

CreateImportJob(ImportJobRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/jobs/import", Dict{String, Any}("ImportJobRequest"=>ImportJobRequest); aws_config=aws_config)
CreateImportJob(ImportJobRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/jobs/import", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ImportJobRequest"=>ImportJobRequest), args)); aws_config=aws_config)

"""
    CreateJourney()

Creates a journey for an application.

# Required Parameters
- `WriteJourneyRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

CreateJourney(WriteJourneyRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/journeys", Dict{String, Any}("WriteJourneyRequest"=>WriteJourneyRequest); aws_config=aws_config)
CreateJourney(WriteJourneyRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/journeys", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("WriteJourneyRequest"=>WriteJourneyRequest), args)); aws_config=aws_config)

"""
    CreatePushTemplate()

Creates a message template for messages that are sent through a push notification channel.

# Required Parameters
- `PushNotificationTemplateRequest`: 
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

"""

CreatePushTemplate(PushNotificationTemplateRequest, template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/templates/$(template-name)/push", Dict{String, Any}("PushNotificationTemplateRequest"=>PushNotificationTemplateRequest); aws_config=aws_config)
CreatePushTemplate(PushNotificationTemplateRequest, template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/templates/$(template-name)/push", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("PushNotificationTemplateRequest"=>PushNotificationTemplateRequest), args)); aws_config=aws_config)

"""
    CreateRecommenderConfiguration()

Creates an Amazon Pinpoint configuration for a recommender model.

# Required Parameters
- `CreateRecommenderConfiguration`: 

"""

CreateRecommenderConfiguration(CreateRecommenderConfiguration; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/recommenders", Dict{String, Any}("CreateRecommenderConfiguration"=>CreateRecommenderConfiguration); aws_config=aws_config)
CreateRecommenderConfiguration(CreateRecommenderConfiguration, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/recommenders", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("CreateRecommenderConfiguration"=>CreateRecommenderConfiguration), args)); aws_config=aws_config)

"""
    CreateSegment()

Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.

# Required Parameters
- `WriteSegmentRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

CreateSegment(WriteSegmentRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/segments", Dict{String, Any}("WriteSegmentRequest"=>WriteSegmentRequest); aws_config=aws_config)
CreateSegment(WriteSegmentRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/segments", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("WriteSegmentRequest"=>WriteSegmentRequest), args)); aws_config=aws_config)

"""
    CreateSmsTemplate()

Creates a message template for messages that are sent through the SMS channel.

# Required Parameters
- `SMSTemplateRequest`: 
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

"""

CreateSmsTemplate(SMSTemplateRequest, template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/templates/$(template-name)/sms", Dict{String, Any}("SMSTemplateRequest"=>SMSTemplateRequest); aws_config=aws_config)
CreateSmsTemplate(SMSTemplateRequest, template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/templates/$(template-name)/sms", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SMSTemplateRequest"=>SMSTemplateRequest), args)); aws_config=aws_config)

"""
    CreateVoiceTemplate()

Creates a message template for messages that are sent through the voice channel.

# Required Parameters
- `VoiceTemplateRequest`: 
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

"""

CreateVoiceTemplate(VoiceTemplateRequest, template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/templates/$(template-name)/voice", Dict{String, Any}("VoiceTemplateRequest"=>VoiceTemplateRequest); aws_config=aws_config)
CreateVoiceTemplate(VoiceTemplateRequest, template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/templates/$(template-name)/voice", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("VoiceTemplateRequest"=>VoiceTemplateRequest), args)); aws_config=aws_config)

"""
    DeleteAdmChannel()

Disables the ADM channel for an application and deletes any existing settings for the channel.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

DeleteAdmChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/adm"; aws_config=aws_config)
DeleteAdmChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/adm", args; aws_config=aws_config)

"""
    DeleteApnsChannel()

Disables the APNs channel for an application and deletes any existing settings for the channel.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

DeleteApnsChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/apns"; aws_config=aws_config)
DeleteApnsChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/apns", args; aws_config=aws_config)

"""
    DeleteApnsSandboxChannel()

Disables the APNs sandbox channel for an application and deletes any existing settings for the channel.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

DeleteApnsSandboxChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/apns_sandbox"; aws_config=aws_config)
DeleteApnsSandboxChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/apns_sandbox", args; aws_config=aws_config)

"""
    DeleteApnsVoipChannel()

Disables the APNs VoIP channel for an application and deletes any existing settings for the channel.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

DeleteApnsVoipChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/apns_voip"; aws_config=aws_config)
DeleteApnsVoipChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/apns_voip", args; aws_config=aws_config)

"""
    DeleteApnsVoipSandboxChannel()

Disables the APNs VoIP sandbox channel for an application and deletes any existing settings for the channel.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

DeleteApnsVoipSandboxChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/apns_voip_sandbox"; aws_config=aws_config)
DeleteApnsVoipSandboxChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/apns_voip_sandbox", args; aws_config=aws_config)

"""
    DeleteApp()

Deletes an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

DeleteApp(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)"; aws_config=aws_config)
DeleteApp(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)", args; aws_config=aws_config)

"""
    DeleteBaiduChannel()

Disables the Baidu channel for an application and deletes any existing settings for the channel.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

DeleteBaiduChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/baidu"; aws_config=aws_config)
DeleteBaiduChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/baidu", args; aws_config=aws_config)

"""
    DeleteCampaign()

Deletes a campaign from an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `campaign-id`: The unique identifier for the campaign.

"""

DeleteCampaign(application_id, campaign_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/campaigns/$(campaign-id)"; aws_config=aws_config)
DeleteCampaign(application_id, campaign_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/campaigns/$(campaign-id)", args; aws_config=aws_config)

"""
    DeleteEmailChannel()

Disables the email channel for an application and deletes any existing settings for the channel.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

DeleteEmailChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/email"; aws_config=aws_config)
DeleteEmailChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/email", args; aws_config=aws_config)

"""
    DeleteEmailTemplate()

Deletes a message template for messages that were sent through the email channel.

# Required Parameters
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

# Optional Parameters
- `version`: The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following: For a get operation, retrieves information about the active version of the template. For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false. For a delete operation, deletes the template, including all versions of the template.
"""

DeleteEmailTemplate(template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/templates/$(template-name)/email"; aws_config=aws_config)
DeleteEmailTemplate(template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/templates/$(template-name)/email", args; aws_config=aws_config)

"""
    DeleteEndpoint()

Deletes an endpoint from an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `endpoint-id`: The unique identifier for the endpoint.

"""

DeleteEndpoint(application_id, endpoint_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/endpoints/$(endpoint-id)"; aws_config=aws_config)
DeleteEndpoint(application_id, endpoint_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/endpoints/$(endpoint-id)", args; aws_config=aws_config)

"""
    DeleteEventStream()

Deletes the event stream for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

DeleteEventStream(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/eventstream"; aws_config=aws_config)
DeleteEventStream(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/eventstream", args; aws_config=aws_config)

"""
    DeleteGcmChannel()

Disables the GCM channel for an application and deletes any existing settings for the channel.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

DeleteGcmChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/gcm"; aws_config=aws_config)
DeleteGcmChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/gcm", args; aws_config=aws_config)

"""
    DeleteJourney()

Deletes a journey from an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `journey-id`: The unique identifier for the journey.

"""

DeleteJourney(application_id, journey_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/journeys/$(journey-id)"; aws_config=aws_config)
DeleteJourney(application_id, journey_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/journeys/$(journey-id)", args; aws_config=aws_config)

"""
    DeletePushTemplate()

Deletes a message template for messages that were sent through a push notification channel.

# Required Parameters
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

# Optional Parameters
- `version`: The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following: For a get operation, retrieves information about the active version of the template. For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false. For a delete operation, deletes the template, including all versions of the template.
"""

DeletePushTemplate(template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/templates/$(template-name)/push"; aws_config=aws_config)
DeletePushTemplate(template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/templates/$(template-name)/push", args; aws_config=aws_config)

"""
    DeleteRecommenderConfiguration()

Deletes an Amazon Pinpoint configuration for a recommender model.

# Required Parameters
- `recommender-id`: The unique identifier for the recommender model configuration. This identifier is displayed as the Recommender ID on the Amazon Pinpoint console.

"""

DeleteRecommenderConfiguration(recommender_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/recommenders/$(recommender-id)"; aws_config=aws_config)
DeleteRecommenderConfiguration(recommender_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/recommenders/$(recommender-id)", args; aws_config=aws_config)

"""
    DeleteSegment()

Deletes a segment from an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `segment-id`: The unique identifier for the segment.

"""

DeleteSegment(application_id, segment_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/segments/$(segment-id)"; aws_config=aws_config)
DeleteSegment(application_id, segment_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/segments/$(segment-id)", args; aws_config=aws_config)

"""
    DeleteSmsChannel()

Disables the SMS channel for an application and deletes any existing settings for the channel.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

DeleteSmsChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/sms"; aws_config=aws_config)
DeleteSmsChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/sms", args; aws_config=aws_config)

"""
    DeleteSmsTemplate()

Deletes a message template for messages that were sent through the SMS channel.

# Required Parameters
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

# Optional Parameters
- `version`: The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following: For a get operation, retrieves information about the active version of the template. For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false. For a delete operation, deletes the template, including all versions of the template.
"""

DeleteSmsTemplate(template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/templates/$(template-name)/sms"; aws_config=aws_config)
DeleteSmsTemplate(template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/templates/$(template-name)/sms", args; aws_config=aws_config)

"""
    DeleteUserEndpoints()

Deletes all the endpoints that are associated with a specific user ID.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `user-id`: The unique identifier for the user.

"""

DeleteUserEndpoints(application_id, user_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/users/$(user-id)"; aws_config=aws_config)
DeleteUserEndpoints(application_id, user_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/users/$(user-id)", args; aws_config=aws_config)

"""
    DeleteVoiceChannel()

Disables the voice channel for an application and deletes any existing settings for the channel.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

DeleteVoiceChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/voice"; aws_config=aws_config)
DeleteVoiceChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/apps/$(application-id)/channels/voice", args; aws_config=aws_config)

"""
    DeleteVoiceTemplate()

Deletes a message template for messages that were sent through the voice channel.

# Required Parameters
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

# Optional Parameters
- `version`: The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following: For a get operation, retrieves information about the active version of the template. For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false. For a delete operation, deletes the template, including all versions of the template.
"""

DeleteVoiceTemplate(template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/templates/$(template-name)/voice"; aws_config=aws_config)
DeleteVoiceTemplate(template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/templates/$(template-name)/voice", args; aws_config=aws_config)

"""
    GetAdmChannel()

Retrieves information about the status and settings of the ADM channel for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetAdmChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/adm"; aws_config=aws_config)
GetAdmChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/adm", args; aws_config=aws_config)

"""
    GetApnsChannel()

Retrieves information about the status and settings of the APNs channel for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetApnsChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/apns"; aws_config=aws_config)
GetApnsChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/apns", args; aws_config=aws_config)

"""
    GetApnsSandboxChannel()

Retrieves information about the status and settings of the APNs sandbox channel for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetApnsSandboxChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/apns_sandbox"; aws_config=aws_config)
GetApnsSandboxChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/apns_sandbox", args; aws_config=aws_config)

"""
    GetApnsVoipChannel()

Retrieves information about the status and settings of the APNs VoIP channel for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetApnsVoipChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/apns_voip"; aws_config=aws_config)
GetApnsVoipChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/apns_voip", args; aws_config=aws_config)

"""
    GetApnsVoipSandboxChannel()

Retrieves information about the status and settings of the APNs VoIP sandbox channel for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetApnsVoipSandboxChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/apns_voip_sandbox"; aws_config=aws_config)
GetApnsVoipSandboxChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/apns_voip_sandbox", args; aws_config=aws_config)

"""
    GetApp()

Retrieves information about an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetApp(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)"; aws_config=aws_config)
GetApp(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)", args; aws_config=aws_config)

"""
    GetApplicationDateRangeKpi()

Retrieves (queries) pre-aggregated data for a standard metric that applies to an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `kpi-name`: The name of the metric, also referred to as a key performance indicator (KPI), to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the Amazon Pinpoint Developer Guide.

# Optional Parameters
- `end-time`: The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
- `next-token`: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `start-time`: The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
"""

GetApplicationDateRangeKpi(application_id, kpi_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/kpis/daterange/$(kpi-name)"; aws_config=aws_config)
GetApplicationDateRangeKpi(application_id, kpi_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/kpis/daterange/$(kpi-name)", args; aws_config=aws_config)

"""
    GetApplicationSettings()

Retrieves information about the settings for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetApplicationSettings(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/settings"; aws_config=aws_config)
GetApplicationSettings(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/settings", args; aws_config=aws_config)

"""
    GetApps()

Retrieves information about all the applications that are associated with your Amazon Pinpoint account.

# Optional Parameters
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `token`: The NextToken string that specifies which page of results to return in a paginated response.
"""

GetApps(; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps"; aws_config=aws_config)
GetApps(args::AbstractDict{String, Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps", args; aws_config=aws_config)

"""
    GetBaiduChannel()

Retrieves information about the status and settings of the Baidu channel for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetBaiduChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/baidu"; aws_config=aws_config)
GetBaiduChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/baidu", args; aws_config=aws_config)

"""
    GetCampaign()

Retrieves information about the status, configuration, and other settings for a campaign.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `campaign-id`: The unique identifier for the campaign.

"""

GetCampaign(application_id, campaign_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/campaigns/$(campaign-id)"; aws_config=aws_config)
GetCampaign(application_id, campaign_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/campaigns/$(campaign-id)", args; aws_config=aws_config)

"""
    GetCampaignActivities()

Retrieves information about all the activities for a campaign.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `campaign-id`: The unique identifier for the campaign.

# Optional Parameters
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `token`: The NextToken string that specifies which page of results to return in a paginated response.
"""

GetCampaignActivities(application_id, campaign_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/campaigns/$(campaign-id)/activities"; aws_config=aws_config)
GetCampaignActivities(application_id, campaign_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/campaigns/$(campaign-id)/activities", args; aws_config=aws_config)

"""
    GetCampaignDateRangeKpi()

Retrieves (queries) pre-aggregated data for a standard metric that applies to a campaign.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `campaign-id`: The unique identifier for the campaign.
- `kpi-name`: The name of the metric, also referred to as a key performance indicator (KPI), to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the Amazon Pinpoint Developer Guide.

# Optional Parameters
- `end-time`: The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
- `next-token`: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `start-time`: The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
"""

GetCampaignDateRangeKpi(application_id, campaign_id, kpi_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/campaigns/$(campaign-id)/kpis/daterange/$(kpi-name)"; aws_config=aws_config)
GetCampaignDateRangeKpi(application_id, campaign_id, kpi_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/campaigns/$(campaign-id)/kpis/daterange/$(kpi-name)", args; aws_config=aws_config)

"""
    GetCampaignVersion()

Retrieves information about the status, configuration, and other settings for a specific version of a campaign.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `campaign-id`: The unique identifier for the campaign.
- `version`: The unique version number (Version property) for the campaign version.

"""

GetCampaignVersion(application_id, campaign_id, version; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/campaigns/$(campaign-id)/versions/$(version)"; aws_config=aws_config)
GetCampaignVersion(application_id, campaign_id, version, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/campaigns/$(campaign-id)/versions/$(version)", args; aws_config=aws_config)

"""
    GetCampaignVersions()

Retrieves information about the status, configuration, and other settings for all versions of a campaign.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `campaign-id`: The unique identifier for the campaign.

# Optional Parameters
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `token`: The NextToken string that specifies which page of results to return in a paginated response.
"""

GetCampaignVersions(application_id, campaign_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/campaigns/$(campaign-id)/versions"; aws_config=aws_config)
GetCampaignVersions(application_id, campaign_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/campaigns/$(campaign-id)/versions", args; aws_config=aws_config)

"""
    GetCampaigns()

Retrieves information about the status, configuration, and other settings for all the campaigns that are associated with an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

# Optional Parameters
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `token`: The NextToken string that specifies which page of results to return in a paginated response.
"""

GetCampaigns(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/campaigns"; aws_config=aws_config)
GetCampaigns(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/campaigns", args; aws_config=aws_config)

"""
    GetChannels()

Retrieves information about the history and status of each channel for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetChannels(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels"; aws_config=aws_config)
GetChannels(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels", args; aws_config=aws_config)

"""
    GetEmailChannel()

Retrieves information about the status and settings of the email channel for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetEmailChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/email"; aws_config=aws_config)
GetEmailChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/email", args; aws_config=aws_config)

"""
    GetEmailTemplate()

Retrieves the content and settings of a message template for messages that are sent through the email channel.

# Required Parameters
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

# Optional Parameters
- `version`: The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following: For a get operation, retrieves information about the active version of the template. For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false. For a delete operation, deletes the template, including all versions of the template.
"""

GetEmailTemplate(template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/templates/$(template-name)/email"; aws_config=aws_config)
GetEmailTemplate(template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/templates/$(template-name)/email", args; aws_config=aws_config)

"""
    GetEndpoint()

Retrieves information about the settings and attributes of a specific endpoint for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `endpoint-id`: The unique identifier for the endpoint.

"""

GetEndpoint(application_id, endpoint_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/endpoints/$(endpoint-id)"; aws_config=aws_config)
GetEndpoint(application_id, endpoint_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/endpoints/$(endpoint-id)", args; aws_config=aws_config)

"""
    GetEventStream()

Retrieves information about the event stream settings for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetEventStream(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/eventstream"; aws_config=aws_config)
GetEventStream(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/eventstream", args; aws_config=aws_config)

"""
    GetExportJob()

Retrieves information about the status and settings of a specific export job for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `job-id`: The unique identifier for the job.

"""

GetExportJob(application_id, job_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/jobs/export/$(job-id)"; aws_config=aws_config)
GetExportJob(application_id, job_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/jobs/export/$(job-id)", args; aws_config=aws_config)

"""
    GetExportJobs()

Retrieves information about the status and settings of all the export jobs for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

# Optional Parameters
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `token`: The NextToken string that specifies which page of results to return in a paginated response.
"""

GetExportJobs(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/jobs/export"; aws_config=aws_config)
GetExportJobs(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/jobs/export", args; aws_config=aws_config)

"""
    GetGcmChannel()

Retrieves information about the status and settings of the GCM channel for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetGcmChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/gcm"; aws_config=aws_config)
GetGcmChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/gcm", args; aws_config=aws_config)

"""
    GetImportJob()

Retrieves information about the status and settings of a specific import job for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `job-id`: The unique identifier for the job.

"""

GetImportJob(application_id, job_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/jobs/import/$(job-id)"; aws_config=aws_config)
GetImportJob(application_id, job_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/jobs/import/$(job-id)", args; aws_config=aws_config)

"""
    GetImportJobs()

Retrieves information about the status and settings of all the import jobs for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

# Optional Parameters
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `token`: The NextToken string that specifies which page of results to return in a paginated response.
"""

GetImportJobs(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/jobs/import"; aws_config=aws_config)
GetImportJobs(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/jobs/import", args; aws_config=aws_config)

"""
    GetJourney()

Retrieves information about the status, configuration, and other settings for a journey.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `journey-id`: The unique identifier for the journey.

"""

GetJourney(application_id, journey_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/journeys/$(journey-id)"; aws_config=aws_config)
GetJourney(application_id, journey_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/journeys/$(journey-id)", args; aws_config=aws_config)

"""
    GetJourneyDateRangeKpi()

Retrieves (queries) pre-aggregated data for a standard engagement metric that applies to a journey.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `journey-id`: The unique identifier for the journey.
- `kpi-name`: The name of the metric, also referred to as a key performance indicator (KPI), to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the Amazon Pinpoint Developer Guide.

# Optional Parameters
- `end-time`: The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
- `next-token`: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `start-time`: The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
"""

GetJourneyDateRangeKpi(application_id, journey_id, kpi_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/journeys/$(journey-id)/kpis/daterange/$(kpi-name)"; aws_config=aws_config)
GetJourneyDateRangeKpi(application_id, journey_id, kpi_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/journeys/$(journey-id)/kpis/daterange/$(kpi-name)", args; aws_config=aws_config)

"""
    GetJourneyExecutionActivityMetrics()

Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey activity.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `journey-activity-id`: The unique identifier for the journey activity.
- `journey-id`: The unique identifier for the journey.

# Optional Parameters
- `next-token`: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
"""

GetJourneyExecutionActivityMetrics(application_id, journey_activity_id, journey_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/journeys/$(journey-id)/activities/$(journey-activity-id)/execution-metrics"; aws_config=aws_config)
GetJourneyExecutionActivityMetrics(application_id, journey_activity_id, journey_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/journeys/$(journey-id)/activities/$(journey-activity-id)/execution-metrics", args; aws_config=aws_config)

"""
    GetJourneyExecutionMetrics()

Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `journey-id`: The unique identifier for the journey.

# Optional Parameters
- `next-token`: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
"""

GetJourneyExecutionMetrics(application_id, journey_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/journeys/$(journey-id)/execution-metrics"; aws_config=aws_config)
GetJourneyExecutionMetrics(application_id, journey_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/journeys/$(journey-id)/execution-metrics", args; aws_config=aws_config)

"""
    GetPushTemplate()

Retrieves the content and settings of a message template for messages that are sent through a push notification channel.

# Required Parameters
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

# Optional Parameters
- `version`: The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following: For a get operation, retrieves information about the active version of the template. For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false. For a delete operation, deletes the template, including all versions of the template.
"""

GetPushTemplate(template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/templates/$(template-name)/push"; aws_config=aws_config)
GetPushTemplate(template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/templates/$(template-name)/push", args; aws_config=aws_config)

"""
    GetRecommenderConfiguration()

Retrieves information about an Amazon Pinpoint configuration for a recommender model.

# Required Parameters
- `recommender-id`: The unique identifier for the recommender model configuration. This identifier is displayed as the Recommender ID on the Amazon Pinpoint console.

"""

GetRecommenderConfiguration(recommender_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/recommenders/$(recommender-id)"; aws_config=aws_config)
GetRecommenderConfiguration(recommender_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/recommenders/$(recommender-id)", args; aws_config=aws_config)

"""
    GetRecommenderConfigurations()

Retrieves information about all the recommender model configurations that are associated with your Amazon Pinpoint account.

# Optional Parameters
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `token`: The NextToken string that specifies which page of results to return in a paginated response.
"""

GetRecommenderConfigurations(; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/recommenders"; aws_config=aws_config)
GetRecommenderConfigurations(args::AbstractDict{String, Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/recommenders", args; aws_config=aws_config)

"""
    GetSegment()

Retrieves information about the configuration, dimension, and other settings for a specific segment that's associated with an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `segment-id`: The unique identifier for the segment.

"""

GetSegment(application_id, segment_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/segments/$(segment-id)"; aws_config=aws_config)
GetSegment(application_id, segment_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/segments/$(segment-id)", args; aws_config=aws_config)

"""
    GetSegmentExportJobs()

Retrieves information about the status and settings of the export jobs for a segment.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `segment-id`: The unique identifier for the segment.

# Optional Parameters
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `token`: The NextToken string that specifies which page of results to return in a paginated response.
"""

GetSegmentExportJobs(application_id, segment_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/segments/$(segment-id)/jobs/export"; aws_config=aws_config)
GetSegmentExportJobs(application_id, segment_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/segments/$(segment-id)/jobs/export", args; aws_config=aws_config)

"""
    GetSegmentImportJobs()

Retrieves information about the status and settings of the import jobs for a segment.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `segment-id`: The unique identifier for the segment.

# Optional Parameters
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `token`: The NextToken string that specifies which page of results to return in a paginated response.
"""

GetSegmentImportJobs(application_id, segment_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/segments/$(segment-id)/jobs/import"; aws_config=aws_config)
GetSegmentImportJobs(application_id, segment_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/segments/$(segment-id)/jobs/import", args; aws_config=aws_config)

"""
    GetSegmentVersion()

Retrieves information about the configuration, dimension, and other settings for a specific version of a segment that's associated with an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `segment-id`: The unique identifier for the segment.
- `version`: The unique version number (Version property) for the campaign version.

"""

GetSegmentVersion(application_id, segment_id, version; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/segments/$(segment-id)/versions/$(version)"; aws_config=aws_config)
GetSegmentVersion(application_id, segment_id, version, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/segments/$(segment-id)/versions/$(version)", args; aws_config=aws_config)

"""
    GetSegmentVersions()

Retrieves information about the configuration, dimension, and other settings for all the versions of a specific segment that's associated with an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `segment-id`: The unique identifier for the segment.

# Optional Parameters
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `token`: The NextToken string that specifies which page of results to return in a paginated response.
"""

GetSegmentVersions(application_id, segment_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/segments/$(segment-id)/versions"; aws_config=aws_config)
GetSegmentVersions(application_id, segment_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/segments/$(segment-id)/versions", args; aws_config=aws_config)

"""
    GetSegments()

Retrieves information about the configuration, dimension, and other settings for all the segments that are associated with an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

# Optional Parameters
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `token`: The NextToken string that specifies which page of results to return in a paginated response.
"""

GetSegments(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/segments"; aws_config=aws_config)
GetSegments(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/segments", args; aws_config=aws_config)

"""
    GetSmsChannel()

Retrieves information about the status and settings of the SMS channel for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetSmsChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/sms"; aws_config=aws_config)
GetSmsChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/sms", args; aws_config=aws_config)

"""
    GetSmsTemplate()

Retrieves the content and settings of a message template for messages that are sent through the SMS channel.

# Required Parameters
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

# Optional Parameters
- `version`: The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following: For a get operation, retrieves information about the active version of the template. For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false. For a delete operation, deletes the template, including all versions of the template.
"""

GetSmsTemplate(template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/templates/$(template-name)/sms"; aws_config=aws_config)
GetSmsTemplate(template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/templates/$(template-name)/sms", args; aws_config=aws_config)

"""
    GetUserEndpoints()

Retrieves information about all the endpoints that are associated with a specific user ID.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `user-id`: The unique identifier for the user.

"""

GetUserEndpoints(application_id, user_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/users/$(user-id)"; aws_config=aws_config)
GetUserEndpoints(application_id, user_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/users/$(user-id)", args; aws_config=aws_config)

"""
    GetVoiceChannel()

Retrieves information about the status and settings of the voice channel for an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

GetVoiceChannel(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/voice"; aws_config=aws_config)
GetVoiceChannel(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/channels/voice", args; aws_config=aws_config)

"""
    GetVoiceTemplate()

Retrieves the content and settings of a message template for messages that are sent through the voice channel.

# Required Parameters
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

# Optional Parameters
- `version`: The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following: For a get operation, retrieves information about the active version of the template. For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false. For a delete operation, deletes the template, including all versions of the template.
"""

GetVoiceTemplate(template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/templates/$(template-name)/voice"; aws_config=aws_config)
GetVoiceTemplate(template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/templates/$(template-name)/voice", args; aws_config=aws_config)

"""
    ListJourneys()

Retrieves information about the status, configuration, and other settings for all the journeys that are associated with an application.

# Required Parameters
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

# Optional Parameters
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `token`: The NextToken string that specifies which page of results to return in a paginated response.
"""

ListJourneys(application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/journeys"; aws_config=aws_config)
ListJourneys(application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/apps/$(application-id)/journeys", args; aws_config=aws_config)

"""
    ListTagsForResource()

Retrieves all the tags (keys and values) that are associated with an application, campaign, message template, or segment.

# Required Parameters
- `resource-arn`: The Amazon Resource Name (ARN) of the resource.

"""

ListTagsForResource(resource_arn; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/tags/$(resource-arn)"; aws_config=aws_config)
ListTagsForResource(resource_arn, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/tags/$(resource-arn)", args; aws_config=aws_config)

"""
    ListTemplateVersions()

Retrieves information about all the versions of a specific message template.

# Required Parameters
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
- `template-type`: The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE.

# Optional Parameters
- `next-token`: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
"""

ListTemplateVersions(template_name, template_type; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/templates/$(template-name)/$(template-type)/versions"; aws_config=aws_config)
ListTemplateVersions(template_name, template_type, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/templates/$(template-name)/$(template-type)/versions", args; aws_config=aws_config)

"""
    ListTemplates()

Retrieves information about all the message templates that are associated with your Amazon Pinpoint account.

# Optional Parameters
- `next-token`: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `page-size`: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
- `prefix`: The substring to match in the names of the message templates to include in the results. If you specify this value, Amazon Pinpoint returns only those templates whose names begin with the value that you specify.
- `template-type`: The type of message template to include in the results. Valid values are: EMAIL, PUSH, SMS, and VOICE. To include all types of templates in the results, don't include this parameter in your request.
"""

ListTemplates(; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/templates"; aws_config=aws_config)
ListTemplates(args::AbstractDict{String, Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("GET", "/v1/templates", args; aws_config=aws_config)

"""
    PhoneNumberValidate()

Retrieves information about a phone number.

# Required Parameters
- `NumberValidateRequest`: 

"""

PhoneNumberValidate(NumberValidateRequest; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/phone/number/validate", Dict{String, Any}("NumberValidateRequest"=>NumberValidateRequest); aws_config=aws_config)
PhoneNumberValidate(NumberValidateRequest, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/phone/number/validate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("NumberValidateRequest"=>NumberValidateRequest), args)); aws_config=aws_config)

"""
    PutEventStream()

Creates a new event stream for an application or updates the settings of an existing event stream for an application.

# Required Parameters
- `WriteEventStream`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

PutEventStream(WriteEventStream, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/eventstream", Dict{String, Any}("WriteEventStream"=>WriteEventStream); aws_config=aws_config)
PutEventStream(WriteEventStream, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/eventstream", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("WriteEventStream"=>WriteEventStream), args)); aws_config=aws_config)

"""
    PutEvents()

Creates a new event to record for endpoints, or creates or updates endpoint data that existing events are associated with.

# Required Parameters
- `EventsRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

PutEvents(EventsRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/events", Dict{String, Any}("EventsRequest"=>EventsRequest); aws_config=aws_config)
PutEvents(EventsRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/events", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EventsRequest"=>EventsRequest), args)); aws_config=aws_config)

"""
    RemoveAttributes()

Removes one or more attributes, of the same attribute type, from all the endpoints that are associated with an application.

# Required Parameters
- `UpdateAttributesRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `attribute-type`:  The type of attribute or attributes to remove. Valid values are: endpoint-custom-attributes - Custom attributes that describe endpoints, such as the date when an associated user opted in or out of receiving communications from you through a specific type of channel. endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints, such as the number of app sessions or the number of items left in a cart. endpoint-user-attributes - Custom attributes that describe users, such as first name, last name, and age.

"""

RemoveAttributes(UpdateAttributesRequest, application_id, attribute_type; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/attributes/$(attribute-type)", Dict{String, Any}("UpdateAttributesRequest"=>UpdateAttributesRequest); aws_config=aws_config)
RemoveAttributes(UpdateAttributesRequest, application_id, attribute_type, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/attributes/$(attribute-type)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UpdateAttributesRequest"=>UpdateAttributesRequest), args)); aws_config=aws_config)

"""
    SendMessages()

Creates and sends a direct message.

# Required Parameters
- `MessageRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

SendMessages(MessageRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/messages", Dict{String, Any}("MessageRequest"=>MessageRequest); aws_config=aws_config)
SendMessages(MessageRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/messages", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("MessageRequest"=>MessageRequest), args)); aws_config=aws_config)

"""
    SendUsersMessages()

Creates and sends a message to a list of users.

# Required Parameters
- `SendUsersMessageRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

SendUsersMessages(SendUsersMessageRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/users-messages", Dict{String, Any}("SendUsersMessageRequest"=>SendUsersMessageRequest); aws_config=aws_config)
SendUsersMessages(SendUsersMessageRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/apps/$(application-id)/users-messages", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SendUsersMessageRequest"=>SendUsersMessageRequest), args)); aws_config=aws_config)

"""
    TagResource()

Adds one or more tags (keys and values) to an application, campaign, message template, or segment.

# Required Parameters
- `TagsModel`: 
- `resource-arn`: The Amazon Resource Name (ARN) of the resource.

"""

TagResource(TagsModel, resource_arn; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/tags/$(resource-arn)", Dict{String, Any}("TagsModel"=>TagsModel); aws_config=aws_config)
TagResource(TagsModel, resource_arn, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("POST", "/v1/tags/$(resource-arn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TagsModel"=>TagsModel), args)); aws_config=aws_config)

"""
    UntagResource()

Removes one or more tags (keys and values) from an application, campaign, message template, or segment.

# Required Parameters
- `resource-arn`: The Amazon Resource Name (ARN) of the resource.
- `tagKeys`: The key of the tag to remove from the resource. To remove multiple tags, append the tagKeys parameter and argument for each additional tag to remove, separated by an ampersand (&amp;).

"""

UntagResource(resource_arn, tagKeys; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/tags/$(resource-arn)", Dict{String, Any}("tagKeys"=>tagKeys); aws_config=aws_config)
UntagResource(resource_arn, tagKeys, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("DELETE", "/v1/tags/$(resource-arn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), args)); aws_config=aws_config)

"""
    UpdateAdmChannel()

Enables the ADM channel for an application or updates the status and settings of the ADM channel for an application.

# Required Parameters
- `ADMChannelRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

UpdateAdmChannel(ADMChannelRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/adm", Dict{String, Any}("ADMChannelRequest"=>ADMChannelRequest); aws_config=aws_config)
UpdateAdmChannel(ADMChannelRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/adm", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ADMChannelRequest"=>ADMChannelRequest), args)); aws_config=aws_config)

"""
    UpdateApnsChannel()

Enables the APNs channel for an application or updates the status and settings of the APNs channel for an application.

# Required Parameters
- `APNSChannelRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

UpdateApnsChannel(APNSChannelRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/apns", Dict{String, Any}("APNSChannelRequest"=>APNSChannelRequest); aws_config=aws_config)
UpdateApnsChannel(APNSChannelRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/apns", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("APNSChannelRequest"=>APNSChannelRequest), args)); aws_config=aws_config)

"""
    UpdateApnsSandboxChannel()

Enables the APNs sandbox channel for an application or updates the status and settings of the APNs sandbox channel for an application.

# Required Parameters
- `APNSSandboxChannelRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

UpdateApnsSandboxChannel(APNSSandboxChannelRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/apns_sandbox", Dict{String, Any}("APNSSandboxChannelRequest"=>APNSSandboxChannelRequest); aws_config=aws_config)
UpdateApnsSandboxChannel(APNSSandboxChannelRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/apns_sandbox", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("APNSSandboxChannelRequest"=>APNSSandboxChannelRequest), args)); aws_config=aws_config)

"""
    UpdateApnsVoipChannel()

Enables the APNs VoIP channel for an application or updates the status and settings of the APNs VoIP channel for an application.

# Required Parameters
- `APNSVoipChannelRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

UpdateApnsVoipChannel(APNSVoipChannelRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/apns_voip", Dict{String, Any}("APNSVoipChannelRequest"=>APNSVoipChannelRequest); aws_config=aws_config)
UpdateApnsVoipChannel(APNSVoipChannelRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/apns_voip", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("APNSVoipChannelRequest"=>APNSVoipChannelRequest), args)); aws_config=aws_config)

"""
    UpdateApnsVoipSandboxChannel()

Enables the APNs VoIP sandbox channel for an application or updates the status and settings of the APNs VoIP sandbox channel for an application.

# Required Parameters
- `APNSVoipSandboxChannelRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

UpdateApnsVoipSandboxChannel(APNSVoipSandboxChannelRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/apns_voip_sandbox", Dict{String, Any}("APNSVoipSandboxChannelRequest"=>APNSVoipSandboxChannelRequest); aws_config=aws_config)
UpdateApnsVoipSandboxChannel(APNSVoipSandboxChannelRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/apns_voip_sandbox", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("APNSVoipSandboxChannelRequest"=>APNSVoipSandboxChannelRequest), args)); aws_config=aws_config)

"""
    UpdateApplicationSettings()

Updates the settings for an application.

# Required Parameters
- `WriteApplicationSettingsRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

UpdateApplicationSettings(WriteApplicationSettingsRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/settings", Dict{String, Any}("WriteApplicationSettingsRequest"=>WriteApplicationSettingsRequest); aws_config=aws_config)
UpdateApplicationSettings(WriteApplicationSettingsRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/settings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("WriteApplicationSettingsRequest"=>WriteApplicationSettingsRequest), args)); aws_config=aws_config)

"""
    UpdateBaiduChannel()

Enables the Baidu channel for an application or updates the status and settings of the Baidu channel for an application.

# Required Parameters
- `BaiduChannelRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

UpdateBaiduChannel(BaiduChannelRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/baidu", Dict{String, Any}("BaiduChannelRequest"=>BaiduChannelRequest); aws_config=aws_config)
UpdateBaiduChannel(BaiduChannelRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/baidu", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("BaiduChannelRequest"=>BaiduChannelRequest), args)); aws_config=aws_config)

"""
    UpdateCampaign()

Updates the configuration and other settings for a campaign.

# Required Parameters
- `WriteCampaignRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `campaign-id`: The unique identifier for the campaign.

"""

UpdateCampaign(WriteCampaignRequest, application_id, campaign_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/campaigns/$(campaign-id)", Dict{String, Any}("WriteCampaignRequest"=>WriteCampaignRequest); aws_config=aws_config)
UpdateCampaign(WriteCampaignRequest, application_id, campaign_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/campaigns/$(campaign-id)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("WriteCampaignRequest"=>WriteCampaignRequest), args)); aws_config=aws_config)

"""
    UpdateEmailChannel()

Enables the email channel for an application or updates the status and settings of the email channel for an application.

# Required Parameters
- `EmailChannelRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

UpdateEmailChannel(EmailChannelRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/email", Dict{String, Any}("EmailChannelRequest"=>EmailChannelRequest); aws_config=aws_config)
UpdateEmailChannel(EmailChannelRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/email", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EmailChannelRequest"=>EmailChannelRequest), args)); aws_config=aws_config)

"""
    UpdateEmailTemplate()

Updates an existing message template for messages that are sent through the email channel.

# Required Parameters
- `EmailTemplateRequest`: 
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

# Optional Parameters
- `create-new-version`: Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template. If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.
- `version`: The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following: For a get operation, retrieves information about the active version of the template. For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false. For a delete operation, deletes the template, including all versions of the template.
"""

UpdateEmailTemplate(EmailTemplateRequest, template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/templates/$(template-name)/email", Dict{String, Any}("EmailTemplateRequest"=>EmailTemplateRequest); aws_config=aws_config)
UpdateEmailTemplate(EmailTemplateRequest, template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/templates/$(template-name)/email", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EmailTemplateRequest"=>EmailTemplateRequest), args)); aws_config=aws_config)

"""
    UpdateEndpoint()

Creates a new endpoint for an application or updates the settings and attributes of an existing endpoint for an application. You can also use this operation to define custom attributes for an endpoint. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.

# Required Parameters
- `EndpointRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `endpoint-id`: The unique identifier for the endpoint.

"""

UpdateEndpoint(EndpointRequest, application_id, endpoint_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/endpoints/$(endpoint-id)", Dict{String, Any}("EndpointRequest"=>EndpointRequest); aws_config=aws_config)
UpdateEndpoint(EndpointRequest, application_id, endpoint_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/endpoints/$(endpoint-id)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EndpointRequest"=>EndpointRequest), args)); aws_config=aws_config)

"""
    UpdateEndpointsBatch()

Creates a new batch of endpoints for an application or updates the settings and attributes of a batch of existing endpoints for an application. You can also use this operation to define custom attributes for a batch of endpoints. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.

# Required Parameters
- `EndpointBatchRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

UpdateEndpointsBatch(EndpointBatchRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/endpoints", Dict{String, Any}("EndpointBatchRequest"=>EndpointBatchRequest); aws_config=aws_config)
UpdateEndpointsBatch(EndpointBatchRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/endpoints", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("EndpointBatchRequest"=>EndpointBatchRequest), args)); aws_config=aws_config)

"""
    UpdateGcmChannel()

Enables the GCM channel for an application or updates the status and settings of the GCM channel for an application.

# Required Parameters
- `GCMChannelRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

UpdateGcmChannel(GCMChannelRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/gcm", Dict{String, Any}("GCMChannelRequest"=>GCMChannelRequest); aws_config=aws_config)
UpdateGcmChannel(GCMChannelRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/gcm", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("GCMChannelRequest"=>GCMChannelRequest), args)); aws_config=aws_config)

"""
    UpdateJourney()

Updates the configuration and other settings for a journey.

# Required Parameters
- `WriteJourneyRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `journey-id`: The unique identifier for the journey.

"""

UpdateJourney(WriteJourneyRequest, application_id, journey_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/journeys/$(journey-id)", Dict{String, Any}("WriteJourneyRequest"=>WriteJourneyRequest); aws_config=aws_config)
UpdateJourney(WriteJourneyRequest, application_id, journey_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/journeys/$(journey-id)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("WriteJourneyRequest"=>WriteJourneyRequest), args)); aws_config=aws_config)

"""
    UpdateJourneyState()

Cancels (stops) an active journey.

# Required Parameters
- `JourneyStateRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `journey-id`: The unique identifier for the journey.

"""

UpdateJourneyState(JourneyStateRequest, application_id, journey_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/journeys/$(journey-id)/state", Dict{String, Any}("JourneyStateRequest"=>JourneyStateRequest); aws_config=aws_config)
UpdateJourneyState(JourneyStateRequest, application_id, journey_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/journeys/$(journey-id)/state", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("JourneyStateRequest"=>JourneyStateRequest), args)); aws_config=aws_config)

"""
    UpdatePushTemplate()

Updates an existing message template for messages that are sent through a push notification channel.

# Required Parameters
- `PushNotificationTemplateRequest`: 
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

# Optional Parameters
- `create-new-version`: Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template. If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.
- `version`: The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following: For a get operation, retrieves information about the active version of the template. For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false. For a delete operation, deletes the template, including all versions of the template.
"""

UpdatePushTemplate(PushNotificationTemplateRequest, template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/templates/$(template-name)/push", Dict{String, Any}("PushNotificationTemplateRequest"=>PushNotificationTemplateRequest); aws_config=aws_config)
UpdatePushTemplate(PushNotificationTemplateRequest, template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/templates/$(template-name)/push", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("PushNotificationTemplateRequest"=>PushNotificationTemplateRequest), args)); aws_config=aws_config)

"""
    UpdateRecommenderConfiguration()

Updates an Amazon Pinpoint configuration for a recommender model.

# Required Parameters
- `UpdateRecommenderConfiguration`: 
- `recommender-id`: The unique identifier for the recommender model configuration. This identifier is displayed as the Recommender ID on the Amazon Pinpoint console.

"""

UpdateRecommenderConfiguration(UpdateRecommenderConfiguration, recommender_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/recommenders/$(recommender-id)", Dict{String, Any}("UpdateRecommenderConfiguration"=>UpdateRecommenderConfiguration); aws_config=aws_config)
UpdateRecommenderConfiguration(UpdateRecommenderConfiguration, recommender_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/recommenders/$(recommender-id)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UpdateRecommenderConfiguration"=>UpdateRecommenderConfiguration), args)); aws_config=aws_config)

"""
    UpdateSegment()

Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.

# Required Parameters
- `WriteSegmentRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.
- `segment-id`: The unique identifier for the segment.

"""

UpdateSegment(WriteSegmentRequest, application_id, segment_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/segments/$(segment-id)", Dict{String, Any}("WriteSegmentRequest"=>WriteSegmentRequest); aws_config=aws_config)
UpdateSegment(WriteSegmentRequest, application_id, segment_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/segments/$(segment-id)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("WriteSegmentRequest"=>WriteSegmentRequest), args)); aws_config=aws_config)

"""
    UpdateSmsChannel()

Enables the SMS channel for an application or updates the status and settings of the SMS channel for an application.

# Required Parameters
- `SMSChannelRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

UpdateSmsChannel(SMSChannelRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/sms", Dict{String, Any}("SMSChannelRequest"=>SMSChannelRequest); aws_config=aws_config)
UpdateSmsChannel(SMSChannelRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/sms", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SMSChannelRequest"=>SMSChannelRequest), args)); aws_config=aws_config)

"""
    UpdateSmsTemplate()

Updates an existing message template for messages that are sent through the SMS channel.

# Required Parameters
- `SMSTemplateRequest`: 
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

# Optional Parameters
- `create-new-version`: Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template. If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.
- `version`: The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following: For a get operation, retrieves information about the active version of the template. For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false. For a delete operation, deletes the template, including all versions of the template.
"""

UpdateSmsTemplate(SMSTemplateRequest, template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/templates/$(template-name)/sms", Dict{String, Any}("SMSTemplateRequest"=>SMSTemplateRequest); aws_config=aws_config)
UpdateSmsTemplate(SMSTemplateRequest, template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/templates/$(template-name)/sms", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SMSTemplateRequest"=>SMSTemplateRequest), args)); aws_config=aws_config)

"""
    UpdateTemplateActiveVersion()

Changes the status of a specific version of a message template to active.

# Required Parameters
- `TemplateActiveVersionRequest`: 
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
- `template-type`: The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE.

"""

UpdateTemplateActiveVersion(TemplateActiveVersionRequest, template_name, template_type; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/templates/$(template-name)/$(template-type)/active-version", Dict{String, Any}("TemplateActiveVersionRequest"=>TemplateActiveVersionRequest); aws_config=aws_config)
UpdateTemplateActiveVersion(TemplateActiveVersionRequest, template_name, template_type, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/templates/$(template-name)/$(template-type)/active-version", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TemplateActiveVersionRequest"=>TemplateActiveVersionRequest), args)); aws_config=aws_config)

"""
    UpdateVoiceChannel()

Enables the voice channel for an application or updates the status and settings of the voice channel for an application.

# Required Parameters
- `VoiceChannelRequest`: 
- `application-id`: The unique identifier for the application. This identifier is displayed as the Project ID on the Amazon Pinpoint console.

"""

UpdateVoiceChannel(VoiceChannelRequest, application_id; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/voice", Dict{String, Any}("VoiceChannelRequest"=>VoiceChannelRequest); aws_config=aws_config)
UpdateVoiceChannel(VoiceChannelRequest, application_id, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/apps/$(application-id)/channels/voice", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("VoiceChannelRequest"=>VoiceChannelRequest), args)); aws_config=aws_config)

"""
    UpdateVoiceTemplate()

Updates an existing message template for messages that are sent through the voice channel.

# Required Parameters
- `VoiceTemplateRequest`: 
- `template-name`: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.

# Optional Parameters
- `create-new-version`: Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template. If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.
- `version`: The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the Template Versions resource. If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur. If you don't specify a value for this parameter, Amazon Pinpoint does the following: For a get operation, retrieves information about the active version of the template. For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false. For a delete operation, deletes the template, including all versions of the template.
"""

UpdateVoiceTemplate(VoiceTemplateRequest, template_name; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/templates/$(template-name)/voice", Dict{String, Any}("VoiceTemplateRequest"=>VoiceTemplateRequest); aws_config=aws_config)
UpdateVoiceTemplate(VoiceTemplateRequest, template_name, args::AbstractDict{String, <:Any}; aws_config::AWSConfig=AWS.aws_config) = pinpoint("PUT", "/v1/templates/$(template-name)/voice", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("VoiceTemplateRequest"=>VoiceTemplateRequest), args)); aws_config=aws_config)
