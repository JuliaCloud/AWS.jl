# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: chime_sdk_voice
using AWS.Compat
using AWS.UUIDs

"""
    associate_phone_numbers_with_voice_connector(e164_phone_numbers, voice_connector_id)
    associate_phone_numbers_with_voice_connector(e164_phone_numbers, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `e164_phone_numbers`:
- `voice_connector_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ForceAssociate"`:
"""
function associate_phone_numbers_with_voice_connector(
    E164PhoneNumbers, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors/$(voiceConnectorId)?operation=associate-phone-numbers",
        Dict{String,Any}("E164PhoneNumbers" => E164PhoneNumbers);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function associate_phone_numbers_with_voice_connector(
    E164PhoneNumbers,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors/$(voiceConnectorId)?operation=associate-phone-numbers",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("E164PhoneNumbers" => E164PhoneNumbers), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    associate_phone_numbers_with_voice_connector_group(e164_phone_numbers, voice_connector_group_id)
    associate_phone_numbers_with_voice_connector_group(e164_phone_numbers, voice_connector_group_id, params::Dict{String,<:Any})



# Arguments
- `e164_phone_numbers`:
- `voice_connector_group_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ForceAssociate"`:
"""
function associate_phone_numbers_with_voice_connector_group(
    E164PhoneNumbers,
    voiceConnectorGroupId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/voice-connector-groups/$(voiceConnectorGroupId)?operation=associate-phone-numbers",
        Dict{String,Any}("E164PhoneNumbers" => E164PhoneNumbers);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function associate_phone_numbers_with_voice_connector_group(
    E164PhoneNumbers,
    voiceConnectorGroupId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/voice-connector-groups/$(voiceConnectorGroupId)?operation=associate-phone-numbers",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("E164PhoneNumbers" => E164PhoneNumbers), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    batch_delete_phone_number(phone_number_ids)
    batch_delete_phone_number(phone_number_ids, params::Dict{String,<:Any})



# Arguments
- `phone_number_ids`:

"""
function batch_delete_phone_number(
    PhoneNumberIds; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/phone-numbers?operation=batch-delete",
        Dict{String,Any}("PhoneNumberIds" => PhoneNumberIds);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function batch_delete_phone_number(
    PhoneNumberIds,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/phone-numbers?operation=batch-delete",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("PhoneNumberIds" => PhoneNumberIds), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    batch_update_phone_number(update_phone_number_request_items)
    batch_update_phone_number(update_phone_number_request_items, params::Dict{String,<:Any})



# Arguments
- `update_phone_number_request_items`:

"""
function batch_update_phone_number(
    UpdatePhoneNumberRequestItems; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/phone-numbers?operation=batch-update",
        Dict{String,Any}("UpdatePhoneNumberRequestItems" => UpdatePhoneNumberRequestItems);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function batch_update_phone_number(
    UpdatePhoneNumberRequestItems,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/phone-numbers?operation=batch-update",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "UpdatePhoneNumberRequestItems" => UpdatePhoneNumberRequestItems
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_phone_number_order(e164_phone_numbers, product_type)
    create_phone_number_order(e164_phone_numbers, product_type, params::Dict{String,<:Any})



# Arguments
- `e164_phone_numbers`:
- `product_type`:

"""
function create_phone_number_order(
    E164PhoneNumbers, ProductType; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/phone-number-orders",
        Dict{String,Any}(
            "E164PhoneNumbers" => E164PhoneNumbers, "ProductType" => ProductType
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_phone_number_order(
    E164PhoneNumbers,
    ProductType,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/phone-number-orders",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "E164PhoneNumbers" => E164PhoneNumbers, "ProductType" => ProductType
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_proxy_session(capabilities, participant_phone_numbers, voice_connector_id)
    create_proxy_session(capabilities, participant_phone_numbers, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `capabilities`:
- `participant_phone_numbers`:
- `voice_connector_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ExpiryMinutes"`:
- `"GeoMatchLevel"`:
- `"GeoMatchParams"`:
- `"Name"`:
- `"NumberSelectionBehavior"`:
"""
function create_proxy_session(
    Capabilities,
    ParticipantPhoneNumbers,
    voiceConnectorId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors/$(voiceConnectorId)/proxy-sessions",
        Dict{String,Any}(
            "Capabilities" => Capabilities,
            "ParticipantPhoneNumbers" => ParticipantPhoneNumbers,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_proxy_session(
    Capabilities,
    ParticipantPhoneNumbers,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors/$(voiceConnectorId)/proxy-sessions",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Capabilities" => Capabilities,
                    "ParticipantPhoneNumbers" => ParticipantPhoneNumbers,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_sip_media_application(aws_region, endpoints, name)
    create_sip_media_application(aws_region, endpoints, name, params::Dict{String,<:Any})



# Arguments
- `aws_region`:
- `endpoints`:
- `name`:

"""
function create_sip_media_application(
    AwsRegion, Endpoints, Name; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/sip-media-applications",
        Dict{String,Any}(
            "AwsRegion" => AwsRegion, "Endpoints" => Endpoints, "Name" => Name
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_sip_media_application(
    AwsRegion,
    Endpoints,
    Name,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/sip-media-applications",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "AwsRegion" => AwsRegion, "Endpoints" => Endpoints, "Name" => Name
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_sip_media_application_call(from_phone_number, to_phone_number, sip_media_application_id)
    create_sip_media_application_call(from_phone_number, to_phone_number, sip_media_application_id, params::Dict{String,<:Any})



# Arguments
- `from_phone_number`:
- `to_phone_number`:
- `sip_media_application_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ArgumentsMap"`:
- `"SipHeaders"`:
"""
function create_sip_media_application_call(
    FromPhoneNumber,
    ToPhoneNumber,
    sipMediaApplicationId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/sip-media-applications/$(sipMediaApplicationId)/calls",
        Dict{String,Any}(
            "FromPhoneNumber" => FromPhoneNumber, "ToPhoneNumber" => ToPhoneNumber
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_sip_media_application_call(
    FromPhoneNumber,
    ToPhoneNumber,
    sipMediaApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/sip-media-applications/$(sipMediaApplicationId)/calls",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "FromPhoneNumber" => FromPhoneNumber, "ToPhoneNumber" => ToPhoneNumber
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_sip_rule(name, trigger_type, trigger_value)
    create_sip_rule(name, trigger_type, trigger_value, params::Dict{String,<:Any})



# Arguments
- `name`:
- `trigger_type`:
- `trigger_value`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Disabled"`:
- `"TargetApplications"`:
"""
function create_sip_rule(
    Name, TriggerType, TriggerValue; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/sip-rules",
        Dict{String,Any}(
            "Name" => Name, "TriggerType" => TriggerType, "TriggerValue" => TriggerValue
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_sip_rule(
    Name,
    TriggerType,
    TriggerValue,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/sip-rules",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Name" => Name,
                    "TriggerType" => TriggerType,
                    "TriggerValue" => TriggerValue,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_voice_connector(name, require_encryption)
    create_voice_connector(name, require_encryption, params::Dict{String,<:Any})



# Arguments
- `name`:
- `require_encryption`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AwsRegion"`:
"""
function create_voice_connector(
    Name, RequireEncryption; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors",
        Dict{String,Any}("Name" => Name, "RequireEncryption" => RequireEncryption);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_voice_connector(
    Name,
    RequireEncryption,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("Name" => Name, "RequireEncryption" => RequireEncryption),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_voice_connector_group(name)
    create_voice_connector_group(name, params::Dict{String,<:Any})



# Arguments
- `name`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"VoiceConnectorItems"`:
"""
function create_voice_connector_group(
    Name; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/voice-connector-groups",
        Dict{String,Any}("Name" => Name);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_voice_connector_group(
    Name, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/voice-connector-groups",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Name" => Name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_phone_number(phone_number_id)
    delete_phone_number(phone_number_id, params::Dict{String,<:Any})



# Arguments
- `phone_number_id`:

"""
function delete_phone_number(
    phoneNumberId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "DELETE",
        "/phone-numbers/$(phoneNumberId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_phone_number(
    phoneNumberId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "DELETE",
        "/phone-numbers/$(phoneNumberId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_proxy_session(proxy_session_id, voice_connector_id)
    delete_proxy_session(proxy_session_id, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `proxy_session_id`:
- `voice_connector_id`:

"""
function delete_proxy_session(
    proxySessionId, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_proxy_session(
    proxySessionId,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_sip_media_application(sip_media_application_id)
    delete_sip_media_application(sip_media_application_id, params::Dict{String,<:Any})



# Arguments
- `sip_media_application_id`:

"""
function delete_sip_media_application(
    sipMediaApplicationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "DELETE",
        "/sip-media-applications/$(sipMediaApplicationId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_sip_media_application(
    sipMediaApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "DELETE",
        "/sip-media-applications/$(sipMediaApplicationId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_sip_rule(sip_rule_id)
    delete_sip_rule(sip_rule_id, params::Dict{String,<:Any})



# Arguments
- `sip_rule_id`:

"""
function delete_sip_rule(sipRuleId; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "DELETE",
        "/sip-rules/$(sipRuleId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_sip_rule(
    sipRuleId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "DELETE",
        "/sip-rules/$(sipRuleId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_voice_connector(voice_connector_id)
    delete_voice_connector(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function delete_voice_connector(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_voice_connector(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_voice_connector_emergency_calling_configuration(voice_connector_id)
    delete_voice_connector_emergency_calling_configuration(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function delete_voice_connector_emergency_calling_configuration(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_voice_connector_emergency_calling_configuration(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_voice_connector_group(voice_connector_group_id)
    delete_voice_connector_group(voice_connector_group_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_group_id`:

"""
function delete_voice_connector_group(
    voiceConnectorGroupId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connector-groups/$(voiceConnectorGroupId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_voice_connector_group(
    voiceConnectorGroupId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connector-groups/$(voiceConnectorGroupId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_voice_connector_origination(voice_connector_id)
    delete_voice_connector_origination(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function delete_voice_connector_origination(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)/origination";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_voice_connector_origination(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)/origination",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_voice_connector_proxy(voice_connector_id)
    delete_voice_connector_proxy(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function delete_voice_connector_proxy(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_voice_connector_proxy(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_voice_connector_streaming_configuration(voice_connector_id)
    delete_voice_connector_streaming_configuration(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function delete_voice_connector_streaming_configuration(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)/streaming-configuration";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_voice_connector_streaming_configuration(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)/streaming-configuration",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_voice_connector_termination(voice_connector_id)
    delete_voice_connector_termination(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function delete_voice_connector_termination(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)/termination";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_voice_connector_termination(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "DELETE",
        "/voice-connectors/$(voiceConnectorId)/termination",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_voice_connector_termination_credentials(usernames, voice_connector_id)
    delete_voice_connector_termination_credentials(usernames, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `usernames`:
- `voice_connector_id`:

"""
function delete_voice_connector_termination_credentials(
    Usernames, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors/$(voiceConnectorId)/termination/credentials?operation=delete",
        Dict{String,Any}("Usernames" => Usernames);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_voice_connector_termination_credentials(
    Usernames,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors/$(voiceConnectorId)/termination/credentials?operation=delete",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("Usernames" => Usernames), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    disassociate_phone_numbers_from_voice_connector(e164_phone_numbers, voice_connector_id)
    disassociate_phone_numbers_from_voice_connector(e164_phone_numbers, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `e164_phone_numbers`:
- `voice_connector_id`:

"""
function disassociate_phone_numbers_from_voice_connector(
    E164PhoneNumbers, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors/$(voiceConnectorId)?operation=disassociate-phone-numbers",
        Dict{String,Any}("E164PhoneNumbers" => E164PhoneNumbers);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function disassociate_phone_numbers_from_voice_connector(
    E164PhoneNumbers,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors/$(voiceConnectorId)?operation=disassociate-phone-numbers",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("E164PhoneNumbers" => E164PhoneNumbers), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    disassociate_phone_numbers_from_voice_connector_group(e164_phone_numbers, voice_connector_group_id)
    disassociate_phone_numbers_from_voice_connector_group(e164_phone_numbers, voice_connector_group_id, params::Dict{String,<:Any})



# Arguments
- `e164_phone_numbers`:
- `voice_connector_group_id`:

"""
function disassociate_phone_numbers_from_voice_connector_group(
    E164PhoneNumbers,
    voiceConnectorGroupId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/voice-connector-groups/$(voiceConnectorGroupId)?operation=disassociate-phone-numbers",
        Dict{String,Any}("E164PhoneNumbers" => E164PhoneNumbers);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function disassociate_phone_numbers_from_voice_connector_group(
    E164PhoneNumbers,
    voiceConnectorGroupId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/voice-connector-groups/$(voiceConnectorGroupId)?operation=disassociate-phone-numbers",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("E164PhoneNumbers" => E164PhoneNumbers), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_global_settings()
    get_global_settings(params::Dict{String,<:Any})



"""
function get_global_settings(; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "GET", "/settings"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_global_settings(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET", "/settings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    get_phone_number(phone_number_id)
    get_phone_number(phone_number_id, params::Dict{String,<:Any})



# Arguments
- `phone_number_id`:

"""
function get_phone_number(phoneNumberId; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "GET",
        "/phone-numbers/$(phoneNumberId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_phone_number(
    phoneNumberId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/phone-numbers/$(phoneNumberId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_phone_number_order(phone_number_order_id)
    get_phone_number_order(phone_number_order_id, params::Dict{String,<:Any})



# Arguments
- `phone_number_order_id`:

"""
function get_phone_number_order(
    phoneNumberOrderId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/phone-number-orders/$(phoneNumberOrderId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_phone_number_order(
    phoneNumberOrderId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/phone-number-orders/$(phoneNumberOrderId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_phone_number_settings()
    get_phone_number_settings(params::Dict{String,<:Any})



"""
function get_phone_number_settings(; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "GET",
        "/settings/phone-number";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_phone_number_settings(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/settings/phone-number",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_proxy_session(proxy_session_id, voice_connector_id)
    get_proxy_session(proxy_session_id, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `proxy_session_id`:
- `voice_connector_id`:

"""
function get_proxy_session(
    proxySessionId, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_proxy_session(
    proxySessionId,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_sip_media_application(sip_media_application_id)
    get_sip_media_application(sip_media_application_id, params::Dict{String,<:Any})



# Arguments
- `sip_media_application_id`:

"""
function get_sip_media_application(
    sipMediaApplicationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/sip-media-applications/$(sipMediaApplicationId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_sip_media_application(
    sipMediaApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/sip-media-applications/$(sipMediaApplicationId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_sip_media_application_alexa_skill_configuration(sip_media_application_id)
    get_sip_media_application_alexa_skill_configuration(sip_media_application_id, params::Dict{String,<:Any})



# Arguments
- `sip_media_application_id`:

"""
function get_sip_media_application_alexa_skill_configuration(
    sipMediaApplicationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/sip-media-applications/$(sipMediaApplicationId)/alexa-skill-configuration";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_sip_media_application_alexa_skill_configuration(
    sipMediaApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/sip-media-applications/$(sipMediaApplicationId)/alexa-skill-configuration",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_sip_media_application_logging_configuration(sip_media_application_id)
    get_sip_media_application_logging_configuration(sip_media_application_id, params::Dict{String,<:Any})



# Arguments
- `sip_media_application_id`:

"""
function get_sip_media_application_logging_configuration(
    sipMediaApplicationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/sip-media-applications/$(sipMediaApplicationId)/logging-configuration";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_sip_media_application_logging_configuration(
    sipMediaApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/sip-media-applications/$(sipMediaApplicationId)/logging-configuration",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_sip_rule(sip_rule_id)
    get_sip_rule(sip_rule_id, params::Dict{String,<:Any})



# Arguments
- `sip_rule_id`:

"""
function get_sip_rule(sipRuleId; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "GET",
        "/sip-rules/$(sipRuleId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_sip_rule(
    sipRuleId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/sip-rules/$(sipRuleId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_voice_connector(voice_connector_id)
    get_voice_connector(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function get_voice_connector(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_voice_connector(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_voice_connector_emergency_calling_configuration(voice_connector_id)
    get_voice_connector_emergency_calling_configuration(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function get_voice_connector_emergency_calling_configuration(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_voice_connector_emergency_calling_configuration(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_voice_connector_group(voice_connector_group_id)
    get_voice_connector_group(voice_connector_group_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_group_id`:

"""
function get_voice_connector_group(
    voiceConnectorGroupId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connector-groups/$(voiceConnectorGroupId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_voice_connector_group(
    voiceConnectorGroupId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/voice-connector-groups/$(voiceConnectorGroupId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_voice_connector_logging_configuration(voice_connector_id)
    get_voice_connector_logging_configuration(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function get_voice_connector_logging_configuration(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/logging-configuration";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_voice_connector_logging_configuration(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/logging-configuration",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_voice_connector_origination(voice_connector_id)
    get_voice_connector_origination(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function get_voice_connector_origination(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/origination";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_voice_connector_origination(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/origination",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_voice_connector_proxy(voice_connector_id)
    get_voice_connector_proxy(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function get_voice_connector_proxy(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_voice_connector_proxy(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_voice_connector_streaming_configuration(voice_connector_id)
    get_voice_connector_streaming_configuration(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function get_voice_connector_streaming_configuration(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/streaming-configuration";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_voice_connector_streaming_configuration(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/streaming-configuration",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_voice_connector_termination(voice_connector_id)
    get_voice_connector_termination(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function get_voice_connector_termination(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/termination";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_voice_connector_termination(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/termination",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_voice_connector_termination_health(voice_connector_id)
    get_voice_connector_termination_health(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function get_voice_connector_termination_health(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/termination/health";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_voice_connector_termination_health(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/termination/health",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_available_voice_connector_regions()
    list_available_voice_connector_regions(params::Dict{String,<:Any})



"""
function list_available_voice_connector_regions(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connector-regions";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_available_voice_connector_regions(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connector-regions",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_phone_number_orders()
    list_phone_number_orders(params::Dict{String,<:Any})



# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`:
- `"next-token"`:
"""
function list_phone_number_orders(; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "GET",
        "/phone-number-orders";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_phone_number_orders(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/phone-number-orders",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_phone_numbers()
    list_phone_numbers(params::Dict{String,<:Any})



# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filter-name"`:
- `"filter-value"`:
- `"max-results"`:
- `"next-token"`:
- `"product-type"`:
- `"status"`:
"""
function list_phone_numbers(; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "GET", "/phone-numbers"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_phone_numbers(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/phone-numbers",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_proxy_sessions(voice_connector_id)
    list_proxy_sessions(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`:
- `"next-token"`:
- `"status"`:
"""
function list_proxy_sessions(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/proxy-sessions";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_proxy_sessions(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/proxy-sessions",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_sip_media_applications()
    list_sip_media_applications(params::Dict{String,<:Any})



# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`:
- `"next-token"`:
"""
function list_sip_media_applications(; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "GET",
        "/sip-media-applications";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_sip_media_applications(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/sip-media-applications",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_sip_rules()
    list_sip_rules(params::Dict{String,<:Any})



# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`:
- `"next-token"`:
- `"sip-media-application"`:
"""
function list_sip_rules(; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "GET", "/sip-rules"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_sip_rules(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET", "/sip-rules", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_supported_phone_number_countries(product-type)
    list_supported_phone_number_countries(product-type, params::Dict{String,<:Any})



# Arguments
- `product-type`:

"""
function list_supported_phone_number_countries(
    product_type; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/phone-number-countries",
        Dict{String,Any}("product-type" => product_type);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_supported_phone_number_countries(
    product_type,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/phone-number-countries",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("product-type" => product_type), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_voice_connector_groups()
    list_voice_connector_groups(params::Dict{String,<:Any})



# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`:
- `"next-token"`:
"""
function list_voice_connector_groups(; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "GET",
        "/voice-connector-groups";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_voice_connector_groups(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connector-groups",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_voice_connector_termination_credentials(voice_connector_id)
    list_voice_connector_termination_credentials(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

"""
function list_voice_connector_termination_credentials(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/termination/credentials";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_voice_connector_termination_credentials(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors/$(voiceConnectorId)/termination/credentials",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_voice_connectors()
    list_voice_connectors(params::Dict{String,<:Any})



# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`:
- `"next-token"`:
"""
function list_voice_connectors(; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "GET", "/voice-connectors"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_voice_connectors(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/voice-connectors",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_sip_media_application_alexa_skill_configuration(sip_media_application_id)
    put_sip_media_application_alexa_skill_configuration(sip_media_application_id, params::Dict{String,<:Any})



# Arguments
- `sip_media_application_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"SipMediaApplicationAlexaSkillConfiguration"`:
"""
function put_sip_media_application_alexa_skill_configuration(
    sipMediaApplicationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "PUT",
        "/sip-media-applications/$(sipMediaApplicationId)/alexa-skill-configuration";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_sip_media_application_alexa_skill_configuration(
    sipMediaApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/sip-media-applications/$(sipMediaApplicationId)/alexa-skill-configuration",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_sip_media_application_logging_configuration(sip_media_application_id)
    put_sip_media_application_logging_configuration(sip_media_application_id, params::Dict{String,<:Any})



# Arguments
- `sip_media_application_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"SipMediaApplicationLoggingConfiguration"`:
"""
function put_sip_media_application_logging_configuration(
    sipMediaApplicationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "PUT",
        "/sip-media-applications/$(sipMediaApplicationId)/logging-configuration";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_sip_media_application_logging_configuration(
    sipMediaApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/sip-media-applications/$(sipMediaApplicationId)/logging-configuration",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_voice_connector_emergency_calling_configuration(emergency_calling_configuration, voice_connector_id)
    put_voice_connector_emergency_calling_configuration(emergency_calling_configuration, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `emergency_calling_configuration`:
- `voice_connector_id`:

"""
function put_voice_connector_emergency_calling_configuration(
    EmergencyCallingConfiguration,
    voiceConnectorId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration",
        Dict{String,Any}("EmergencyCallingConfiguration" => EmergencyCallingConfiguration);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_voice_connector_emergency_calling_configuration(
    EmergencyCallingConfiguration,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)/emergency-calling-configuration",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "EmergencyCallingConfiguration" => EmergencyCallingConfiguration
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_voice_connector_logging_configuration(logging_configuration, voice_connector_id)
    put_voice_connector_logging_configuration(logging_configuration, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `logging_configuration`:
- `voice_connector_id`:

"""
function put_voice_connector_logging_configuration(
    LoggingConfiguration,
    voiceConnectorId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)/logging-configuration",
        Dict{String,Any}("LoggingConfiguration" => LoggingConfiguration);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_voice_connector_logging_configuration(
    LoggingConfiguration,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)/logging-configuration",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("LoggingConfiguration" => LoggingConfiguration),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_voice_connector_origination(origination, voice_connector_id)
    put_voice_connector_origination(origination, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `origination`:
- `voice_connector_id`:

"""
function put_voice_connector_origination(
    Origination, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)/origination",
        Dict{String,Any}("Origination" => Origination);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_voice_connector_origination(
    Origination,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)/origination",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("Origination" => Origination), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_voice_connector_proxy(default_session_expiry_minutes, phone_number_pool_countries, voice_connector_id)
    put_voice_connector_proxy(default_session_expiry_minutes, phone_number_pool_countries, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `default_session_expiry_minutes`:
- `phone_number_pool_countries`:
- `voice_connector_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Disabled"`:
- `"FallBackPhoneNumber"`:
"""
function put_voice_connector_proxy(
    DefaultSessionExpiryMinutes,
    PhoneNumberPoolCountries,
    voiceConnectorId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy",
        Dict{String,Any}(
            "DefaultSessionExpiryMinutes" => DefaultSessionExpiryMinutes,
            "PhoneNumberPoolCountries" => PhoneNumberPoolCountries,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_voice_connector_proxy(
    DefaultSessionExpiryMinutes,
    PhoneNumberPoolCountries,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)/programmable-numbers/proxy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DefaultSessionExpiryMinutes" => DefaultSessionExpiryMinutes,
                    "PhoneNumberPoolCountries" => PhoneNumberPoolCountries,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_voice_connector_streaming_configuration(streaming_configuration, voice_connector_id)
    put_voice_connector_streaming_configuration(streaming_configuration, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `streaming_configuration`:
- `voice_connector_id`:

"""
function put_voice_connector_streaming_configuration(
    StreamingConfiguration,
    voiceConnectorId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)/streaming-configuration",
        Dict{String,Any}("StreamingConfiguration" => StreamingConfiguration);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_voice_connector_streaming_configuration(
    StreamingConfiguration,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)/streaming-configuration",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("StreamingConfiguration" => StreamingConfiguration),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_voice_connector_termination(termination, voice_connector_id)
    put_voice_connector_termination(termination, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `termination`:
- `voice_connector_id`:

"""
function put_voice_connector_termination(
    Termination, voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)/termination",
        Dict{String,Any}("Termination" => Termination);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_voice_connector_termination(
    Termination,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)/termination",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("Termination" => Termination), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_voice_connector_termination_credentials(voice_connector_id)
    put_voice_connector_termination_credentials(voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `voice_connector_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Credentials"`:
"""
function put_voice_connector_termination_credentials(
    voiceConnectorId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors/$(voiceConnectorId)/termination/credentials?operation=put";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_voice_connector_termination_credentials(
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors/$(voiceConnectorId)/termination/credentials?operation=put",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    restore_phone_number(phone_number_id)
    restore_phone_number(phone_number_id, params::Dict{String,<:Any})



# Arguments
- `phone_number_id`:

"""
function restore_phone_number(
    phoneNumberId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/phone-numbers/$(phoneNumberId)?operation=restore";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function restore_phone_number(
    phoneNumberId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/phone-numbers/$(phoneNumberId)?operation=restore",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    search_available_phone_numbers()
    search_available_phone_numbers(params::Dict{String,<:Any})



# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"area-code"`:
- `"city"`:
- `"country"`:
- `"max-results"`:
- `"next-token"`:
- `"phone-number-type"`:
- `"state"`:
- `"toll-free-prefix"`:
"""
function search_available_phone_numbers(; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "GET",
        "/search?type=phone-numbers";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function search_available_phone_numbers(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "GET",
        "/search?type=phone-numbers",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_global_settings()
    update_global_settings(params::Dict{String,<:Any})



# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"VoiceConnector"`:
"""
function update_global_settings(; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "PUT", "/settings"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function update_global_settings(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "PUT", "/settings", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    update_phone_number(phone_number_id)
    update_phone_number(phone_number_id, params::Dict{String,<:Any})



# Arguments
- `phone_number_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CallingName"`:
- `"ProductType"`:
"""
function update_phone_number(
    phoneNumberId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "POST",
        "/phone-numbers/$(phoneNumberId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_phone_number(
    phoneNumberId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/phone-numbers/$(phoneNumberId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_phone_number_settings(calling_name)
    update_phone_number_settings(calling_name, params::Dict{String,<:Any})



# Arguments
- `calling_name`:

"""
function update_phone_number_settings(
    CallingName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "PUT",
        "/settings/phone-number",
        Dict{String,Any}("CallingName" => CallingName);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_phone_number_settings(
    CallingName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/settings/phone-number",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("CallingName" => CallingName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_proxy_session(capabilities, proxy_session_id, voice_connector_id)
    update_proxy_session(capabilities, proxy_session_id, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `capabilities`:
- `proxy_session_id`:
- `voice_connector_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ExpiryMinutes"`:
"""
function update_proxy_session(
    Capabilities,
    proxySessionId,
    voiceConnectorId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)",
        Dict{String,Any}("Capabilities" => Capabilities);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_proxy_session(
    Capabilities,
    proxySessionId,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/voice-connectors/$(voiceConnectorId)/proxy-sessions/$(proxySessionId)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("Capabilities" => Capabilities), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_sip_media_application(sip_media_application_id)
    update_sip_media_application(sip_media_application_id, params::Dict{String,<:Any})



# Arguments
- `sip_media_application_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Endpoints"`:
- `"Name"`:
"""
function update_sip_media_application(
    sipMediaApplicationId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return chime_sdk_voice(
        "PUT",
        "/sip-media-applications/$(sipMediaApplicationId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_sip_media_application(
    sipMediaApplicationId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/sip-media-applications/$(sipMediaApplicationId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_sip_media_application_call(arguments, sip_media_application_id, transaction_id)
    update_sip_media_application_call(arguments, sip_media_application_id, transaction_id, params::Dict{String,<:Any})



# Arguments
- `arguments`:
- `sip_media_application_id`:
- `transaction_id`:

"""
function update_sip_media_application_call(
    Arguments,
    sipMediaApplicationId,
    transactionId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/sip-media-applications/$(sipMediaApplicationId)/calls/$(transactionId)",
        Dict{String,Any}("Arguments" => Arguments);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_sip_media_application_call(
    Arguments,
    sipMediaApplicationId,
    transactionId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/sip-media-applications/$(sipMediaApplicationId)/calls/$(transactionId)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("Arguments" => Arguments), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_sip_rule(name, sip_rule_id)
    update_sip_rule(name, sip_rule_id, params::Dict{String,<:Any})



# Arguments
- `name`:
- `sip_rule_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Disabled"`:
- `"TargetApplications"`:
"""
function update_sip_rule(Name, sipRuleId; aws_config::AbstractAWSConfig=global_aws_config())
    return chime_sdk_voice(
        "PUT",
        "/sip-rules/$(sipRuleId)",
        Dict{String,Any}("Name" => Name);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_sip_rule(
    Name,
    sipRuleId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/sip-rules/$(sipRuleId)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Name" => Name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_voice_connector(name, require_encryption, voice_connector_id)
    update_voice_connector(name, require_encryption, voice_connector_id, params::Dict{String,<:Any})



# Arguments
- `name`:
- `require_encryption`:
- `voice_connector_id`:

"""
function update_voice_connector(
    Name,
    RequireEncryption,
    voiceConnectorId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)",
        Dict{String,Any}("Name" => Name, "RequireEncryption" => RequireEncryption);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_voice_connector(
    Name,
    RequireEncryption,
    voiceConnectorId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connectors/$(voiceConnectorId)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("Name" => Name, "RequireEncryption" => RequireEncryption),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_voice_connector_group(name, voice_connector_items, voice_connector_group_id)
    update_voice_connector_group(name, voice_connector_items, voice_connector_group_id, params::Dict{String,<:Any})



# Arguments
- `name`:
- `voice_connector_items`:
- `voice_connector_group_id`:

"""
function update_voice_connector_group(
    Name,
    VoiceConnectorItems,
    voiceConnectorGroupId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connector-groups/$(voiceConnectorGroupId)",
        Dict{String,Any}("Name" => Name, "VoiceConnectorItems" => VoiceConnectorItems);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_voice_connector_group(
    Name,
    VoiceConnectorItems,
    voiceConnectorGroupId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "PUT",
        "/voice-connector-groups/$(voiceConnectorGroupId)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Name" => Name, "VoiceConnectorItems" => VoiceConnectorItems
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    validate_e911_address(aws_account_id, city, country, postal_code, state, street_info, street_number)
    validate_e911_address(aws_account_id, city, country, postal_code, state, street_info, street_number, params::Dict{String,<:Any})



# Arguments
- `aws_account_id`:
- `city`:
- `country`:
- `postal_code`:
- `state`:
- `street_info`:
- `street_number`:

"""
function validate_e911_address(
    AwsAccountId,
    City,
    Country,
    PostalCode,
    State,
    StreetInfo,
    StreetNumber;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/emergency-calling/address",
        Dict{String,Any}(
            "AwsAccountId" => AwsAccountId,
            "City" => City,
            "Country" => Country,
            "PostalCode" => PostalCode,
            "State" => State,
            "StreetInfo" => StreetInfo,
            "StreetNumber" => StreetNumber,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function validate_e911_address(
    AwsAccountId,
    City,
    Country,
    PostalCode,
    State,
    StreetInfo,
    StreetNumber,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return chime_sdk_voice(
        "POST",
        "/emergency-calling/address",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "AwsAccountId" => AwsAccountId,
                    "City" => City,
                    "Country" => Country,
                    "PostalCode" => PostalCode,
                    "State" => State,
                    "StreetInfo" => StreetInfo,
                    "StreetNumber" => StreetNumber,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
