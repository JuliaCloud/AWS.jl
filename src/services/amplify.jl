include("../AWSServices.jl")
using .AWSServices: amplify

"""
    ListTagsForResource()

 List tags for resource. 

Required Parameters
{
  "resourceArn": " Resource arn used to list tags. "
}
"""
ListTagsForResource(args) = amplify("GET", "/tags/{resourceArn}", args)

"""
    StopJob()

 Stop a job that is in progress, for an Amplify branch, part of Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "jobId": " Unique Id for the Job. ",
  "branchName": " Name for the branch, for the Job. "
}
"""
StopJob(args) = amplify("DELETE", "/apps/{appId}/branches/{branchName}/jobs/{jobId}/stop", args)

"""
    UpdateDomainAssociation()

 Create a new DomainAssociation on an App 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "subDomainSettings": " Setting structure for the Subdomain. ",
  "domainName": " Name of the domain. "
}

Optional Parameters
{
  "enableAutoSubDomain": " Enables automated creation of Subdomains for branches. (Currently not supported) "
}
"""
UpdateDomainAssociation(args) = amplify("POST", "/apps/{appId}/domains/{domainName}", args)

"""
    StartDeployment()

 Start a deployment for manual deploy apps. (Apps are not connected to repository) 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch, for the Job. "
}

Optional Parameters
{
  "jobId": " The job id for this deployment, generated by create deployment request. ",
  "sourceUrl": " The sourceUrl for this deployment, used when calling start deployment without create deployment. SourceUrl can be any HTTP GET url that is public accessible and downloads a single zip. "
}
"""
StartDeployment(args) = amplify("POST", "/apps/{appId}/branches/{branchName}/deployments/start", args)

"""
    CreateDeployment()

 Create a deployment for manual deploy apps. (Apps are not connected to repository) 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch, for the Job. "
}

Optional Parameters
{
  "fileMap": " Optional file map that contains file name as the key and file content md5 hash as the value. If this argument is provided, the service will generate different upload url per file. Otherwise, the service will only generate a single upload url for the zipped files. "
}
"""
CreateDeployment(args) = amplify("POST", "/apps/{appId}/branches/{branchName}/deployments", args)

"""
    GetWebhook()

 Retrieves webhook info that corresponds to a webhookId. 

Required Parameters
{
  "webhookId": " Unique Id for a webhook. "
}
"""
GetWebhook(args) = amplify("GET", "/webhooks/{webhookId}", args)

"""
    DeleteApp()

 Delete an existing Amplify App by appId. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. "
}
"""
DeleteApp(args) = amplify("DELETE", "/apps/{appId}", args)

"""
    GetBackendEnvironment()

 Retrieves a backend environment for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "environmentName": " Name for the backend environment. "
}
"""
GetBackendEnvironment(args) = amplify("GET", "/apps/{appId}/backendenvironments/{environmentName}", args)

"""
    StartJob()

 Starts a new job for a branch, part of an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch, for the Job. ",
  "jobType": " Type for the Job. Available JobTypes are:  n \"RELEASE\": Start a new job with the latest change from the specified branch. Only available for apps that have connected to a repository. \"RETRY\": Retry an existing job. JobId is required for this type of job. "
}

Optional Parameters
{
  "jobId": " Unique Id for an existing job. Required for \"RETRY\" JobType. ",
  "jobReason": " Descriptive reason for starting this job. ",
  "commitId": " Commit Id from 3rd party repository provider for the Job. ",
  "commitTime": " Commit date / time for the Job. ",
  "commitMessage": " Commit message from 3rd party repository provider for the Job. "
}
"""
StartJob(args) = amplify("POST", "/apps/{appId}/branches/{branchName}/jobs", args)

"""
    ListApps()

 Lists existing Amplify Apps. 

Optional Parameters
{
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. If non-null pagination token is returned in a result, then pass its value in another request to fetch more entries. "
}
"""
ListApps() = amplify("GET", "/apps")
ListApps(args) = amplify("GET", "/apps", args)

"""
    CreateBranch()

 Creates a new Branch for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch. "
}

Optional Parameters
{
  "enableAutoBuild": " Enables auto building for the branch. ",
  "basicAuthCredentials": " Basic Authorization credentials for the branch. ",
  "backendEnvironmentArn": " ARN for a Backend Environment, part of an Amplify App. ",
  "enableBasicAuth": " Enables Basic Auth for the branch. ",
  "environmentVariables": " Environment Variables for the branch. ",
  "displayName": " Display name for a branch, will use as the default domain prefix. ",
  "ttl": " The content TTL for the website in seconds. ",
  "framework": " Framework for the branch. ",
  "description": " Description for the branch. ",
  "buildSpec": " BuildSpec for the branch. ",
  "enableNotification": " Enables notifications for the branch. ",
  "stage": " Stage for the branch. ",
  "enablePullRequestPreview": " Enables Pull Request Preview for this branch. ",
  "tags": " Tag for the branch. ",
  "pullRequestEnvironmentName": " The Amplify Environment name for the pull request. "
}
"""
CreateBranch(args) = amplify("POST", "/apps/{appId}/branches", args)

"""
    ListWebhooks()

 List webhooks with an app. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. "
}

Optional Parameters
{
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. Set to null to start listing webhooks from start. If non-null pagination token is returned in a result, then pass its value in here to list more webhooks. "
}
"""
ListWebhooks(args) = amplify("GET", "/apps/{appId}/webhooks", args)

"""
    TagResource()

 Tag resource with tag key and value. 

Required Parameters
{
  "resourceArn": " Resource arn used to tag resource. ",
  "tags": " Tags used to tag resource. "
}
"""
TagResource(args) = amplify("POST", "/tags/{resourceArn}", args)

"""
    DeleteBackendEnvironment()

 Delete backend environment for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id of an Amplify App. ",
  "environmentName": " Name of a backend environment of an Amplify App. "
}
"""
DeleteBackendEnvironment(args) = amplify("DELETE", "/apps/{appId}/backendenvironments/{environmentName}", args)

"""
    CreateWebhook()

 Create a new webhook on an App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for a branch, part of an Amplify App. "
}

Optional Parameters
{
  "description": " Description for a webhook. "
}
"""
CreateWebhook(args) = amplify("POST", "/apps/{appId}/webhooks", args)

"""
    DeleteWebhook()

 Deletes a webhook. 

Required Parameters
{
  "webhookId": " Unique Id for a webhook. "
}
"""
DeleteWebhook(args) = amplify("DELETE", "/webhooks/{webhookId}", args)

"""
    GenerateAccessLogs()

 Retrieve website access logs for a specific time range via a pre-signed URL. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "domainName": " Name of the domain. "
}

Optional Parameters
{
  "startTime": " The time at which the logs should start, inclusive. ",
  "endTime": " The time at which the logs should end, inclusive. "
}
"""
GenerateAccessLogs(args) = amplify("POST", "/apps/{appId}/accesslogs", args)

"""
    GetJob()

 Get a job for a branch, part of an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "jobId": " Unique Id for the Job. ",
  "branchName": " Name for the branch, for the Job. "
}
"""
GetJob(args) = amplify("GET", "/apps/{appId}/branches/{branchName}/jobs/{jobId}", args)

"""
    UntagResource()

 Untag resource with resourceArn. 

Required Parameters
{
  "resourceArn": " Resource arn used to untag resource. ",
  "tagKeys": " Tag keys used to untag resource. "
}
"""
UntagResource(args) = amplify("DELETE", "/tags/{resourceArn}", args)

"""
    UpdateApp()

 Updates an existing Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. "
}

Optional Parameters
{
  "basicAuthCredentials": " Basic Authorization credentials for an Amplify App. ",
  "enableBasicAuth": " Enables Basic Authorization for an Amplify App. ",
  "iamServiceRoleArn": " IAM service role for an Amplify App. ",
  "enableAutoBranchCreation": " Enables automated branch creation for the Amplify App. ",
  "autoBranchCreationPatterns": " Automated branch creation glob patterns for the Amplify App. ",
  "oauthToken": " OAuth token for 3rd party source control system for an Amplify App, used to create webhook and read-only deploy key. OAuth token is not stored. ",
  "repository": " Repository for an Amplify App ",
  "environmentVariables": " Environment Variables for an Amplify App. ",
  "name": " Name for an Amplify App. ",
  "customRules": " Custom redirect / rewrite rules for an Amplify App. ",
  "platform": " Platform for an Amplify App. ",
  "description": " Description for an Amplify App. ",
  "buildSpec": " BuildSpec for an Amplify App. ",
  "enableBranchAutoBuild": " Enables branch auto-building for an Amplify App. ",
  "accessToken": " Personal Access token for 3rd party source control system for an Amplify App, used to create webhook and read-only deploy key. Token is not stored. ",
  "autoBranchCreationConfig": " Automated branch creation branchConfig for the Amplify App. "
}
"""
UpdateApp(args) = amplify("POST", "/apps/{appId}", args)

"""
    UpdateBranch()

 Updates a branch for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch. "
}

Optional Parameters
{
  "enableAutoBuild": " Enables auto building for the branch. ",
  "basicAuthCredentials": " Basic Authorization credentials for the branch. ",
  "backendEnvironmentArn": " ARN for a Backend Environment, part of an Amplify App. ",
  "enableBasicAuth": " Enables Basic Auth for the branch. ",
  "environmentVariables": " Environment Variables for the branch. ",
  "displayName": " Display name for a branch, will use as the default domain prefix. ",
  "ttl": " The content TTL for the website in seconds. ",
  "framework": " Framework for the branch. ",
  "description": " Description for the branch. ",
  "buildSpec": " BuildSpec for the branch. ",
  "enableNotification": " Enables notifications for the branch. ",
  "stage": " Stage for the branch. ",
  "enablePullRequestPreview": " Enables Pull Request Preview for this branch. ",
  "pullRequestEnvironmentName": " The Amplify Environment name for the pull request. "
}
"""
UpdateBranch(args) = amplify("POST", "/apps/{appId}/branches/{branchName}", args)

"""
    CreateBackendEnvironment()

 Creates a new backend environment for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "environmentName": " Name for the backend environment. "
}

Optional Parameters
{
  "deploymentArtifacts": " Name of deployment artifacts. ",
  "stackName": " CloudFormation stack name of backend environment. "
}
"""
CreateBackendEnvironment(args) = amplify("POST", "/apps/{appId}/backendenvironments", args)

"""
    GetBranch()

 Retrieves a branch for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch. "
}
"""
GetBranch(args) = amplify("GET", "/apps/{appId}/branches/{branchName}", args)

"""
    ListDomainAssociations()

 List domains with an app 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. "
}

Optional Parameters
{
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. Set to null to start listing Apps from start. If non-null pagination token is returned in a result, then pass its value in here to list more projects. "
}
"""
ListDomainAssociations(args) = amplify("GET", "/apps/{appId}/domains", args)

"""
    CreateApp()

 Creates a new Amplify App. 

Required Parameters
{
  "name": " Name for the Amplify App "
}

Optional Parameters
{
  "basicAuthCredentials": " Credentials for Basic Authorization for an Amplify App. ",
  "enableBasicAuth": " Enable Basic Authorization for an Amplify App, this will apply to all branches part of this App. ",
  "iamServiceRoleArn": " AWS IAM service role for an Amplify App ",
  "enableAutoBranchCreation": " Enables automated branch creation for the Amplify App. ",
  "autoBranchCreationPatterns": " Automated branch creation glob patterns for the Amplify App. ",
  "oauthToken": " OAuth token for 3rd party source control system for an Amplify App, used to create webhook and read-only deploy key. OAuth token is not stored. ",
  "repository": " Repository for an Amplify App ",
  "environmentVariables": " Environment variables map for an Amplify App. ",
  "customRules": " Custom rewrite / redirect rules for an Amplify App. ",
  "platform": " Platform / framework for an Amplify App ",
  "description": " Description for an Amplify App ",
  "buildSpec": " BuildSpec for an Amplify App ",
  "enableBranchAutoBuild": " Enable the auto building of branches for an Amplify App. ",
  "accessToken": " Personal Access token for 3rd party source control system for an Amplify App, used to create webhook and read-only deploy key. Token is not stored. ",
  "tags": " Tag for an Amplify App ",
  "autoBranchCreationConfig": " Automated branch creation config for the Amplify App. "
}
"""
CreateApp(args) = amplify("POST", "/apps", args)

"""
    UpdateWebhook()

 Update a webhook. 

Required Parameters
{
  "webhookId": " Unique Id for a webhook. "
}

Optional Parameters
{
  "branchName": " Name for a branch, part of an Amplify App. ",
  "description": " Description for a webhook. "
}
"""
UpdateWebhook(args) = amplify("POST", "/webhooks/{webhookId}", args)

"""
    GetDomainAssociation()

 Retrieves domain info that corresponds to an appId and domainName. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "domainName": " Name of the domain. "
}
"""
GetDomainAssociation(args) = amplify("GET", "/apps/{appId}/domains/{domainName}", args)

"""
    GetArtifactUrl()

 Retrieves artifact info that corresponds to a artifactId. 

Required Parameters
{
  "artifactId": " Unique Id for a artifact. "
}
"""
GetArtifactUrl(args) = amplify("GET", "/artifacts/{artifactId}", args)

"""
    DeleteDomainAssociation()

 Deletes a DomainAssociation. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "domainName": " Name of the domain. "
}
"""
DeleteDomainAssociation(args) = amplify("DELETE", "/apps/{appId}/domains/{domainName}", args)

"""
    ListBranches()

 Lists branches for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. "
}

Optional Parameters
{
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. Set to null to start listing branches from start. If a non-null pagination token is returned in a result, then pass its value in here to list more branches. "
}
"""
ListBranches(args) = amplify("GET", "/apps/{appId}/branches", args)

"""
    DeleteJob()

 Delete a job, for an Amplify branch, part of Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "jobId": " Unique Id for the Job. ",
  "branchName": " Name for the branch, for the Job. "
}
"""
DeleteJob(args) = amplify("DELETE", "/apps/{appId}/branches/{branchName}/jobs/{jobId}", args)

"""
    GetApp()

 Retrieves an existing Amplify App by appId. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. "
}
"""
GetApp(args) = amplify("GET", "/apps/{appId}", args)

"""
    DeleteBranch()

 Deletes a branch for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch. "
}
"""
DeleteBranch(args) = amplify("DELETE", "/apps/{appId}/branches/{branchName}", args)

"""
    ListArtifacts()

 List artifacts with an app, a branch, a job and an artifact type. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "jobId": " Unique Id for an Job. ",
  "branchName": " Name for a branch, part of an Amplify App. "
}

Optional Parameters
{
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. Set to null to start listing artifacts from start. If non-null pagination token is returned in a result, then pass its value in here to list more artifacts. "
}
"""
ListArtifacts(args) = amplify("GET", "/apps/{appId}/branches/{branchName}/jobs/{jobId}/artifacts", args)

"""
    ListBackendEnvironments()

 Lists backend environments for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an amplify App. "
}

Optional Parameters
{
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. Set to null to start listing backen environments from start. If a non-null pagination token is returned in a result, then pass its value in here to list more backend environments. ",
  "environmentName": " Name of the backend environment "
}
"""
ListBackendEnvironments(args) = amplify("GET", "/apps/{appId}/backendenvironments", args)

"""
    ListJobs()

 List Jobs for a branch, part of an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for a branch. "
}

Optional Parameters
{
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. Set to null to start listing steps from start. If a non-null pagination token is returned in a result, then pass its value in here to list more steps. "
}
"""
ListJobs(args) = amplify("GET", "/apps/{appId}/branches/{branchName}/jobs", args)

"""
    CreateDomainAssociation()

 Create a new DomainAssociation on an App 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "subDomainSettings": " Setting structure for the Subdomain. ",
  "domainName": " Domain name for the Domain Association. "
}

Optional Parameters
{
  "enableAutoSubDomain": " Enables automated creation of Subdomains for branches. (Currently not supported) "
}
"""
CreateDomainAssociation(args) = amplify("POST", "/apps/{appId}/domains", args)
