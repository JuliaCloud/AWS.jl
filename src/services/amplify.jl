# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
using Compat
using .AWSServices: amplify

"""
    CreateApp()

 Creates a new Amplify app. 

Required Parameters
name =>  The name for the Amplify app. 

Optional Parameters
accessToken =>  The personal access token for a third-party source control system for an Amplify app. The personal access token is used to create a webhook and a read-only deploy key. The token is not stored. 
autoBranchCreationConfig =>  The automated branch creation configuration for the Amplify app. 
autoBranchCreationPatterns =>  The automated branch creation glob patterns for the Amplify app. 
basicAuthCredentials =>  The credentials for basic authorization for an Amplify app. 
buildSpec =>  The build specification (build spec) for an Amplify app. 
customRules =>  The custom rewrite and redirect rules for an Amplify app. 
description =>  The description for an Amplify app. 
enableAutoBranchCreation =>  Enables automated branch creation for the Amplify app. 
enableBasicAuth =>  Enables basic authorization for an Amplify app. This will apply to all branches that are part of this app. 
enableBranchAutoBuild =>  Enables the auto building of branches for an Amplify app. 
enableBranchAutoDeletion =>  Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. 
environmentVariables =>  The environment variables map for an Amplify app. 
iamServiceRoleArn =>  The AWS Identity and Access Management (IAM) service role for an Amplify app. 
oauthToken =>  The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key. The OAuth token is not stored. 
platform =>  The platform or framework for an Amplify app. 
repository =>  The repository for an Amplify app. 
tags =>  The tag for an Amplify app. 
"""
CreateApp(name) = amplify("POST", "/apps", Dict{String, Any}("name"=>name))
CreateApp(name, args::AbstractDict{String, <: Any}) = amplify("POST", "/apps", Dict{String, Any}("name"=>name, args...))
CreateApp(a...; b...) = CreateApp(a..., b)

"""
    CreateBackendEnvironment()

 Creates a new backend environment for an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
environmentName =>  The name for the backend environment. 

Optional Parameters
deploymentArtifacts =>  The name of deployment artifacts. 
stackName =>  The AWS CloudFormation stack name of a backend environment. 
"""
CreateBackendEnvironment(appId, environmentName) = amplify("POST", "/apps/$(appId)/backendenvironments", Dict{String, Any}("environmentName"=>environmentName))
CreateBackendEnvironment(appId, environmentName, args::AbstractDict{String, <: Any}) = amplify("POST", "/apps/$(appId)/backendenvironments", Dict{String, Any}("environmentName"=>environmentName, args...))
CreateBackendEnvironment(a...; b...) = CreateBackendEnvironment(a..., b)

"""
    CreateBranch()

 Creates a new branch for an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
branchName =>  The name for the branch. 

Optional Parameters
backendEnvironmentArn =>  The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. 
basicAuthCredentials =>  The basic authorization credentials for the branch. 
buildSpec =>  The build specification (build spec) for the branch. 
description =>  The description for the branch. 
displayName =>  The display name for a branch. This is used as the default domain prefix. 
enableAutoBuild =>  Enables auto building for the branch. 
enableBasicAuth =>  Enables basic authorization for the branch. 
enableNotification =>  Enables notifications for the branch. 
enablePullRequestPreview =>  Enables pull request preview for this branch. 
environmentVariables =>  The environment variables for the branch. 
framework =>  The framework for the branch. 
pullRequestEnvironmentName =>  The Amplify environment name for the pull request. 
stage =>  Describes the current stage for the branch. 
tags =>  The tag for the branch. 
ttl =>  The content Time To Live (TTL) for the website in seconds. 
"""
CreateBranch(appId, branchName) = amplify("POST", "/apps/$(appId)/branches", Dict{String, Any}("branchName"=>branchName))
CreateBranch(appId, branchName, args::AbstractDict{String, <: Any}) = amplify("POST", "/apps/$(appId)/branches", Dict{String, Any}("branchName"=>branchName, args...))
CreateBranch(a...; b...) = CreateBranch(a..., b)

"""
    CreateDeployment()

 Creates a deployment for a manually deployed Amplify app. Manually deployed apps are not connected to a repository. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
branchName =>  The name for the branch, for the job. 

Optional Parameters
fileMap =>  An optional file map that contains the file name as the key and the file content md5 hash as the value. If this argument is provided, the service will generate a unique upload URL per file. Otherwise, the service will only generate a single upload URL for the zipped files. 
"""
CreateDeployment(appId, branchName) = amplify("POST", "/apps/$(appId)/branches/$(branchName)/deployments")
CreateDeployment(appId, branchName, args::AbstractDict{String, <: Any}) = amplify("POST", "/apps/$(appId)/branches/$(branchName)/deployments", args)
CreateDeployment(a...; b...) = CreateDeployment(a..., b)

"""
    CreateDomainAssociation()

 Creates a new domain association for an Amplify app. This action associates a custom domain with the Amplify app 

Required Parameters
appId =>  The unique ID for an Amplify app. 
domainName =>  The domain name for the domain association. 
subDomainSettings =>  The setting for the subdomain. 

Optional Parameters
autoSubDomainCreationPatterns =>  Sets the branch patterns for automatic subdomain creation. 
autoSubDomainIAMRole =>  The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. 
enableAutoSubDomain =>  Enables the automated creation of subdomains for branches. 
"""
CreateDomainAssociation(appId, domainName, subDomainSettings) = amplify("POST", "/apps/$(appId)/domains", Dict{String, Any}("domainName"=>domainName, "subDomainSettings"=>subDomainSettings))
CreateDomainAssociation(appId, domainName, subDomainSettings, args::AbstractDict{String, <: Any}) = amplify("POST", "/apps/$(appId)/domains", Dict{String, Any}("domainName"=>domainName, "subDomainSettings"=>subDomainSettings, args...))
CreateDomainAssociation(a...; b...) = CreateDomainAssociation(a..., b)

"""
    CreateWebhook()

 Creates a new webhook on an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
branchName =>  The name for a branch that is part of an Amplify app. 

Optional Parameters
description =>  The description for a webhook. 
"""
CreateWebhook(appId, branchName) = amplify("POST", "/apps/$(appId)/webhooks", Dict{String, Any}("branchName"=>branchName))
CreateWebhook(appId, branchName, args::AbstractDict{String, <: Any}) = amplify("POST", "/apps/$(appId)/webhooks", Dict{String, Any}("branchName"=>branchName, args...))
CreateWebhook(a...; b...) = CreateWebhook(a..., b)

"""
    DeleteApp()

 Deletes an existing Amplify app specified by an app ID. 

Required Parameters
appId =>  The unique ID for an Amplify app. 

"""
DeleteApp(appId) = amplify("DELETE", "/apps/$(appId)")
DeleteApp(appId, args::AbstractDict{String, <: Any}) = amplify("DELETE", "/apps/$(appId)", args)
DeleteApp(a...; b...) = DeleteApp(a..., b)

"""
    DeleteBackendEnvironment()

 Deletes a backend environment for an Amplify app. 

Required Parameters
appId =>  The unique ID of an Amplify app. 
environmentName =>  The name of a backend environment of an Amplify app. 

"""
DeleteBackendEnvironment(appId, environmentName) = amplify("DELETE", "/apps/$(appId)/backendenvironments/$(environmentName)")
DeleteBackendEnvironment(appId, environmentName, args::AbstractDict{String, <: Any}) = amplify("DELETE", "/apps/$(appId)/backendenvironments/$(environmentName)", args)
DeleteBackendEnvironment(a...; b...) = DeleteBackendEnvironment(a..., b)

"""
    DeleteBranch()

 Deletes a branch for an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
branchName =>  The name for the branch. 

"""
DeleteBranch(appId, branchName) = amplify("DELETE", "/apps/$(appId)/branches/$(branchName)")
DeleteBranch(appId, branchName, args::AbstractDict{String, <: Any}) = amplify("DELETE", "/apps/$(appId)/branches/$(branchName)", args)
DeleteBranch(a...; b...) = DeleteBranch(a..., b)

"""
    DeleteDomainAssociation()

 Deletes a domain association for an Amplify app. 

Required Parameters
appId =>  The unique id for an Amplify app. 
domainName =>  The name of the domain. 

"""
DeleteDomainAssociation(appId, domainName) = amplify("DELETE", "/apps/$(appId)/domains/$(domainName)")
DeleteDomainAssociation(appId, domainName, args::AbstractDict{String, <: Any}) = amplify("DELETE", "/apps/$(appId)/domains/$(domainName)", args)
DeleteDomainAssociation(a...; b...) = DeleteDomainAssociation(a..., b)

"""
    DeleteJob()

 Deletes a job for a branch of an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
branchName =>  The name for the branch, for the job. 
jobId =>  The unique ID for the job. 

"""
DeleteJob(appId, branchName, jobId) = amplify("DELETE", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)")
DeleteJob(appId, branchName, jobId, args::AbstractDict{String, <: Any}) = amplify("DELETE", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)", args)
DeleteJob(a...; b...) = DeleteJob(a..., b)

"""
    DeleteWebhook()

 Deletes a webhook. 

Required Parameters
webhookId =>  The unique ID for a webhook. 

"""
DeleteWebhook(webhookId) = amplify("DELETE", "/webhooks/$(webhookId)")
DeleteWebhook(webhookId, args::AbstractDict{String, <: Any}) = amplify("DELETE", "/webhooks/$(webhookId)", args)
DeleteWebhook(a...; b...) = DeleteWebhook(a..., b)

"""
    GenerateAccessLogs()

 Returns the website access logs for a specific time range using a presigned URL. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
domainName =>  The name of the domain. 

Optional Parameters
endTime =>  The time at which the logs should end. The time range specified is inclusive of the end time. 
startTime =>  The time at which the logs should start. The time range specified is inclusive of the start time. 
"""
GenerateAccessLogs(appId, domainName) = amplify("POST", "/apps/$(appId)/accesslogs", Dict{String, Any}("domainName"=>domainName))
GenerateAccessLogs(appId, domainName, args::AbstractDict{String, <: Any}) = amplify("POST", "/apps/$(appId)/accesslogs", Dict{String, Any}("domainName"=>domainName, args...))
GenerateAccessLogs(a...; b...) = GenerateAccessLogs(a..., b)

"""
    GetApp()

 Returns an existing Amplify app by appID. 

Required Parameters
appId =>  The unique ID for an Amplify app. 

"""
GetApp(appId) = amplify("GET", "/apps/$(appId)")
GetApp(appId, args::AbstractDict{String, <: Any}) = amplify("GET", "/apps/$(appId)", args)
GetApp(a...; b...) = GetApp(a..., b)

"""
    GetArtifactUrl()

 Returns the artifact info that corresponds to an artifact id. 

Required Parameters
artifactId =>  The unique ID for an artifact. 

"""
GetArtifactUrl(artifactId) = amplify("GET", "/artifacts/$(artifactId)")
GetArtifactUrl(artifactId, args::AbstractDict{String, <: Any}) = amplify("GET", "/artifacts/$(artifactId)", args)
GetArtifactUrl(a...; b...) = GetArtifactUrl(a..., b)

"""
    GetBackendEnvironment()

 Returns a backend environment for an Amplify app. 

Required Parameters
appId =>  The unique id for an Amplify app. 
environmentName =>  The name for the backend environment. 

"""
GetBackendEnvironment(appId, environmentName) = amplify("GET", "/apps/$(appId)/backendenvironments/$(environmentName)")
GetBackendEnvironment(appId, environmentName, args::AbstractDict{String, <: Any}) = amplify("GET", "/apps/$(appId)/backendenvironments/$(environmentName)", args)
GetBackendEnvironment(a...; b...) = GetBackendEnvironment(a..., b)

"""
    GetBranch()

 Returns a branch for an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
branchName =>  The name for the branch. 

"""
GetBranch(appId, branchName) = amplify("GET", "/apps/$(appId)/branches/$(branchName)")
GetBranch(appId, branchName, args::AbstractDict{String, <: Any}) = amplify("GET", "/apps/$(appId)/branches/$(branchName)", args)
GetBranch(a...; b...) = GetBranch(a..., b)

"""
    GetDomainAssociation()

 Returns the domain information for an Amplify app. 

Required Parameters
appId =>  The unique id for an Amplify app. 
domainName =>  The name of the domain. 

"""
GetDomainAssociation(appId, domainName) = amplify("GET", "/apps/$(appId)/domains/$(domainName)")
GetDomainAssociation(appId, domainName, args::AbstractDict{String, <: Any}) = amplify("GET", "/apps/$(appId)/domains/$(domainName)", args)
GetDomainAssociation(a...; b...) = GetDomainAssociation(a..., b)

"""
    GetJob()

 Returns a job for a branch of an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
branchName =>  The branch name for the job. 
jobId =>  The unique ID for the job. 

"""
GetJob(appId, branchName, jobId) = amplify("GET", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)")
GetJob(appId, branchName, jobId, args::AbstractDict{String, <: Any}) = amplify("GET", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)", args)
GetJob(a...; b...) = GetJob(a..., b)

"""
    GetWebhook()

 Returns the webhook information that corresponds to a specified webhook ID. 

Required Parameters
webhookId =>  The unique ID for a webhook. 

"""
GetWebhook(webhookId) = amplify("GET", "/webhooks/$(webhookId)")
GetWebhook(webhookId, args::AbstractDict{String, <: Any}) = amplify("GET", "/webhooks/$(webhookId)", args)
GetWebhook(a...; b...) = GetWebhook(a..., b)

"""
    ListApps()

 Returns a list of the existing Amplify apps. 

Optional Parameters
maxResults =>  The maximum number of records to list in a single response. 
nextToken =>  A pagination token. If non-null, the pagination token is returned in a result. Pass its value in another request to retrieve more entries. 
"""
ListApps() = amplify("GET", "/apps")
ListApps(args::AbstractDict{String, Any}) = amplify("GET", "/apps", args)
ListApps(a...; b...) = ListApps(a..., b)

"""
    ListArtifacts()

 Returns a list of artifacts for a specified app, branch, and job. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
branchName =>  The name of a branch that is part of an Amplify app. 
jobId =>  The unique ID for a job. 

Optional Parameters
maxResults =>  The maximum number of records to list in a single response. 
nextToken =>  A pagination token. Set to null to start listing artifacts from start. If a non-null pagination token is returned in a result, pass its value in here to list more artifacts. 
"""
ListArtifacts(appId, branchName, jobId) = amplify("GET", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)/artifacts")
ListArtifacts(appId, branchName, jobId, args::AbstractDict{String, <: Any}) = amplify("GET", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)/artifacts", args)
ListArtifacts(a...; b...) = ListArtifacts(a..., b)

"""
    ListBackendEnvironments()

 Lists the backend environments for an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 

Optional Parameters
environmentName =>  The name of the backend environment 
maxResults =>  The maximum number of records to list in a single response. 
nextToken =>  A pagination token. Set to null to start listing backend environments from the start. If a non-null pagination token is returned in a result, pass its value in here to list more backend environments. 
"""
ListBackendEnvironments(appId) = amplify("GET", "/apps/$(appId)/backendenvironments")
ListBackendEnvironments(appId, args::AbstractDict{String, <: Any}) = amplify("GET", "/apps/$(appId)/backendenvironments", args)
ListBackendEnvironments(a...; b...) = ListBackendEnvironments(a..., b)

"""
    ListBranches()

 Lists the branches of an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 

Optional Parameters
maxResults =>  The maximum number of records to list in a single response. 
nextToken =>  A pagination token. Set to null to start listing branches from the start. If a non-null pagination token is returned in a result, pass its value in here to list more branches. 
"""
ListBranches(appId) = amplify("GET", "/apps/$(appId)/branches")
ListBranches(appId, args::AbstractDict{String, <: Any}) = amplify("GET", "/apps/$(appId)/branches", args)
ListBranches(a...; b...) = ListBranches(a..., b)

"""
    ListDomainAssociations()

 Returns the domain associations for an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 

Optional Parameters
maxResults =>  The maximum number of records to list in a single response. 
nextToken =>  A pagination token. Set to null to start listing apps from the start. If non-null, a pagination token is returned in a result. Pass its value in here to list more projects. 
"""
ListDomainAssociations(appId) = amplify("GET", "/apps/$(appId)/domains")
ListDomainAssociations(appId, args::AbstractDict{String, <: Any}) = amplify("GET", "/apps/$(appId)/domains", args)
ListDomainAssociations(a...; b...) = ListDomainAssociations(a..., b)

"""
    ListJobs()

 Lists the jobs for a branch of an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
branchName =>  The name for a branch. 

Optional Parameters
maxResults =>  The maximum number of records to list in a single response. 
nextToken =>  A pagination token. Set to null to start listing steps from the start. If a non-null pagination token is returned in a result, pass its value in here to list more steps. 
"""
ListJobs(appId, branchName) = amplify("GET", "/apps/$(appId)/branches/$(branchName)/jobs")
ListJobs(appId, branchName, args::AbstractDict{String, <: Any}) = amplify("GET", "/apps/$(appId)/branches/$(branchName)/jobs", args)
ListJobs(a...; b...) = ListJobs(a..., b)

"""
    ListTagsForResource()

 Returns a list of tags for a specified Amazon Resource Name (ARN). 

Required Parameters
resourceArn =>  The Amazon Resource Name (ARN) to use to list tags. 

"""
ListTagsForResource(resourceArn) = amplify("GET", "/tags/$(resourceArn)")
ListTagsForResource(resourceArn, args::AbstractDict{String, <: Any}) = amplify("GET", "/tags/$(resourceArn)", args)
ListTagsForResource(a...; b...) = ListTagsForResource(a..., b)

"""
    ListWebhooks()

 Returns a list of webhooks for an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 

Optional Parameters
maxResults =>  The maximum number of records to list in a single response. 
nextToken =>  A pagination token. Set to null to start listing webhooks from the start. If non-null,the pagination token is returned in a result. Pass its value in here to list more webhooks. 
"""
ListWebhooks(appId) = amplify("GET", "/apps/$(appId)/webhooks")
ListWebhooks(appId, args::AbstractDict{String, <: Any}) = amplify("GET", "/apps/$(appId)/webhooks", args)
ListWebhooks(a...; b...) = ListWebhooks(a..., b)

"""
    StartDeployment()

 Starts a deployment for a manually deployed app. Manually deployed apps are not connected to a repository. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
branchName =>  The name for the branch, for the job. 

Optional Parameters
jobId =>  The job ID for this deployment, generated by the create deployment request. 
sourceUrl =>  The source URL for this deployment, used when calling start deployment without create deployment. The source URL can be any HTTP GET URL that is publicly accessible and downloads a single .zip file. 
"""
StartDeployment(appId, branchName) = amplify("POST", "/apps/$(appId)/branches/$(branchName)/deployments/start")
StartDeployment(appId, branchName, args::AbstractDict{String, <: Any}) = amplify("POST", "/apps/$(appId)/branches/$(branchName)/deployments/start", args)
StartDeployment(a...; b...) = StartDeployment(a..., b)

"""
    StartJob()

 Starts a new job for a branch of an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
branchName =>  The branch name for the job. 
jobType =>  Describes the type for the job. The job type RELEASE starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type RETRY retries an existing job. If the job type value is RETRY, the jobId is also required. 

Optional Parameters
commitId =>  The commit ID from a third-party repository provider for the job. 
commitMessage =>  The commit message from a third-party repository provider for the job. 
commitTime =>  The commit date and time for the job. 
jobId =>  The unique ID for an existing job. This is required if the value of jobType is RETRY. 
jobReason =>  A descriptive reason for starting this job. 
"""
StartJob(appId, branchName, jobType) = amplify("POST", "/apps/$(appId)/branches/$(branchName)/jobs", Dict{String, Any}("jobType"=>jobType))
StartJob(appId, branchName, jobType, args::AbstractDict{String, <: Any}) = amplify("POST", "/apps/$(appId)/branches/$(branchName)/jobs", Dict{String, Any}("jobType"=>jobType, args...))
StartJob(a...; b...) = StartJob(a..., b)

"""
    StopJob()

 Stops a job that is in progress for a branch of an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
branchName =>  The name for the branch, for the job. 
jobId =>  The unique id for the job. 

"""
StopJob(appId, branchName, jobId) = amplify("DELETE", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)/stop")
StopJob(appId, branchName, jobId, args::AbstractDict{String, <: Any}) = amplify("DELETE", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)/stop", args)
StopJob(a...; b...) = StopJob(a..., b)

"""
    TagResource()

 Tags the resource with a tag key and value. 

Required Parameters
resourceArn =>  The Amazon Resource Name (ARN) to use to tag a resource. 
tags =>  The tags used to tag the resource. 

"""
TagResource(resourceArn, tags) = amplify("POST", "/tags/$(resourceArn)", Dict{String, Any}("tags"=>tags))
TagResource(resourceArn, tags, args::AbstractDict{String, <: Any}) = amplify("POST", "/tags/$(resourceArn)", Dict{String, Any}("tags"=>tags, args...))
TagResource(a...; b...) = TagResource(a..., b)

"""
    UntagResource()

 Untags a resource with a specified Amazon Resource Name (ARN). 

Required Parameters
resourceArn =>  The Amazon Resource Name (ARN) to use to untag a resource. 
tagKeys =>  The tag keys to use to untag a resource. 

"""
UntagResource(resourceArn, tagKeys) = amplify("DELETE", "/tags/$(resourceArn)", Dict{String, Any}("tagKeys"=>tagKeys))
UntagResource(resourceArn, tagKeys, args::AbstractDict{String, <: Any}) = amplify("DELETE", "/tags/$(resourceArn)", Dict{String, Any}("tagKeys"=>tagKeys, args...))
UntagResource(a...; b...) = UntagResource(a..., b)

"""
    UpdateApp()

 Updates an existing Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 

Optional Parameters
accessToken =>  The personal access token for a third-party source control system for an Amplify app. The token is used to create webhook and a read-only deploy key. The token is not stored. 
autoBranchCreationConfig =>  The automated branch creation configuration for the Amplify app. 
autoBranchCreationPatterns =>  Describes the automated branch creation glob patterns for the Amplify app. 
basicAuthCredentials =>  The basic authorization credentials for an Amplify app. 
buildSpec =>  The build specification (build spec) for an Amplify app. 
customRules =>  The custom redirect and rewrite rules for an Amplify app. 
description =>  The description for an Amplify app. 
enableAutoBranchCreation =>  Enables automated branch creation for the Amplify app. 
enableBasicAuth =>  Enables basic authorization for an Amplify app. 
enableBranchAutoBuild =>  Enables branch auto-building for an Amplify app. 
enableBranchAutoDeletion =>  Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. 
environmentVariables =>  The environment variables for an Amplify app. 
iamServiceRoleArn =>  The AWS Identity and Access Management (IAM) service role for an Amplify app. 
name =>  The name for an Amplify app. 
oauthToken =>  The OAuth token for a third-party source control system for an Amplify app. The token is used to create a webhook and a read-only deploy key. The OAuth token is not stored. 
platform =>  The platform for an Amplify app. 
repository =>  The name of the repository for an Amplify app 
"""
UpdateApp(appId) = amplify("POST", "/apps/$(appId)")
UpdateApp(appId, args::AbstractDict{String, <: Any}) = amplify("POST", "/apps/$(appId)", args)
UpdateApp(a...; b...) = UpdateApp(a..., b)

"""
    UpdateBranch()

 Updates a branch for an Amplify app. 

Required Parameters
appId =>  The unique ID for an Amplify app. 
branchName =>  The name for the branch. 

Optional Parameters
backendEnvironmentArn =>  The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. 
basicAuthCredentials =>  The basic authorization credentials for the branch. 
buildSpec =>  The build specification (build spec) for the branch. 
description =>  The description for the branch. 
displayName =>  The display name for a branch. This is used as the default domain prefix. 
enableAutoBuild =>  Enables auto building for the branch. 
enableBasicAuth =>  Enables basic authorization for the branch. 
enableNotification =>  Enables notifications for the branch. 
enablePullRequestPreview =>  Enables pull request preview for this branch. 
environmentVariables =>  The environment variables for the branch. 
framework =>  The framework for the branch. 
pullRequestEnvironmentName =>  The Amplify environment name for the pull request. 
stage =>  Describes the current stage for the branch. 
ttl =>  The content Time to Live (TTL) for the website in seconds. 
"""
UpdateBranch(appId, branchName) = amplify("POST", "/apps/$(appId)/branches/$(branchName)")
UpdateBranch(appId, branchName, args::AbstractDict{String, <: Any}) = amplify("POST", "/apps/$(appId)/branches/$(branchName)", args)
UpdateBranch(a...; b...) = UpdateBranch(a..., b)

"""
    UpdateDomainAssociation()

 Creates a new domain association for an Amplify app.

Required Parameters
appId =>  The unique ID for an Amplify app. 
domainName =>  The name of the domain. 
subDomainSettings =>  Describes the settings for the subdomain. 

Optional Parameters
autoSubDomainCreationPatterns =>  Sets the branch patterns for automatic subdomain creation. 
autoSubDomainIAMRole =>  The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. 
enableAutoSubDomain =>  Enables the automated creation of subdomains for branches. 
"""
UpdateDomainAssociation(appId, domainName, subDomainSettings) = amplify("POST", "/apps/$(appId)/domains/$(domainName)", Dict{String, Any}("subDomainSettings"=>subDomainSettings))
UpdateDomainAssociation(appId, domainName, subDomainSettings, args::AbstractDict{String, <: Any}) = amplify("POST", "/apps/$(appId)/domains/$(domainName)", Dict{String, Any}("subDomainSettings"=>subDomainSettings, args...))
UpdateDomainAssociation(a...; b...) = UpdateDomainAssociation(a..., b)

"""
    UpdateWebhook()

 Updates a webhook. 

Required Parameters
webhookId =>  The unique ID for a webhook. 

Optional Parameters
branchName =>  The name for a branch that is part of an Amplify app. 
description =>  The description for a webhook. 
"""
UpdateWebhook(webhookId) = amplify("POST", "/webhooks/$(webhookId)")
UpdateWebhook(webhookId, args::AbstractDict{String, <: Any}) = amplify("POST", "/webhooks/$(webhookId)", args)
UpdateWebhook(a...; b...) = UpdateWebhook(a..., b)
