# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
using .AWSServices: amplify

"""
    CreateApp()

 Creates a new Amplify App. 

Required Parameters
{
  "name": " Name for the Amplify App "
}

Optional Parameters
{
  "accessToken": " Personal Access token for 3rd party source control system for an Amplify App, used to create webhook and read-only deploy key. Token is not stored. ",
  "autoBranchCreationConfig": " Automated branch creation config for the Amplify App. ",
  "autoBranchCreationPatterns": " Automated branch creation glob patterns for the Amplify App. ",
  "basicAuthCredentials": " Credentials for Basic Authorization for an Amplify App. ",
  "buildSpec": " BuildSpec for an Amplify App ",
  "customRules": " Custom rewrite / redirect rules for an Amplify App. ",
  "description": " Description for an Amplify App ",
  "enableAutoBranchCreation": " Enables automated branch creation for the Amplify App. ",
  "enableBasicAuth": " Enable Basic Authorization for an Amplify App, this will apply to all branches part of this App. ",
  "enableBranchAutoBuild": " Enable the auto building of branches for an Amplify App. ",
  "environmentVariables": " Environment variables map for an Amplify App. ",
  "iamServiceRoleArn": " AWS IAM service role for an Amplify App ",
  "oauthToken": " OAuth token for 3rd party source control system for an Amplify App, used to create webhook and read-only deploy key. OAuth token is not stored. ",
  "platform": " Platform / framework for an Amplify App ",
  "repository": " Repository for an Amplify App ",
  "tags": " Tag for an Amplify App "
}
"""
CreateApp(name) = amplify("POST", "/apps")
CreateApp(name, args) = amplify("POST", "/apps", args)
CreateApp(a...; b...) = CreateApp(a..., b)

"""
    CreateBackendEnvironment()

 Creates a new backend environment for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "environmentName": " Name for the backend environment. "
}

Optional Parameters
{
  "deploymentArtifacts": " Name of deployment artifacts. ",
  "stackName": " CloudFormation stack name of backend environment. "
}
"""
CreateBackendEnvironment(appId, environmentName) = amplify("POST", "/apps/$(appId)/backendenvironments")
CreateBackendEnvironment(appId, environmentName, args) = amplify("POST", "/apps/$(appId)/backendenvironments", args)
CreateBackendEnvironment(a...; b...) = CreateBackendEnvironment(a..., b)

"""
    CreateBranch()

 Creates a new Branch for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch. "
}

Optional Parameters
{
  "backendEnvironmentArn": " ARN for a Backend Environment, part of an Amplify App. ",
  "basicAuthCredentials": " Basic Authorization credentials for the branch. ",
  "buildSpec": " BuildSpec for the branch. ",
  "description": " Description for the branch. ",
  "displayName": " Display name for a branch, will use as the default domain prefix. ",
  "enableAutoBuild": " Enables auto building for the branch. ",
  "enableBasicAuth": " Enables Basic Auth for the branch. ",
  "enableNotification": " Enables notifications for the branch. ",
  "enablePullRequestPreview": " Enables Pull Request Preview for this branch. ",
  "environmentVariables": " Environment Variables for the branch. ",
  "framework": " Framework for the branch. ",
  "pullRequestEnvironmentName": " The Amplify Environment name for the pull request. ",
  "stage": " Stage for the branch. ",
  "tags": " Tag for the branch. ",
  "ttl": " The content TTL for the website in seconds. "
}
"""
CreateBranch(appId, branchName) = amplify("POST", "/apps/$(appId)/branches")
CreateBranch(appId, branchName, args) = amplify("POST", "/apps/$(appId)/branches", args)
CreateBranch(a...; b...) = CreateBranch(a..., b)

"""
    CreateDeployment()

 Create a deployment for manual deploy apps. (Apps are not connected to repository) 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch, for the Job. "
}

Optional Parameters
{
  "fileMap": " Optional file map that contains file name as the key and file content md5 hash as the value. If this argument is provided, the service will generate different upload url per file. Otherwise, the service will only generate a single upload url for the zipped files. "
}
"""
CreateDeployment(appId, branchName) = amplify("POST", "/apps/$(appId)/branches/$(branchName)/deployments")
CreateDeployment(appId, branchName, args) = amplify("POST", "/apps/$(appId)/branches/$(branchName)/deployments", args)
CreateDeployment(a...; b...) = CreateDeployment(a..., b)

"""
    CreateDomainAssociation()

 Create a new DomainAssociation on an App 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "domainName": " Domain name for the Domain Association. ",
  "subDomainSettings": " Setting structure for the Subdomain. "
}

Optional Parameters
{
  "enableAutoSubDomain": " Enables automated creation of Subdomains for branches. (Currently not supported) "
}
"""
CreateDomainAssociation(appId, domainName, subDomainSettings) = amplify("POST", "/apps/$(appId)/domains")
CreateDomainAssociation(appId, domainName, subDomainSettings, args) = amplify("POST", "/apps/$(appId)/domains", args)
CreateDomainAssociation(a...; b...) = CreateDomainAssociation(a..., b)

"""
    CreateWebhook()

 Create a new webhook on an App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for a branch, part of an Amplify App. "
}

Optional Parameters
{
  "description": " Description for a webhook. "
}
"""
CreateWebhook(appId, branchName) = amplify("POST", "/apps/$(appId)/webhooks")
CreateWebhook(appId, branchName, args) = amplify("POST", "/apps/$(appId)/webhooks", args)
CreateWebhook(a...; b...) = CreateWebhook(a..., b)

"""
    DeleteApp()

 Delete an existing Amplify App by appId. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. "
}
"""
DeleteApp(appId) = amplify("DELETE", "/apps/$(appId)")
DeleteApp(appId, args) = amplify("DELETE", "/apps/$(appId)", args)
DeleteApp(a...; b...) = DeleteApp(a..., b)

"""
    DeleteBackendEnvironment()

 Delete backend environment for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id of an Amplify App. ",
  "environmentName": " Name of a backend environment of an Amplify App. "
}
"""
DeleteBackendEnvironment(appId, environmentName) = amplify("DELETE", "/apps/$(appId)/backendenvironments/$(environmentName)")
DeleteBackendEnvironment(appId, environmentName, args) = amplify("DELETE", "/apps/$(appId)/backendenvironments/$(environmentName)", args)
DeleteBackendEnvironment(a...; b...) = DeleteBackendEnvironment(a..., b)

"""
    DeleteBranch()

 Deletes a branch for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch. "
}
"""
DeleteBranch(appId, branchName) = amplify("DELETE", "/apps/$(appId)/branches/$(branchName)")
DeleteBranch(appId, branchName, args) = amplify("DELETE", "/apps/$(appId)/branches/$(branchName)", args)
DeleteBranch(a...; b...) = DeleteBranch(a..., b)

"""
    DeleteDomainAssociation()

 Deletes a DomainAssociation. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "domainName": " Name of the domain. "
}
"""
DeleteDomainAssociation(appId, domainName) = amplify("DELETE", "/apps/$(appId)/domains/$(domainName)")
DeleteDomainAssociation(appId, domainName, args) = amplify("DELETE", "/apps/$(appId)/domains/$(domainName)", args)
DeleteDomainAssociation(a...; b...) = DeleteDomainAssociation(a..., b)

"""
    DeleteJob()

 Delete a job, for an Amplify branch, part of Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch, for the Job. ",
  "jobId": " Unique Id for the Job. "
}
"""
DeleteJob(appId, branchName, jobId) = amplify("DELETE", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)")
DeleteJob(appId, branchName, jobId, args) = amplify("DELETE", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)", args)
DeleteJob(a...; b...) = DeleteJob(a..., b)

"""
    DeleteWebhook()

 Deletes a webhook. 

Required Parameters
{
  "webhookId": " Unique Id for a webhook. "
}
"""
DeleteWebhook(webhookId) = amplify("DELETE", "/webhooks/$(webhookId)")
DeleteWebhook(webhookId, args) = amplify("DELETE", "/webhooks/$(webhookId)", args)
DeleteWebhook(a...; b...) = DeleteWebhook(a..., b)

"""
    GenerateAccessLogs()

 Retrieve website access logs for a specific time range via a pre-signed URL. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "domainName": " Name of the domain. "
}

Optional Parameters
{
  "endTime": " The time at which the logs should end, inclusive. ",
  "startTime": " The time at which the logs should start, inclusive. "
}
"""
GenerateAccessLogs(appId, domainName) = amplify("POST", "/apps/$(appId)/accesslogs")
GenerateAccessLogs(appId, domainName, args) = amplify("POST", "/apps/$(appId)/accesslogs", args)
GenerateAccessLogs(a...; b...) = GenerateAccessLogs(a..., b)

"""
    GetApp()

 Retrieves an existing Amplify App by appId. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. "
}
"""
GetApp(appId) = amplify("GET", "/apps/$(appId)")
GetApp(appId, args) = amplify("GET", "/apps/$(appId)", args)
GetApp(a...; b...) = GetApp(a..., b)

"""
    GetArtifactUrl()

 Retrieves artifact info that corresponds to a artifactId. 

Required Parameters
{
  "artifactId": " Unique Id for a artifact. "
}
"""
GetArtifactUrl(artifactId) = amplify("GET", "/artifacts/$(artifactId)")
GetArtifactUrl(artifactId, args) = amplify("GET", "/artifacts/$(artifactId)", args)
GetArtifactUrl(a...; b...) = GetArtifactUrl(a..., b)

"""
    GetBackendEnvironment()

 Retrieves a backend environment for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "environmentName": " Name for the backend environment. "
}
"""
GetBackendEnvironment(appId, environmentName) = amplify("GET", "/apps/$(appId)/backendenvironments/$(environmentName)")
GetBackendEnvironment(appId, environmentName, args) = amplify("GET", "/apps/$(appId)/backendenvironments/$(environmentName)", args)
GetBackendEnvironment(a...; b...) = GetBackendEnvironment(a..., b)

"""
    GetBranch()

 Retrieves a branch for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch. "
}
"""
GetBranch(appId, branchName) = amplify("GET", "/apps/$(appId)/branches/$(branchName)")
GetBranch(appId, branchName, args) = amplify("GET", "/apps/$(appId)/branches/$(branchName)", args)
GetBranch(a...; b...) = GetBranch(a..., b)

"""
    GetDomainAssociation()

 Retrieves domain info that corresponds to an appId and domainName. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "domainName": " Name of the domain. "
}
"""
GetDomainAssociation(appId, domainName) = amplify("GET", "/apps/$(appId)/domains/$(domainName)")
GetDomainAssociation(appId, domainName, args) = amplify("GET", "/apps/$(appId)/domains/$(domainName)", args)
GetDomainAssociation(a...; b...) = GetDomainAssociation(a..., b)

"""
    GetJob()

 Get a job for a branch, part of an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch, for the Job. ",
  "jobId": " Unique Id for the Job. "
}
"""
GetJob(appId, branchName, jobId) = amplify("GET", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)")
GetJob(appId, branchName, jobId, args) = amplify("GET", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)", args)
GetJob(a...; b...) = GetJob(a..., b)

"""
    GetWebhook()

 Retrieves webhook info that corresponds to a webhookId. 

Required Parameters
{
  "webhookId": " Unique Id for a webhook. "
}
"""
GetWebhook(webhookId) = amplify("GET", "/webhooks/$(webhookId)")
GetWebhook(webhookId, args) = amplify("GET", "/webhooks/$(webhookId)", args)
GetWebhook(a...; b...) = GetWebhook(a..., b)

"""
    ListApps()

 Lists existing Amplify Apps. 

Optional Parameters
{
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. If non-null pagination token is returned in a result, then pass its value in another request to fetch more entries. "
}
"""
ListApps() = amplify("GET", "/apps")
ListApps(args) = amplify("GET", "/apps", args)
ListApps(a...; b...) = ListApps(a..., b)

"""
    ListArtifacts()

 List artifacts with an app, a branch, a job and an artifact type. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for a branch, part of an Amplify App. ",
  "jobId": " Unique Id for an Job. "
}

Optional Parameters
{
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. Set to null to start listing artifacts from start. If non-null pagination token is returned in a result, then pass its value in here to list more artifacts. "
}
"""
ListArtifacts(appId, branchName, jobId) = amplify("GET", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)/artifacts")
ListArtifacts(appId, branchName, jobId, args) = amplify("GET", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)/artifacts", args)
ListArtifacts(a...; b...) = ListArtifacts(a..., b)

"""
    ListBackendEnvironments()

 Lists backend environments for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an amplify App. "
}

Optional Parameters
{
  "environmentName": " Name of the backend environment ",
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. Set to null to start listing backen environments from start. If a non-null pagination token is returned in a result, then pass its value in here to list more backend environments. "
}
"""
ListBackendEnvironments(appId) = amplify("GET", "/apps/$(appId)/backendenvironments")
ListBackendEnvironments(appId, args) = amplify("GET", "/apps/$(appId)/backendenvironments", args)
ListBackendEnvironments(a...; b...) = ListBackendEnvironments(a..., b)

"""
    ListBranches()

 Lists branches for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. "
}

Optional Parameters
{
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. Set to null to start listing branches from start. If a non-null pagination token is returned in a result, then pass its value in here to list more branches. "
}
"""
ListBranches(appId) = amplify("GET", "/apps/$(appId)/branches")
ListBranches(appId, args) = amplify("GET", "/apps/$(appId)/branches", args)
ListBranches(a...; b...) = ListBranches(a..., b)

"""
    ListDomainAssociations()

 List domains with an app 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. "
}

Optional Parameters
{
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. Set to null to start listing Apps from start. If non-null pagination token is returned in a result, then pass its value in here to list more projects. "
}
"""
ListDomainAssociations(appId) = amplify("GET", "/apps/$(appId)/domains")
ListDomainAssociations(appId, args) = amplify("GET", "/apps/$(appId)/domains", args)
ListDomainAssociations(a...; b...) = ListDomainAssociations(a..., b)

"""
    ListJobs()

 List Jobs for a branch, part of an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for a branch. "
}

Optional Parameters
{
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. Set to null to start listing steps from start. If a non-null pagination token is returned in a result, then pass its value in here to list more steps. "
}
"""
ListJobs(appId, branchName) = amplify("GET", "/apps/$(appId)/branches/$(branchName)/jobs")
ListJobs(appId, branchName, args) = amplify("GET", "/apps/$(appId)/branches/$(branchName)/jobs", args)
ListJobs(a...; b...) = ListJobs(a..., b)

"""
    ListTagsForResource()

 List tags for resource. 

Required Parameters
{
  "resourceArn": " Resource arn used to list tags. "
}
"""
ListTagsForResource(resourceArn) = amplify("GET", "/tags/$(resourceArn)")
ListTagsForResource(resourceArn, args) = amplify("GET", "/tags/$(resourceArn)", args)
ListTagsForResource(a...; b...) = ListTagsForResource(a..., b)

"""
    ListWebhooks()

 List webhooks with an app. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. "
}

Optional Parameters
{
  "maxResults": " Maximum number of records to list in a single response. ",
  "nextToken": " Pagination token. Set to null to start listing webhooks from start. If non-null pagination token is returned in a result, then pass its value in here to list more webhooks. "
}
"""
ListWebhooks(appId) = amplify("GET", "/apps/$(appId)/webhooks")
ListWebhooks(appId, args) = amplify("GET", "/apps/$(appId)/webhooks", args)
ListWebhooks(a...; b...) = ListWebhooks(a..., b)

"""
    StartDeployment()

 Start a deployment for manual deploy apps. (Apps are not connected to repository) 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch, for the Job. "
}

Optional Parameters
{
  "jobId": " The job id for this deployment, generated by create deployment request. ",
  "sourceUrl": " The sourceUrl for this deployment, used when calling start deployment without create deployment. SourceUrl can be any HTTP GET url that is public accessible and downloads a single zip. "
}
"""
StartDeployment(appId, branchName) = amplify("POST", "/apps/$(appId)/branches/$(branchName)/deployments/start")
StartDeployment(appId, branchName, args) = amplify("POST", "/apps/$(appId)/branches/$(branchName)/deployments/start", args)
StartDeployment(a...; b...) = StartDeployment(a..., b)

"""
    StartJob()

 Starts a new job for a branch, part of an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch, for the Job. ",
  "jobType": " Type for the Job. Available JobTypes are:  n \"RELEASE\": Start a new job with the latest change from the specified branch. Only available for apps that have connected to a repository. \"RETRY\": Retry an existing job. JobId is required for this type of job. "
}

Optional Parameters
{
  "commitId": " Commit Id from 3rd party repository provider for the Job. ",
  "commitMessage": " Commit message from 3rd party repository provider for the Job. ",
  "commitTime": " Commit date / time for the Job. ",
  "jobId": " Unique Id for an existing job. Required for \"RETRY\" JobType. ",
  "jobReason": " Descriptive reason for starting this job. "
}
"""
StartJob(appId, branchName, jobType) = amplify("POST", "/apps/$(appId)/branches/$(branchName)/jobs")
StartJob(appId, branchName, jobType, args) = amplify("POST", "/apps/$(appId)/branches/$(branchName)/jobs", args)
StartJob(a...; b...) = StartJob(a..., b)

"""
    StopJob()

 Stop a job that is in progress, for an Amplify branch, part of Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch, for the Job. ",
  "jobId": " Unique Id for the Job. "
}
"""
StopJob(appId, branchName, jobId) = amplify("DELETE", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)/stop")
StopJob(appId, branchName, jobId, args) = amplify("DELETE", "/apps/$(appId)/branches/$(branchName)/jobs/$(jobId)/stop", args)
StopJob(a...; b...) = StopJob(a..., b)

"""
    TagResource()

 Tag resource with tag key and value. 

Required Parameters
{
  "resourceArn": " Resource arn used to tag resource. ",
  "tags": " Tags used to tag resource. "
}
"""
TagResource(resourceArn, tags) = amplify("POST", "/tags/$(resourceArn)")
TagResource(resourceArn, tags, args) = amplify("POST", "/tags/$(resourceArn)", args)
TagResource(a...; b...) = TagResource(a..., b)

"""
    UntagResource()

 Untag resource with resourceArn. 

Required Parameters
{
  "resourceArn": " Resource arn used to untag resource. ",
  "tagKeys": " Tag keys used to untag resource. "
}
"""
UntagResource(resourceArn, tagKeys) = amplify("DELETE", "/tags/$(resourceArn)")
UntagResource(resourceArn, tagKeys, args) = amplify("DELETE", "/tags/$(resourceArn)", args)
UntagResource(a...; b...) = UntagResource(a..., b)

"""
    UpdateApp()

 Updates an existing Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. "
}

Optional Parameters
{
  "accessToken": " Personal Access token for 3rd party source control system for an Amplify App, used to create webhook and read-only deploy key. Token is not stored. ",
  "autoBranchCreationConfig": " Automated branch creation branchConfig for the Amplify App. ",
  "autoBranchCreationPatterns": " Automated branch creation glob patterns for the Amplify App. ",
  "basicAuthCredentials": " Basic Authorization credentials for an Amplify App. ",
  "buildSpec": " BuildSpec for an Amplify App. ",
  "customRules": " Custom redirect / rewrite rules for an Amplify App. ",
  "description": " Description for an Amplify App. ",
  "enableAutoBranchCreation": " Enables automated branch creation for the Amplify App. ",
  "enableBasicAuth": " Enables Basic Authorization for an Amplify App. ",
  "enableBranchAutoBuild": " Enables branch auto-building for an Amplify App. ",
  "environmentVariables": " Environment Variables for an Amplify App. ",
  "iamServiceRoleArn": " IAM service role for an Amplify App. ",
  "name": " Name for an Amplify App. ",
  "oauthToken": " OAuth token for 3rd party source control system for an Amplify App, used to create webhook and read-only deploy key. OAuth token is not stored. ",
  "platform": " Platform for an Amplify App. ",
  "repository": " Repository for an Amplify App "
}
"""
UpdateApp(appId) = amplify("POST", "/apps/$(appId)")
UpdateApp(appId, args) = amplify("POST", "/apps/$(appId)", args)
UpdateApp(a...; b...) = UpdateApp(a..., b)

"""
    UpdateBranch()

 Updates a branch for an Amplify App. 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "branchName": " Name for the branch. "
}

Optional Parameters
{
  "backendEnvironmentArn": " ARN for a Backend Environment, part of an Amplify App. ",
  "basicAuthCredentials": " Basic Authorization credentials for the branch. ",
  "buildSpec": " BuildSpec for the branch. ",
  "description": " Description for the branch. ",
  "displayName": " Display name for a branch, will use as the default domain prefix. ",
  "enableAutoBuild": " Enables auto building for the branch. ",
  "enableBasicAuth": " Enables Basic Auth for the branch. ",
  "enableNotification": " Enables notifications for the branch. ",
  "enablePullRequestPreview": " Enables Pull Request Preview for this branch. ",
  "environmentVariables": " Environment Variables for the branch. ",
  "framework": " Framework for the branch. ",
  "pullRequestEnvironmentName": " The Amplify Environment name for the pull request. ",
  "stage": " Stage for the branch. ",
  "ttl": " The content TTL for the website in seconds. "
}
"""
UpdateBranch(appId, branchName) = amplify("POST", "/apps/$(appId)/branches/$(branchName)")
UpdateBranch(appId, branchName, args) = amplify("POST", "/apps/$(appId)/branches/$(branchName)", args)
UpdateBranch(a...; b...) = UpdateBranch(a..., b)

"""
    UpdateDomainAssociation()

 Create a new DomainAssociation on an App 

Required Parameters
{
  "appId": " Unique Id for an Amplify App. ",
  "domainName": " Name of the domain. ",
  "subDomainSettings": " Setting structure for the Subdomain. "
}

Optional Parameters
{
  "enableAutoSubDomain": " Enables automated creation of Subdomains for branches. (Currently not supported) "
}
"""
UpdateDomainAssociation(appId, domainName, subDomainSettings) = amplify("POST", "/apps/$(appId)/domains/$(domainName)")
UpdateDomainAssociation(appId, domainName, subDomainSettings, args) = amplify("POST", "/apps/$(appId)/domains/$(domainName)", args)
UpdateDomainAssociation(a...; b...) = UpdateDomainAssociation(a..., b)

"""
    UpdateWebhook()

 Update a webhook. 

Required Parameters
{
  "webhookId": " Unique Id for a webhook. "
}

Optional Parameters
{
  "branchName": " Name for a branch, part of an Amplify App. ",
  "description": " Description for a webhook. "
}
"""
UpdateWebhook(webhookId) = amplify("POST", "/webhooks/$(webhookId)")
UpdateWebhook(webhookId, args) = amplify("POST", "/webhooks/$(webhookId)", args)
UpdateWebhook(a...; b...) = UpdateWebhook(a..., b)
