# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: location
using AWS.Compat
using AWS.UUIDs

"""
    associate_tracker_consumer(consumer_arn, tracker_name)
    associate_tracker_consumer(consumer_arn, tracker_name, params::Dict{String,<:Any})

Creates an association between a geofence collection and a tracker resource. This allows
the tracker resource to communicate location data to the linked geofence collection.  You
can associate up to five geofence collections to each tracker resource.  Currently not
supported — Cross-account configurations, such as creating associations between a tracker
resource in one account and a geofence collection in another account.

# Arguments
- `consumer_arn`: The Amazon Resource Name (ARN) for the geofence collection to be
  associated to tracker resource. Used when you need to specify a resource across all AWS.
  Format example:
  arn:aws:geo:region:account-id:geofence-collection/ExampleGeofenceCollectionConsumer
- `tracker_name`: The name of the tracker resource to be associated with a geofence
  collection.

"""
function associate_tracker_consumer(
    ConsumerArn, TrackerName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/tracking/v0/trackers/$(TrackerName)/consumers",
        Dict{String,Any}("ConsumerArn" => ConsumerArn);
        aws_config=aws_config,
    )
end
function associate_tracker_consumer(
    ConsumerArn,
    TrackerName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/tracking/v0/trackers/$(TrackerName)/consumers",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ConsumerArn" => ConsumerArn), params)
        );
        aws_config=aws_config,
    )
end

"""
    batch_delete_device_position_history(device_ids, tracker_name)
    batch_delete_device_position_history(device_ids, tracker_name, params::Dict{String,<:Any})

Deletes the position history of one or more devices from a tracker resource.

# Arguments
- `device_ids`: Devices whose position history you want to delete.   For example, for two
  devices: “DeviceIds” : [DeviceId1,DeviceId2]
- `tracker_name`: The name of the tracker resource to delete the device position history
  from.

"""
function batch_delete_device_position_history(
    DeviceIds, TrackerName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/tracking/v0/trackers/$(TrackerName)/delete-positions",
        Dict{String,Any}("DeviceIds" => DeviceIds);
        aws_config=aws_config,
    )
end
function batch_delete_device_position_history(
    DeviceIds,
    TrackerName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/tracking/v0/trackers/$(TrackerName)/delete-positions",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("DeviceIds" => DeviceIds), params)
        );
        aws_config=aws_config,
    )
end

"""
    batch_delete_geofence(collection_name, geofence_ids)
    batch_delete_geofence(collection_name, geofence_ids, params::Dict{String,<:Any})

Deletes a batch of geofences from a geofence collection.  This operation deletes the
resource permanently.

# Arguments
- `collection_name`: The geofence collection storing the geofences to be deleted.
- `geofence_ids`: The batch of geofences to be deleted.

"""
function batch_delete_geofence(
    CollectionName, GeofenceIds; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/geofencing/v0/collections/$(CollectionName)/delete-geofences",
        Dict{String,Any}("GeofenceIds" => GeofenceIds);
        aws_config=aws_config,
    )
end
function batch_delete_geofence(
    CollectionName,
    GeofenceIds,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/geofencing/v0/collections/$(CollectionName)/delete-geofences",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("GeofenceIds" => GeofenceIds), params)
        );
        aws_config=aws_config,
    )
end

"""
    batch_evaluate_geofences(collection_name, device_position_updates)
    batch_evaluate_geofences(collection_name, device_position_updates, params::Dict{String,<:Any})

Evaluates device positions against the geofence geometries from a given geofence
collection. This operation always returns an empty response because geofences are
asynchronously evaluated. The evaluation determines if the device has entered or exited a
geofenced area, and then publishes one of the following events to Amazon EventBridge:
ENTER if Amazon Location determines that the tracked device has entered a geofenced area.
 EXIT if Amazon Location determines that the tracked device has exited a geofenced area.
The last geofence that a device was observed within is tracked for 30 days after the most
recent device position update.

# Arguments
- `collection_name`: The geofence collection used in evaluating the position of devices
  against its geofences.
- `device_position_updates`: Contains device details for each device to be evaluated
  against the given geofence collection.

"""
function batch_evaluate_geofences(
    CollectionName, DevicePositionUpdates; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/geofencing/v0/collections/$(CollectionName)/positions",
        Dict{String,Any}("DevicePositionUpdates" => DevicePositionUpdates);
        aws_config=aws_config,
    )
end
function batch_evaluate_geofences(
    CollectionName,
    DevicePositionUpdates,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/geofencing/v0/collections/$(CollectionName)/positions",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("DevicePositionUpdates" => DevicePositionUpdates),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    batch_get_device_position(device_ids, tracker_name)
    batch_get_device_position(device_ids, tracker_name, params::Dict{String,<:Any})

Lists the latest device positions for requested devices.

# Arguments
- `device_ids`: Devices whose position you want to retrieve.   For example, for two
  devices: device-ids=DeviceId1&amp;device-ids=DeviceId2
- `tracker_name`: The tracker resource retrieving the device position.

"""
function batch_get_device_position(
    DeviceIds, TrackerName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/tracking/v0/trackers/$(TrackerName)/get-positions",
        Dict{String,Any}("DeviceIds" => DeviceIds);
        aws_config=aws_config,
    )
end
function batch_get_device_position(
    DeviceIds,
    TrackerName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/tracking/v0/trackers/$(TrackerName)/get-positions",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("DeviceIds" => DeviceIds), params)
        );
        aws_config=aws_config,
    )
end

"""
    batch_put_geofence(collection_name, entries)
    batch_put_geofence(collection_name, entries, params::Dict{String,<:Any})

A batch request for storing geofence geometries into a given geofence collection, or
updates the geometry of an existing geofence if a geofence ID is included in the request.

# Arguments
- `collection_name`: The geofence collection storing the geofences.
- `entries`: The batch of geofences to be stored in a geofence collection.

"""
function batch_put_geofence(
    CollectionName, Entries; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/geofencing/v0/collections/$(CollectionName)/put-geofences",
        Dict{String,Any}("Entries" => Entries);
        aws_config=aws_config,
    )
end
function batch_put_geofence(
    CollectionName,
    Entries,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/geofencing/v0/collections/$(CollectionName)/put-geofences",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Entries" => Entries), params));
        aws_config=aws_config,
    )
end

"""
    batch_update_device_position(tracker_name, updates)
    batch_update_device_position(tracker_name, updates, params::Dict{String,<:Any})

Uploads position update data for one or more devices to a tracker resource. Amazon Location
uses the data when reporting the last known device position and position history.  Only one
position update is stored per sample time. Location data is sampled at a fixed rate of one
position per 30-second interval and retained for 30 days before it's deleted.

# Arguments
- `tracker_name`: The name of the tracker resource to update.
- `updates`: Contains the position update details for each device.

"""
function batch_update_device_position(
    TrackerName, Updates; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/tracking/v0/trackers/$(TrackerName)/positions",
        Dict{String,Any}("Updates" => Updates);
        aws_config=aws_config,
    )
end
function batch_update_device_position(
    TrackerName,
    Updates,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/tracking/v0/trackers/$(TrackerName)/positions",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Updates" => Updates), params));
        aws_config=aws_config,
    )
end

"""
    calculate_route(calculator_name, departure_position, destination_position)
    calculate_route(calculator_name, departure_position, destination_position, params::Dict{String,<:Any})

 Calculates a route given the following required parameters: DeparturePostiton and
DestinationPosition. Requires that you first create a route calculator resource  By
default, a request that doesn't specify a departure time uses the best time of day to
travel with the best traffic conditions when calculating the route. Additional options
include:    Specifying a departure time using either DepartureTime or DepartureNow. This
calculates a route based on predictive traffic data at the given time.   You can't specify
both DepartureTime and DepartureNow in a single request. Specifying both parameters returns
an error message.     Specifying a travel mode using TravelMode. This lets you specify an
additional route preference such as CarModeOptions if traveling by Car, or TruckModeOptions
if traveling by Truck.

# Arguments
- `calculator_name`: The name of the route calculator resource that you want to use to
  calculate a route.
- `departure_position`: The start position for the route. Defined in WGS 84 format:
  [longitude, latitude].   For example, [-123.115, 49.285]     If you specify a departure
  that's not located on a road, Amazon Location moves the position to the nearest road.
  Valid Values: [-180 to 180,-90 to 90]
- `destination_position`: The finish position for the route. Defined in WGS 84 format:
  [longitude, latitude].    For example, [-122.339, 47.615]     If you specify a destination
  that's not located on a road, Amazon Location moves the position to the nearest road.
  Valid Values: [-180 to 180,-90 to 90]

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CarModeOptions"`: Specifies route preferences when traveling by Car, such as avoiding
  routes that use ferries or tolls. Requirements: TravelMode must be specified as Car.
- `"DepartNow"`: Sets the time of departure as the current time. Uses the current time to
  calculate a route. Otherwise, the best time of day to travel with the best traffic
  conditions is used to calculate the route. Default Value: false  Valid Values: false | true
- `"DepartureTime"`: Specifies the desired time of departure. Uses the given time to
  calculate a route. Otherwise, the best time of day to travel with the best traffic
  conditions is used to calculate the route.  Setting a departure time in the past returns a
  400 ValidationException error.    In ISO 8601 format: YYYY-MM-DDThh:mm:ss.sssZ. For
  example, 2020–07-2T12:15:20.000Z+01:00
- `"DistanceUnit"`: Set the unit system to specify the distance. Default Value: Kilometers
- `"IncludeLegGeometry"`: Set to include the geometry details in the result for each path
  between a pair of positions. Default Value: false  Valid Values: false | true
- `"TravelMode"`: Specifies the mode of transport when calculating a route. Used in
  estimating the speed of travel and road compatibility. The TravelMode you specify
  determines how you specify route preferences:    If traveling by Car use the CarModeOptions
  parameter.   If traveling by Truck use the TruckModeOptions parameter.   Default Value: Car
- `"TruckModeOptions"`: Specifies route preferences when traveling by Truck, such as
  avoiding routes that use ferries or tolls, and truck specifications to consider when
  choosing an optimal road. Requirements: TravelMode must be specified as Truck.
- `"WaypointPositions"`: Specifies an ordered list of up to 23 intermediate positions to
  include along a route between the departure position and destination position.    For
  example, from the DeparturePosition [-123.115, 49.285], the route follows the order that
  the waypoint positions are given [[-122.757, 49.0021],[-122.349, 47.620]]     If you
  specify a waypoint position that's not located on a road, Amazon Location moves the
  position to the nearest road.  Specifying more than 23 waypoints returns a 400
  ValidationException error.  Valid Values: [-180 to 180,-90 to 90]
"""
function calculate_route(
    CalculatorName,
    DeparturePosition,
    DestinationPosition;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/routes/v0/calculators/$(CalculatorName)/calculate/route",
        Dict{String,Any}(
            "DeparturePosition" => DeparturePosition,
            "DestinationPosition" => DestinationPosition,
        );
        aws_config=aws_config,
    )
end
function calculate_route(
    CalculatorName,
    DeparturePosition,
    DestinationPosition,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/routes/v0/calculators/$(CalculatorName)/calculate/route",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DeparturePosition" => DeparturePosition,
                    "DestinationPosition" => DestinationPosition,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_geofence_collection(collection_name, pricing_plan)
    create_geofence_collection(collection_name, pricing_plan, params::Dict{String,<:Any})

Creates a geofence collection, which manages and stores geofences.

# Arguments
- `collection_name`: A custom name for the geofence collection. Requirements:   Contain
  only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and
  underscores (_).    Must be a unique geofence collection name.   No spaces allowed. For
  example, ExampleGeofenceCollection.
- `pricing_plan`: Specifies the pricing plan for the geofence collection. For additional
  details and restrictions on each pricing plan option, see the Amazon Location Service
  pricing page.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: An optional description for the geofence collection.
- `"KmsKeyId"`: A key identifier for an AWS KMS customer managed key. Enter a key ID, key
  ARN, alias name, or alias ARN.
- `"PricingPlanDataSource"`: Specifies the data provider for the geofence collection.
  Required value for the following pricing plans: MobileAssetTracking | MobileAssetManagement
     For more information about Data Providers, and Pricing plans, see the Amazon Location
  Service product page.  Amazon Location Service only uses PricingPlanDataSource to calculate
  billing for your geofence collection. Your data won't be shared with the data provider, and
  will remain in your AWS account or Region unless you move it.  Valid Values: Esri | Here
- `"Tags"`: Applies one or more tags to the geofence collection. A tag is a key-value pair
  helps manage, identify, search, and filter your resources by labelling them. Format:
  \"key\" : \"value\"  Restrictions:   Maximum 50 tags per resource   Each resource tag must
  be unique with a maximum of one value.   Maximum key length: 128 Unicode characters in
  UTF-8   Maximum value length: 256 Unicode characters in UTF-8   Can use alphanumeric
  characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @.
"""
function create_geofence_collection(
    CollectionName, PricingPlan; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/geofencing/v0/collections",
        Dict{String,Any}("CollectionName" => CollectionName, "PricingPlan" => PricingPlan);
        aws_config=aws_config,
    )
end
function create_geofence_collection(
    CollectionName,
    PricingPlan,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/geofencing/v0/collections",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "CollectionName" => CollectionName, "PricingPlan" => PricingPlan
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_map(configuration, map_name, pricing_plan)
    create_map(configuration, map_name, pricing_plan, params::Dict{String,<:Any})

Creates a map resource in your AWS account, which provides map tiles of different styles
sourced from global location data providers.

# Arguments
- `configuration`: Specifies the map style selected from an available data provider.
- `map_name`: The name for the map resource. Requirements:   Must contain only alphanumeric
  characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_).    Must be
  a unique map resource name.    No spaces allowed. For example, ExampleMap.
- `pricing_plan`: Specifies the pricing plan for your map resource. For additional details
  and restrictions on each pricing plan option, see the Amazon Location Service pricing page.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: An optional description for the map resource.
- `"Tags"`: Applies one or more tags to the map resource. A tag is a key-value pair helps
  manage, identify, search, and filter your resources by labelling them. Format: \"key\" :
  \"value\"  Restrictions:   Maximum 50 tags per resource   Each resource tag must be unique
  with a maximum of one value.   Maximum key length: 128 Unicode characters in UTF-8
  Maximum value length: 256 Unicode characters in UTF-8   Can use alphanumeric characters
  (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @.
"""
function create_map(
    Configuration, MapName, PricingPlan; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/maps/v0/maps",
        Dict{String,Any}(
            "Configuration" => Configuration,
            "MapName" => MapName,
            "PricingPlan" => PricingPlan,
        );
        aws_config=aws_config,
    )
end
function create_map(
    Configuration,
    MapName,
    PricingPlan,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/maps/v0/maps",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Configuration" => Configuration,
                    "MapName" => MapName,
                    "PricingPlan" => PricingPlan,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_place_index(data_source, index_name, pricing_plan)
    create_place_index(data_source, index_name, pricing_plan, params::Dict{String,<:Any})

Creates a place index resource in your AWS account, which supports functions with
geospatial data sourced from your chosen data provider.

# Arguments
- `data_source`: Specifies the data provider of geospatial data.  This field is
  case-sensitive. Enter the valid values as shown. For example, entering HERE returns an
  error.  Valid values include:    Esri – For additional information about Esri's coverage
  in your region of interest, see Esri details on geocoding coverage.    Here – For
  additional information about HERE Technologies's coverage in your region of interest, see
  HERE details on goecoding coverage.  Place index resources using HERE Technologies as a
  data provider can't store results for locations in Japan. For more information, see the AWS
  Service Terms for Amazon Location Service.    For additional information , see Data
  providers on the Amazon Location Service Developer Guide.
- `index_name`: The name of the place index resource.  Requirements:   Contain only
  alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores
  (_).   Must be a unique place index resource name.   No spaces allowed. For example,
  ExamplePlaceIndex.
- `pricing_plan`: Specifies the pricing plan for your place index resource. For additional
  details and restrictions on each pricing plan option, see the Amazon Location Service
  pricing page.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DataSourceConfiguration"`: Specifies the data storage option requesting Places.
- `"Description"`: The optional description for the place index resource.
- `"Tags"`: Applies one or more tags to the place index resource. A tag is a key-value pair
  helps manage, identify, search, and filter your resources by labelling them. Format:
  \"key\" : \"value\"  Restrictions:   Maximum 50 tags per resource   Each resource tag must
  be unique with a maximum of one value.   Maximum key length: 128 Unicode characters in
  UTF-8   Maximum value length: 256 Unicode characters in UTF-8   Can use alphanumeric
  characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @.
"""
function create_place_index(
    DataSource, IndexName, PricingPlan; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/places/v0/indexes",
        Dict{String,Any}(
            "DataSource" => DataSource,
            "IndexName" => IndexName,
            "PricingPlan" => PricingPlan,
        );
        aws_config=aws_config,
    )
end
function create_place_index(
    DataSource,
    IndexName,
    PricingPlan,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/places/v0/indexes",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DataSource" => DataSource,
                    "IndexName" => IndexName,
                    "PricingPlan" => PricingPlan,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_route_calculator(calculator_name, data_source, pricing_plan)
    create_route_calculator(calculator_name, data_source, pricing_plan, params::Dict{String,<:Any})

Creates a route calculator resource in your AWS account. You can send requests to a route
calculator resource to estimate travel time, distance, and get directions. A route
calculator sources traffic and road network data from your chosen data provider.

# Arguments
- `calculator_name`: The name of the route calculator resource.  Requirements:   Can use
  alphanumeric characters (A–Z, a–z, 0–9) , hyphens (-), periods (.), and underscores
  (_).   Must be a unique Route calculator resource name.   No spaces allowed. For example,
  ExampleRouteCalculator.
- `data_source`: Specifies the data provider of traffic and road network data.  This field
  is case-sensitive. Enter the valid values as shown. For example, entering HERE returns an
  error.  Valid values include:    Esri – For additional information about Esri's coverage
  in your region of interest, see Esri details on street networks and traffic coverage.
  Here – For additional information about HERE Technologies's coverage in your region of
  interest, see HERE car routing coverage and HERE truck routing coverage.   For additional
  information , see Data providers on the Amazon Location Service Developer Guide.
- `pricing_plan`: Specifies the pricing plan for your route calculator resource. For
  additional details and restrictions on each pricing plan option, see Amazon Location
  Service pricing.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: The optional description for the route calculator resource.
- `"Tags"`: Applies one or more tags to the route calculator resource. A tag is a key-value
  pair helps manage, identify, search, and filter your resources by labelling them.   For
  example: { \"tag1\" : \"value1\", \"tag2\" : \"value2\"}   Format: \"key\" : \"value\"
  Restrictions:   Maximum 50 tags per resource   Each resource tag must be unique with a
  maximum of one value.   Maximum key length: 128 Unicode characters in UTF-8   Maximum value
  length: 256 Unicode characters in UTF-8   Can use alphanumeric characters (A–Z, a–z,
  0–9), and the following characters: + - = . _ : / @.
"""
function create_route_calculator(
    CalculatorName,
    DataSource,
    PricingPlan;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/routes/v0/calculators",
        Dict{String,Any}(
            "CalculatorName" => CalculatorName,
            "DataSource" => DataSource,
            "PricingPlan" => PricingPlan,
        );
        aws_config=aws_config,
    )
end
function create_route_calculator(
    CalculatorName,
    DataSource,
    PricingPlan,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/routes/v0/calculators",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "CalculatorName" => CalculatorName,
                    "DataSource" => DataSource,
                    "PricingPlan" => PricingPlan,
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    create_tracker(pricing_plan, tracker_name)
    create_tracker(pricing_plan, tracker_name, params::Dict{String,<:Any})

Creates a tracker resource in your AWS account, which lets you retrieve current and
historical location of devices.

# Arguments
- `pricing_plan`: Specifies the pricing plan for the tracker resource. For additional
  details and restrictions on each pricing plan option, see the Amazon Location Service
  pricing page.
- `tracker_name`: The name for the tracker resource. Requirements:   Contain only
  alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-), periods (.), and underscores (_).
  Must be a unique tracker resource name.   No spaces allowed. For example, ExampleTracker.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: An optional description for the tracker resource.
- `"KmsKeyId"`: A key identifier for an AWS KMS customer managed key. Enter a key ID, key
  ARN, alias name, or alias ARN.
- `"PricingPlanDataSource"`: Specifies the data provider for the tracker resource.
  Required value for the following pricing plans: MobileAssetTracking | MobileAssetManagement
     For more information about Data Providers, and Pricing plans, see the Amazon Location
  Service product page.  Amazon Location Service only uses PricingPlanDataSource to calculate
  billing for your tracker resource. Your data will not be shared with the data provider, and
  will remain in your AWS account or Region unless you move it.  Valid Values: Esri | Here
- `"Tags"`: Applies one or more tags to the tracker resource. A tag is a key-value pair
  helps manage, identify, search, and filter your resources by labelling them. Format:
  \"key\" : \"value\"  Restrictions:   Maximum 50 tags per resource   Each resource tag must
  be unique with a maximum of one value.   Maximum key length: 128 Unicode characters in
  UTF-8   Maximum value length: 256 Unicode characters in UTF-8   Can use alphanumeric
  characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @.
"""
function create_tracker(
    PricingPlan, TrackerName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/tracking/v0/trackers",
        Dict{String,Any}("PricingPlan" => PricingPlan, "TrackerName" => TrackerName);
        aws_config=aws_config,
    )
end
function create_tracker(
    PricingPlan,
    TrackerName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/tracking/v0/trackers",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "PricingPlan" => PricingPlan, "TrackerName" => TrackerName
                ),
                params,
            ),
        );
        aws_config=aws_config,
    )
end

"""
    delete_geofence_collection(collection_name)
    delete_geofence_collection(collection_name, params::Dict{String,<:Any})

Deletes a geofence collection from your AWS account.  This operation deletes the resource
permanently. If the geofence collection is the target of a tracker resource, the devices
will no longer be monitored.

# Arguments
- `collection_name`: The name of the geofence collection to be deleted.

"""
function delete_geofence_collection(
    CollectionName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "DELETE", "/geofencing/v0/collections/$(CollectionName)"; aws_config=aws_config
    )
end
function delete_geofence_collection(
    CollectionName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "DELETE",
        "/geofencing/v0/collections/$(CollectionName)",
        params;
        aws_config=aws_config,
    )
end

"""
    delete_map(map_name)
    delete_map(map_name, params::Dict{String,<:Any})

Deletes a map resource from your AWS account.  This operation deletes the resource
permanently. If the map is being used in an application, the map may not render.

# Arguments
- `map_name`: The name of the map resource to be deleted.

"""
function delete_map(MapName; aws_config::AbstractAWSConfig=global_aws_config())
    return location("DELETE", "/maps/v0/maps/$(MapName)"; aws_config=aws_config)
end
function delete_map(
    MapName, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location("DELETE", "/maps/v0/maps/$(MapName)", params; aws_config=aws_config)
end

"""
    delete_place_index(index_name)
    delete_place_index(index_name, params::Dict{String,<:Any})

Deletes a place index resource from your AWS account.  This operation deletes the resource
permanently.

# Arguments
- `index_name`: The name of the place index resource to be deleted.

"""
function delete_place_index(IndexName; aws_config::AbstractAWSConfig=global_aws_config())
    return location("DELETE", "/places/v0/indexes/$(IndexName)"; aws_config=aws_config)
end
function delete_place_index(
    IndexName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "DELETE", "/places/v0/indexes/$(IndexName)", params; aws_config=aws_config
    )
end

"""
    delete_route_calculator(calculator_name)
    delete_route_calculator(calculator_name, params::Dict{String,<:Any})

Deletes a route calculator resource from your AWS account.  This operation deletes the
resource permanently.

# Arguments
- `calculator_name`: The name of the route calculator resource to be deleted.

"""
function delete_route_calculator(
    CalculatorName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "DELETE", "/routes/v0/calculators/$(CalculatorName)"; aws_config=aws_config
    )
end
function delete_route_calculator(
    CalculatorName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "DELETE", "/routes/v0/calculators/$(CalculatorName)", params; aws_config=aws_config
    )
end

"""
    delete_tracker(tracker_name)
    delete_tracker(tracker_name, params::Dict{String,<:Any})

Deletes a tracker resource from your AWS account.  This operation deletes the resource
permanently. If the tracker resource is in use, you may encounter an error. Make sure that
the target resource isn't a dependency for your applications.

# Arguments
- `tracker_name`: The name of the tracker resource to be deleted.

"""
function delete_tracker(TrackerName; aws_config::AbstractAWSConfig=global_aws_config())
    return location("DELETE", "/tracking/v0/trackers/$(TrackerName)"; aws_config=aws_config)
end
function delete_tracker(
    TrackerName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "DELETE", "/tracking/v0/trackers/$(TrackerName)", params; aws_config=aws_config
    )
end

"""
    describe_geofence_collection(collection_name)
    describe_geofence_collection(collection_name, params::Dict{String,<:Any})

Retrieves the geofence collection details.

# Arguments
- `collection_name`: The name of the geofence collection.

"""
function describe_geofence_collection(
    CollectionName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "GET", "/geofencing/v0/collections/$(CollectionName)"; aws_config=aws_config
    )
end
function describe_geofence_collection(
    CollectionName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "GET", "/geofencing/v0/collections/$(CollectionName)", params; aws_config=aws_config
    )
end

"""
    describe_map(map_name)
    describe_map(map_name, params::Dict{String,<:Any})

Retrieves the map resource details.

# Arguments
- `map_name`: The name of the map resource.

"""
function describe_map(MapName; aws_config::AbstractAWSConfig=global_aws_config())
    return location("GET", "/maps/v0/maps/$(MapName)"; aws_config=aws_config)
end
function describe_map(
    MapName, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location("GET", "/maps/v0/maps/$(MapName)", params; aws_config=aws_config)
end

"""
    describe_place_index(index_name)
    describe_place_index(index_name, params::Dict{String,<:Any})

Retrieves the place index resource details.

# Arguments
- `index_name`: The name of the place index resource.

"""
function describe_place_index(IndexName; aws_config::AbstractAWSConfig=global_aws_config())
    return location("GET", "/places/v0/indexes/$(IndexName)"; aws_config=aws_config)
end
function describe_place_index(
    IndexName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location("GET", "/places/v0/indexes/$(IndexName)", params; aws_config=aws_config)
end

"""
    describe_route_calculator(calculator_name)
    describe_route_calculator(calculator_name, params::Dict{String,<:Any})

Retrieves the route calculator resource details.

# Arguments
- `calculator_name`: The name of the route calculator resource.

"""
function describe_route_calculator(
    CalculatorName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "GET", "/routes/v0/calculators/$(CalculatorName)"; aws_config=aws_config
    )
end
function describe_route_calculator(
    CalculatorName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "GET", "/routes/v0/calculators/$(CalculatorName)", params; aws_config=aws_config
    )
end

"""
    describe_tracker(tracker_name)
    describe_tracker(tracker_name, params::Dict{String,<:Any})

Retrieves the tracker resource details.

# Arguments
- `tracker_name`: The name of the tracker resource.

"""
function describe_tracker(TrackerName; aws_config::AbstractAWSConfig=global_aws_config())
    return location("GET", "/tracking/v0/trackers/$(TrackerName)"; aws_config=aws_config)
end
function describe_tracker(
    TrackerName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "GET", "/tracking/v0/trackers/$(TrackerName)", params; aws_config=aws_config
    )
end

"""
    disassociate_tracker_consumer(consumer_arn, tracker_name)
    disassociate_tracker_consumer(consumer_arn, tracker_name, params::Dict{String,<:Any})

Removes the association between a tracker resource and a geofence collection.  Once you
unlink a tracker resource from a geofence collection, the tracker positions will no longer
be automatically evaluated against geofences.

# Arguments
- `consumer_arn`: The Amazon Resource Name (ARN) for the geofence collection to be
  disassociated from the tracker resource. Used when you need to specify a resource across
  all AWS.    Format example:
  arn:aws:geo:region:account-id:geofence-collection/ExampleGeofenceCollectionConsumer
- `tracker_name`: The name of the tracker resource to be dissociated from the consumer.

"""
function disassociate_tracker_consumer(
    ConsumerArn, TrackerName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "DELETE",
        "/tracking/v0/trackers/$(TrackerName)/consumers/$(ConsumerArn)";
        aws_config=aws_config,
    )
end
function disassociate_tracker_consumer(
    ConsumerArn,
    TrackerName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "DELETE",
        "/tracking/v0/trackers/$(TrackerName)/consumers/$(ConsumerArn)",
        params;
        aws_config=aws_config,
    )
end

"""
    get_device_position(device_id, tracker_name)
    get_device_position(device_id, tracker_name, params::Dict{String,<:Any})

Retrieves a device's most recent position according to its sample time.  Device positions
are deleted after 30 days.

# Arguments
- `device_id`: The device whose position you want to retrieve.
- `tracker_name`: The tracker resource receiving the position update.

"""
function get_device_position(
    DeviceId, TrackerName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "GET",
        "/tracking/v0/trackers/$(TrackerName)/devices/$(DeviceId)/positions/latest";
        aws_config=aws_config,
    )
end
function get_device_position(
    DeviceId,
    TrackerName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "GET",
        "/tracking/v0/trackers/$(TrackerName)/devices/$(DeviceId)/positions/latest",
        params;
        aws_config=aws_config,
    )
end

"""
    get_device_position_history(device_id, tracker_name)
    get_device_position_history(device_id, tracker_name, params::Dict{String,<:Any})

Retrieves the device position history from a tracker resource within a specified range of
time.  Device positions are deleted after 30 days.

# Arguments
- `device_id`: The device whose position history you want to retrieve.
- `tracker_name`: The tracker resource receiving the request for the device position
  history.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"EndTimeExclusive"`: Specify the end time for the position history in  ISO 8601 format:
  YYYY-MM-DDThh:mm:ss.sssZ. By default, the value will be the time that the request is made.
  Requirement:   The time specified for EndTimeExclusive must be after the time for
  StartTimeInclusive.
- `"NextToken"`: The pagination token specifying which page of results to return in the
  response. If no token is provided, the default page is the first page.  Default value: null
- `"StartTimeInclusive"`: Specify the start time for the position history in  ISO 8601
  format: YYYY-MM-DDThh:mm:ss.sssZ. By default, the value will be 24 hours prior to the time
  that the request is made. Requirement:   The time specified for StartTimeInclusive must be
  before EndTimeExclusive.
"""
function get_device_position_history(
    DeviceId, TrackerName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/tracking/v0/trackers/$(TrackerName)/devices/$(DeviceId)/list-positions";
        aws_config=aws_config,
    )
end
function get_device_position_history(
    DeviceId,
    TrackerName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/tracking/v0/trackers/$(TrackerName)/devices/$(DeviceId)/list-positions",
        params;
        aws_config=aws_config,
    )
end

"""
    get_geofence(collection_name, geofence_id)
    get_geofence(collection_name, geofence_id, params::Dict{String,<:Any})

Retrieves the geofence details from a geofence collection.

# Arguments
- `collection_name`: The geofence collection storing the target geofence.
- `geofence_id`: The geofence you're retrieving details for.

"""
function get_geofence(
    CollectionName, GeofenceId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "GET",
        "/geofencing/v0/collections/$(CollectionName)/geofences/$(GeofenceId)";
        aws_config=aws_config,
    )
end
function get_geofence(
    CollectionName,
    GeofenceId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "GET",
        "/geofencing/v0/collections/$(CollectionName)/geofences/$(GeofenceId)",
        params;
        aws_config=aws_config,
    )
end

"""
    get_map_glyphs(font_stack, font_unicode_range, map_name)
    get_map_glyphs(font_stack, font_unicode_range, map_name, params::Dict{String,<:Any})

Retrieves glyphs used to display labels on a map.

# Arguments
- `font_stack`: A comma-separated list of fonts to load glyphs from in order of preference.
  For example, Noto Sans Regular, Arial Unicode. Valid fonts for Esri styles:
  VectorEsriDarkGrayCanvas – Ubuntu Medium Italic | Ubuntu Medium | Ubuntu Italic | Ubuntu
  Regular | Ubuntu Bold    VectorEsriLightGrayCanvas – Ubuntu Italic | Ubuntu Regular |
  Ubuntu Light | Ubuntu Bold    VectorEsriTopographic – Noto Sans Italic | Noto Sans
  Regular | Noto Sans Bold | Noto Serif Regular | Roboto Condensed Light Italic
  VectorEsriStreets – Arial Regular | Arial Italic | Arial Bold    VectorEsriNavigation –
  Arial Regular | Arial Italic | Arial Bold    Valid fonts for HERE Technologies styles:
  VectorHereBerlin – Fira GO Regular | Fira GO Bold
- `font_unicode_range`: A Unicode range of characters to download glyphs for. Each response
  will contain 256 characters. For example, 0–255 includes all characters from range U+0000
  to 00FF. Must be aligned to multiples of 256.
- `map_name`: The map resource associated with the glyph ﬁle.

"""
function get_map_glyphs(
    FontStack, FontUnicodeRange, MapName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "GET",
        "/maps/v0/maps/$(MapName)/glyphs/$(FontStack)/$(FontUnicodeRange)";
        aws_config=aws_config,
    )
end
function get_map_glyphs(
    FontStack,
    FontUnicodeRange,
    MapName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "GET",
        "/maps/v0/maps/$(MapName)/glyphs/$(FontStack)/$(FontUnicodeRange)",
        params;
        aws_config=aws_config,
    )
end

"""
    get_map_sprites(file_name, map_name)
    get_map_sprites(file_name, map_name, params::Dict{String,<:Any})

Retrieves the sprite sheet corresponding to a map resource. The sprite sheet is a PNG image
paired with a JSON document describing the offsets of individual icons that will be
displayed on a rendered map.

# Arguments
- `file_name`: The name of the sprite ﬁle. Use the following ﬁle names for the sprite
  sheet:    sprites.png     sprites@2x.png for high pixel density displays   For the JSON
  document contain image offsets. Use the following ﬁle names:    sprites.json
  sprites@2x.json for high pixel density displays
- `map_name`: The map resource associated with the sprite ﬁle.

"""
function get_map_sprites(
    FileName, MapName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "GET", "/maps/v0/maps/$(MapName)/sprites/$(FileName)"; aws_config=aws_config
    )
end
function get_map_sprites(
    FileName,
    MapName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "GET", "/maps/v0/maps/$(MapName)/sprites/$(FileName)", params; aws_config=aws_config
    )
end

"""
    get_map_style_descriptor(map_name)
    get_map_style_descriptor(map_name, params::Dict{String,<:Any})

Retrieves the map style descriptor from a map resource.  The style descriptor contains
speciﬁcations on how features render on a map. For example, what data to display, what
order to display the data in, and the style for the data. Style descriptors follow the
Mapbox Style Specification.

# Arguments
- `map_name`: The map resource to retrieve the style descriptor from.

"""
function get_map_style_descriptor(
    MapName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "GET", "/maps/v0/maps/$(MapName)/style-descriptor"; aws_config=aws_config
    )
end
function get_map_style_descriptor(
    MapName, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "GET", "/maps/v0/maps/$(MapName)/style-descriptor", params; aws_config=aws_config
    )
end

"""
    get_map_tile(map_name, x, y, z)
    get_map_tile(map_name, x, y, z, params::Dict{String,<:Any})

Retrieves a vector data tile from the map resource. Map tiles are used by clients to render
a map. they're addressed using a grid arrangement with an X coordinate, Y coordinate, and Z
(zoom) level.  The origin (0, 0) is the top left of the map. Increasing the zoom level by 1
doubles both the X and Y dimensions, so a tile containing data for the entire world at
(0/0/0) will be split into 4 tiles at zoom 1 (1/0/0, 1/0/1, 1/1/0, 1/1/1).

# Arguments
- `map_name`: The map resource to retrieve the map tiles from.
- `x`: The X axis value for the map tile.
- `y`: The Y axis value for the map tile.
- `z`: The zoom value for the map tile.

"""
function get_map_tile(MapName, X, Y, Z; aws_config::AbstractAWSConfig=global_aws_config())
    return location(
        "GET", "/maps/v0/maps/$(MapName)/tiles/$(Z)/$(X)/$(Y)"; aws_config=aws_config
    )
end
function get_map_tile(
    MapName,
    X,
    Y,
    Z,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "GET",
        "/maps/v0/maps/$(MapName)/tiles/$(Z)/$(X)/$(Y)",
        params;
        aws_config=aws_config,
    )
end

"""
    list_device_positions(tracker_name)
    list_device_positions(tracker_name, params::Dict{String,<:Any})

A batch request to retrieve all device positions.

# Arguments
- `tracker_name`: The tracker resource containing the requested devices.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: An optional limit for the number of entries returned in a single call.
  Default value: 100
- `"NextToken"`: The pagination token specifying which page of results to return in the
  response. If no token is provided, the default page is the first page. Default value: null
"""
function list_device_positions(
    TrackerName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST", "/tracking/v0/trackers/$(TrackerName)/list-positions"; aws_config=aws_config
    )
end
function list_device_positions(
    TrackerName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/tracking/v0/trackers/$(TrackerName)/list-positions",
        params;
        aws_config=aws_config,
    )
end

"""
    list_geofence_collections()
    list_geofence_collections(params::Dict{String,<:Any})

Lists geofence collections in your AWS account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: An optional limit for the number of resources returned in a single call.
  Default value: 100
- `"NextToken"`: The pagination token specifying which page of results to return in the
  response. If no token is provided, the default page is the first page.  Default value: null
"""
function list_geofence_collections(; aws_config::AbstractAWSConfig=global_aws_config())
    return location("POST", "/geofencing/v0/list-collections"; aws_config=aws_config)
end
function list_geofence_collections(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST", "/geofencing/v0/list-collections", params; aws_config=aws_config
    )
end

"""
    list_geofences(collection_name)
    list_geofences(collection_name, params::Dict{String,<:Any})

Lists geofences stored in a given geofence collection.

# Arguments
- `collection_name`: The name of the geofence collection storing the list of geofences.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"NextToken"`: The pagination token specifying which page of results to return in the
  response. If no token is provided, the default page is the first page.  Default value: null
"""
function list_geofences(CollectionName; aws_config::AbstractAWSConfig=global_aws_config())
    return location(
        "POST",
        "/geofencing/v0/collections/$(CollectionName)/list-geofences";
        aws_config=aws_config,
    )
end
function list_geofences(
    CollectionName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/geofencing/v0/collections/$(CollectionName)/list-geofences",
        params;
        aws_config=aws_config,
    )
end

"""
    list_maps()
    list_maps(params::Dict{String,<:Any})

Lists map resources in your AWS account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: An optional limit for the number of resources returned in a single call.
  Default value: 100
- `"NextToken"`: The pagination token specifying which page of results to return in the
  response. If no token is provided, the default page is the first page. Default value: null
"""
function list_maps(; aws_config::AbstractAWSConfig=global_aws_config())
    return location("POST", "/maps/v0/list-maps"; aws_config=aws_config)
end
function list_maps(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location("POST", "/maps/v0/list-maps", params; aws_config=aws_config)
end

"""
    list_place_indexes()
    list_place_indexes(params::Dict{String,<:Any})

Lists place index resources in your AWS account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: An optional limit for the maximum number of results returned in a single
  call. Default value: 100
- `"NextToken"`: The pagination token specifying which page of results to return in the
  response. If no token is provided, the default page is the first page. Default value: null
"""
function list_place_indexes(; aws_config::AbstractAWSConfig=global_aws_config())
    return location("POST", "/places/v0/list-indexes"; aws_config=aws_config)
end
function list_place_indexes(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location("POST", "/places/v0/list-indexes", params; aws_config=aws_config)
end

"""
    list_route_calculators()
    list_route_calculators(params::Dict{String,<:Any})

Lists route calculator resources in your AWS account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: An optional maximum number of results returned in a single call. Default
  Value: 100
- `"NextToken"`: The pagination token specifying which page of results to return in the
  response. If no token is provided, the default page is the first page. Default Value: null
"""
function list_route_calculators(; aws_config::AbstractAWSConfig=global_aws_config())
    return location("POST", "/routes/v0/list-calculators"; aws_config=aws_config)
end
function list_route_calculators(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location("POST", "/routes/v0/list-calculators", params; aws_config=aws_config)
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Returns a list of tags that are applied to the specified Amazon Location resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource whose tags you want to
  retrieve.   Format example: arn:aws:geo:region:account-id:resourcetype/ExampleResource

"""
function list_tags_for_resource(
    ResourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location("GET", "/tags/$(ResourceArn)"; aws_config=aws_config)
end
function list_tags_for_resource(
    ResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location("GET", "/tags/$(ResourceArn)", params; aws_config=aws_config)
end

"""
    list_tracker_consumers(tracker_name)
    list_tracker_consumers(tracker_name, params::Dict{String,<:Any})

Lists geofence collections currently associated to the given tracker resource.

# Arguments
- `tracker_name`: The tracker resource whose associated geofence collections you want to
  list.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: An optional limit for the number of resources returned in a single call.
  Default value: 100
- `"NextToken"`: The pagination token specifying which page of results to return in the
  response. If no token is provided, the default page is the first page.  Default value: null
"""
function list_tracker_consumers(
    TrackerName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST", "/tracking/v0/trackers/$(TrackerName)/list-consumers"; aws_config=aws_config
    )
end
function list_tracker_consumers(
    TrackerName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/tracking/v0/trackers/$(TrackerName)/list-consumers",
        params;
        aws_config=aws_config,
    )
end

"""
    list_trackers()
    list_trackers(params::Dict{String,<:Any})

Lists tracker resources in your AWS account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: An optional limit for the number of resources returned in a single call.
  Default value: 100
- `"NextToken"`: The pagination token specifying which page of results to return in the
  response. If no token is provided, the default page is the first page.  Default value: null
"""
function list_trackers(; aws_config::AbstractAWSConfig=global_aws_config())
    return location("POST", "/tracking/v0/list-trackers"; aws_config=aws_config)
end
function list_trackers(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location("POST", "/tracking/v0/list-trackers", params; aws_config=aws_config)
end

"""
    put_geofence(collection_name, geofence_id, geometry)
    put_geofence(collection_name, geofence_id, geometry, params::Dict{String,<:Any})

Stores a geofence geometry in a given geofence collection, or updates the geometry of an
existing geofence if a geofence ID is included in the request.

# Arguments
- `collection_name`: The geofence collection to store the geofence in.
- `geofence_id`: An identifier for the geofence. For example, ExampleGeofence-1.
- `geometry`: Contains the polygon details to specify the position of the geofence.  Each
  geofence polygon can have a maximum of 1,000 vertices.

"""
function put_geofence(
    CollectionName, GeofenceId, Geometry; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "PUT",
        "/geofencing/v0/collections/$(CollectionName)/geofences/$(GeofenceId)",
        Dict{String,Any}("Geometry" => Geometry);
        aws_config=aws_config,
    )
end
function put_geofence(
    CollectionName,
    GeofenceId,
    Geometry,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "PUT",
        "/geofencing/v0/collections/$(CollectionName)/geofences/$(GeofenceId)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("Geometry" => Geometry), params)
        );
        aws_config=aws_config,
    )
end

"""
    search_place_index_for_position(index_name, position)
    search_place_index_for_position(index_name, position, params::Dict{String,<:Any})

Reverse geocodes a given coordinate and returns a legible address. Allows you to search for
Places or points of interest near a given position.

# Arguments
- `index_name`: The name of the place index resource you want to use for the search.
- `position`: Specifies a coordinate for the query defined by a longitude, and latitude.
  The first position is the X coordinate, or longitude.   The second position is the Y
  coordinate, or latitude.    For example, position=xLongitude&amp;position=yLatitude .

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: An optional paramer. The maximum number of results returned per request.
  Default value: 50
"""
function search_place_index_for_position(
    IndexName, Position; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/places/v0/indexes/$(IndexName)/search/position",
        Dict{String,Any}("Position" => Position);
        aws_config=aws_config,
    )
end
function search_place_index_for_position(
    IndexName,
    Position,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/places/v0/indexes/$(IndexName)/search/position",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("Position" => Position), params)
        );
        aws_config=aws_config,
    )
end

"""
    search_place_index_for_text(index_name, text)
    search_place_index_for_text(index_name, text, params::Dict{String,<:Any})

Geocodes free-form text, such as an address, name, city, or region to allow you to search
for Places or points of interest.  Includes the option to apply additional parameters to
narrow your list of results.  You can search for places near a given position using
BiasPosition, or filter results within a bounding box using FilterBBox. Providing both
parameters simultaneously returns an error.

# Arguments
- `index_name`: The name of the place index resource you want to use for the search.
- `text`: The address, name, city, or region to be used in the search. In free-form text
  format. For example, 123 Any Street.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"BiasPosition"`: Searches for results closest to the given position. An optional
  parameter defined by longitude, and latitude.   The first bias position is the X
  coordinate, or longitude.   The second bias position is the Y coordinate, or latitude.
  For example, bias=xLongitude&amp;bias=yLatitude.
- `"FilterBBox"`: Filters the results by returning only Places within the provided bounding
  box. An optional parameter. The first 2 bbox parameters describe the lower southwest
  corner:   The first bbox position is the X coordinate or longitude of the lower southwest
  corner.   The second bbox position is the Y coordinate or latitude of the lower southwest
  corner.   For example, bbox=xLongitudeSW&amp;bbox=yLatitudeSW. The next bbox parameters
  describe the upper northeast corner:   The third bbox position is the X coordinate, or
  longitude of the upper northeast corner.   The fourth bbox position is the Y coordinate, or
  longitude of the upper northeast corner.   For example,
  bbox=xLongitudeNE&amp;bbox=yLatitudeNE
- `"FilterCountries"`: Limits the search to the given a list of countries/regions. An
  optional parameter.   Use the ISO 3166 3-digit country code. For example, Australia uses
  three upper-case characters: AUS.
- `"MaxResults"`: An optional parameter. The maximum number of results returned per
  request.  The default: 50
"""
function search_place_index_for_text(
    IndexName, Text; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "POST",
        "/places/v0/indexes/$(IndexName)/search/text",
        Dict{String,Any}("Text" => Text);
        aws_config=aws_config,
    )
end
function search_place_index_for_text(
    IndexName,
    Text,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/places/v0/indexes/$(IndexName)/search/text",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Text" => Text), params));
        aws_config=aws_config,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Assigns one or more tags (key-value pairs) to the specified Amazon Location Service
resource.  &lt;p&gt;Tags can help you organize and categorize your resources. You can also
use them to scope user permissions, by granting a user permission to access or change only
resources with certain tag values.&lt;/p&gt; &lt;p&gt;You can use the
&lt;code&gt;TagResource&lt;/code&gt; operation with an Amazon Location Service resource
that already has tags. If you specify a new tag key for the resource, this tag is appended
to the tags already associated with the resource. If you specify a tag key that's already
associated with the resource, the new tag value that you specify replaces the previous
value for that tag. &lt;/p&gt; &lt;p&gt;You can associate up to 50 tags with a
resource.&lt;/p&gt;

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource whose tags you want to
  update.   Format example: arn:aws:geo:region:account-id:resourcetype/ExampleResource
- `tags`: Tags that have been applied to the specified resource. Tags are mapped from the
  tag key to the tag value: \"TagKey\" : \"TagValue\".   Format example: {\"tag1\" :
  \"value1\", \"tag2\" : \"value2\"}

"""
function tag_resource(ResourceArn, Tags; aws_config::AbstractAWSConfig=global_aws_config())
    return location(
        "POST",
        "/tags/$(ResourceArn)",
        Dict{String,Any}("Tags" => Tags);
        aws_config=aws_config,
    )
end
function tag_resource(
    ResourceArn,
    Tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "POST",
        "/tags/$(ResourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("Tags" => Tags), params));
        aws_config=aws_config,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Removes one or more tags from the specified Amazon Location resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource from which you want to
  remove tags.   Format example: arn:aws:geo:region:account-id:resourcetype/ExampleResource
- `tag_keys`: The list of tag keys to remove from the specified resource.

"""
function untag_resource(
    ResourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "DELETE",
        "/tags/$(ResourceArn)",
        Dict{String,Any}("tagKeys" => tagKeys);
        aws_config=aws_config,
    )
end
function untag_resource(
    ResourceArn,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "DELETE",
        "/tags/$(ResourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tagKeys" => tagKeys), params));
        aws_config=aws_config,
    )
end

"""
    update_geofence_collection(collection_name)
    update_geofence_collection(collection_name, params::Dict{String,<:Any})

Updates the specified properties of a given geofence collection.

# Arguments
- `collection_name`: The name of the geofence collection to update.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: Updates the description for the geofence collection.
- `"PricingPlan"`: Updates the pricing plan for the geofence collection. For more
  information about each pricing plan option restrictions, see Amazon Location Service
  pricing.
- `"PricingPlanDataSource"`: Updates the data provider for the geofence collection.  A
  required value for the following pricing plans: MobileAssetTracking| MobileAssetManagement
  For more information about data providers and pricing plans, see the Amazon Location
  Service product page.  This can only be updated when updating the PricingPlan in the same
  request. Amazon Location Service uses PricingPlanDataSource to calculate billing for your
  geofence collection. Your data won't be shared with the data provider, and will remain in
  your AWS account and Region unless you move it.
"""
function update_geofence_collection(
    CollectionName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "PATCH", "/geofencing/v0/collections/$(CollectionName)"; aws_config=aws_config
    )
end
function update_geofence_collection(
    CollectionName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "PATCH",
        "/geofencing/v0/collections/$(CollectionName)",
        params;
        aws_config=aws_config,
    )
end

"""
    update_map(map_name)
    update_map(map_name, params::Dict{String,<:Any})

Updates the specified properties of a given map resource.

# Arguments
- `map_name`: The name of the map resource to update.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: Updates the description for the map resource.
- `"PricingPlan"`: Updates the pricing plan for the map resource. For more information
  about each pricing plan option restrictions, see Amazon Location Service pricing.
"""
function update_map(MapName; aws_config::AbstractAWSConfig=global_aws_config())
    return location("PATCH", "/maps/v0/maps/$(MapName)"; aws_config=aws_config)
end
function update_map(
    MapName, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location("PATCH", "/maps/v0/maps/$(MapName)", params; aws_config=aws_config)
end

"""
    update_place_index(index_name)
    update_place_index(index_name, params::Dict{String,<:Any})

Updates the specified properties of a given place index resource.

# Arguments
- `index_name`: The name of the place index resource to update.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DataSourceConfiguration"`: Updates the data storage option for the place index resource.
- `"Description"`: Updates the description for the place index resource.
- `"PricingPlan"`: Updates the pricing plan for the place index resource. For more
  information about each pricing plan option restrictions, see Amazon Location Service
  pricing.
"""
function update_place_index(IndexName; aws_config::AbstractAWSConfig=global_aws_config())
    return location("PATCH", "/places/v0/indexes/$(IndexName)"; aws_config=aws_config)
end
function update_place_index(
    IndexName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "PATCH", "/places/v0/indexes/$(IndexName)", params; aws_config=aws_config
    )
end

"""
    update_route_calculator(calculator_name)
    update_route_calculator(calculator_name, params::Dict{String,<:Any})

Updates the specified properties for a given route calculator resource.

# Arguments
- `calculator_name`: The name of the route calculator resource to update.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: Updates the description for the route calculator resource.
- `"PricingPlan"`: Updates the pricing plan for the route calculator resource. For more
  information about each pricing plan option restrictions, see Amazon Location Service
  pricing.
"""
function update_route_calculator(
    CalculatorName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return location(
        "PATCH", "/routes/v0/calculators/$(CalculatorName)"; aws_config=aws_config
    )
end
function update_route_calculator(
    CalculatorName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "PATCH", "/routes/v0/calculators/$(CalculatorName)", params; aws_config=aws_config
    )
end

"""
    update_tracker(tracker_name)
    update_tracker(tracker_name, params::Dict{String,<:Any})

Updates the specified properties of a given tracker resource.

# Arguments
- `tracker_name`: The name of the tracker resource to update.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: Updates the description for the tracker resource.
- `"PricingPlan"`: Updates the pricing plan for the tracker resource. For more information
  about each pricing plan option restrictions, see Amazon Location Service pricing.
- `"PricingPlanDataSource"`: Updates the data provider for the tracker resource.  A
  required value for the following pricing plans: MobileAssetTracking| MobileAssetManagement
  For more information about data providers and pricing plans, see the Amazon Location
  Service product page  This can only be updated when updating the PricingPlan in the same
  request. Amazon Location Service uses PricingPlanDataSource to calculate billing for your
  tracker resource. Your data won't be shared with the data provider, and will remain in your
  AWS account and Region unless you move it.
"""
function update_tracker(TrackerName; aws_config::AbstractAWSConfig=global_aws_config())
    return location("PATCH", "/tracking/v0/trackers/$(TrackerName)"; aws_config=aws_config)
end
function update_tracker(
    TrackerName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return location(
        "PATCH", "/tracking/v0/trackers/$(TrackerName)", params; aws_config=aws_config
    )
end
