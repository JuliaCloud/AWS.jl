# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
using .AWSServices: guardduty

"""
    AcceptInvitation()

Accepts the invitation to be monitored by a master GuardDuty account.

Required Parameters
{
  "DetectorId": "The unique ID of the detector of the GuardDuty member account.",
  "InvitationId": "The value that is used to validate the master account to the member account.",
  "MasterId": "The account ID of the master GuardDuty account whose invitation you're accepting."
}
"""
AcceptInvitation(DetectorId, InvitationId, MasterId) = guardduty("POST", "/detector/$(detectorId)/master")
AcceptInvitation(DetectorId, InvitationId, MasterId, args) = guardduty("POST", "/detector/$(detectorId)/master", args)
AcceptInvitation(a...; b...) = AcceptInvitation(a..., b)

"""
    ArchiveFindings()

Archives GuardDuty findings that are specified by the list of finding IDs.  Only the master account can archive findings. Member accounts don't have permission to archive findings from their accounts. 

Required Parameters
{
  "DetectorId": "The ID of the detector that specifies the GuardDuty service whose findings you want to archive.",
  "FindingIds": "The IDs of the findings that you want to archive."
}
"""
ArchiveFindings(DetectorId, FindingIds) = guardduty("POST", "/detector/$(detectorId)/findings/archive")
ArchiveFindings(DetectorId, FindingIds, args) = guardduty("POST", "/detector/$(detectorId)/findings/archive", args)
ArchiveFindings(a...; b...) = ArchiveFindings(a..., b)

"""
    CreateDetector()

Creates a single Amazon GuardDuty detector. A detector is a resource that represents the GuardDuty service. To start using GuardDuty, you must create a detector in each Region where you enable the service. You can have only one detector per account per Region.

Required Parameters
{
  "Enable": "A Boolean value that specifies whether the detector is to be enabled."
}

Optional Parameters
{
  "ClientToken": "The idempotency token for the create request.",
  "FindingPublishingFrequency": "An enum value that specifies how frequently updated findings are exported.",
  "Tags": "The tags to be added to a new detector resource."
}
"""
CreateDetector(Enable) = guardduty("POST", "/detector")
CreateDetector(Enable, args) = guardduty("POST", "/detector", args)
CreateDetector(a...; b...) = CreateDetector(a..., b)

"""
    CreateFilter()

Creates a filter using the specified finding criteria.

Required Parameters
{
  "DetectorId": "The unique ID of the detector of the GuardDuty account that you want to create a filter for.",
  "FindingCriteria": "Represents the criteria to be used in the filter for querying findings. You can only use the following attributes to query findings:   accountId   region   confidence   id   resource.accessKeyDetails.accessKeyId   resource.accessKeyDetails.principalId   resource.accessKeyDetails.userName   resource.accessKeyDetails.userType   resource.instanceDetails.iamInstanceProfile.id   resource.instanceDetails.imageId   resource.instanceDetails.instanceId   resource.instanceDetails.outpostArn   resource.instanceDetails.networkInterfaces.ipv6Addresses   resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress   resource.instanceDetails.networkInterfaces.publicDnsName   resource.instanceDetails.networkInterfaces.publicIp   resource.instanceDetails.networkInterfaces.securityGroups.groupId   resource.instanceDetails.networkInterfaces.securityGroups.groupName   resource.instanceDetails.networkInterfaces.subnetId   resource.instanceDetails.networkInterfaces.vpcId   resource.instanceDetails.tags.key   resource.instanceDetails.tags.value   resource.resourceType   service.action.actionType   service.action.awsApiCallAction.api   service.action.awsApiCallAction.callerType   service.action.awsApiCallAction.remoteIpDetails.city.cityName   service.action.awsApiCallAction.remoteIpDetails.country.countryName   service.action.awsApiCallAction.remoteIpDetails.ipAddressV4   service.action.awsApiCallAction.remoteIpDetails.organization.asn   service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg   service.action.awsApiCallAction.serviceName   service.action.dnsRequestAction.domain   service.action.networkConnectionAction.blocked   service.action.networkConnectionAction.connectionDirection   service.action.networkConnectionAction.localPortDetails.port   service.action.networkConnectionAction.protocol   service.action.networkConnectionAction.localIpDetails.ipAddressV4   service.action.networkConnectionAction.remoteIpDetails.city.cityName   service.action.networkConnectionAction.remoteIpDetails.country.countryName   service.action.networkConnectionAction.remoteIpDetails.ipAddressV4   service.action.networkConnectionAction.remoteIpDetails.organization.asn   service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg   service.action.networkConnectionAction.remotePortDetails.port   service.additionalInfo.threatListName   service.archived When this attribute is set to TRUE, only archived findings are listed. When it's set to FALSE, only unarchived findings are listed. When this attribute is not set, all existing findings are listed.   service.resourceRole   severity   type   updatedAt Type: ISO 8601 string format: YYYY-MM-DDTHH:MM:SS.SSSZ or YYYY-MM-DDTHH:MM:SSZ depending on whether the value contains milliseconds.  ",
  "Name": "The name of the filter."
}

Optional Parameters
{
  "Action": "Specifies the action that is to be applied to the findings that match the filter.",
  "ClientToken": "The idempotency token for the create request.",
  "Description": "The description of the filter.",
  "Rank": "Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.",
  "Tags": "The tags to be added to a new filter resource."
}
"""
CreateFilter(DetectorId, FindingCriteria, Name) = guardduty("POST", "/detector/$(detectorId)/filter")
CreateFilter(DetectorId, FindingCriteria, Name, args) = guardduty("POST", "/detector/$(detectorId)/filter", args)
CreateFilter(a...; b...) = CreateFilter(a..., b)

"""
    CreateIPSet()

Creates a new IPSet, which is called a trusted IP list in the console user interface. An IPSet is a list of IP addresses that are trusted for secure communication with AWS infrastructure and applications. GuardDuty doesn't generate findings for IP addresses that are included in IPSets. Only users from the master account can use this operation.

Required Parameters
{
  "Activate": "A Boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.",
  "DetectorId": "The unique ID of the detector of the GuardDuty account that you want to create an IPSet for.",
  "Format": "The format of the file that contains the IPSet.",
  "Location": "The URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.",
  "Name": "The user-friendly name to identify the IPSet.  Allowed characters are alphanumerics, spaces, hyphens (-), and underscores (_)."
}

Optional Parameters
{
  "ClientToken": "The idempotency token for the create request.",
  "Tags": "The tags to be added to a new IP set resource."
}
"""
CreateIPSet(Activate, DetectorId, Format, Location, Name) = guardduty("POST", "/detector/$(detectorId)/ipset")
CreateIPSet(Activate, DetectorId, Format, Location, Name, args) = guardduty("POST", "/detector/$(detectorId)/ipset", args)
CreateIPSet(a...; b...) = CreateIPSet(a..., b)

"""
    CreateMembers()

Creates member accounts of the current AWS account by specifying a list of AWS account IDs. The current AWS account can then invite these members to manage GuardDuty in their accounts.

Required Parameters
{
  "AccountDetails": "A list of account ID and email address pairs of the accounts that you want to associate with the master GuardDuty account.",
  "DetectorId": "The unique ID of the detector of the GuardDuty account that you want to associate member accounts with."
}
"""
CreateMembers(AccountDetails, DetectorId) = guardduty("POST", "/detector/$(detectorId)/member")
CreateMembers(AccountDetails, DetectorId, args) = guardduty("POST", "/detector/$(detectorId)/member", args)
CreateMembers(a...; b...) = CreateMembers(a..., b)

"""
    CreatePublishingDestination()

Creates a publishing destination to export findings to. The resource to export findings to must exist before you use this operation.

Required Parameters
{
  "DestinationProperties": "The properties of the publishing destination, including the ARNs for the destination and the KMS key used for encryption.",
  "DestinationType": "The type of resource for the publishing destination. Currently only Amazon S3 buckets are supported.",
  "DetectorId": "The ID of the GuardDuty detector associated with the publishing destination."
}

Optional Parameters
{
  "ClientToken": "The idempotency token for the request."
}
"""
CreatePublishingDestination(DestinationProperties, DestinationType, DetectorId) = guardduty("POST", "/detector/$(detectorId)/publishingDestination")
CreatePublishingDestination(DestinationProperties, DestinationType, DetectorId, args) = guardduty("POST", "/detector/$(detectorId)/publishingDestination", args)
CreatePublishingDestination(a...; b...) = CreatePublishingDestination(a..., b)

"""
    CreateSampleFindings()

Generates example findings of types specified by the list of finding types. If 'NULL' is specified for findingTypes, the API generates example findings of all supported finding types.

Required Parameters
{
  "DetectorId": "The ID of the detector to create sample findings for."
}

Optional Parameters
{
  "FindingTypes": "The types of sample findings to generate."
}
"""
CreateSampleFindings(DetectorId) = guardduty("POST", "/detector/$(detectorId)/findings/create")
CreateSampleFindings(DetectorId, args) = guardduty("POST", "/detector/$(detectorId)/findings/create", args)
CreateSampleFindings(a...; b...) = CreateSampleFindings(a..., b)

"""
    CreateThreatIntelSet()

Creates a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses. GuardDuty generates findings based on ThreatIntelSets. Only users of the master account can use this operation.

Required Parameters
{
  "Activate": "A Boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.",
  "DetectorId": "The unique ID of the detector of the GuardDuty account that you want to create a threatIntelSet for.",
  "Format": "The format of the file that contains the ThreatIntelSet.",
  "Location": "The URI of the file that contains the ThreatIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.",
  "Name": "A user-friendly ThreatIntelSet name displayed in all findings that are generated by activity that involves IP addresses included in this ThreatIntelSet."
}

Optional Parameters
{
  "ClientToken": "The idempotency token for the create request.",
  "Tags": "The tags to be added to a new threat list resource."
}
"""
CreateThreatIntelSet(Activate, DetectorId, Format, Location, Name) = guardduty("POST", "/detector/$(detectorId)/threatintelset")
CreateThreatIntelSet(Activate, DetectorId, Format, Location, Name, args) = guardduty("POST", "/detector/$(detectorId)/threatintelset", args)
CreateThreatIntelSet(a...; b...) = CreateThreatIntelSet(a..., b)

"""
    DeclineInvitations()

Declines invitations sent to the current member account by AWS accounts specified by their account IDs.

Required Parameters
{
  "AccountIds": "A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to decline invitations from."
}
"""
DeclineInvitations(AccountIds) = guardduty("POST", "/invitation/decline")
DeclineInvitations(AccountIds, args) = guardduty("POST", "/invitation/decline", args)
DeclineInvitations(a...; b...) = DeclineInvitations(a..., b)

"""
    DeleteDetector()

Deletes an Amazon GuardDuty detector that is specified by the detector ID.

Required Parameters
{
  "DetectorId": "The unique ID of the detector that you want to delete."
}
"""
DeleteDetector(DetectorId) = guardduty("DELETE", "/detector/$(detectorId)")
DeleteDetector(DetectorId, args) = guardduty("DELETE", "/detector/$(detectorId)", args)
DeleteDetector(a...; b...) = DeleteDetector(a..., b)

"""
    DeleteFilter()

Deletes the filter specified by the filter name.

Required Parameters
{
  "DetectorId": "The unique ID of the detector that the filter is associated with.",
  "FilterName": "The name of the filter that you want to delete."
}
"""
DeleteFilter(DetectorId, FilterName) = guardduty("DELETE", "/detector/$(detectorId)/filter/$(filterName)")
DeleteFilter(DetectorId, FilterName, args) = guardduty("DELETE", "/detector/$(detectorId)/filter/$(filterName)", args)
DeleteFilter(a...; b...) = DeleteFilter(a..., b)

"""
    DeleteIPSet()

Deletes the IPSet specified by the ipSetId. IPSets are called trusted IP lists in the console user interface.

Required Parameters
{
  "DetectorId": "The unique ID of the detector associated with the IPSet.",
  "IpSetId": "The unique ID of the IPSet to delete."
}
"""
DeleteIPSet(DetectorId, IpSetId) = guardduty("DELETE", "/detector/$(detectorId)/ipset/$(ipSetId)")
DeleteIPSet(DetectorId, IpSetId, args) = guardduty("DELETE", "/detector/$(detectorId)/ipset/$(ipSetId)", args)
DeleteIPSet(a...; b...) = DeleteIPSet(a..., b)

"""
    DeleteInvitations()

Deletes invitations sent to the current member account by AWS accounts specified by their account IDs.

Required Parameters
{
  "AccountIds": "A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to delete invitations from."
}
"""
DeleteInvitations(AccountIds) = guardduty("POST", "/invitation/delete")
DeleteInvitations(AccountIds, args) = guardduty("POST", "/invitation/delete", args)
DeleteInvitations(a...; b...) = DeleteInvitations(a..., b)

"""
    DeleteMembers()

Deletes GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.

Required Parameters
{
  "AccountIds": "A list of account IDs of the GuardDuty member accounts that you want to delete.",
  "DetectorId": "The unique ID of the detector of the GuardDuty account whose members you want to delete."
}
"""
DeleteMembers(AccountIds, DetectorId) = guardduty("POST", "/detector/$(detectorId)/member/delete")
DeleteMembers(AccountIds, DetectorId, args) = guardduty("POST", "/detector/$(detectorId)/member/delete", args)
DeleteMembers(a...; b...) = DeleteMembers(a..., b)

"""
    DeletePublishingDestination()

Deletes the publishing definition with the specified destinationId.

Required Parameters
{
  "DestinationId": "The ID of the publishing destination to delete.",
  "DetectorId": "The unique ID of the detector associated with the publishing destination to delete."
}
"""
DeletePublishingDestination(DestinationId, DetectorId) = guardduty("DELETE", "/detector/$(detectorId)/publishingDestination/$(destinationId)")
DeletePublishingDestination(DestinationId, DetectorId, args) = guardduty("DELETE", "/detector/$(detectorId)/publishingDestination/$(destinationId)", args)
DeletePublishingDestination(a...; b...) = DeletePublishingDestination(a..., b)

"""
    DeleteThreatIntelSet()

Deletes the ThreatIntelSet specified by the ThreatIntelSet ID.

Required Parameters
{
  "DetectorId": "The unique ID of the detector that the threatIntelSet is associated with.",
  "ThreatIntelSetId": "The unique ID of the threatIntelSet that you want to delete."
}
"""
DeleteThreatIntelSet(DetectorId, ThreatIntelSetId) = guardduty("DELETE", "/detector/$(detectorId)/threatintelset/$(threatIntelSetId)")
DeleteThreatIntelSet(DetectorId, ThreatIntelSetId, args) = guardduty("DELETE", "/detector/$(detectorId)/threatintelset/$(threatIntelSetId)", args)
DeleteThreatIntelSet(a...; b...) = DeleteThreatIntelSet(a..., b)

"""
    DescribeOrganizationConfiguration()

Returns information about the account selected as the delegated administrator for GuardDuty.

Required Parameters
{
  "DetectorId": "The ID of the detector to retrieve information about the delegated administrator from."
}
"""
DescribeOrganizationConfiguration(DetectorId) = guardduty("GET", "/detector/$(detectorId)/admin")
DescribeOrganizationConfiguration(DetectorId, args) = guardduty("GET", "/detector/$(detectorId)/admin", args)
DescribeOrganizationConfiguration(a...; b...) = DescribeOrganizationConfiguration(a..., b)

"""
    DescribePublishingDestination()

Returns information about the publishing destination specified by the provided destinationId.

Required Parameters
{
  "DestinationId": "The ID of the publishing destination to retrieve.",
  "DetectorId": "The unique ID of the detector associated with the publishing destination to retrieve."
}
"""
DescribePublishingDestination(DestinationId, DetectorId) = guardduty("GET", "/detector/$(detectorId)/publishingDestination/$(destinationId)")
DescribePublishingDestination(DestinationId, DetectorId, args) = guardduty("GET", "/detector/$(detectorId)/publishingDestination/$(destinationId)", args)
DescribePublishingDestination(a...; b...) = DescribePublishingDestination(a..., b)

"""
    DisableOrganizationAdminAccount()

Disables an AWS account within the Organization as the GuardDuty delegated administrator.

Required Parameters
{
  "AdminAccountId": "The AWS Account ID for the organizations account to be disabled as a GuardDuty delegated administrator."
}
"""
DisableOrganizationAdminAccount(AdminAccountId) = guardduty("POST", "/admin/disable")
DisableOrganizationAdminAccount(AdminAccountId, args) = guardduty("POST", "/admin/disable", args)
DisableOrganizationAdminAccount(a...; b...) = DisableOrganizationAdminAccount(a..., b)

"""
    DisassociateFromMasterAccount()

Disassociates the current GuardDuty member account from its master account.

Required Parameters
{
  "DetectorId": "The unique ID of the detector of the GuardDuty member account."
}
"""
DisassociateFromMasterAccount(DetectorId) = guardduty("POST", "/detector/$(detectorId)/master/disassociate")
DisassociateFromMasterAccount(DetectorId, args) = guardduty("POST", "/detector/$(detectorId)/master/disassociate", args)
DisassociateFromMasterAccount(a...; b...) = DisassociateFromMasterAccount(a..., b)

"""
    DisassociateMembers()

Disassociates GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.

Required Parameters
{
  "AccountIds": "A list of account IDs of the GuardDuty member accounts that you want to disassociate from the master account.",
  "DetectorId": "The unique ID of the detector of the GuardDuty account whose members you want to disassociate from the master account."
}
"""
DisassociateMembers(AccountIds, DetectorId) = guardduty("POST", "/detector/$(detectorId)/member/disassociate")
DisassociateMembers(AccountIds, DetectorId, args) = guardduty("POST", "/detector/$(detectorId)/member/disassociate", args)
DisassociateMembers(a...; b...) = DisassociateMembers(a..., b)

"""
    EnableOrganizationAdminAccount()

Enables an AWS account within the organization as the GuardDuty delegated administrator.

Required Parameters
{
  "AdminAccountId": "The AWS Account ID for the organization account to be enabled as a GuardDuty delegated administrator."
}
"""
EnableOrganizationAdminAccount(AdminAccountId) = guardduty("POST", "/admin/enable")
EnableOrganizationAdminAccount(AdminAccountId, args) = guardduty("POST", "/admin/enable", args)
EnableOrganizationAdminAccount(a...; b...) = EnableOrganizationAdminAccount(a..., b)

"""
    GetDetector()

Retrieves an Amazon GuardDuty detector specified by the detectorId.

Required Parameters
{
  "DetectorId": "The unique ID of the detector that you want to get."
}
"""
GetDetector(DetectorId) = guardduty("GET", "/detector/$(detectorId)")
GetDetector(DetectorId, args) = guardduty("GET", "/detector/$(detectorId)", args)
GetDetector(a...; b...) = GetDetector(a..., b)

"""
    GetFilter()

Returns the details of the filter specified by the filter name.

Required Parameters
{
  "DetectorId": "The unique ID of the detector that the filter is associated with.",
  "FilterName": "The name of the filter you want to get."
}
"""
GetFilter(DetectorId, FilterName) = guardduty("GET", "/detector/$(detectorId)/filter/$(filterName)")
GetFilter(DetectorId, FilterName, args) = guardduty("GET", "/detector/$(detectorId)/filter/$(filterName)", args)
GetFilter(a...; b...) = GetFilter(a..., b)

"""
    GetFindings()

Describes Amazon GuardDuty findings specified by finding IDs.

Required Parameters
{
  "DetectorId": "The ID of the detector that specifies the GuardDuty service whose findings you want to retrieve.",
  "FindingIds": "The IDs of the findings that you want to retrieve."
}

Optional Parameters
{
  "SortCriteria": "Represents the criteria used for sorting findings."
}
"""
GetFindings(DetectorId, FindingIds) = guardduty("POST", "/detector/$(detectorId)/findings/get")
GetFindings(DetectorId, FindingIds, args) = guardduty("POST", "/detector/$(detectorId)/findings/get", args)
GetFindings(a...; b...) = GetFindings(a..., b)

"""
    GetFindingsStatistics()

Lists Amazon GuardDuty findings statistics for the specified detector ID.

Required Parameters
{
  "DetectorId": "The ID of the detector that specifies the GuardDuty service whose findings' statistics you want to retrieve.",
  "FindingStatisticTypes": "The types of finding statistics to retrieve."
}

Optional Parameters
{
  "FindingCriteria": "Represents the criteria that is used for querying findings."
}
"""
GetFindingsStatistics(DetectorId, FindingStatisticTypes) = guardduty("POST", "/detector/$(detectorId)/findings/statistics")
GetFindingsStatistics(DetectorId, FindingStatisticTypes, args) = guardduty("POST", "/detector/$(detectorId)/findings/statistics", args)
GetFindingsStatistics(a...; b...) = GetFindingsStatistics(a..., b)

"""
    GetIPSet()

Retrieves the IPSet specified by the ipSetId.

Required Parameters
{
  "DetectorId": "The unique ID of the detector that the IPSet is associated with.",
  "IpSetId": "The unique ID of the IPSet to retrieve."
}
"""
GetIPSet(DetectorId, IpSetId) = guardduty("GET", "/detector/$(detectorId)/ipset/$(ipSetId)")
GetIPSet(DetectorId, IpSetId, args) = guardduty("GET", "/detector/$(detectorId)/ipset/$(ipSetId)", args)
GetIPSet(a...; b...) = GetIPSet(a..., b)

"""
    GetInvitationsCount()

Returns the count of all GuardDuty membership invitations that were sent to the current member account except the currently accepted invitation.
"""
GetInvitationsCount() = guardduty("GET", "/invitation/count")
GetInvitationsCount(args) = guardduty("GET", "/invitation/count", args)
GetInvitationsCount(a...; b...) = GetInvitationsCount(a..., b)

"""
    GetMasterAccount()

Provides the details for the GuardDuty master account associated with the current GuardDuty member account.

Required Parameters
{
  "DetectorId": "The unique ID of the detector of the GuardDuty member account."
}
"""
GetMasterAccount(DetectorId) = guardduty("GET", "/detector/$(detectorId)/master")
GetMasterAccount(DetectorId, args) = guardduty("GET", "/detector/$(detectorId)/master", args)
GetMasterAccount(a...; b...) = GetMasterAccount(a..., b)

"""
    GetMembers()

Retrieves GuardDuty member accounts (to the current GuardDuty master account) specified by the account IDs.

Required Parameters
{
  "AccountIds": "A list of account IDs of the GuardDuty member accounts that you want to describe.",
  "DetectorId": "The unique ID of the detector of the GuardDuty account whose members you want to retrieve."
}
"""
GetMembers(AccountIds, DetectorId) = guardduty("POST", "/detector/$(detectorId)/member/get")
GetMembers(AccountIds, DetectorId, args) = guardduty("POST", "/detector/$(detectorId)/member/get", args)
GetMembers(a...; b...) = GetMembers(a..., b)

"""
    GetThreatIntelSet()

Retrieves the ThreatIntelSet that is specified by the ThreatIntelSet ID.

Required Parameters
{
  "DetectorId": "The unique ID of the detector that the threatIntelSet is associated with.",
  "ThreatIntelSetId": "The unique ID of the threatIntelSet that you want to get."
}
"""
GetThreatIntelSet(DetectorId, ThreatIntelSetId) = guardduty("GET", "/detector/$(detectorId)/threatintelset/$(threatIntelSetId)")
GetThreatIntelSet(DetectorId, ThreatIntelSetId, args) = guardduty("GET", "/detector/$(detectorId)/threatintelset/$(threatIntelSetId)", args)
GetThreatIntelSet(a...; b...) = GetThreatIntelSet(a..., b)

"""
    InviteMembers()

Invites other AWS accounts (created as members of the current AWS account by CreateMembers) to enable GuardDuty, and allow the current AWS account to view and manage these accounts' GuardDuty findings on their behalf as the master account.

Required Parameters
{
  "AccountIds": "A list of account IDs of the accounts that you want to invite to GuardDuty as members.",
  "DetectorId": "The unique ID of the detector of the GuardDuty account that you want to invite members with."
}

Optional Parameters
{
  "DisableEmailNotification": "A Boolean value that specifies whether you want to disable email notification to the accounts that you’re inviting to GuardDuty as members.",
  "Message": "The invitation message that you want to send to the accounts that you’re inviting to GuardDuty as members."
}
"""
InviteMembers(AccountIds, DetectorId) = guardduty("POST", "/detector/$(detectorId)/member/invite")
InviteMembers(AccountIds, DetectorId, args) = guardduty("POST", "/detector/$(detectorId)/member/invite", args)
InviteMembers(a...; b...) = InviteMembers(a..., b)

"""
    ListDetectors()

Lists detectorIds of all the existing Amazon GuardDuty detector resources.

Optional Parameters
{
  "MaxResults": "You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.",
  "NextToken": "You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data."
}
"""
ListDetectors() = guardduty("GET", "/detector")
ListDetectors(args) = guardduty("GET", "/detector", args)
ListDetectors(a...; b...) = ListDetectors(a..., b)

"""
    ListFilters()

Returns a paginated list of the current filters.

Required Parameters
{
  "DetectorId": "The unique ID of the detector that the filter is associated with."
}

Optional Parameters
{
  "MaxResults": "You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.",
  "NextToken": "You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data."
}
"""
ListFilters(DetectorId) = guardduty("GET", "/detector/$(detectorId)/filter")
ListFilters(DetectorId, args) = guardduty("GET", "/detector/$(detectorId)/filter", args)
ListFilters(a...; b...) = ListFilters(a..., b)

"""
    ListFindings()

Lists Amazon GuardDuty findings for the specified detector ID.

Required Parameters
{
  "DetectorId": "The ID of the detector that specifies the GuardDuty service whose findings you want to list."
}

Optional Parameters
{
  "FindingCriteria": "Represents the criteria used for querying findings. Valid values include:   JSON field name   accountId   region   confidence   id   resource.accessKeyDetails.accessKeyId   resource.accessKeyDetails.principalId   resource.accessKeyDetails.userName   resource.accessKeyDetails.userType   resource.instanceDetails.iamInstanceProfile.id   resource.instanceDetails.imageId   resource.instanceDetails.instanceId   resource.instanceDetails.networkInterfaces.ipv6Addresses   resource.instanceDetails.networkInterfaces.privateIpAddresses.privateIpAddress   resource.instanceDetails.networkInterfaces.publicDnsName   resource.instanceDetails.networkInterfaces.publicIp   resource.instanceDetails.networkInterfaces.securityGroups.groupId   resource.instanceDetails.networkInterfaces.securityGroups.groupName   resource.instanceDetails.networkInterfaces.subnetId   resource.instanceDetails.networkInterfaces.vpcId   resource.instanceDetails.tags.key   resource.instanceDetails.tags.value   resource.resourceType   service.action.actionType   service.action.awsApiCallAction.api   service.action.awsApiCallAction.callerType   service.action.awsApiCallAction.remoteIpDetails.city.cityName   service.action.awsApiCallAction.remoteIpDetails.country.countryName   service.action.awsApiCallAction.remoteIpDetails.ipAddressV4   service.action.awsApiCallAction.remoteIpDetails.organization.asn   service.action.awsApiCallAction.remoteIpDetails.organization.asnOrg   service.action.awsApiCallAction.serviceName   service.action.dnsRequestAction.domain   service.action.networkConnectionAction.blocked   service.action.networkConnectionAction.connectionDirection   service.action.networkConnectionAction.localPortDetails.port   service.action.networkConnectionAction.protocol   service.action.networkConnectionAction.remoteIpDetails.city.cityName   service.action.networkConnectionAction.remoteIpDetails.country.countryName   service.action.networkConnectionAction.remoteIpDetails.ipAddressV4   service.action.networkConnectionAction.remoteIpDetails.organization.asn   service.action.networkConnectionAction.remoteIpDetails.organization.asnOrg   service.action.networkConnectionAction.remotePortDetails.port   service.additionalInfo.threatListName   service.archived When this attribute is set to 'true', only archived findings are listed. When it's set to 'false', only unarchived findings are listed. When this attribute is not set, all existing findings are listed.   service.resourceRole   severity   type   updatedAt Type: Timestamp in Unix Epoch millisecond format: 1486685375000  ",
  "MaxResults": "You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.",
  "NextToken": "You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.",
  "SortCriteria": "Represents the criteria used for sorting findings."
}
"""
ListFindings(DetectorId) = guardduty("POST", "/detector/$(detectorId)/findings")
ListFindings(DetectorId, args) = guardduty("POST", "/detector/$(detectorId)/findings", args)
ListFindings(a...; b...) = ListFindings(a..., b)

"""
    ListIPSets()

Lists the IPSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the IPSets returned are the IPSets from the associated master account.

Required Parameters
{
  "DetectorId": "The unique ID of the detector that the IPSet is associated with."
}

Optional Parameters
{
  "MaxResults": "You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.",
  "NextToken": "You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data."
}
"""
ListIPSets(DetectorId) = guardduty("GET", "/detector/$(detectorId)/ipset")
ListIPSets(DetectorId, args) = guardduty("GET", "/detector/$(detectorId)/ipset", args)
ListIPSets(a...; b...) = ListIPSets(a..., b)

"""
    ListInvitations()

Lists all GuardDuty membership invitations that were sent to the current AWS account.

Optional Parameters
{
  "MaxResults": "You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.",
  "NextToken": "You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data."
}
"""
ListInvitations() = guardduty("GET", "/invitation")
ListInvitations(args) = guardduty("GET", "/invitation", args)
ListInvitations(a...; b...) = ListInvitations(a..., b)

"""
    ListMembers()

Lists details about all member accounts for the current GuardDuty master account.

Required Parameters
{
  "DetectorId": "The unique ID of the detector the member is associated with."
}

Optional Parameters
{
  "MaxResults": "You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.",
  "NextToken": "You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.",
  "OnlyAssociated": "Specifies whether to only return associated members or to return all members (including members who haven't been invited yet or have been disassociated)."
}
"""
ListMembers(DetectorId) = guardduty("GET", "/detector/$(detectorId)/member")
ListMembers(DetectorId, args) = guardduty("GET", "/detector/$(detectorId)/member", args)
ListMembers(a...; b...) = ListMembers(a..., b)

"""
    ListOrganizationAdminAccounts()

Lists the accounts configured as GuardDuty delegated administrators.

Optional Parameters
{
  "MaxResults": "The maximum number of results to return in the response.",
  "NextToken": "A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page."
}
"""
ListOrganizationAdminAccounts() = guardduty("GET", "/admin")
ListOrganizationAdminAccounts(args) = guardduty("GET", "/admin", args)
ListOrganizationAdminAccounts(a...; b...) = ListOrganizationAdminAccounts(a..., b)

"""
    ListPublishingDestinations()

Returns a list of publishing destinations associated with the specified dectectorId.

Required Parameters
{
  "DetectorId": "The ID of the detector to retrieve publishing destinations for."
}

Optional Parameters
{
  "MaxResults": "The maximum number of results to return in the response.",
  "NextToken": "A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the NextToken value returned from the previous request to continue listing results after the first page."
}
"""
ListPublishingDestinations(DetectorId) = guardduty("GET", "/detector/$(detectorId)/publishingDestination")
ListPublishingDestinations(DetectorId, args) = guardduty("GET", "/detector/$(detectorId)/publishingDestination", args)
ListPublishingDestinations(a...; b...) = ListPublishingDestinations(a..., b)

"""
    ListTagsForResource()

Lists tags for a resource. Tagging is currently supported for detectors, finding filters, IP sets, and threat intel sets, with a limit of 50 tags per resource. When invoked, this operation returns all assigned tags for a given resource.

Required Parameters
{
  "ResourceArn": "The Amazon Resource Name (ARN) for the given GuardDuty resource. "
}
"""
ListTagsForResource(ResourceArn) = guardduty("GET", "/tags/$(resourceArn)")
ListTagsForResource(ResourceArn, args) = guardduty("GET", "/tags/$(resourceArn)", args)
ListTagsForResource(a...; b...) = ListTagsForResource(a..., b)

"""
    ListThreatIntelSets()

Lists the ThreatIntelSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the ThreatIntelSets associated with the master account are returned.

Required Parameters
{
  "DetectorId": "The unique ID of the detector that the threatIntelSet is associated with."
}

Optional Parameters
{
  "MaxResults": "You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 50. The maximum value is 50.",
  "NextToken": "You can use this parameter to paginate results in the response. Set the value of this parameter to null on your first call to the list action. For subsequent calls to the action, fill nextToken in the request with the value of NextToken from the previous response to continue listing data."
}
"""
ListThreatIntelSets(DetectorId) = guardduty("GET", "/detector/$(detectorId)/threatintelset")
ListThreatIntelSets(DetectorId, args) = guardduty("GET", "/detector/$(detectorId)/threatintelset", args)
ListThreatIntelSets(a...; b...) = ListThreatIntelSets(a..., b)

"""
    StartMonitoringMembers()

Turns on GuardDuty monitoring of the specified member accounts. Use this operation to restart monitoring of accounts that you stopped monitoring with the StopMonitoringMembers operation.

Required Parameters
{
  "AccountIds": "A list of account IDs of the GuardDuty member accounts to start monitoring.",
  "DetectorId": "The unique ID of the detector of the GuardDuty master account associated with the member accounts to monitor."
}
"""
StartMonitoringMembers(AccountIds, DetectorId) = guardduty("POST", "/detector/$(detectorId)/member/start")
StartMonitoringMembers(AccountIds, DetectorId, args) = guardduty("POST", "/detector/$(detectorId)/member/start", args)
StartMonitoringMembers(a...; b...) = StartMonitoringMembers(a..., b)

"""
    StopMonitoringMembers()

Stops GuardDuty monitoring for the specified member accounts. Use the StartMonitoringMembers operation to restart monitoring for those accounts.

Required Parameters
{
  "AccountIds": "A list of account IDs for the member accounts to stop monitoring.",
  "DetectorId": "The unique ID of the detector associated with the GuardDuty master account that is monitoring member accounts."
}
"""
StopMonitoringMembers(AccountIds, DetectorId) = guardduty("POST", "/detector/$(detectorId)/member/stop")
StopMonitoringMembers(AccountIds, DetectorId, args) = guardduty("POST", "/detector/$(detectorId)/member/stop", args)
StopMonitoringMembers(a...; b...) = StopMonitoringMembers(a..., b)

"""
    TagResource()

Adds tags to a resource.

Required Parameters
{
  "ResourceArn": "The Amazon Resource Name (ARN) for the GuardDuty resource to apply a tag to.",
  "Tags": "The tags to be added to a resource."
}
"""
TagResource(ResourceArn, Tags) = guardduty("POST", "/tags/$(resourceArn)")
TagResource(ResourceArn, Tags, args) = guardduty("POST", "/tags/$(resourceArn)", args)
TagResource(a...; b...) = TagResource(a..., b)

"""
    UnarchiveFindings()

Unarchives GuardDuty findings specified by the findingIds.

Required Parameters
{
  "DetectorId": "The ID of the detector associated with the findings to unarchive.",
  "FindingIds": "The IDs of the findings to unarchive."
}
"""
UnarchiveFindings(DetectorId, FindingIds) = guardduty("POST", "/detector/$(detectorId)/findings/unarchive")
UnarchiveFindings(DetectorId, FindingIds, args) = guardduty("POST", "/detector/$(detectorId)/findings/unarchive", args)
UnarchiveFindings(a...; b...) = UnarchiveFindings(a..., b)

"""
    UntagResource()

Removes tags from a resource.

Required Parameters
{
  "ResourceArn": "The Amazon Resource Name (ARN) for the resource to remove tags from.",
  "TagKeys": "The tag keys to remove from the resource."
}
"""
UntagResource(ResourceArn, TagKeys) = guardduty("DELETE", "/tags/$(resourceArn)")
UntagResource(ResourceArn, TagKeys, args) = guardduty("DELETE", "/tags/$(resourceArn)", args)
UntagResource(a...; b...) = UntagResource(a..., b)

"""
    UpdateDetector()

Updates the Amazon GuardDuty detector specified by the detectorId.

Required Parameters
{
  "DetectorId": "The unique ID of the detector to update."
}

Optional Parameters
{
  "Enable": "Specifies whether the detector is enabled or not enabled.",
  "FindingPublishingFrequency": "An enum value that specifies how frequently findings are exported, such as to CloudWatch Events."
}
"""
UpdateDetector(DetectorId) = guardduty("POST", "/detector/$(detectorId)")
UpdateDetector(DetectorId, args) = guardduty("POST", "/detector/$(detectorId)", args)
UpdateDetector(a...; b...) = UpdateDetector(a..., b)

"""
    UpdateFilter()

Updates the filter specified by the filter name.

Required Parameters
{
  "DetectorId": "The unique ID of the detector that specifies the GuardDuty service where you want to update a filter.",
  "FilterName": "The name of the filter."
}

Optional Parameters
{
  "Action": "Specifies the action that is to be applied to the findings that match the filter.",
  "Description": "The description of the filter.",
  "FindingCriteria": "Represents the criteria to be used in the filter for querying findings.",
  "Rank": "Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings."
}
"""
UpdateFilter(DetectorId, FilterName) = guardduty("POST", "/detector/$(detectorId)/filter/$(filterName)")
UpdateFilter(DetectorId, FilterName, args) = guardduty("POST", "/detector/$(detectorId)/filter/$(filterName)", args)
UpdateFilter(a...; b...) = UpdateFilter(a..., b)

"""
    UpdateFindingsFeedback()

Marks the specified GuardDuty findings as useful or not useful.

Required Parameters
{
  "DetectorId": "The ID of the detector associated with the findings to update feedback for.",
  "Feedback": "The feedback for the finding.",
  "FindingIds": "The IDs of the findings that you want to mark as useful or not useful."
}

Optional Parameters
{
  "Comments": "Additional feedback about the GuardDuty findings."
}
"""
UpdateFindingsFeedback(DetectorId, Feedback, FindingIds) = guardduty("POST", "/detector/$(detectorId)/findings/feedback")
UpdateFindingsFeedback(DetectorId, Feedback, FindingIds, args) = guardduty("POST", "/detector/$(detectorId)/findings/feedback", args)
UpdateFindingsFeedback(a...; b...) = UpdateFindingsFeedback(a..., b)

"""
    UpdateIPSet()

Updates the IPSet specified by the IPSet ID.

Required Parameters
{
  "DetectorId": "The detectorID that specifies the GuardDuty service whose IPSet you want to update.",
  "IpSetId": "The unique ID that specifies the IPSet that you want to update."
}

Optional Parameters
{
  "Activate": "The updated Boolean value that specifies whether the IPSet is active or not.",
  "Location": "The updated URI of the file that contains the IPSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.",
  "Name": "The unique ID that specifies the IPSet that you want to update."
}
"""
UpdateIPSet(DetectorId, IpSetId) = guardduty("POST", "/detector/$(detectorId)/ipset/$(ipSetId)")
UpdateIPSet(DetectorId, IpSetId, args) = guardduty("POST", "/detector/$(detectorId)/ipset/$(ipSetId)", args)
UpdateIPSet(a...; b...) = UpdateIPSet(a..., b)

"""
    UpdateOrganizationConfiguration()

Updates the delegated administrator account with the values provided.

Required Parameters
{
  "AutoEnable": "Indicates whether to automatically enable member accounts in the organization.",
  "DetectorId": "The ID of the detector to update the delegated administrator for."
}
"""
UpdateOrganizationConfiguration(AutoEnable, DetectorId) = guardduty("POST", "/detector/$(detectorId)/admin")
UpdateOrganizationConfiguration(AutoEnable, DetectorId, args) = guardduty("POST", "/detector/$(detectorId)/admin", args)
UpdateOrganizationConfiguration(a...; b...) = UpdateOrganizationConfiguration(a..., b)

"""
    UpdatePublishingDestination()

Updates information about the publishing destination specified by the destinationId.

Required Parameters
{
  "DestinationId": "The ID of the publishing destination to update.",
  "DetectorId": "The ID of the detector associated with the publishing destinations to update."
}

Optional Parameters
{
  "DestinationProperties": "A DestinationProperties object that includes the DestinationArn and KmsKeyArn of the publishing destination."
}
"""
UpdatePublishingDestination(DestinationId, DetectorId) = guardduty("POST", "/detector/$(detectorId)/publishingDestination/$(destinationId)")
UpdatePublishingDestination(DestinationId, DetectorId, args) = guardduty("POST", "/detector/$(detectorId)/publishingDestination/$(destinationId)", args)
UpdatePublishingDestination(a...; b...) = UpdatePublishingDestination(a..., b)

"""
    UpdateThreatIntelSet()

Updates the ThreatIntelSet specified by the ThreatIntelSet ID.

Required Parameters
{
  "DetectorId": "The detectorID that specifies the GuardDuty service whose ThreatIntelSet you want to update.",
  "ThreatIntelSetId": "The unique ID that specifies the ThreatIntelSet that you want to update."
}

Optional Parameters
{
  "Activate": "The updated Boolean value that specifies whether the ThreateIntelSet is active or not.",
  "Location": "The updated URI of the file that contains the ThreateIntelSet. For example: https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key.",
  "Name": "The unique ID that specifies the ThreatIntelSet that you want to update."
}
"""
UpdateThreatIntelSet(DetectorId, ThreatIntelSetId) = guardduty("POST", "/detector/$(detectorId)/threatintelset/$(threatIntelSetId)")
UpdateThreatIntelSet(DetectorId, ThreatIntelSetId, args) = guardduty("POST", "/detector/$(detectorId)/threatintelset/$(threatIntelSetId)", args)
UpdateThreatIntelSet(a...; b...) = UpdateThreatIntelSet(a..., b)
