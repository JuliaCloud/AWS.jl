# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: auditmanager
using AWS.Compat
using AWS.UUIDs

"""
    AssociateAssessmentReportEvidenceFolder()

 Associates an evidence folder to the specified assessment report in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `evidenceFolderId`:  The identifier for the folder in which evidence is stored. 

"""
associate_assessment_report_evidence_folder(assessmentId, evidenceFolderId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/associateToAssessmentReport", Dict{String, Any}("evidenceFolderId"=>evidenceFolderId); aws_config=aws_config)
associate_assessment_report_evidence_folder(assessmentId, evidenceFolderId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/associateToAssessmentReport", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("evidenceFolderId"=>evidenceFolderId), args)); aws_config=aws_config)

"""
    BatchAssociateAssessmentReportEvidence()

 Associates a list of evidence to an assessment report in an AWS Audit Manager assessment. 

# Required Parameters
- `assessmentId`:  The unique identifier for the specified assessment. 
- `evidenceFolderId`:  The identifier for the folder in which the evidence is stored. 
- `evidenceIds`:  The list of evidence identifiers. 

"""
batch_associate_assessment_report_evidence(assessmentId, evidenceFolderId, evidenceIds; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/batchAssociateToAssessmentReport", Dict{String, Any}("evidenceFolderId"=>evidenceFolderId, "evidenceIds"=>evidenceIds); aws_config=aws_config)
batch_associate_assessment_report_evidence(assessmentId, evidenceFolderId, evidenceIds, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/batchAssociateToAssessmentReport", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("evidenceFolderId"=>evidenceFolderId, "evidenceIds"=>evidenceIds), args)); aws_config=aws_config)

"""
    BatchCreateDelegationByAssessment()

 Create a batch of delegations for a specified assessment in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `createDelegationRequests`:  The API request to batch create delegations in AWS Audit Manager. 

"""
batch_create_delegation_by_assessment(assessmentId, createDelegationRequests; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/assessments/$(assessmentId)/delegations", Dict{String, Any}("createDelegationRequests"=>createDelegationRequests); aws_config=aws_config)
batch_create_delegation_by_assessment(assessmentId, createDelegationRequests, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/assessments/$(assessmentId)/delegations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("createDelegationRequests"=>createDelegationRequests), args)); aws_config=aws_config)

"""
    BatchDeleteDelegationByAssessment()

 Deletes the delegations in the specified AWS Audit Manager assessment. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `delegationIds`:  The identifiers for the specified delegations. 

"""
batch_delete_delegation_by_assessment(assessmentId, delegationIds; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/delegations", Dict{String, Any}("delegationIds"=>delegationIds); aws_config=aws_config)
batch_delete_delegation_by_assessment(assessmentId, delegationIds, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/delegations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("delegationIds"=>delegationIds), args)); aws_config=aws_config)

"""
    BatchDisassociateAssessmentReportEvidence()

 Disassociates a list of evidence from the specified assessment report in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `evidenceFolderId`:  The identifier for the folder in which evidence is stored. 
- `evidenceIds`:  The list of evidence identifiers. 

"""
batch_disassociate_assessment_report_evidence(assessmentId, evidenceFolderId, evidenceIds; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/batchDisassociateFromAssessmentReport", Dict{String, Any}("evidenceFolderId"=>evidenceFolderId, "evidenceIds"=>evidenceIds); aws_config=aws_config)
batch_disassociate_assessment_report_evidence(assessmentId, evidenceFolderId, evidenceIds, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/batchDisassociateFromAssessmentReport", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("evidenceFolderId"=>evidenceFolderId, "evidenceIds"=>evidenceIds), args)); aws_config=aws_config)

"""
    BatchImportEvidenceToAssessmentControl()

 Uploads one or more pieces of evidence to the specified control in the assessment in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `controlId`:  The identifier for the specified control. 
- `controlSetId`:  The identifier for the specified control set. 
- `manualEvidence`:  The list of manual evidence objects. 

"""
batch_import_evidence_to_assessment_control(assessmentId, controlId, controlSetId, manualEvidence; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/assessments/$(assessmentId)/controlSets/$(controlSetId)/controls/$(controlId)/evidence", Dict{String, Any}("manualEvidence"=>manualEvidence); aws_config=aws_config)
batch_import_evidence_to_assessment_control(assessmentId, controlId, controlSetId, manualEvidence, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/assessments/$(assessmentId)/controlSets/$(controlSetId)/controls/$(controlId)/evidence", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("manualEvidence"=>manualEvidence), args)); aws_config=aws_config)

"""
    CreateAssessment()

 Creates an assessment in AWS Audit Manager. 

# Required Parameters
- `assessmentReportsDestination`:  The assessment report storage destination for the specified assessment that is being created. 
- `frameworkId`:  The identifier for the specified framework. 
- `name`:  The name of the assessment to be created. 
- `roles`:  The list of roles for the specified assessment. 
- `scope`: 

# Optional Parameters
- `description`:  The optional description of the assessment to be created. 
- `tags`:  The tags associated with the assessment. 
"""
create_assessment(assessmentReportsDestination, frameworkId, name, roles, scope; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/assessments", Dict{String, Any}("assessmentReportsDestination"=>assessmentReportsDestination, "frameworkId"=>frameworkId, "name"=>name, "roles"=>roles, "scope"=>scope); aws_config=aws_config)
create_assessment(assessmentReportsDestination, frameworkId, name, roles, scope, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/assessments", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assessmentReportsDestination"=>assessmentReportsDestination, "frameworkId"=>frameworkId, "name"=>name, "roles"=>roles, "scope"=>scope), args)); aws_config=aws_config)

"""
    CreateAssessmentFramework()

 Creates a custom framework in AWS Audit Manager. 

# Required Parameters
- `controlSets`:  The control sets to be associated with the framework. 
- `name`:  The name of the new custom framework. 

# Optional Parameters
- `complianceType`:  The compliance type that the new custom framework supports, such as CIS or HIPAA. 
- `description`:  An optional description for the new custom framework. 
"""
create_assessment_framework(controlSets, name; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/assessmentFrameworks", Dict{String, Any}("controlSets"=>controlSets, "name"=>name); aws_config=aws_config)
create_assessment_framework(controlSets, name, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/assessmentFrameworks", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("controlSets"=>controlSets, "name"=>name), args)); aws_config=aws_config)

"""
    CreateAssessmentReport()

 Creates an assessment report for the specified assessment. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `name`:  The name of the new assessment report. 

# Optional Parameters
- `description`:  The description of the assessment report. 
"""
create_assessment_report(assessmentId, name; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/assessments/$(assessmentId)/reports", Dict{String, Any}("name"=>name); aws_config=aws_config)
create_assessment_report(assessmentId, name, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/assessments/$(assessmentId)/reports", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), args)); aws_config=aws_config)

"""
    CreateControl()

 Creates a new custom control in AWS Audit Manager. 

# Required Parameters
- `controlMappingSources`:  The data source that determines from where AWS Audit Manager collects evidence for the control. 
- `name`:  The name of the control. 

# Optional Parameters
- `actionPlanInstructions`:  The recommended actions to carry out if the control is not fulfilled. 
- `actionPlanTitle`:  The title of the action plan for remediating the control. 
- `description`:  The description of the control. 
- `tags`:  The tags associated with the control. 
- `testingInformation`:  The steps to follow to determine if the control has been satisfied. 
"""
create_control(controlMappingSources, name; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/controls", Dict{String, Any}("controlMappingSources"=>controlMappingSources, "name"=>name); aws_config=aws_config)
create_control(controlMappingSources, name, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/controls", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("controlMappingSources"=>controlMappingSources, "name"=>name), args)); aws_config=aws_config)

"""
    DeleteAssessment()

 Deletes an assessment in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 

"""
delete_assessment(assessmentId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("DELETE", "/assessments/$(assessmentId)"; aws_config=aws_config)
delete_assessment(assessmentId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("DELETE", "/assessments/$(assessmentId)", args; aws_config=aws_config)

"""
    DeleteAssessmentFramework()

 Deletes a custom framework in AWS Audit Manager. 

# Required Parameters
- `frameworkId`:  The identifier for the specified framework. 

"""
delete_assessment_framework(frameworkId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("DELETE", "/assessmentFrameworks/$(frameworkId)"; aws_config=aws_config)
delete_assessment_framework(frameworkId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("DELETE", "/assessmentFrameworks/$(frameworkId)", args; aws_config=aws_config)

"""
    DeleteAssessmentReport()

 Deletes an assessment report from an assessment in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `assessmentReportId`:  The unique identifier for the assessment report. 

"""
delete_assessment_report(assessmentId, assessmentReportId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("DELETE", "/assessments/$(assessmentId)/reports/$(assessmentReportId)"; aws_config=aws_config)
delete_assessment_report(assessmentId, assessmentReportId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("DELETE", "/assessments/$(assessmentId)/reports/$(assessmentReportId)", args; aws_config=aws_config)

"""
    DeleteControl()

 Deletes a custom control in AWS Audit Manager. 

# Required Parameters
- `controlId`:  The identifier for the specified control. 

"""
delete_control(controlId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("DELETE", "/controls/$(controlId)"; aws_config=aws_config)
delete_control(controlId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("DELETE", "/controls/$(controlId)", args; aws_config=aws_config)

"""
    DeregisterAccount()

 Deregisters an account in AWS Audit Manager. 

"""
deregister_account(; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/account/deregisterAccount"; aws_config=aws_config)
deregister_account(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/account/deregisterAccount", args; aws_config=aws_config)

"""
    DeregisterOrganizationAdminAccount()

 Deregisters the delegated AWS administrator account from the AWS organization. 

# Optional Parameters
- `adminAccountId`:  The identifier for the specified administrator account. 
"""
deregister_organization_admin_account(; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/account/deregisterOrganizationAdminAccount"; aws_config=aws_config)
deregister_organization_admin_account(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/account/deregisterOrganizationAdminAccount", args; aws_config=aws_config)

"""
    DisassociateAssessmentReportEvidenceFolder()

 Disassociates an evidence folder from the specified assessment report in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `evidenceFolderId`:  The identifier for the folder in which evidence is stored. 

"""
disassociate_assessment_report_evidence_folder(assessmentId, evidenceFolderId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/disassociateFromAssessmentReport", Dict{String, Any}("evidenceFolderId"=>evidenceFolderId); aws_config=aws_config)
disassociate_assessment_report_evidence_folder(assessmentId, evidenceFolderId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/disassociateFromAssessmentReport", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("evidenceFolderId"=>evidenceFolderId), args)); aws_config=aws_config)

"""
    GetAccountStatus()

 Returns the registration status of an account in AWS Audit Manager. 

"""
get_account_status(; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/account/status"; aws_config=aws_config)
get_account_status(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/account/status", args; aws_config=aws_config)

"""
    GetAssessment()

 Returns an assessment from AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 

"""
get_assessment(assessmentId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)"; aws_config=aws_config)
get_assessment(assessmentId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)", args; aws_config=aws_config)

"""
    GetAssessmentFramework()

 Returns a framework from AWS Audit Manager. 

# Required Parameters
- `frameworkId`:  The identifier for the specified framework. 

"""
get_assessment_framework(frameworkId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessmentFrameworks/$(frameworkId)"; aws_config=aws_config)
get_assessment_framework(frameworkId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessmentFrameworks/$(frameworkId)", args; aws_config=aws_config)

"""
    GetAssessmentReportUrl()

 Returns the URL of a specified assessment report in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `assessmentReportId`:  The identifier for the assessment report. 

"""
get_assessment_report_url(assessmentId, assessmentReportId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/reports/$(assessmentReportId)/url"; aws_config=aws_config)
get_assessment_report_url(assessmentId, assessmentReportId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/reports/$(assessmentReportId)/url", args; aws_config=aws_config)

"""
    GetChangeLogs()

 Returns a list of changelogs from AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 

# Optional Parameters
- `controlId`:  The identifier for the specified control. 
- `controlSetId`:  The identifier for the specified control set. 
- `maxResults`:  Represents the maximum number of results per page, or per API request call. 
- `nextToken`:  The pagination token used to fetch the next set of results. 
"""
get_change_logs(assessmentId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/changelogs"; aws_config=aws_config)
get_change_logs(assessmentId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/changelogs", args; aws_config=aws_config)

"""
    GetControl()

 Returns a control from AWS Audit Manager. 

# Required Parameters
- `controlId`:  The identifier for the specified control. 

"""
get_control(controlId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/controls/$(controlId)"; aws_config=aws_config)
get_control(controlId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/controls/$(controlId)", args; aws_config=aws_config)

"""
    GetDelegations()

 Returns a list of delegations from an audit owner to a delegate. 

# Optional Parameters
- `maxResults`:  Represents the maximum number of results per page, or per API request call. 
- `nextToken`:  The pagination token used to fetch the next set of results. 
"""
get_delegations(; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/delegations"; aws_config=aws_config)
get_delegations(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/delegations", args; aws_config=aws_config)

"""
    GetEvidence()

 Returns evidence from AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `controlSetId`:  The identifier for the specified control set. 
- `evidenceFolderId`:  The identifier for the folder in which the evidence is stored. 
- `evidenceId`:  The identifier for the evidence. 

"""
get_evidence(assessmentId, controlSetId, evidenceFolderId, evidenceId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/controlSets/$(controlSetId)/evidenceFolders/$(evidenceFolderId)/evidence/$(evidenceId)"; aws_config=aws_config)
get_evidence(assessmentId, controlSetId, evidenceFolderId, evidenceId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/controlSets/$(controlSetId)/evidenceFolders/$(evidenceFolderId)/evidence/$(evidenceId)", args; aws_config=aws_config)

"""
    GetEvidenceByEvidenceFolder()

 Returns all evidence from a specified evidence folder in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `controlSetId`:  The identifier for the control set. 
- `evidenceFolderId`:  The unique identifier for the folder in which the evidence is stored. 

# Optional Parameters
- `maxResults`:  Represents the maximum number of results per page, or per API request call. 
- `nextToken`:  The pagination token used to fetch the next set of results. 
"""
get_evidence_by_evidence_folder(assessmentId, controlSetId, evidenceFolderId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/controlSets/$(controlSetId)/evidenceFolders/$(evidenceFolderId)/evidence"; aws_config=aws_config)
get_evidence_by_evidence_folder(assessmentId, controlSetId, evidenceFolderId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/controlSets/$(controlSetId)/evidenceFolders/$(evidenceFolderId)/evidence", args; aws_config=aws_config)

"""
    GetEvidenceFolder()

 Returns an evidence folder from the specified assessment in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `controlSetId`:  The identifier for the specified control set. 
- `evidenceFolderId`:  The identifier for the folder in which the evidence is stored. 

"""
get_evidence_folder(assessmentId, controlSetId, evidenceFolderId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/controlSets/$(controlSetId)/evidenceFolders/$(evidenceFolderId)"; aws_config=aws_config)
get_evidence_folder(assessmentId, controlSetId, evidenceFolderId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/controlSets/$(controlSetId)/evidenceFolders/$(evidenceFolderId)", args; aws_config=aws_config)

"""
    GetEvidenceFoldersByAssessment()

 Returns the evidence folders from a specified assessment in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 

# Optional Parameters
- `maxResults`:  Represents the maximum number of results per page, or per API request call. 
- `nextToken`:  The pagination token used to fetch the next set of results. 
"""
get_evidence_folders_by_assessment(assessmentId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/evidenceFolders"; aws_config=aws_config)
get_evidence_folders_by_assessment(assessmentId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/evidenceFolders", args; aws_config=aws_config)

"""
    GetEvidenceFoldersByAssessmentControl()

 Returns a list of evidence folders associated with a specified control of an assessment in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `controlId`:  The identifier for the specified control. 
- `controlSetId`:  The identifier for the specified control set. 

# Optional Parameters
- `maxResults`:  Represents the maximum number of results per page, or per API request call. 
- `nextToken`:  The pagination token used to fetch the next set of results. 
"""
get_evidence_folders_by_assessment_control(assessmentId, controlId, controlSetId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/evidenceFolders-by-assessment-control/$(controlSetId)/$(controlId)"; aws_config=aws_config)
get_evidence_folders_by_assessment_control(assessmentId, controlId, controlSetId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments/$(assessmentId)/evidenceFolders-by-assessment-control/$(controlSetId)/$(controlId)", args; aws_config=aws_config)

"""
    GetOrganizationAdminAccount()

 Returns the name of the delegated AWS administrator account for the AWS organization. 

"""
get_organization_admin_account(; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/account/organizationAdminAccount"; aws_config=aws_config)
get_organization_admin_account(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/account/organizationAdminAccount", args; aws_config=aws_config)

"""
    GetServicesInScope()

 Returns a list of the in-scope AWS services for the specified assessment. 

"""
get_services_in_scope(; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/services"; aws_config=aws_config)
get_services_in_scope(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/services", args; aws_config=aws_config)

"""
    GetSettings()

 Returns the settings for the specified AWS account. 

# Required Parameters
- `attribute`:  The list of SettingAttribute enum values. 

"""
get_settings(attribute; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/settings/$(attribute)"; aws_config=aws_config)
get_settings(attribute, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/settings/$(attribute)", args; aws_config=aws_config)

"""
    ListAssessmentFrameworks()

 Returns a list of the frameworks available in the AWS Audit Manager framework library. 

# Required Parameters
- `frameworkType`:  The type of framework, such as standard or custom. 

# Optional Parameters
- `maxResults`:  Represents the maximum number of results per page, or per API request call. 
- `nextToken`:  The pagination token used to fetch the next set of results. 
"""
list_assessment_frameworks(frameworkType; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessmentFrameworks", Dict{String, Any}("frameworkType"=>frameworkType); aws_config=aws_config)
list_assessment_frameworks(frameworkType, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessmentFrameworks", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("frameworkType"=>frameworkType), args)); aws_config=aws_config)

"""
    ListAssessmentReports()

 Returns a list of assessment reports created in AWS Audit Manager. 

# Optional Parameters
- `maxResults`:  Represents the maximum number of results per page, or per API request call. 
- `nextToken`:  The pagination token used to fetch the next set of results. 
"""
list_assessment_reports(; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessmentReports"; aws_config=aws_config)
list_assessment_reports(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessmentReports", args; aws_config=aws_config)

"""
    ListAssessments()

 Returns a list of current and past assessments from AWS Audit Manager. 

# Optional Parameters
- `maxResults`:  Represents the maximum number of results per page, or per API request call. 
- `nextToken`:  The pagination token used to fetch the next set of results. 
"""
list_assessments(; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments"; aws_config=aws_config)
list_assessments(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/assessments", args; aws_config=aws_config)

"""
    ListControls()

 Returns a list of controls from AWS Audit Manager. 

# Required Parameters
- `controlType`:  The type of control, such as standard or custom. 

# Optional Parameters
- `maxResults`:  Represents the maximum number of results per page, or per API request call. 
- `nextToken`:  The pagination token used to fetch the next set of results. 
"""
list_controls(controlType; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/controls", Dict{String, Any}("controlType"=>controlType); aws_config=aws_config)
list_controls(controlType, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/controls", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("controlType"=>controlType), args)); aws_config=aws_config)

"""
    ListKeywordsForDataSource()

 Returns a list of keywords that pre-mapped to the specified control data source. 

# Required Parameters
- `source`:  The control mapping data source to which the keywords apply. 

# Optional Parameters
- `maxResults`:  Represents the maximum number of results per page, or per API request call. 
- `nextToken`:  The pagination token used to fetch the next set of results. 
"""
list_keywords_for_data_source(source; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/dataSourceKeywords", Dict{String, Any}("source"=>source); aws_config=aws_config)
list_keywords_for_data_source(source, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/dataSourceKeywords", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("source"=>source), args)); aws_config=aws_config)

"""
    ListNotifications()

 Returns a list of all AWS Audit Manager notifications. 

# Optional Parameters
- `maxResults`:  Represents the maximum number of results per page, or per API request call. 
- `nextToken`:  The pagination token used to fetch the next set of results. 
"""
list_notifications(; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/notifications"; aws_config=aws_config)
list_notifications(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/notifications", args; aws_config=aws_config)

"""
    ListTagsForResource()

 Returns a list of tags for the specified resource in AWS Audit Manager. 

# Required Parameters
- `resourceArn`:  The Amazon Resource Name (ARN) of the specified resource. 

"""
list_tags_for_resource(resourceArn; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/tags/$(resourceArn)"; aws_config=aws_config)
list_tags_for_resource(resourceArn, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("GET", "/tags/$(resourceArn)", args; aws_config=aws_config)

"""
    RegisterAccount()

 Enables AWS Audit Manager for the specified AWS account. 

# Optional Parameters
- `delegatedAdminAccount`:  The delegated administrator account for AWS Audit Manager. 
- `kmsKey`:  The AWS KMS key details. 
"""
register_account(; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/account/registerAccount"; aws_config=aws_config)
register_account(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/account/registerAccount", args; aws_config=aws_config)

"""
    RegisterOrganizationAdminAccount()

 Enables an AWS account within the organization as the delegated administrator for AWS Audit Manager. 

# Required Parameters
- `adminAccountId`:  The identifier for the specified delegated administrator account. 

"""
register_organization_admin_account(adminAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/account/registerOrganizationAdminAccount", Dict{String, Any}("adminAccountId"=>adminAccountId); aws_config=aws_config)
register_organization_admin_account(adminAccountId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/account/registerOrganizationAdminAccount", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("adminAccountId"=>adminAccountId), args)); aws_config=aws_config)

"""
    TagResource()

 Tags the specified resource in AWS Audit Manager. 

# Required Parameters
- `resourceArn`:  The Amazon Resource Name (ARN) of the specified resource. 
- `tags`:  The tags to be associated with the resource. 

"""
tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/tags/$(resourceArn)", Dict{String, Any}("tags"=>tags); aws_config=aws_config)
tag_resource(resourceArn, tags, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tags"=>tags), args)); aws_config=aws_config)

"""
    UntagResource()

 Removes a tag from a resource in AWS Audit Manager. 

# Required Parameters
- `resourceArn`:  The Amazon Resource Name (ARN) of the specified resource. 
- `tagKeys`:  The name or key of the tag. 

"""
untag_resource(resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("DELETE", "/tags/$(resourceArn)", Dict{String, Any}("tagKeys"=>tagKeys); aws_config=aws_config)
untag_resource(resourceArn, tagKeys, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("DELETE", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), args)); aws_config=aws_config)

"""
    UpdateAssessment()

 Edits an AWS Audit Manager assessment. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `scope`:  The scope of the specified assessment. 

# Optional Parameters
- `assessmentDescription`:  The description of the specified assessment. 
- `assessmentName`:  The name of the specified assessment to be updated. 
- `assessmentReportsDestination`:  The assessment report storage destination for the specified assessment that is being updated. 
- `roles`:  The list of roles for the specified assessment. 
"""
update_assessment(assessmentId, scope; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)", Dict{String, Any}("scope"=>scope); aws_config=aws_config)
update_assessment(assessmentId, scope, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("scope"=>scope), args)); aws_config=aws_config)

"""
    UpdateAssessmentControl()

 Updates a control within an assessment in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `controlId`:  The identifier for the specified control. 
- `controlSetId`:  The identifier for the specified control set. 

# Optional Parameters
- `commentBody`:  The comment body text for the specified control. 
- `controlStatus`:  The status of the specified control. 
"""
update_assessment_control(assessmentId, controlId, controlSetId; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/controlSets/$(controlSetId)/controls/$(controlId)"; aws_config=aws_config)
update_assessment_control(assessmentId, controlId, controlSetId, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/controlSets/$(controlSetId)/controls/$(controlId)", args; aws_config=aws_config)

"""
    UpdateAssessmentControlSetStatus()

 Updates the status of a control set in an AWS Audit Manager assessment. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `comment`:  The comment related to the status update. 
- `controlSetId`:  The identifier for the specified control set. 
- `status`:  The status of the control set that is being updated. 

"""
update_assessment_control_set_status(assessmentId, comment, controlSetId, status; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/controlSets/$(controlSetId)/status", Dict{String, Any}("comment"=>comment, "status"=>status); aws_config=aws_config)
update_assessment_control_set_status(assessmentId, comment, controlSetId, status, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/controlSets/$(controlSetId)/status", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("comment"=>comment, "status"=>status), args)); aws_config=aws_config)

"""
    UpdateAssessmentFramework()

 Updates a custom framework in AWS Audit Manager. 

# Required Parameters
- `controlSets`:  The control sets associated with the framework. 
- `frameworkId`:  The identifier for the specified framework. 
- `name`:  The name of the framework to be updated. 

# Optional Parameters
- `complianceType`:  The compliance type that the new custom framework supports, such as CIS or HIPAA. 
- `description`:  The description of the framework that is to be updated. 
"""
update_assessment_framework(controlSets, frameworkId, name; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessmentFrameworks/$(frameworkId)", Dict{String, Any}("controlSets"=>controlSets, "name"=>name); aws_config=aws_config)
update_assessment_framework(controlSets, frameworkId, name, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessmentFrameworks/$(frameworkId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("controlSets"=>controlSets, "name"=>name), args)); aws_config=aws_config)

"""
    UpdateAssessmentStatus()

 Updates the status of an assessment in AWS Audit Manager. 

# Required Parameters
- `assessmentId`:  The identifier for the specified assessment. 
- `status`:  The current status of the specified assessment. 

"""
update_assessment_status(assessmentId, status; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/status", Dict{String, Any}("status"=>status); aws_config=aws_config)
update_assessment_status(assessmentId, status, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/assessments/$(assessmentId)/status", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("status"=>status), args)); aws_config=aws_config)

"""
    UpdateControl()

 Updates a custom control in AWS Audit Manager. 

# Required Parameters
- `controlId`:  The identifier for the specified control. 
- `controlMappingSources`:  The data source that determines from where AWS Audit Manager collects evidence for the control. 
- `name`:  The name of the control to be updated. 

# Optional Parameters
- `actionPlanInstructions`:  The recommended actions to carry out if the control is not fulfilled. 
- `actionPlanTitle`:  The title of the action plan for remediating the control. 
- `description`:  The optional description of the control. 
- `testingInformation`:  The steps that to follow to determine if the control has been satisfied. 
"""
update_control(controlId, controlMappingSources, name; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/controls/$(controlId)", Dict{String, Any}("controlMappingSources"=>controlMappingSources, "name"=>name); aws_config=aws_config)
update_control(controlId, controlMappingSources, name, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/controls/$(controlId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("controlMappingSources"=>controlMappingSources, "name"=>name), args)); aws_config=aws_config)

"""
    UpdateSettings()

 Updates AWS Audit Manager settings for the current user account. 

# Optional Parameters
- `defaultAssessmentReportsDestination`:  The default storage destination for assessment reports. 
- `defaultProcessOwners`:  A list of the default audit owners. 
- `kmsKey`:  The AWS KMS key details. 
- `snsTopic`:  The Amazon Simple Notification Service (Amazon SNS) topic to which AWS Audit Manager sends notifications. 
"""
update_settings(; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/settings"; aws_config=aws_config)
update_settings(args::AbstractDict{String, Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("PUT", "/settings", args; aws_config=aws_config)

"""
    ValidateAssessmentReportIntegrity()

 Validates the integrity of an assessment report in AWS Audit Manager. 

# Required Parameters
- `s3RelativePath`:  The relative path of the specified Amazon S3 bucket in which the assessment report is stored. 

"""
validate_assessment_report_integrity(s3RelativePath; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/assessmentReports/integrity", Dict{String, Any}("s3RelativePath"=>s3RelativePath); aws_config=aws_config)
validate_assessment_report_integrity(s3RelativePath, args::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = auditmanager("POST", "/assessmentReports/integrity", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("s3RelativePath"=>s3RelativePath), args)); aws_config=aws_config)
