# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: pcs
using AWS.Compat
using AWS.UUIDs

"""
    create_cluster(cluster_name, networking, scheduler, size)
    create_cluster(cluster_name, networking, scheduler, size, params::Dict{String,<:Any})

Creates a cluster in your account. Amazon Web Services PCS creates the cluster controller
in a service-owned account. The cluster controller communicates with the cluster resources
in your account. The subnets and security groups for the cluster must already exist before
you use this API action.  It takes time for Amazon Web Services PCS to create the cluster.
The cluster is in a Creating state until it is ready to use. There can only be 1 cluster in
a Creating state per Amazon Web Services Region per Amazon Web Services account.
CreateCluster fails with a ServiceQuotaExceededException if there is already a cluster in a
Creating state.

# Arguments
- `cluster_name`: A name to identify the cluster. Example: MyCluster
- `networking`: The networking configuration used to set up the cluster's control plane.
- `scheduler`: The cluster management and job scheduling software associated with the
  cluster.
- `size`: A value that determines the maximum number of compute nodes in the cluster and
  the maximum number of jobs (active and queued).    SMALL: 32 compute nodes and 256 jobs
  MEDIUM: 512 compute nodes and 8192 jobs    LARGE: 2048 compute nodes and 16,384 jobs

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: A unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. Idempotency ensures that an API request completes only once.
  With an idempotent request, if the original request completes successfully, the subsequent
  retries with the same client token return the result from the original successful request
  and they have no additional effect. If you don't specify a client token, the CLI and SDK
  automatically generate 1 for you.
- `"slurmConfiguration"`: Additional options related to the Slurm scheduler.
- `"tags"`: 1 or more tags added to the resource. Each tag consists of a tag key and tag
  value. The tag value is optional and can be an empty string.
"""
create_cluster(
    clusterName,
    networking,
    scheduler,
    size;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = pcs(
    "CreateCluster",
    Dict{String,Any}(
        "clusterName" => clusterName,
        "networking" => networking,
        "scheduler" => scheduler,
        "size" => size,
        "clientToken" => string(uuid4()),
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_cluster(
    clusterName,
    networking,
    scheduler,
    size,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "CreateCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "clusterName" => clusterName,
                    "networking" => networking,
                    "scheduler" => scheduler,
                    "size" => size,
                    "clientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_compute_node_group(cluster_identifier, compute_node_group_name, custom_launch_template, iam_instance_profile_arn, instance_configs, scaling_configuration, subnet_ids)
    create_compute_node_group(cluster_identifier, compute_node_group_name, custom_launch_template, iam_instance_profile_arn, instance_configs, scaling_configuration, subnet_ids, params::Dict{String,<:Any})

Creates a managed set of compute nodes. You associate a compute node group with a cluster
through 1 or more Amazon Web Services PCS queues or as part of the login fleet. A compute
node group includes the definition of the compute properties and lifecycle management.
Amazon Web Services PCS uses the information you provide to this API action to launch
compute nodes in your account. You can only specify subnets in the same Amazon VPC as your
cluster. You receive billing charges for the compute nodes that Amazon Web Services PCS
launches in your account. You must already have a launch template before you call this API.
For more information, see Launch an instance from a launch template in the Amazon Elastic
Compute Cloud User Guide for Linux Instances.

# Arguments
- `cluster_identifier`: The name or ID of the cluster to create a compute node group in.
- `compute_node_group_name`: A name to identify the cluster. Example: MyCluster
- `custom_launch_template`:
- `iam_instance_profile_arn`: The Amazon Resource Name (ARN) of the IAM instance profile
  used to pass an IAM role when launching EC2 instances. The role contained in your instance
  profile must have pcs:RegisterComputeNodeGroupInstance permissions attached in order to
  provision instances correctly. The resource identifier of the ARN must start with AWSPCS.
  For example, arn:aws:iam:123456789012:instance-profile/AWSPCSMyComputeNodeInstanceProfile.
- `instance_configs`: A list of EC2 instance configurations that Amazon Web Services PCS
  can provision in the compute node group.
- `scaling_configuration`: Specifies the boundaries of the compute node group auto scaling.
- `subnet_ids`: The list of subnet IDs where the compute node group launches instances.
  Subnets must be in the same VPC as the cluster.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"amiId"`:  The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to
  launch compute nodes (Amazon EC2 instances). If you don't provide this value, Amazon Web
  Services PCS uses the AMI ID specified in the custom launch template.
- `"clientToken"`: A unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. Idempotency ensures that an API request completes only once.
  With an idempotent request, if the original request completes successfully, the subsequent
  retries with the same client token return the result from the original successful request
  and they have no additional effect. If you don't specify a client token, the CLI and SDK
  automatically generate 1 for you.
- `"purchaseOption"`: Specifies how EC2 instances are purchased on your behalf. Amazon Web
  Services PCS supports On-Demand and Spot instances. For more information, see Instance
  purchasing options in the Amazon Elastic Compute Cloud User Guide. If you don't provide
  this option, it defaults to On-Demand.
- `"slurmConfiguration"`: Additional options related to the Slurm scheduler.
- `"spotOptions"`:
- `"tags"`: 1 or more tags added to the resource. Each tag consists of a tag key and tag
  value. The tag value is optional and can be an empty string.
"""
create_compute_node_group(
    clusterIdentifier,
    computeNodeGroupName,
    customLaunchTemplate,
    iamInstanceProfileArn,
    instanceConfigs,
    scalingConfiguration,
    subnetIds;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = pcs(
    "CreateComputeNodeGroup",
    Dict{String,Any}(
        "clusterIdentifier" => clusterIdentifier,
        "computeNodeGroupName" => computeNodeGroupName,
        "customLaunchTemplate" => customLaunchTemplate,
        "iamInstanceProfileArn" => iamInstanceProfileArn,
        "instanceConfigs" => instanceConfigs,
        "scalingConfiguration" => scalingConfiguration,
        "subnetIds" => subnetIds,
        "clientToken" => string(uuid4()),
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_compute_node_group(
    clusterIdentifier,
    computeNodeGroupName,
    customLaunchTemplate,
    iamInstanceProfileArn,
    instanceConfigs,
    scalingConfiguration,
    subnetIds,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "CreateComputeNodeGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "clusterIdentifier" => clusterIdentifier,
                    "computeNodeGroupName" => computeNodeGroupName,
                    "customLaunchTemplate" => customLaunchTemplate,
                    "iamInstanceProfileArn" => iamInstanceProfileArn,
                    "instanceConfigs" => instanceConfigs,
                    "scalingConfiguration" => scalingConfiguration,
                    "subnetIds" => subnetIds,
                    "clientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_queue(cluster_identifier, queue_name)
    create_queue(cluster_identifier, queue_name, params::Dict{String,<:Any})

Creates a job queue. You must associate 1 or more compute node groups with the queue. You
can associate 1 compute node group with multiple queues.

# Arguments
- `cluster_identifier`: The name or ID of the cluster for which to create a queue.
- `queue_name`: A name to identify the queue.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: A unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. Idempotency ensures that an API request completes only once.
  With an idempotent request, if the original request completes successfully, the subsequent
  retries with the same client token return the result from the original successful request
  and they have no additional effect. If you don't specify a client token, the CLI and SDK
  automatically generate 1 for you.
- `"computeNodeGroupConfigurations"`: The list of compute node group configurations to
  associate with the queue. Queues assign jobs to associated compute node groups.
- `"tags"`: 1 or more tags added to the resource. Each tag consists of a tag key and tag
  value. The tag value is optional and can be an empty string.
"""
create_queue(
    clusterIdentifier, queueName; aws_config::AbstractAWSConfig=global_aws_config()
) = pcs(
    "CreateQueue",
    Dict{String,Any}(
        "clusterIdentifier" => clusterIdentifier,
        "queueName" => queueName,
        "clientToken" => string(uuid4()),
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_queue(
    clusterIdentifier,
    queueName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "CreateQueue",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "clusterIdentifier" => clusterIdentifier,
                    "queueName" => queueName,
                    "clientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_cluster(cluster_identifier)
    delete_cluster(cluster_identifier, params::Dict{String,<:Any})

Deletes a cluster and all its linked resources. You must delete all queues and compute node
groups associated with the cluster before you can delete the cluster.

# Arguments
- `cluster_identifier`: The name or ID of the cluster to delete.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: A unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. Idempotency ensures that an API request completes only once.
  With an idempotent request, if the original request completes successfully, the subsequent
  retries with the same client token return the result from the original successful request
  and they have no additional effect. If you don't specify a client token, the CLI and SDK
  automatically generate 1 for you.
"""
delete_cluster(clusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()) = pcs(
    "DeleteCluster",
    Dict{String,Any}(
        "clusterIdentifier" => clusterIdentifier, "clientToken" => string(uuid4())
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function delete_cluster(
    clusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "DeleteCluster",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "clusterIdentifier" => clusterIdentifier,
                    "clientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_compute_node_group(cluster_identifier, compute_node_group_identifier)
    delete_compute_node_group(cluster_identifier, compute_node_group_identifier, params::Dict{String,<:Any})

Deletes a compute node group. You must delete all queues associated with the compute node
group first.

# Arguments
- `cluster_identifier`: The name or ID of the cluster of the compute node group.
- `compute_node_group_identifier`: The name or ID of the compute node group to delete.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: A unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. Idempotency ensures that an API request completes only once.
  With an idempotent request, if the original request completes successfully, the subsequent
  retries with the same client token return the result from the original successful request
  and they have no additional effect. If you don't specify a client token, the CLI and SDK
  automatically generate 1 for you.
"""
delete_compute_node_group(
    clusterIdentifier,
    computeNodeGroupIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = pcs(
    "DeleteComputeNodeGroup",
    Dict{String,Any}(
        "clusterIdentifier" => clusterIdentifier,
        "computeNodeGroupIdentifier" => computeNodeGroupIdentifier,
        "clientToken" => string(uuid4()),
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function delete_compute_node_group(
    clusterIdentifier,
    computeNodeGroupIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "DeleteComputeNodeGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "clusterIdentifier" => clusterIdentifier,
                    "computeNodeGroupIdentifier" => computeNodeGroupIdentifier,
                    "clientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_queue(cluster_identifier, queue_identifier)
    delete_queue(cluster_identifier, queue_identifier, params::Dict{String,<:Any})

Deletes a job queue. If the compute node group associated with this queue isn't associated
with any other queues, Amazon Web Services PCS terminates all the compute nodes for this
queue.

# Arguments
- `cluster_identifier`: The name or ID of the cluster of the queue.
- `queue_identifier`: The name or ID of the queue to delete.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: A unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. Idempotency ensures that an API request completes only once.
  With an idempotent request, if the original request completes successfully, the subsequent
  retries with the same client token return the result from the original successful request
  and they have no additional effect. If you don't specify a client token, the CLI and SDK
  automatically generate 1 for you.
"""
delete_queue(
    clusterIdentifier, queueIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
) = pcs(
    "DeleteQueue",
    Dict{String,Any}(
        "clusterIdentifier" => clusterIdentifier,
        "queueIdentifier" => queueIdentifier,
        "clientToken" => string(uuid4()),
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function delete_queue(
    clusterIdentifier,
    queueIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "DeleteQueue",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "clusterIdentifier" => clusterIdentifier,
                    "queueIdentifier" => queueIdentifier,
                    "clientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_cluster(cluster_identifier)
    get_cluster(cluster_identifier, params::Dict{String,<:Any})

Returns detailed information about a running cluster in your account. This API action
provides networking information, endpoint information for communication with the scheduler,
and provisioning status.

# Arguments
- `cluster_identifier`: The name or ID of the cluster of the queue.

"""
get_cluster(clusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()) = pcs(
    "GetCluster",
    Dict{String,Any}("clusterIdentifier" => clusterIdentifier);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function get_cluster(
    clusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "GetCluster",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("clusterIdentifier" => clusterIdentifier), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_compute_node_group(cluster_identifier, compute_node_group_identifier)
    get_compute_node_group(cluster_identifier, compute_node_group_identifier, params::Dict{String,<:Any})

Returns detailed information about a compute node group. This API action provides
networking information, EC2 instance type, compute node group status, and scheduler (such
as Slurm) configuration.

# Arguments
- `cluster_identifier`: The name or ID of the cluster.
- `compute_node_group_identifier`: The name or ID of the compute node group.

"""
get_compute_node_group(
    clusterIdentifier,
    computeNodeGroupIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = pcs(
    "GetComputeNodeGroup",
    Dict{String,Any}(
        "clusterIdentifier" => clusterIdentifier,
        "computeNodeGroupIdentifier" => computeNodeGroupIdentifier,
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function get_compute_node_group(
    clusterIdentifier,
    computeNodeGroupIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "GetComputeNodeGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "clusterIdentifier" => clusterIdentifier,
                    "computeNodeGroupIdentifier" => computeNodeGroupIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_queue(cluster_identifier, queue_identifier)
    get_queue(cluster_identifier, queue_identifier, params::Dict{String,<:Any})

Returns detailed information about a queue. The information includes the compute node
groups that the queue uses to schedule jobs.

# Arguments
- `cluster_identifier`: The name or ID of the cluster of the queue.
- `queue_identifier`: The name or ID of the queue.

"""
get_queue(
    clusterIdentifier, queueIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
) = pcs(
    "GetQueue",
    Dict{String,Any}(
        "clusterIdentifier" => clusterIdentifier, "queueIdentifier" => queueIdentifier
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function get_queue(
    clusterIdentifier,
    queueIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "GetQueue",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "clusterIdentifier" => clusterIdentifier,
                    "queueIdentifier" => queueIdentifier,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_clusters()
    list_clusters(params::Dict{String,<:Any})

Returns a list of running clusters in your account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of results that are returned per call. You can use
  nextToken to obtain further pages of results. The default is 10 results, and the maximum
  allowed page size is 100 results. A value of 0 uses the default.
- `"nextToken"`: The value of nextToken is a unique pagination token for each page of
  results returned. If nextToken is returned, there are more results available. Make the call
  again using the returned token to retrieve the next page. Keep all other arguments
  unchanged. Each pagination token expires after 24 hours. Using an expired pagination token
  returns an HTTP 400 InvalidToken error.
"""
list_clusters(; aws_config::AbstractAWSConfig=global_aws_config()) =
    pcs("ListClusters"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
function list_clusters(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return pcs(
        "ListClusters", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_compute_node_groups(cluster_identifier)
    list_compute_node_groups(cluster_identifier, params::Dict{String,<:Any})

Returns a list of all compute node groups associated with a cluster.

# Arguments
- `cluster_identifier`: The name or ID of the cluster to list compute node groups for.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of results that are returned per call. You can use
  nextToken to obtain further pages of results. The default is 10 results, and the maximum
  allowed page size is 100 results. A value of 0 uses the default.
- `"nextToken"`: The value of nextToken is a unique pagination token for each page of
  results returned. If nextToken is returned, there are more results available. Make the call
  again using the returned token to retrieve the next page. Keep all other arguments
  unchanged. Each pagination token expires after 24 hours. Using an expired pagination token
  returns an HTTP 400 InvalidToken error.
"""
list_compute_node_groups(
    clusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
) = pcs(
    "ListComputeNodeGroups",
    Dict{String,Any}("clusterIdentifier" => clusterIdentifier);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function list_compute_node_groups(
    clusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "ListComputeNodeGroups",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("clusterIdentifier" => clusterIdentifier), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_queues(cluster_identifier)
    list_queues(cluster_identifier, params::Dict{String,<:Any})

Returns a list of all queues associated with a cluster.

# Arguments
- `cluster_identifier`: The name or ID of the cluster to list queues for.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of results that are returned per call. You can use
  nextToken to obtain further pages of results. The default is 10 results, and the maximum
  allowed page size is 100 results. A value of 0 uses the default.
- `"nextToken"`: The value of nextToken is a unique pagination token for each page of
  results returned. If nextToken is returned, there are more results available. Make the call
  again using the returned token to retrieve the next page. Keep all other arguments
  unchanged. Each pagination token expires after 24 hours. Using an expired pagination token
  returns an HTTP 400 InvalidToken error.
"""
list_queues(clusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()) = pcs(
    "ListQueues",
    Dict{String,Any}("clusterIdentifier" => clusterIdentifier);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function list_queues(
    clusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "ListQueues",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("clusterIdentifier" => clusterIdentifier), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Returns a list of all tags on an Amazon Web Services PCS resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource for which to list tags.

"""
list_tags_for_resource(resourceArn; aws_config::AbstractAWSConfig=global_aws_config()) =
    pcs(
        "ListTagsForResource",
        Dict{String,Any}("resourceArn" => resourceArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function list_tags_for_resource(
    resourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "ListTagsForResource",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("resourceArn" => resourceArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    register_compute_node_group_instance(bootstrap_id, cluster_identifier)
    register_compute_node_group_instance(bootstrap_id, cluster_identifier, params::Dict{String,<:Any})

 This API action isn't intended for you to use.  Amazon Web Services PCS uses this API
action to register the compute nodes it launches in your account.

# Arguments
- `bootstrap_id`: The client-generated token to allow for retries.
- `cluster_identifier`: The name or ID of the cluster to register the compute node group
  instance in.

"""
register_compute_node_group_instance(
    bootstrapId, clusterIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
) = pcs(
    "RegisterComputeNodeGroupInstance",
    Dict{String,Any}(
        "bootstrapId" => bootstrapId, "clusterIdentifier" => clusterIdentifier
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function register_compute_node_group_instance(
    bootstrapId,
    clusterIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "RegisterComputeNodeGroupInstance",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "bootstrapId" => bootstrapId, "clusterIdentifier" => clusterIdentifier
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Adds or edits tags on an Amazon Web Services PCS resource. Each tag consists of a tag key
and a tag value. The tag key and tag value are case-sensitive strings. The tag value can be
an empty (null) string. To add a tag, specify a new tag key and a tag value. To edit a tag,
specify an existing tag key and a new tag value.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource.
- `tags`: 1 or more tags added to the resource. Each tag consists of a tag key and tag
  value. The tag value is optional and can be an empty string.

"""
tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config()) = pcs(
    "TagResource",
    Dict{String,Any}("resourceArn" => resourceArn, "tags" => tags);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function tag_resource(
    resourceArn,
    tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "TagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("resourceArn" => resourceArn, "tags" => tags),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Deletes tags from an Amazon Web Services PCS resource. To delete a tag, specify the tag key
and the Amazon Resource Name (ARN) of the Amazon Web Services PCS resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource.
- `tag_keys`: 1 or more tag keys to remove from the resource. Specify only tag keys and not
  tag values.

"""
untag_resource(resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()) =
    pcs(
        "UntagResource",
        Dict{String,Any}("resourceArn" => resourceArn, "tagKeys" => tagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function untag_resource(
    resourceArn,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "UntagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("resourceArn" => resourceArn, "tagKeys" => tagKeys),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_compute_node_group(cluster_identifier, compute_node_group_identifier)
    update_compute_node_group(cluster_identifier, compute_node_group_identifier, params::Dict{String,<:Any})

Updates a compute node group. You can update many of the fields related to your compute
node group including the configurations for networking, compute nodes, and settings
specific to your scheduler (such as Slurm).

# Arguments
- `cluster_identifier`: The name or ID of the cluster of the compute node group.
- `compute_node_group_identifier`: The name or ID of the compute node group.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"amiId"`: The ID of the Amazon Machine Image (AMI) that Amazon Web Services PCS uses to
  launch instances. If not provided, Amazon Web Services PCS uses the AMI ID specified in the
  custom launch template.
- `"clientToken"`: A unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. Idempotency ensures that an API request completes only once.
  With an idempotent request, if the original request completes successfully, the subsequent
  retries with the same client token return the result from the original successful request
  and they have no additional effect. If you don't specify a client token, the CLI and SDK
  automatically generate 1 for you.
- `"customLaunchTemplate"`:
- `"iamInstanceProfileArn"`: The Amazon Resource Name (ARN) of the IAM instance profile
  used to pass an IAM role when launching EC2 instances. The role contained in your instance
  profile must have pcs:RegisterComputeNodeGroupInstance permissions attached to provision
  instances correctly.
- `"purchaseOption"`: Specifies how EC2 instances are purchased on your behalf. Amazon Web
  Services PCS supports On-Demand and Spot instances. For more information, see Instance
  purchasing options in the Amazon Elastic Compute Cloud User Guide. If you don't provide
  this option, it defaults to On-Demand.
- `"scalingConfiguration"`: Specifies the boundaries of the compute node group auto scaling.
- `"slurmConfiguration"`: Additional options related to the Slurm scheduler.
- `"spotOptions"`:
- `"subnetIds"`: The list of subnet IDs where the compute node group provisions instances.
  The subnets must be in the same VPC as the cluster.
"""
update_compute_node_group(
    clusterIdentifier,
    computeNodeGroupIdentifier;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = pcs(
    "UpdateComputeNodeGroup",
    Dict{String,Any}(
        "clusterIdentifier" => clusterIdentifier,
        "computeNodeGroupIdentifier" => computeNodeGroupIdentifier,
        "clientToken" => string(uuid4()),
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function update_compute_node_group(
    clusterIdentifier,
    computeNodeGroupIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "UpdateComputeNodeGroup",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "clusterIdentifier" => clusterIdentifier,
                    "computeNodeGroupIdentifier" => computeNodeGroupIdentifier,
                    "clientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_queue(cluster_identifier, queue_identifier)
    update_queue(cluster_identifier, queue_identifier, params::Dict{String,<:Any})

Updates the compute node group configuration of a queue. Use this API to change the compute
node groups that the queue can send jobs to.

# Arguments
- `cluster_identifier`: The name or ID of the cluster of the queue.
- `queue_identifier`: The name or ID of the queue.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`: A unique, case-sensitive identifier that you provide to ensure the
  idempotency of the request. Idempotency ensures that an API request completes only once.
  With an idempotent request, if the original request completes successfully, the subsequent
  retries with the same client token return the result from the original successful request
  and they have no additional effect. If you don't specify a client token, the CLI and SDK
  automatically generate 1 for you.
- `"computeNodeGroupConfigurations"`: The list of compute node group configurations to
  associate with the queue. Queues assign jobs to associated compute node groups.
"""
update_queue(
    clusterIdentifier, queueIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
) = pcs(
    "UpdateQueue",
    Dict{String,Any}(
        "clusterIdentifier" => clusterIdentifier,
        "queueIdentifier" => queueIdentifier,
        "clientToken" => string(uuid4()),
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function update_queue(
    clusterIdentifier,
    queueIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return pcs(
        "UpdateQueue",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "clusterIdentifier" => clusterIdentifier,
                    "queueIdentifier" => queueIdentifier,
                    "clientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
