# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: route53_recovery_cluster
using AWS.Compat
using AWS.UUIDs

"""
    get_routing_control_state(routing_control_arn)
    get_routing_control_state(routing_control_arn, params::Dict{String,<:Any})

Get the state for a routing control. A routing control is a simple on/off switch that you
can use to route traffic to cells. When the state is On, traffic flows to a cell. When it's
off, traffic does not flow.  Before you can create a routing control, you first must create
a cluster to host the control. For more information, see CreateCluster. Access one of the
endpoints for the cluster to get or update the routing control state to redirect traffic.
For more information about working with routing controls, see Routing control in the Route
53 Application Recovery Controller Developer Guide.

# Arguments
- `routing_control_arn`: The Amazon Resource Number (ARN) for the routing control that you
  want to get the state for.

"""
get_routing_control_state(RoutingControlArn; aws_config::AbstractAWSConfig=global_aws_config()) = route53_recovery_cluster("GetRoutingControlState", Dict{String, Any}("RoutingControlArn"=>RoutingControlArn); aws_config=aws_config)
get_routing_control_state(RoutingControlArn, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = route53_recovery_cluster("GetRoutingControlState", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("RoutingControlArn"=>RoutingControlArn), params)); aws_config=aws_config)

"""
    update_routing_control_state(routing_control_arn, routing_control_state)
    update_routing_control_state(routing_control_arn, routing_control_state, params::Dict{String,<:Any})

Set the state of the routing control to reroute traffic. You can set the value to be On or
Off. When the state is On, traffic flows to a cell. When it's off, traffic does not flow.
For more information about working with routing controls, see Routing control in the Route
53 Application Recovery Controller Developer Guide.

# Arguments
- `routing_control_arn`: The Amazon Resource Number (ARN) for the routing control that you
  want to update the state for.
- `routing_control_state`: The state of the routing control. You can set the value to be On
  or Off.

"""
update_routing_control_state(RoutingControlArn, RoutingControlState; aws_config::AbstractAWSConfig=global_aws_config()) = route53_recovery_cluster("UpdateRoutingControlState", Dict{String, Any}("RoutingControlArn"=>RoutingControlArn, "RoutingControlState"=>RoutingControlState); aws_config=aws_config)
update_routing_control_state(RoutingControlArn, RoutingControlState, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = route53_recovery_cluster("UpdateRoutingControlState", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("RoutingControlArn"=>RoutingControlArn, "RoutingControlState"=>RoutingControlState), params)); aws_config=aws_config)

"""
    update_routing_control_states(update_routing_control_state_entries)
    update_routing_control_states(update_routing_control_state_entries, params::Dict{String,<:Any})

Set multiple routing control states. You can set the value for each state to be On or Off.
When the state is On, traffic flows to a cell. When it's off, traffic does not flow. For
more information about working with routing controls, see Routing control in the Route 53
Application Recovery Controller Developer Guide.

# Arguments
- `update_routing_control_state_entries`: A set of routing control entries that you want to
  update.

"""
update_routing_control_states(UpdateRoutingControlStateEntries; aws_config::AbstractAWSConfig=global_aws_config()) = route53_recovery_cluster("UpdateRoutingControlStates", Dict{String, Any}("UpdateRoutingControlStateEntries"=>UpdateRoutingControlStateEntries); aws_config=aws_config)
update_routing_control_states(UpdateRoutingControlStateEntries, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()) = route53_recovery_cluster("UpdateRoutingControlStates", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("UpdateRoutingControlStateEntries"=>UpdateRoutingControlStateEntries), params)); aws_config=aws_config)
