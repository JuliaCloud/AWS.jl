# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
using Compat
using .AWSServices: groundstation

"""
    CancelContact()

Cancels a contact with a specified contact ID.

Required Parameters
contactId => UUID of a contact.

"""
CancelContact(contactId) = groundstation("DELETE", "/contact/$(contactId)")
CancelContact(contactId, args::AbstractDict{String, <: Any}) = groundstation("DELETE", "/contact/$(contactId)", args)
CancelContact(a...; b...) = CancelContact(a..., b)

"""
    CreateConfig()

Creates a Config with the specified configData parameters. Only one type of configData can be specified.

Required Parameters
configData => Parameters of a Config.
name => Name of a Config.

Optional Parameters
tags => Tags assigned to a Config.
"""
CreateConfig(configData, name) = groundstation("POST", "/config", Dict{String, Any}("configData"=>configData, "name"=>name))
CreateConfig(configData, name, args::AbstractDict{String, <: Any}) = groundstation("POST", "/config", Dict{String, Any}("configData"=>configData, "name"=>name, args...))
CreateConfig(a...; b...) = CreateConfig(a..., b)

"""
    CreateDataflowEndpointGroup()

Creates a DataflowEndpoint group containing the specified list of DataflowEndpoint objects. The name field in each endpoint is used in your mission profile DataflowEndpointConfig to specify which endpoints to use during a contact. When a contact uses multiple DataflowEndpointConfig objects, each Config must match a DataflowEndpoint in the same group.

Required Parameters
endpointDetails => Endpoint details of each endpoint in the dataflow endpoint group.

Optional Parameters
tags => Tags of a dataflow endpoint group.
"""
CreateDataflowEndpointGroup(endpointDetails) = groundstation("POST", "/dataflowEndpointGroup", Dict{String, Any}("endpointDetails"=>endpointDetails))
CreateDataflowEndpointGroup(endpointDetails, args::AbstractDict{String, <: Any}) = groundstation("POST", "/dataflowEndpointGroup", Dict{String, Any}("endpointDetails"=>endpointDetails, args...))
CreateDataflowEndpointGroup(a...; b...) = CreateDataflowEndpointGroup(a..., b)

"""
    CreateMissionProfile()

Creates a mission profile.  dataflowEdges is a list of lists of strings. Each lower level list of strings has two elements: a from ARN and a to ARN.

Required Parameters
dataflowEdges => A list of lists of ARNs. Each list of ARNs is an edge, with a from Config and a to Config.
minimumViableContactDurationSeconds => Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
name => Name of a mission profile.
trackingConfigArn => ARN of a tracking Config.

Optional Parameters
contactPostPassDurationSeconds => Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
contactPrePassDurationSeconds => Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.
tags => Tags assigned to a mission profile.
"""
CreateMissionProfile(dataflowEdges, minimumViableContactDurationSeconds, name, trackingConfigArn) = groundstation("POST", "/missionprofile", Dict{String, Any}("dataflowEdges"=>dataflowEdges, "minimumViableContactDurationSeconds"=>minimumViableContactDurationSeconds, "name"=>name, "trackingConfigArn"=>trackingConfigArn))
CreateMissionProfile(dataflowEdges, minimumViableContactDurationSeconds, name, trackingConfigArn, args::AbstractDict{String, <: Any}) = groundstation("POST", "/missionprofile", Dict{String, Any}("dataflowEdges"=>dataflowEdges, "minimumViableContactDurationSeconds"=>minimumViableContactDurationSeconds, "name"=>name, "trackingConfigArn"=>trackingConfigArn, args...))
CreateMissionProfile(a...; b...) = CreateMissionProfile(a..., b)

"""
    DeleteConfig()

Deletes a Config.

Required Parameters
configId => UUID of a Config.
configType => Type of a Config.

"""
DeleteConfig(configId, configType) = groundstation("DELETE", "/config/$(configType)/$(configId)")
DeleteConfig(configId, configType, args::AbstractDict{String, <: Any}) = groundstation("DELETE", "/config/$(configType)/$(configId)", args)
DeleteConfig(a...; b...) = DeleteConfig(a..., b)

"""
    DeleteDataflowEndpointGroup()

Deletes a dataflow endpoint group.

Required Parameters
dataflowEndpointGroupId => UUID of a dataflow endpoint group.

"""
DeleteDataflowEndpointGroup(dataflowEndpointGroupId) = groundstation("DELETE", "/dataflowEndpointGroup/$(dataflowEndpointGroupId)")
DeleteDataflowEndpointGroup(dataflowEndpointGroupId, args::AbstractDict{String, <: Any}) = groundstation("DELETE", "/dataflowEndpointGroup/$(dataflowEndpointGroupId)", args)
DeleteDataflowEndpointGroup(a...; b...) = DeleteDataflowEndpointGroup(a..., b)

"""
    DeleteMissionProfile()

Deletes a mission profile.

Required Parameters
missionProfileId => UUID of a mission profile.

"""
DeleteMissionProfile(missionProfileId) = groundstation("DELETE", "/missionprofile/$(missionProfileId)")
DeleteMissionProfile(missionProfileId, args::AbstractDict{String, <: Any}) = groundstation("DELETE", "/missionprofile/$(missionProfileId)", args)
DeleteMissionProfile(a...; b...) = DeleteMissionProfile(a..., b)

"""
    DescribeContact()

Describes an existing contact.

Required Parameters
contactId => UUID of a contact.

"""
DescribeContact(contactId) = groundstation("GET", "/contact/$(contactId)")
DescribeContact(contactId, args::AbstractDict{String, <: Any}) = groundstation("GET", "/contact/$(contactId)", args)
DescribeContact(a...; b...) = DescribeContact(a..., b)

"""
    GetConfig()

Returns Config information. Only one Config response can be returned.

Required Parameters
configId => UUID of a Config.
configType => Type of a Config.

"""
GetConfig(configId, configType) = groundstation("GET", "/config/$(configType)/$(configId)")
GetConfig(configId, configType, args::AbstractDict{String, <: Any}) = groundstation("GET", "/config/$(configType)/$(configId)", args)
GetConfig(a...; b...) = GetConfig(a..., b)

"""
    GetDataflowEndpointGroup()

Returns the dataflow endpoint group.

Required Parameters
dataflowEndpointGroupId => UUID of a dataflow endpoint group.

"""
GetDataflowEndpointGroup(dataflowEndpointGroupId) = groundstation("GET", "/dataflowEndpointGroup/$(dataflowEndpointGroupId)")
GetDataflowEndpointGroup(dataflowEndpointGroupId, args::AbstractDict{String, <: Any}) = groundstation("GET", "/dataflowEndpointGroup/$(dataflowEndpointGroupId)", args)
GetDataflowEndpointGroup(a...; b...) = GetDataflowEndpointGroup(a..., b)

"""
    GetMinuteUsage()

Returns the number of minutes used by account.

Required Parameters
month => The month being requested, with a value of 1-12.
year => The year being requested, in the format of YYYY.

"""
GetMinuteUsage(month, year) = groundstation("POST", "/minute-usage", Dict{String, Any}("month"=>month, "year"=>year))
GetMinuteUsage(month, year, args::AbstractDict{String, <: Any}) = groundstation("POST", "/minute-usage", Dict{String, Any}("month"=>month, "year"=>year, args...))
GetMinuteUsage(a...; b...) = GetMinuteUsage(a..., b)

"""
    GetMissionProfile()

Returns a mission profile.

Required Parameters
missionProfileId => UUID of a mission profile.

"""
GetMissionProfile(missionProfileId) = groundstation("GET", "/missionprofile/$(missionProfileId)")
GetMissionProfile(missionProfileId, args::AbstractDict{String, <: Any}) = groundstation("GET", "/missionprofile/$(missionProfileId)", args)
GetMissionProfile(a...; b...) = GetMissionProfile(a..., b)

"""
    GetSatellite()

Returns a satellite.

Required Parameters
satelliteId => UUID of a satellite.

"""
GetSatellite(satelliteId) = groundstation("GET", "/satellite/$(satelliteId)")
GetSatellite(satelliteId, args::AbstractDict{String, <: Any}) = groundstation("GET", "/satellite/$(satelliteId)", args)
GetSatellite(a...; b...) = GetSatellite(a..., b)

"""
    ListConfigs()

Returns a list of Config objects.

Optional Parameters
maxResults => Maximum number of Configs returned.
nextToken => Next token returned in the request of a previous ListConfigs call. Used to get the next page of results.
"""
ListConfigs() = groundstation("GET", "/config")
ListConfigs(args::AbstractDict{String, Any}) = groundstation("GET", "/config", args)
ListConfigs(a...; b...) = ListConfigs(a..., b)

"""
    ListContacts()

Returns a list of contacts. If statusList contains AVAILABLE, the request must include groundStation, missionprofileArn, and satelliteArn. 

Required Parameters
endTime => End time of a contact.
startTime => Start time of a contact.
statusList => Status of a contact reservation.

Optional Parameters
groundStation => Name of a ground station.
maxResults => Maximum number of contacts returned.
missionProfileArn => ARN of a mission profile.
nextToken => Next token returned in the request of a previous ListContacts call. Used to get the next page of results.
satelliteArn => ARN of a satellite.
"""
ListContacts(endTime, startTime, statusList) = groundstation("POST", "/contacts", Dict{String, Any}("endTime"=>endTime, "startTime"=>startTime, "statusList"=>statusList))
ListContacts(endTime, startTime, statusList, args::AbstractDict{String, <: Any}) = groundstation("POST", "/contacts", Dict{String, Any}("endTime"=>endTime, "startTime"=>startTime, "statusList"=>statusList, args...))
ListContacts(a...; b...) = ListContacts(a..., b)

"""
    ListDataflowEndpointGroups()

Returns a list of DataflowEndpoint groups.

Optional Parameters
maxResults => Maximum number of dataflow endpoint groups returned.
nextToken => Next token returned in the request of a previous ListDataflowEndpointGroups call. Used to get the next page of results.
"""
ListDataflowEndpointGroups() = groundstation("GET", "/dataflowEndpointGroup")
ListDataflowEndpointGroups(args::AbstractDict{String, Any}) = groundstation("GET", "/dataflowEndpointGroup", args)
ListDataflowEndpointGroups(a...; b...) = ListDataflowEndpointGroups(a..., b)

"""
    ListGroundStations()

Returns a list of ground stations. 

Optional Parameters
maxResults => Maximum number of ground stations returned.
nextToken => Next token that can be supplied in the next call to get the next page of ground stations.
satelliteId => Satellite ID to retrieve on-boarded ground stations.
"""
ListGroundStations() = groundstation("GET", "/groundstation")
ListGroundStations(args::AbstractDict{String, Any}) = groundstation("GET", "/groundstation", args)
ListGroundStations(a...; b...) = ListGroundStations(a..., b)

"""
    ListMissionProfiles()

Returns a list of mission profiles.

Optional Parameters
maxResults => Maximum number of mission profiles returned.
nextToken => Next token returned in the request of a previous ListMissionProfiles call. Used to get the next page of results.
"""
ListMissionProfiles() = groundstation("GET", "/missionprofile")
ListMissionProfiles(args::AbstractDict{String, Any}) = groundstation("GET", "/missionprofile", args)
ListMissionProfiles(a...; b...) = ListMissionProfiles(a..., b)

"""
    ListSatellites()

Returns a list of satellites.

Optional Parameters
maxResults => Maximum number of satellites returned.
nextToken => Next token that can be supplied in the next call to get the next page of satellites.
"""
ListSatellites() = groundstation("GET", "/satellite")
ListSatellites(args::AbstractDict{String, Any}) = groundstation("GET", "/satellite", args)
ListSatellites(a...; b...) = ListSatellites(a..., b)

"""
    ListTagsForResource()

Returns a list of tags for a specified resource.

Required Parameters
resourceArn => ARN of a resource.

"""
ListTagsForResource(resourceArn) = groundstation("GET", "/tags/$(resourceArn)")
ListTagsForResource(resourceArn, args::AbstractDict{String, <: Any}) = groundstation("GET", "/tags/$(resourceArn)", args)
ListTagsForResource(a...; b...) = ListTagsForResource(a..., b)

"""
    ReserveContact()

Reserves a contact using specified parameters.

Required Parameters
endTime => End time of a contact.
groundStation => Name of a ground station.
missionProfileArn => ARN of a mission profile.
satelliteArn => ARN of a satellite
startTime => Start time of a contact.

Optional Parameters
tags => Tags assigned to a contact.
"""
ReserveContact(endTime, groundStation, missionProfileArn, satelliteArn, startTime) = groundstation("POST", "/contact", Dict{String, Any}("endTime"=>endTime, "groundStation"=>groundStation, "missionProfileArn"=>missionProfileArn, "satelliteArn"=>satelliteArn, "startTime"=>startTime))
ReserveContact(endTime, groundStation, missionProfileArn, satelliteArn, startTime, args::AbstractDict{String, <: Any}) = groundstation("POST", "/contact", Dict{String, Any}("endTime"=>endTime, "groundStation"=>groundStation, "missionProfileArn"=>missionProfileArn, "satelliteArn"=>satelliteArn, "startTime"=>startTime, args...))
ReserveContact(a...; b...) = ReserveContact(a..., b)

"""
    TagResource()

Assigns a tag to a resource.

Required Parameters
resourceArn => ARN of a resource tag.
tags => Tags assigned to a resource.

"""
TagResource(resourceArn, tags) = groundstation("POST", "/tags/$(resourceArn)", Dict{String, Any}("tags"=>tags))
TagResource(resourceArn, tags, args::AbstractDict{String, <: Any}) = groundstation("POST", "/tags/$(resourceArn)", Dict{String, Any}("tags"=>tags, args...))
TagResource(a...; b...) = TagResource(a..., b)

"""
    UntagResource()

Deassigns a resource tag.

Required Parameters
resourceArn => ARN of a resource.
tagKeys => Keys of a resource tag.

"""
UntagResource(resourceArn, tagKeys) = groundstation("DELETE", "/tags/$(resourceArn)", Dict{String, Any}("tagKeys"=>tagKeys))
UntagResource(resourceArn, tagKeys, args::AbstractDict{String, <: Any}) = groundstation("DELETE", "/tags/$(resourceArn)", Dict{String, Any}("tagKeys"=>tagKeys, args...))
UntagResource(a...; b...) = UntagResource(a..., b)

"""
    UpdateConfig()

Updates the Config used when scheduling contacts. Updating a Config will not update the execution parameters for existing future contacts scheduled with this Config.

Required Parameters
configData => Parameters of a Config.
configId => UUID of a Config.
configType => Type of a Config.
name => Name of a Config.

"""
UpdateConfig(configData, configId, configType, name) = groundstation("PUT", "/config/$(configType)/$(configId)", Dict{String, Any}("configData"=>configData, "name"=>name))
UpdateConfig(configData, configId, configType, name, args::AbstractDict{String, <: Any}) = groundstation("PUT", "/config/$(configType)/$(configId)", Dict{String, Any}("configData"=>configData, "name"=>name, args...))
UpdateConfig(a...; b...) = UpdateConfig(a..., b)

"""
    UpdateMissionProfile()

Updates a mission profile. Updating a mission profile will not update the execution parameters for existing future contacts.

Required Parameters
missionProfileId => UUID of a mission profile.

Optional Parameters
contactPostPassDurationSeconds => Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
contactPrePassDurationSeconds => Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
dataflowEdges => A list of lists of ARNs. Each list of ARNs is an edge, with a from Config and a to Config.
minimumViableContactDurationSeconds => Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
name => Name of a mission profile.
trackingConfigArn => ARN of a tracking Config.
"""
UpdateMissionProfile(missionProfileId) = groundstation("PUT", "/missionprofile/$(missionProfileId)")
UpdateMissionProfile(missionProfileId, args::AbstractDict{String, <: Any}) = groundstation("PUT", "/missionprofile/$(missionProfileId)", args)
UpdateMissionProfile(a...; b...) = UpdateMissionProfile(a..., b)
