# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: groundstation

using Compat
using UUIDs
"""
    CancelContact()

Cancels a contact with a specified contact ID.

# Required Parameters
- `contactId`: UUID of a contact.

"""
CancelContact(contactId; aws::AWSConfig=AWS.aws_config) = groundstation("DELETE", "/contact/$(contactId)"; aws=aws)
CancelContact(contactId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("DELETE", "/contact/$(contactId)", args; aws=aws)

"""
    CreateConfig()

Creates a Config with the specified configData parameters. Only one type of configData can be specified.

# Required Parameters
- `configData`: Parameters of a Config.
- `name`: Name of a Config.

# Optional Parameters
- `tags`: Tags assigned to a Config.
"""
CreateConfig(configData, name; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/config", Dict{String, Any}("configData"=>configData, "name"=>name); aws=aws)
CreateConfig(configData, name, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/config", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("configData"=>configData, "name"=>name), args)); aws=aws)

"""
    CreateDataflowEndpointGroup()

Creates a DataflowEndpoint group containing the specified list of DataflowEndpoint objects. The name field in each endpoint is used in your mission profile DataflowEndpointConfig to specify which endpoints to use during a contact. When a contact uses multiple DataflowEndpointConfig objects, each Config must match a DataflowEndpoint in the same group.

# Required Parameters
- `endpointDetails`: Endpoint details of each endpoint in the dataflow endpoint group.

# Optional Parameters
- `tags`: Tags of a dataflow endpoint group.
"""
CreateDataflowEndpointGroup(endpointDetails; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/dataflowEndpointGroup", Dict{String, Any}("endpointDetails"=>endpointDetails); aws=aws)
CreateDataflowEndpointGroup(endpointDetails, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/dataflowEndpointGroup", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("endpointDetails"=>endpointDetails), args)); aws=aws)

"""
    CreateMissionProfile()

Creates a mission profile.  dataflowEdges is a list of lists of strings. Each lower level list of strings has two elements: a from ARN and a to ARN.

# Required Parameters
- `dataflowEdges`: A list of lists of ARNs. Each list of ARNs is an edge, with a from Config and a to Config.
- `minimumViableContactDurationSeconds`: Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
- `name`: Name of a mission profile.
- `trackingConfigArn`: ARN of a tracking Config.

# Optional Parameters
- `contactPostPassDurationSeconds`: Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
- `contactPrePassDurationSeconds`: Amount of time prior to contact start you’d like to receive a CloudWatch event indicating an upcoming pass.
- `tags`: Tags assigned to a mission profile.
"""
CreateMissionProfile(dataflowEdges, minimumViableContactDurationSeconds, name, trackingConfigArn; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/missionprofile", Dict{String, Any}("dataflowEdges"=>dataflowEdges, "minimumViableContactDurationSeconds"=>minimumViableContactDurationSeconds, "name"=>name, "trackingConfigArn"=>trackingConfigArn); aws=aws)
CreateMissionProfile(dataflowEdges, minimumViableContactDurationSeconds, name, trackingConfigArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/missionprofile", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("dataflowEdges"=>dataflowEdges, "minimumViableContactDurationSeconds"=>minimumViableContactDurationSeconds, "name"=>name, "trackingConfigArn"=>trackingConfigArn), args)); aws=aws)

"""
    DeleteConfig()

Deletes a Config.

# Required Parameters
- `configId`: UUID of a Config.
- `configType`: Type of a Config.

"""
DeleteConfig(configId, configType; aws::AWSConfig=AWS.aws_config) = groundstation("DELETE", "/config/$(configType)/$(configId)"; aws=aws)
DeleteConfig(configId, configType, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("DELETE", "/config/$(configType)/$(configId)", args; aws=aws)

"""
    DeleteDataflowEndpointGroup()

Deletes a dataflow endpoint group.

# Required Parameters
- `dataflowEndpointGroupId`: UUID of a dataflow endpoint group.

"""
DeleteDataflowEndpointGroup(dataflowEndpointGroupId; aws::AWSConfig=AWS.aws_config) = groundstation("DELETE", "/dataflowEndpointGroup/$(dataflowEndpointGroupId)"; aws=aws)
DeleteDataflowEndpointGroup(dataflowEndpointGroupId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("DELETE", "/dataflowEndpointGroup/$(dataflowEndpointGroupId)", args; aws=aws)

"""
    DeleteMissionProfile()

Deletes a mission profile.

# Required Parameters
- `missionProfileId`: UUID of a mission profile.

"""
DeleteMissionProfile(missionProfileId; aws::AWSConfig=AWS.aws_config) = groundstation("DELETE", "/missionprofile/$(missionProfileId)"; aws=aws)
DeleteMissionProfile(missionProfileId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("DELETE", "/missionprofile/$(missionProfileId)", args; aws=aws)

"""
    DescribeContact()

Describes an existing contact.

# Required Parameters
- `contactId`: UUID of a contact.

"""
DescribeContact(contactId; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/contact/$(contactId)"; aws=aws)
DescribeContact(contactId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/contact/$(contactId)", args; aws=aws)

"""
    GetConfig()

Returns Config information. Only one Config response can be returned.

# Required Parameters
- `configId`: UUID of a Config.
- `configType`: Type of a Config.

"""
GetConfig(configId, configType; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/config/$(configType)/$(configId)"; aws=aws)
GetConfig(configId, configType, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/config/$(configType)/$(configId)", args; aws=aws)

"""
    GetDataflowEndpointGroup()

Returns the dataflow endpoint group.

# Required Parameters
- `dataflowEndpointGroupId`: UUID of a dataflow endpoint group.

"""
GetDataflowEndpointGroup(dataflowEndpointGroupId; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/dataflowEndpointGroup/$(dataflowEndpointGroupId)"; aws=aws)
GetDataflowEndpointGroup(dataflowEndpointGroupId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/dataflowEndpointGroup/$(dataflowEndpointGroupId)", args; aws=aws)

"""
    GetMinuteUsage()

Returns the number of minutes used by account.

# Required Parameters
- `month`: The month being requested, with a value of 1-12.
- `year`: The year being requested, in the format of YYYY.

"""
GetMinuteUsage(month, year; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/minute-usage", Dict{String, Any}("month"=>month, "year"=>year); aws=aws)
GetMinuteUsage(month, year, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/minute-usage", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("month"=>month, "year"=>year), args)); aws=aws)

"""
    GetMissionProfile()

Returns a mission profile.

# Required Parameters
- `missionProfileId`: UUID of a mission profile.

"""
GetMissionProfile(missionProfileId; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/missionprofile/$(missionProfileId)"; aws=aws)
GetMissionProfile(missionProfileId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/missionprofile/$(missionProfileId)", args; aws=aws)

"""
    GetSatellite()

Returns a satellite.

# Required Parameters
- `satelliteId`: UUID of a satellite.

"""
GetSatellite(satelliteId; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/satellite/$(satelliteId)"; aws=aws)
GetSatellite(satelliteId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/satellite/$(satelliteId)", args; aws=aws)

"""
    ListConfigs()

Returns a list of Config objects.

# Optional Parameters
- `maxResults`: Maximum number of Configs returned.
- `nextToken`: Next token returned in the request of a previous ListConfigs call. Used to get the next page of results.
"""
ListConfigs(; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/config"; aws=aws)
ListConfigs(args::AbstractDict{String, Any}; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/config", args; aws=aws)

"""
    ListContacts()

Returns a list of contacts. If statusList contains AVAILABLE, the request must include groundStation, missionprofileArn, and satelliteArn. 

# Required Parameters
- `endTime`: End time of a contact.
- `startTime`: Start time of a contact.
- `statusList`: Status of a contact reservation.

# Optional Parameters
- `groundStation`: Name of a ground station.
- `maxResults`: Maximum number of contacts returned.
- `missionProfileArn`: ARN of a mission profile.
- `nextToken`: Next token returned in the request of a previous ListContacts call. Used to get the next page of results.
- `satelliteArn`: ARN of a satellite.
"""
ListContacts(endTime, startTime, statusList; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/contacts", Dict{String, Any}("endTime"=>endTime, "startTime"=>startTime, "statusList"=>statusList); aws=aws)
ListContacts(endTime, startTime, statusList, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/contacts", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("endTime"=>endTime, "startTime"=>startTime, "statusList"=>statusList), args)); aws=aws)

"""
    ListDataflowEndpointGroups()

Returns a list of DataflowEndpoint groups.

# Optional Parameters
- `maxResults`: Maximum number of dataflow endpoint groups returned.
- `nextToken`: Next token returned in the request of a previous ListDataflowEndpointGroups call. Used to get the next page of results.
"""
ListDataflowEndpointGroups(; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/dataflowEndpointGroup"; aws=aws)
ListDataflowEndpointGroups(args::AbstractDict{String, Any}; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/dataflowEndpointGroup", args; aws=aws)

"""
    ListGroundStations()

Returns a list of ground stations. 

# Optional Parameters
- `maxResults`: Maximum number of ground stations returned.
- `nextToken`: Next token that can be supplied in the next call to get the next page of ground stations.
- `satelliteId`: Satellite ID to retrieve on-boarded ground stations.
"""
ListGroundStations(; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/groundstation"; aws=aws)
ListGroundStations(args::AbstractDict{String, Any}; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/groundstation", args; aws=aws)

"""
    ListMissionProfiles()

Returns a list of mission profiles.

# Optional Parameters
- `maxResults`: Maximum number of mission profiles returned.
- `nextToken`: Next token returned in the request of a previous ListMissionProfiles call. Used to get the next page of results.
"""
ListMissionProfiles(; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/missionprofile"; aws=aws)
ListMissionProfiles(args::AbstractDict{String, Any}; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/missionprofile", args; aws=aws)

"""
    ListSatellites()

Returns a list of satellites.

# Optional Parameters
- `maxResults`: Maximum number of satellites returned.
- `nextToken`: Next token that can be supplied in the next call to get the next page of satellites.
"""
ListSatellites(; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/satellite"; aws=aws)
ListSatellites(args::AbstractDict{String, Any}; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/satellite", args; aws=aws)

"""
    ListTagsForResource()

Returns a list of tags for a specified resource.

# Required Parameters
- `resourceArn`: ARN of a resource.

"""
ListTagsForResource(resourceArn; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/tags/$(resourceArn)"; aws=aws)
ListTagsForResource(resourceArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("GET", "/tags/$(resourceArn)", args; aws=aws)

"""
    ReserveContact()

Reserves a contact using specified parameters.

# Required Parameters
- `endTime`: End time of a contact.
- `groundStation`: Name of a ground station.
- `missionProfileArn`: ARN of a mission profile.
- `satelliteArn`: ARN of a satellite
- `startTime`: Start time of a contact.

# Optional Parameters
- `tags`: Tags assigned to a contact.
"""
ReserveContact(endTime, groundStation, missionProfileArn, satelliteArn, startTime; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/contact", Dict{String, Any}("endTime"=>endTime, "groundStation"=>groundStation, "missionProfileArn"=>missionProfileArn, "satelliteArn"=>satelliteArn, "startTime"=>startTime); aws=aws)
ReserveContact(endTime, groundStation, missionProfileArn, satelliteArn, startTime, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/contact", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("endTime"=>endTime, "groundStation"=>groundStation, "missionProfileArn"=>missionProfileArn, "satelliteArn"=>satelliteArn, "startTime"=>startTime), args)); aws=aws)

"""
    TagResource()

Assigns a tag to a resource.

# Required Parameters
- `resourceArn`: ARN of a resource tag.
- `tags`: Tags assigned to a resource.

"""
TagResource(resourceArn, tags; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/tags/$(resourceArn)", Dict{String, Any}("tags"=>tags); aws=aws)
TagResource(resourceArn, tags, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("POST", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tags"=>tags), args)); aws=aws)

"""
    UntagResource()

Deassigns a resource tag.

# Required Parameters
- `resourceArn`: ARN of a resource.
- `tagKeys`: Keys of a resource tag.

"""
UntagResource(resourceArn, tagKeys; aws::AWSConfig=AWS.aws_config) = groundstation("DELETE", "/tags/$(resourceArn)", Dict{String, Any}("tagKeys"=>tagKeys); aws=aws)
UntagResource(resourceArn, tagKeys, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("DELETE", "/tags/$(resourceArn)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("tagKeys"=>tagKeys), args)); aws=aws)

"""
    UpdateConfig()

Updates the Config used when scheduling contacts. Updating a Config will not update the execution parameters for existing future contacts scheduled with this Config.

# Required Parameters
- `configData`: Parameters of a Config.
- `configId`: UUID of a Config.
- `configType`: Type of a Config.
- `name`: Name of a Config.

"""
UpdateConfig(configData, configId, configType, name; aws::AWSConfig=AWS.aws_config) = groundstation("PUT", "/config/$(configType)/$(configId)", Dict{String, Any}("configData"=>configData, "name"=>name); aws=aws)
UpdateConfig(configData, configId, configType, name, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("PUT", "/config/$(configType)/$(configId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("configData"=>configData, "name"=>name), args)); aws=aws)

"""
    UpdateMissionProfile()

Updates a mission profile. Updating a mission profile will not update the execution parameters for existing future contacts.

# Required Parameters
- `missionProfileId`: UUID of a mission profile.

# Optional Parameters
- `contactPostPassDurationSeconds`: Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
- `contactPrePassDurationSeconds`: Amount of time after a contact ends that you’d like to receive a CloudWatch event indicating the pass has finished.
- `dataflowEdges`: A list of lists of ARNs. Each list of ARNs is an edge, with a from Config and a to Config.
- `minimumViableContactDurationSeconds`: Smallest amount of time in seconds that you’d like to see for an available contact. AWS Ground Station will not present you with contacts shorter than this duration.
- `name`: Name of a mission profile.
- `trackingConfigArn`: ARN of a tracking Config.
"""
UpdateMissionProfile(missionProfileId; aws::AWSConfig=AWS.aws_config) = groundstation("PUT", "/missionprofile/$(missionProfileId)"; aws=aws)
UpdateMissionProfile(missionProfileId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWS.aws_config) = groundstation("PUT", "/missionprofile/$(missionProfileId)", args; aws=aws)
