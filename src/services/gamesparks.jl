# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: gamesparks
using AWS.Compat
using AWS.UUIDs

"""
    create_game(game_name)
    create_game(game_name, params::Dict{String,<:Any})

 Creates a new game with an empty configuration. After creating your game, you can update
the configuration using UpdateGameConfiguration or ImportGameConfiguration.

# Arguments
- `game_name`: The name of the game.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientToken"`:  A client-defined token. With an active client token in the request,
  this action is idempotent.
- `"Description"`: The description of the game.
- `"Tags"`: The list of tags to apply to the game.
"""
function create_game(GameName; aws_config::AbstractAWSConfig=global_aws_config())
    return gamesparks(
        "POST",
        "/game",
        Dict{String,Any}("GameName" => GameName);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_game(
    GameName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "POST",
        "/game",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("GameName" => GameName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_snapshot(game_name)
    create_snapshot(game_name, params::Dict{String,<:Any})

Creates a snapshot of the game configuration.

# Arguments
- `game_name`: The name of the game.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: The description of the snapshot.
"""
function create_snapshot(GameName; aws_config::AbstractAWSConfig=global_aws_config())
    return gamesparks(
        "POST",
        "/game/$(GameName)/snapshot";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_snapshot(
    GameName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "POST",
        "/game/$(GameName)/snapshot",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_stage(game_name, role, stage_name)
    create_stage(game_name, role, stage_name, params::Dict{String,<:Any})

Creates a new stage for stage-by-stage game development and deployment.

# Arguments
- `game_name`: The name of the game.
- `role`:  The Amazon Resource Name (ARN) of the role to run the game with. This role can
  be a game-defined role or the default role that GameSparks created.
- `stage_name`: The name of the stage.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientToken"`:  A client-defined token. With an active client token in the request,
  this action is idempotent.
- `"Description"`: The description of the stage.
- `"Tags"`: The list of tags to apply to the stage.
"""
function create_stage(
    GameName, Role, StageName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "POST",
        "/game/$(GameName)/stage",
        Dict{String,Any}("Role" => Role, "StageName" => StageName);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_stage(
    GameName,
    Role,
    StageName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "POST",
        "/game/$(GameName)/stage",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("Role" => Role, "StageName" => StageName), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_game(game_name)
    delete_game(game_name, params::Dict{String,<:Any})

Deletes a game.

# Arguments
- `game_name`: The name of the game to delete.

"""
function delete_game(GameName; aws_config::AbstractAWSConfig=global_aws_config())
    return gamesparks(
        "DELETE",
        "/game/$(GameName)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_game(
    GameName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "DELETE",
        "/game/$(GameName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_stage(game_name, stage_name)
    delete_stage(game_name, stage_name, params::Dict{String,<:Any})

Deletes a stage from a game, along with the associated game runtime.

# Arguments
- `game_name`: The name of the game.
- `stage_name`: The name of the stage to delete.

"""
function delete_stage(
    GameName, StageName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "DELETE",
        "/game/$(GameName)/stage/$(StageName)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_stage(
    GameName,
    StageName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "DELETE",
        "/game/$(GameName)/stage/$(StageName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    disconnect_player(game_name, player_id, stage_name)
    disconnect_player(game_name, player_id, stage_name, params::Dict{String,<:Any})

Disconnects a player from the game runtime.  If a player has multiple connections, this
operation attempts to close all of them.

# Arguments
- `game_name`: The name of the game.
- `player_id`: The unique identifier representing a player.
- `stage_name`: The name of the stage.

"""
function disconnect_player(
    GameName, PlayerId, StageName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "POST",
        "/runtime/game/$(GameName)/stage/$(StageName)/player/$(PlayerId)/disconnect";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function disconnect_player(
    GameName,
    PlayerId,
    StageName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "POST",
        "/runtime/game/$(GameName)/stage/$(StageName)/player/$(PlayerId)/disconnect",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    export_snapshot(game_name, snapshot_id)
    export_snapshot(game_name, snapshot_id, params::Dict{String,<:Any})

Exports a game configuration snapshot.

# Arguments
- `game_name`: The name of the game.
- `snapshot_id`: The identifier of the snapshot to export.

"""
function export_snapshot(
    GameName, SnapshotId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/snapshot/$(SnapshotId)/export";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function export_snapshot(
    GameName,
    SnapshotId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/snapshot/$(SnapshotId)/export",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_extension(name, namespace)
    get_extension(name, namespace, params::Dict{String,<:Any})

Gets details about a specified extension.

# Arguments
- `name`: The name of the extension.
- `namespace`: The namespace (qualifier) of the extension.

"""
function get_extension(Name, Namespace; aws_config::AbstractAWSConfig=global_aws_config())
    return gamesparks(
        "GET",
        "/extension/$(Namespace)/$(Name)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_extension(
    Name,
    Namespace,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/extension/$(Namespace)/$(Name)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_extension_version(extension_version, name, namespace)
    get_extension_version(extension_version, name, namespace, params::Dict{String,<:Any})

Gets details about a specified extension version.

# Arguments
- `extension_version`: The version of the extension.
- `name`: The name of the extension.
- `namespace`: The namespace (qualifier) of the extension.

"""
function get_extension_version(
    ExtensionVersion, Name, Namespace; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "GET",
        "/extension/$(Namespace)/$(Name)/version/$(ExtensionVersion)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_extension_version(
    ExtensionVersion,
    Name,
    Namespace,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/extension/$(Namespace)/$(Name)/version/$(ExtensionVersion)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_game(game_name)
    get_game(game_name, params::Dict{String,<:Any})

Gets details about a game.

# Arguments
- `game_name`: The name of the game.

"""
function get_game(GameName; aws_config::AbstractAWSConfig=global_aws_config())
    return gamesparks(
        "GET", "/game/$(GameName)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_game(
    GameName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/game/$(GameName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_game_configuration(game_name)
    get_game_configuration(game_name, params::Dict{String,<:Any})

Gets the configuration of the game.

# Arguments
- `game_name`: The name of the game.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Sections"`: The list of sections to return.
"""
function get_game_configuration(GameName; aws_config::AbstractAWSConfig=global_aws_config())
    return gamesparks(
        "GET",
        "/game/$(GameName)/configuration";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_game_configuration(
    GameName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/configuration",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_generated_code_job(game_name, job_id, snapshot_id)
    get_generated_code_job(game_name, job_id, snapshot_id, params::Dict{String,<:Any})

Gets details about a job that is generating code for a snapshot.

# Arguments
- `game_name`: The name of the game.
- `job_id`: The identifier of the code generation job.
- `snapshot_id`: The identifier of the snapshot for the code generation job.

"""
function get_generated_code_job(
    GameName, JobId, SnapshotId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/snapshot/$(SnapshotId)/generated-sdk-code-job/$(JobId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_generated_code_job(
    GameName,
    JobId,
    SnapshotId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/snapshot/$(SnapshotId)/generated-sdk-code-job/$(JobId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_player_connection_status(game_name, player_id, stage_name)
    get_player_connection_status(game_name, player_id, stage_name, params::Dict{String,<:Any})

Gets the status of a player's connection to the game runtime.  It's possible for a single
player to have multiple connections to the game runtime. If a player is not connected, this
operation returns an empty list.

# Arguments
- `game_name`: The name of the game.
- `player_id`: The unique identifier representing a player.
- `stage_name`: The name of the stage.

"""
function get_player_connection_status(
    GameName, PlayerId, StageName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "GET",
        "/runtime/game/$(GameName)/stage/$(StageName)/player/$(PlayerId)/connection";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_player_connection_status(
    GameName,
    PlayerId,
    StageName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/runtime/game/$(GameName)/stage/$(StageName)/player/$(PlayerId)/connection",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_snapshot(game_name, snapshot_id)
    get_snapshot(game_name, snapshot_id, params::Dict{String,<:Any})

Gets a copy of the game configuration in a snapshot.

# Arguments
- `game_name`: The name of the game.
- `snapshot_id`: The identifier of the snapshot.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Sections"`: The list of game configuration sections to be described.
"""
function get_snapshot(
    GameName, SnapshotId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/snapshot/$(SnapshotId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_snapshot(
    GameName,
    SnapshotId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/snapshot/$(SnapshotId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_stage(game_name, stage_name)
    get_stage(game_name, stage_name, params::Dict{String,<:Any})

Gets information about a stage.

# Arguments
- `game_name`: The name of the game.
- `stage_name`: The name of the stage.

"""
function get_stage(GameName, StageName; aws_config::AbstractAWSConfig=global_aws_config())
    return gamesparks(
        "GET",
        "/game/$(GameName)/stage/$(StageName)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_stage(
    GameName,
    StageName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/stage/$(StageName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_stage_deployment(game_name, stage_name)
    get_stage_deployment(game_name, stage_name, params::Dict{String,<:Any})

Gets information about a stage deployment.

# Arguments
- `game_name`: The name of the game.
- `stage_name`: The name of the stage.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DeploymentId"`:  The identifier of the stage deployment. StartStageDeployment returns
  the identifier that you use here.
"""
function get_stage_deployment(
    GameName, StageName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/stage/$(StageName)/deployment";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_stage_deployment(
    GameName,
    StageName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/stage/$(StageName)/deployment",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    import_game_configuration(game_name, import_source)
    import_game_configuration(game_name, import_source, params::Dict{String,<:Any})

Imports a game configuration.  This operation replaces the current configuration of the
game with the provided input. This is not a reversible operation. If you want to preserve
the previous configuration, use CreateSnapshot to make a new snapshot before importing.

# Arguments
- `game_name`: The name of the game.
- `import_source`: The source used to import configuration sections.

"""
function import_game_configuration(
    GameName, ImportSource; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "PUT",
        "/game/$(GameName)/configuration",
        Dict{String,Any}("ImportSource" => ImportSource);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function import_game_configuration(
    GameName,
    ImportSource,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "PUT",
        "/game/$(GameName)/configuration",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ImportSource" => ImportSource), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_extension_versions(name, namespace)
    list_extension_versions(name, namespace, params::Dict{String,<:Any})

Gets a paginated list of available versions for the extension.  Each time an API change is
made to an extension, the version is incremented. The list retrieved by this operation
shows the versions that are currently available.

# Arguments
- `name`: The name of the extension.
- `namespace`: The namespace (qualifier) of the extension.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return.  Use this parameter with
  NextToken to get results as a set of sequential pages.
- `"NextToken"`: The token that indicates the start of the next sequential page of results.
   Use the token that is returned with a previous call to this operation. To start at the
  beginning of the result set, do not specify a value.
"""
function list_extension_versions(
    Name, Namespace; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "GET",
        "/extension/$(Namespace)/$(Name)/version";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_extension_versions(
    Name,
    Namespace,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/extension/$(Namespace)/$(Name)/version",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_extensions()
    list_extensions(params::Dict{String,<:Any})

Gets a paginated list of available extensions.  Extensions provide features that games can
use from scripts.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return.  Use this parameter with
  NextToken to get results as a set of sequential pages.
- `"NextToken"`: The token that indicates the start of the next sequential page of results.
   Use the token that is returned with a previous call to this operation. To start at the
  beginning of the result set, do not specify a value.
"""
function list_extensions(; aws_config::AbstractAWSConfig=global_aws_config())
    return gamesparks(
        "GET", "/extension"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_extensions(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "GET", "/extension", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_games()
    list_games(params::Dict{String,<:Any})

Gets a paginated list of games.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return.  Use this parameter with
  NextToken to get results as a set of sequential pages.
- `"NextToken"`: The token that indicates the start of the next sequential page of results.
   Use the token that is returned with a previous call to this operation. To start at the
  beginning of the result set, do not specify a value.
"""
function list_games(; aws_config::AbstractAWSConfig=global_aws_config())
    return gamesparks(
        "GET", "/game"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_games(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "GET", "/game", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_generated_code_jobs(game_name, snapshot_id)
    list_generated_code_jobs(game_name, snapshot_id, params::Dict{String,<:Any})

Gets a paginated list of code generation jobs for a snapshot.

# Arguments
- `game_name`: The name of the game.
- `snapshot_id`: The identifier of the snapshot.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return.  Use this parameter with
  NextToken to get results as a set of sequential pages.
- `"NextToken"`: The token that indicates the start of the next sequential page of results.
   Use the token that is returned with a previous call to this operation. To start at the
  beginning of the result set, do not specify a value.
"""
function list_generated_code_jobs(
    GameName, SnapshotId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/snapshot/$(SnapshotId)/generated-sdk-code-jobs";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_generated_code_jobs(
    GameName,
    SnapshotId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/snapshot/$(SnapshotId)/generated-sdk-code-jobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_snapshots(game_name)
    list_snapshots(game_name, params::Dict{String,<:Any})

Gets a paginated list of snapshot summaries from the game.

# Arguments
- `game_name`: The name of the game.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return.  Use this parameter with
  NextToken to get results as a set of sequential pages.
- `"NextToken"`: The token that indicates the start of the next sequential page of results.
   Use the token that is returned with a previous call to this operation. To start at the
  beginning of the result set, do not specify a value.
"""
function list_snapshots(GameName; aws_config::AbstractAWSConfig=global_aws_config())
    return gamesparks(
        "GET",
        "/game/$(GameName)/snapshot";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_snapshots(
    GameName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/snapshot",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_stage_deployments(game_name, stage_name)
    list_stage_deployments(game_name, stage_name, params::Dict{String,<:Any})

Gets a paginated list of stage deployment summaries from the game.

# Arguments
- `game_name`: The name of the game.
- `stage_name`: The name of the stage.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return.  Use this parameter with
  NextToken to get results as a set of sequential pages.
- `"NextToken"`: The token that indicates the start of the next sequential page of results.
   Use the token that is returned with a previous call to this operation. To start at the
  beginning of the result set, do not specify a value.
"""
function list_stage_deployments(
    GameName, StageName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/stage/$(StageName)/deployments";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_stage_deployments(
    GameName,
    StageName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/stage/$(StageName)/deployments",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_stages(game_name)
    list_stages(game_name, params::Dict{String,<:Any})

Gets a paginated list of stage summaries from the game.

# Arguments
- `game_name`: The name of the game.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return.  Use this parameter with
  NextToken to get results as a set of sequential pages.
- `"NextToken"`: The token that indicates the start of the next sequential page of results.
   Use the token that is returned with a previous call to this operation. To start at the
  beginning of the result set, do not specify a value.
"""
function list_stages(GameName; aws_config::AbstractAWSConfig=global_aws_config())
    return gamesparks(
        "GET",
        "/game/$(GameName)/stage";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_stages(
    GameName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/game/$(GameName)/stage",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Lists the tags associated with a GameSparks resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the GameSparks resource.

"""
function list_tags_for_resource(
    ResourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "GET",
        "/tags/$(ResourceArn)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    ResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "GET",
        "/tags/$(ResourceArn)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_generated_code_job(game_name, generator, snapshot_id)
    start_generated_code_job(game_name, generator, snapshot_id, params::Dict{String,<:Any})

 Starts an asynchronous process that generates client code for system-defined and custom
messages. The resulting code is collected as a .zip file and uploaded to a pre-signed
Amazon S3 URL.

# Arguments
- `game_name`: The name of the game.
- `generator`: Properties of the generator to use for the job.
- `snapshot_id`: The identifier of the snapshot for which to generate code.

"""
function start_generated_code_job(
    GameName, Generator, SnapshotId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "POST",
        "/game/$(GameName)/snapshot/$(SnapshotId)/generated-sdk-code-job",
        Dict{String,Any}("Generator" => Generator);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_generated_code_job(
    GameName,
    Generator,
    SnapshotId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "POST",
        "/game/$(GameName)/snapshot/$(SnapshotId)/generated-sdk-code-job",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("Generator" => Generator), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_stage_deployment(game_name, snapshot_id, stage_name)
    start_stage_deployment(game_name, snapshot_id, stage_name, params::Dict{String,<:Any})

Deploys a snapshot to the stage and creates a new game runtime.  After you call this
operation, you can check the deployment status by using GetStageDeployment.   If there are
any players connected to the previous game runtime, then both runtimes persist. Existing
connections to the previous runtime are maintained. When players disconnect and reconnect,
they connect to the new runtime. After there are no connections to the previous game
runtime, it is deleted.

# Arguments
- `game_name`: The name of the game.
- `snapshot_id`: The identifier of the snapshot to deploy.
- `stage_name`: The name of the stage to deploy the snapshot onto.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ClientToken"`:  A client-defined token. With an active client token in the request,
  this action is idempotent.
"""
function start_stage_deployment(
    GameName, SnapshotId, StageName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "POST",
        "/game/$(GameName)/stage/$(StageName)/deployment",
        Dict{String,Any}("SnapshotId" => SnapshotId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_stage_deployment(
    GameName,
    SnapshotId,
    StageName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "POST",
        "/game/$(GameName)/stage/$(StageName)/deployment",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("SnapshotId" => SnapshotId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Adds tags to a GameSparks resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource to add the tags to.
- `tags`: The tags to add to the resource.

"""
function tag_resource(ResourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config())
    return gamesparks(
        "POST",
        "/tags/$(ResourceArn)",
        Dict{String,Any}("tags" => tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    ResourceArn,
    tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "POST",
        "/tags/$(ResourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tags" => tags), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Removes tags from a GameSparks resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource to remove the tags from.
- `tag_keys`: The keys of the tags to remove.

"""
function untag_resource(
    ResourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "DELETE",
        "/tags/$(ResourceArn)",
        Dict{String,Any}("tagKeys" => tagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    ResourceArn,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "DELETE",
        "/tags/$(ResourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tagKeys" => tagKeys), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_game(game_name)
    update_game(game_name, params::Dict{String,<:Any})

Updates details of the game.

# Arguments
- `game_name`: The name of the game.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: The description of the game.
"""
function update_game(GameName; aws_config::AbstractAWSConfig=global_aws_config())
    return gamesparks(
        "PATCH", "/game/$(GameName)"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function update_game(
    GameName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "PATCH",
        "/game/$(GameName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_game_configuration(game_name, modifications)
    update_game_configuration(game_name, modifications, params::Dict{String,<:Any})

Updates one or more sections of the game configuration.

# Arguments
- `game_name`: The name of the game.
- `modifications`: The list of modifications to make.

"""
function update_game_configuration(
    GameName, Modifications; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "PATCH",
        "/game/$(GameName)/configuration",
        Dict{String,Any}("Modifications" => Modifications);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_game_configuration(
    GameName,
    Modifications,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "PATCH",
        "/game/$(GameName)/configuration",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("Modifications" => Modifications), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_snapshot(game_name, snapshot_id)
    update_snapshot(game_name, snapshot_id, params::Dict{String,<:Any})

Updates the metadata of a GameSparks snapshot.

# Arguments
- `game_name`: The name of the game.
- `snapshot_id`: The identifier of the snapshot.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: The description of the snapshot.
"""
function update_snapshot(
    GameName, SnapshotId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "PATCH",
        "/game/$(GameName)/snapshot/$(SnapshotId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_snapshot(
    GameName,
    SnapshotId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "PATCH",
        "/game/$(GameName)/snapshot/$(SnapshotId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_stage(game_name, stage_name)
    update_stage(game_name, stage_name, params::Dict{String,<:Any})

Updates the metadata of a stage.

# Arguments
- `game_name`: The name of the game.
- `stage_name`: The name of the stage.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: The description of the stage.
- `"Role"`: The Amazon Resource Name (ARN) of the role to use for the game snapshots
  deployed to this stage.
"""
function update_stage(
    GameName, StageName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return gamesparks(
        "PATCH",
        "/game/$(GameName)/stage/$(StageName)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_stage(
    GameName,
    StageName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return gamesparks(
        "PATCH",
        "/game/$(GameName)/stage/$(StageName)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
