# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: ssm_contacts
using AWS.Compat
using AWS.UUIDs

"""
    accept_page(accept_code, accept_type, page_id)
    accept_page(accept_code, accept_type, page_id, params::Dict{String,<:Any})

Used to acknowledge an engagement to a contact channel during an incident.

# Arguments
- `accept_code`: The accept code is a 6-digit code used to acknowledge the page.
- `accept_type`: The type indicates if the page was DELIVERED or READ.
- `page_id`: The Amazon Resource Name (ARN) of the engagement to a contact channel.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AcceptCodeValidation"`: An optional field that Incident Manager uses to ENFORCE
  AcceptCode validation when acknowledging an page. Acknowledgement can occur by replying to
  a page, or when entering the AcceptCode in the console. Enforcing AcceptCode validation
  causes Incident Manager to verify that the code entered by the user matches the code sent
  by Incident Manager with the page. Incident Manager can also IGNORE AcceptCode validation.
  Ignoring AcceptCode validation causes Incident Manager to accept any value entered for the
  AcceptCode.
- `"ContactChannelId"`: The ARN of the contact channel.
- `"Note"`: Information provided by the user when the user acknowledges the page.
"""
function accept_page(
    AcceptCode, AcceptType, PageId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "AcceptPage",
        Dict{String,Any}(
            "AcceptCode" => AcceptCode, "AcceptType" => AcceptType, "PageId" => PageId
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function accept_page(
    AcceptCode,
    AcceptType,
    PageId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "AcceptPage",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "AcceptCode" => AcceptCode,
                    "AcceptType" => AcceptType,
                    "PageId" => PageId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    activate_contact_channel(activation_code, contact_channel_id)
    activate_contact_channel(activation_code, contact_channel_id, params::Dict{String,<:Any})

Activates a contact's contact channel. Incident Manager can't engage a contact until the
contact channel has been activated.

# Arguments
- `activation_code`: The code sent to the contact channel when it was created in the
  contact.
- `contact_channel_id`: The Amazon Resource Name (ARN) of the contact channel.

"""
function activate_contact_channel(
    ActivationCode, ContactChannelId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "ActivateContactChannel",
        Dict{String,Any}(
            "ActivationCode" => ActivationCode, "ContactChannelId" => ContactChannelId
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function activate_contact_channel(
    ActivationCode,
    ContactChannelId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "ActivateContactChannel",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ActivationCode" => ActivationCode,
                    "ContactChannelId" => ContactChannelId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_contact(alias, plan, type)
    create_contact(alias, plan, type, params::Dict{String,<:Any})

Contacts are either the contacts that Incident Manager engages during an incident or the
escalation plans that Incident Manager uses to engage contacts in phases during an
incident.

# Arguments
- `alias`: The short name to quickly identify a contact or escalation plan. The contact
  alias must be unique and identifiable.
- `plan`: A list of stages. A contact has an engagement plan with stages that contact
  specified contact channels. An escalation plan uses stages that contact specified contacts.
- `type`: To create an escalation plan use ESCALATION. To create a contact use PERSONAL.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DisplayName"`: The full name of the contact or escalation plan.
- `"IdempotencyToken"`: A token ensuring that the operation is called only once with the
  specified details.
- `"Tags"`: Adds a tag to the target. You can only tag resources created in the first
  Region of your replication set.
"""
function create_contact(
    Alias, Plan, Type; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "CreateContact",
        Dict{String,Any}(
            "Alias" => Alias,
            "Plan" => Plan,
            "Type" => Type,
            "IdempotencyToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_contact(
    Alias,
    Plan,
    Type,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "CreateContact",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Alias" => Alias,
                    "Plan" => Plan,
                    "Type" => Type,
                    "IdempotencyToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_contact_channel(contact_id, delivery_address, name, type)
    create_contact_channel(contact_id, delivery_address, name, type, params::Dict{String,<:Any})

A contact channel is the method that Incident Manager uses to engage your contact.

# Arguments
- `contact_id`: The Amazon Resource Name (ARN) of the contact you are adding the contact
  channel to.
- `delivery_address`: The details that Incident Manager uses when trying to engage the
  contact channel. The format is dependent on the type of the contact channel. The following
  are the expected formats:   SMS - '+' followed by the country code and phone number   VOICE
  - '+' followed by the country code and phone number   EMAIL - any standard email format
- `name`: The name of the contact channel.
- `type`: Incident Manager supports three types of contact channels:    SMS     VOICE
  EMAIL

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DeferActivation"`: If you want to activate the channel at a later time, you can choose
  to defer activation. Incident Manager can't engage your contact channel until it has been
  activated.
- `"IdempotencyToken"`: A token ensuring that the operation is called only once with the
  specified details.
"""
function create_contact_channel(
    ContactId,
    DeliveryAddress,
    Name,
    Type;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "CreateContactChannel",
        Dict{String,Any}(
            "ContactId" => ContactId,
            "DeliveryAddress" => DeliveryAddress,
            "Name" => Name,
            "Type" => Type,
            "IdempotencyToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_contact_channel(
    ContactId,
    DeliveryAddress,
    Name,
    Type,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "CreateContactChannel",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ContactId" => ContactId,
                    "DeliveryAddress" => DeliveryAddress,
                    "Name" => Name,
                    "Type" => Type,
                    "IdempotencyToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    deactivate_contact_channel(contact_channel_id)
    deactivate_contact_channel(contact_channel_id, params::Dict{String,<:Any})

To no longer receive Incident Manager engagements to a contact channel, you can deactivate
the channel.

# Arguments
- `contact_channel_id`: The Amazon Resource Name (ARN) of the contact channel you're
  deactivating.

"""
function deactivate_contact_channel(
    ContactChannelId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "DeactivateContactChannel",
        Dict{String,Any}("ContactChannelId" => ContactChannelId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function deactivate_contact_channel(
    ContactChannelId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "DeactivateContactChannel",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("ContactChannelId" => ContactChannelId), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_contact(contact_id)
    delete_contact(contact_id, params::Dict{String,<:Any})

To remove a contact from Incident Manager, you can delete the contact. Deleting a contact
removes them from all escalation plans and related response plans. Deleting an escalation
plan removes it from all related response plans. You will have to recreate the contact and
its contact channels before you can use it again.

# Arguments
- `contact_id`: The Amazon Resource Name (ARN) of the contact that you're deleting.

"""
function delete_contact(ContactId; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_contacts(
        "DeleteContact",
        Dict{String,Any}("ContactId" => ContactId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_contact(
    ContactId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "DeleteContact",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ContactId" => ContactId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_contact_channel(contact_channel_id)
    delete_contact_channel(contact_channel_id, params::Dict{String,<:Any})

To no longer receive engagements on a contact channel, you can delete the channel from a
contact. Deleting the contact channel removes it from the contact's engagement plan. If you
delete the only contact channel for a contact, you won't be able to engage that contact
during an incident.

# Arguments
- `contact_channel_id`: The Amazon Resource Name (ARN) of the contact channel.

"""
function delete_contact_channel(
    ContactChannelId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "DeleteContactChannel",
        Dict{String,Any}("ContactChannelId" => ContactChannelId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_contact_channel(
    ContactChannelId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "DeleteContactChannel",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("ContactChannelId" => ContactChannelId), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_engagement(engagement_id)
    describe_engagement(engagement_id, params::Dict{String,<:Any})

Incident Manager uses engagements to engage contacts and escalation plans during an
incident. Use this command to describe the engagement that occurred during an incident.

# Arguments
- `engagement_id`: The Amazon Resource Name (ARN) of the engagement you want the details of.

"""
function describe_engagement(
    EngagementId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "DescribeEngagement",
        Dict{String,Any}("EngagementId" => EngagementId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_engagement(
    EngagementId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "DescribeEngagement",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("EngagementId" => EngagementId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_page(page_id)
    describe_page(page_id, params::Dict{String,<:Any})

Lists details of the engagement to a contact channel.

# Arguments
- `page_id`: The ID of the engagement to a contact channel.

"""
function describe_page(PageId; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_contacts(
        "DescribePage",
        Dict{String,Any}("PageId" => PageId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_page(
    PageId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "DescribePage",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("PageId" => PageId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_contact(contact_id)
    get_contact(contact_id, params::Dict{String,<:Any})

Retrieves information about the specified contact or escalation plan.

# Arguments
- `contact_id`: The Amazon Resource Name (ARN) of the contact or escalation plan.

"""
function get_contact(ContactId; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_contacts(
        "GetContact",
        Dict{String,Any}("ContactId" => ContactId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_contact(
    ContactId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "GetContact",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ContactId" => ContactId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_contact_channel(contact_channel_id)
    get_contact_channel(contact_channel_id, params::Dict{String,<:Any})

List details about a specific contact channel.

# Arguments
- `contact_channel_id`: The Amazon Resource Name (ARN) of the contact channel you want
  information about.

"""
function get_contact_channel(
    ContactChannelId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "GetContactChannel",
        Dict{String,Any}("ContactChannelId" => ContactChannelId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_contact_channel(
    ContactChannelId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "GetContactChannel",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("ContactChannelId" => ContactChannelId), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_contact_policy(contact_arn)
    get_contact_policy(contact_arn, params::Dict{String,<:Any})

Retrieves the resource policies attached to the specified contact or escalation plan.

# Arguments
- `contact_arn`: The Amazon Resource Name (ARN) of the contact or escalation plan.

"""
function get_contact_policy(ContactArn; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_contacts(
        "GetContactPolicy",
        Dict{String,Any}("ContactArn" => ContactArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_contact_policy(
    ContactArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "GetContactPolicy",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ContactArn" => ContactArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_contact_channels(contact_id)
    list_contact_channels(contact_id, params::Dict{String,<:Any})

Lists all contact channels for the specified contact.

# Arguments
- `contact_id`: The Amazon Resource Name (ARN) of the contact.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of contact channels per page.
- `"NextToken"`: The pagination token to continue to the next page of results.
"""
function list_contact_channels(ContactId; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_contacts(
        "ListContactChannels",
        Dict{String,Any}("ContactId" => ContactId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_contact_channels(
    ContactId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "ListContactChannels",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ContactId" => ContactId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_contacts()
    list_contacts(params::Dict{String,<:Any})

Lists all contacts and escalation plans in Incident Manager.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AliasPrefix"`: Used to list only contacts who's aliases start with the specified prefix.
- `"MaxResults"`: The maximum number of contacts and escalation plans per page of results.
- `"NextToken"`: The pagination token to continue to the next page of results.
- `"Type"`: The type of contact. A contact is type PERSONAL and an escalation plan is type
  ESCALATION.
"""
function list_contacts(; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_contacts(
        "ListContacts"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_contacts(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "ListContacts", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_engagements()
    list_engagements(params::Dict{String,<:Any})

Lists all engagements that have happened in an incident.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"IncidentId"`: The Amazon Resource Name (ARN) of the incident you're listing engagements
  for.
- `"MaxResults"`: The maximum number of engagements per page of results.
- `"NextToken"`: The pagination token to continue to the next page of results.
- `"TimeRangeValue"`: The time range to lists engagements for an incident.
"""
function list_engagements(; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_contacts(
        "ListEngagements"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_engagements(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "ListEngagements", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_page_receipts(page_id)
    list_page_receipts(page_id, params::Dict{String,<:Any})

Lists all of the engagements to contact channels that have been acknowledged.

# Arguments
- `page_id`: The Amazon Resource Name (ARN) of the engagement to a specific contact channel.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of acknowledgements per page of results.
- `"NextToken"`: The pagination token to continue to the next page of results.
"""
function list_page_receipts(PageId; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_contacts(
        "ListPageReceipts",
        Dict{String,Any}("PageId" => PageId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_page_receipts(
    PageId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "ListPageReceipts",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("PageId" => PageId), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_pages_by_contact(contact_id)
    list_pages_by_contact(contact_id, params::Dict{String,<:Any})

Lists the engagements to a contact's contact channels.

# Arguments
- `contact_id`: The Amazon Resource Name (ARN) of the contact you are retrieving
  engagements for.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of engagements to contact channels to list per page of
  results.
- `"NextToken"`: The pagination token to continue to the next page of results.
"""
function list_pages_by_contact(ContactId; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_contacts(
        "ListPagesByContact",
        Dict{String,Any}("ContactId" => ContactId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_pages_by_contact(
    ContactId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "ListPagesByContact",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ContactId" => ContactId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_pages_by_engagement(engagement_id)
    list_pages_by_engagement(engagement_id, params::Dict{String,<:Any})

Lists the engagements to contact channels that occurred by engaging a contact.

# Arguments
- `engagement_id`: The Amazon Resource Name (ARN) of the engagement.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of engagements to contact channels to list per page of
  results.
- `"NextToken"`: The pagination token to continue to the next page of results.
"""
function list_pages_by_engagement(
    EngagementId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "ListPagesByEngagement",
        Dict{String,Any}("EngagementId" => EngagementId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_pages_by_engagement(
    EngagementId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "ListPagesByEngagement",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("EngagementId" => EngagementId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Lists the tags of an escalation plan or contact.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the contact or escalation plan.

"""
function list_tags_for_resource(
    ResourceARN; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "ListTagsForResource",
        Dict{String,Any}("ResourceARN" => ResourceARN);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    ResourceARN,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "ListTagsForResource",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ResourceARN" => ResourceARN), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_contact_policy(contact_arn, policy)
    put_contact_policy(contact_arn, policy, params::Dict{String,<:Any})

Adds a resource policy to the specified contact or escalation plan. The resource policy is
used to share the contact or escalation plan using Resource Access Manager (RAM). For more
information about cross-account sharing, see Setting up cross-account functionality.

# Arguments
- `contact_arn`: The Amazon Resource Name (ARN) of the contact or escalation plan.
- `policy`: Details of the resource policy.

"""
function put_contact_policy(
    ContactArn, Policy; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "PutContactPolicy",
        Dict{String,Any}("ContactArn" => ContactArn, "Policy" => Policy);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function put_contact_policy(
    ContactArn,
    Policy,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "PutContactPolicy",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ContactArn" => ContactArn, "Policy" => Policy),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    send_activation_code(contact_channel_id)
    send_activation_code(contact_channel_id, params::Dict{String,<:Any})

Sends an activation code to a contact channel. The contact can use this code to activate
the contact channel in the console or with the ActivateChannel operation. Incident Manager
can't engage a contact channel until it has been activated.

# Arguments
- `contact_channel_id`: The Amazon Resource Name (ARN) of the contact channel.

"""
function send_activation_code(
    ContactChannelId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "SendActivationCode",
        Dict{String,Any}("ContactChannelId" => ContactChannelId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function send_activation_code(
    ContactChannelId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "SendActivationCode",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("ContactChannelId" => ContactChannelId), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_engagement(contact_id, content, sender, subject)
    start_engagement(contact_id, content, sender, subject, params::Dict{String,<:Any})

Starts an engagement to a contact or escalation plan. The engagement engages each contact
specified in the incident.

# Arguments
- `contact_id`: The Amazon Resource Name (ARN) of the contact being engaged.
- `content`: The secure content of the message that was sent to the contact. Use this field
  for engagements to VOICE or EMAIL.
- `sender`: The user that started the engagement.
- `subject`: The secure subject of the message that was sent to the contact. Use this field
  for engagements to VOICE or EMAIL.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"IdempotencyToken"`: A token ensuring that the operation is called only once with the
  specified details.
- `"IncidentId"`: The ARN of the incident that the engagement is part of.
- `"PublicContent"`: The insecure content of the message that was sent to the contact. Use
  this field for engagements to SMS.
- `"PublicSubject"`: The insecure subject of the message that was sent to the contact. Use
  this field for engagements to SMS.
"""
function start_engagement(
    ContactId, Content, Sender, Subject; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "StartEngagement",
        Dict{String,Any}(
            "ContactId" => ContactId,
            "Content" => Content,
            "Sender" => Sender,
            "Subject" => Subject,
            "IdempotencyToken" => string(uuid4()),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_engagement(
    ContactId,
    Content,
    Sender,
    Subject,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "StartEngagement",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ContactId" => ContactId,
                    "Content" => Content,
                    "Sender" => Sender,
                    "Subject" => Subject,
                    "IdempotencyToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_engagement(engagement_id)
    stop_engagement(engagement_id, params::Dict{String,<:Any})

Stops an engagement before it finishes the final stage of the escalation plan or engagement
plan. Further contacts aren't engaged.

# Arguments
- `engagement_id`: The Amazon Resource Name (ARN) of the engagement.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Reason"`: The reason that you're stopping the engagement.
"""
function stop_engagement(EngagementId; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_contacts(
        "StopEngagement",
        Dict{String,Any}("EngagementId" => EngagementId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function stop_engagement(
    EngagementId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "StopEngagement",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("EngagementId" => EngagementId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Tags a contact or escalation plan. You can tag only contacts and escalation plans in the
first region of your replication set.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the contact or escalation plan.
- `tags`: A list of tags that you are adding to the contact or escalation plan.

"""
function tag_resource(ResourceARN, Tags; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_contacts(
        "TagResource",
        Dict{String,Any}("ResourceARN" => ResourceARN, "Tags" => Tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    ResourceARN,
    Tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "TagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceARN" => ResourceARN, "Tags" => Tags),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Removes tags from the specified resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the contact or escalation plan.
- `tag_keys`: The key of the tag that you want to remove.

"""
function untag_resource(
    ResourceARN, TagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "UntagResource",
        Dict{String,Any}("ResourceARN" => ResourceARN, "TagKeys" => TagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    ResourceARN,
    TagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "UntagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceARN" => ResourceARN, "TagKeys" => TagKeys),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_contact(contact_id)
    update_contact(contact_id, params::Dict{String,<:Any})

Updates the contact or escalation plan specified.

# Arguments
- `contact_id`: The Amazon Resource Name (ARN) of the contact or escalation plan you're
  updating.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DisplayName"`: The full name of the contact or escalation plan.
- `"Plan"`: A list of stages. A contact has an engagement plan with stages for specified
  contact channels. An escalation plan uses these stages to contact specified contacts.
"""
function update_contact(ContactId; aws_config::AbstractAWSConfig=global_aws_config())
    return ssm_contacts(
        "UpdateContact",
        Dict{String,Any}("ContactId" => ContactId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_contact(
    ContactId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "UpdateContact",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ContactId" => ContactId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_contact_channel(contact_channel_id)
    update_contact_channel(contact_channel_id, params::Dict{String,<:Any})

Updates a contact's contact channel.

# Arguments
- `contact_channel_id`: The Amazon Resource Name (ARN) of the contact channel you want to
  update.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DeliveryAddress"`: The details that Incident Manager uses when trying to engage the
  contact channel.
- `"Name"`: The name of the contact channel.
"""
function update_contact_channel(
    ContactChannelId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return ssm_contacts(
        "UpdateContactChannel",
        Dict{String,Any}("ContactChannelId" => ContactChannelId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_contact_channel(
    ContactChannelId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return ssm_contacts(
        "UpdateContactChannel",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("ContactChannelId" => ContactChannelId), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
