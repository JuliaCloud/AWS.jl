# This file is auto-generated by AWSMetadata.jl
include("../AWSServices.jl")
include("_utilities.jl")
using Compat
using UUIDs
using .AWSServices: iot_1click_devices_service

"""
    ClaimDevicesByClaimCode()

Adds device(s) to your account (i.e., claim one or more devices) if and only if you
 received a claim code with the device(s).

# Required Parameters
- `claimCode`: The claim code, starting with \"C-\", as provided by the device manufacturer.

"""
ClaimDevicesByClaimCode(claimCode) = iot_1click_devices_service("PUT", "/claims/$(claimCode)")
ClaimDevicesByClaimCode(claimCode, args::AbstractDict{String, <:Any}) = iot_1click_devices_service("PUT", "/claims/$(claimCode)", args)

"""
    DescribeDevice()

Given a device ID, returns a DescribeDeviceResponse object describing the
 details of the device.

# Required Parameters
- `deviceId`: The unique identifier of the device.

"""
DescribeDevice(deviceId) = iot_1click_devices_service("GET", "/devices/$(deviceId)")
DescribeDevice(deviceId, args::AbstractDict{String, <:Any}) = iot_1click_devices_service("GET", "/devices/$(deviceId)", args)

"""
    FinalizeDeviceClaim()

Given a device ID, finalizes the claim request for the associated device.
 Claiming a device consists of initiating a claim, then publishing a device event,
 and finalizing the claim. For a device of type button, a device event can
 be published by simply clicking the device.
 

# Required Parameters
- `deviceId`: The unique identifier of the device.

# Optional Parameters
- `tags`: A collection of key/value pairs defining the resource tags. For example, {
 \"tags\": {\"key1\": \"value1\", \"key2\": \"value2\"} }. For more information, see AWS
 Tagging Strategies.
 
 
"""
FinalizeDeviceClaim(deviceId) = iot_1click_devices_service("PUT", "/devices/$(deviceId)/finalize-claim")
FinalizeDeviceClaim(deviceId, args::AbstractDict{String, <:Any}) = iot_1click_devices_service("PUT", "/devices/$(deviceId)/finalize-claim", args)

"""
    GetDeviceMethods()

Given a device ID, returns the invokable methods associated with the device.

# Required Parameters
- `deviceId`: The unique identifier of the device.

"""
GetDeviceMethods(deviceId) = iot_1click_devices_service("GET", "/devices/$(deviceId)/methods")
GetDeviceMethods(deviceId, args::AbstractDict{String, <:Any}) = iot_1click_devices_service("GET", "/devices/$(deviceId)/methods", args)

"""
    InitiateDeviceClaim()

Given a device ID, initiates a claim request for the associated device.
 Claiming a device consists of initiating a claim, then publishing a device event,
 and finalizing the claim. For a device of type button, a device event can
 be published by simply clicking the device.
 

# Required Parameters
- `deviceId`: The unique identifier of the device.

"""
InitiateDeviceClaim(deviceId) = iot_1click_devices_service("PUT", "/devices/$(deviceId)/initiate-claim")
InitiateDeviceClaim(deviceId, args::AbstractDict{String, <:Any}) = iot_1click_devices_service("PUT", "/devices/$(deviceId)/initiate-claim", args)

"""
    InvokeDeviceMethod()

Given a device ID, issues a request to invoke a named device method (with possible
 parameters). See the \"Example POST\" code snippet below.

# Required Parameters
- `deviceId`: The unique identifier of the device.

# Optional Parameters
- `deviceMethod`: The device method to invoke.
- `deviceMethodParameters`: A JSON encoded string containing the device method request parameters.
"""
InvokeDeviceMethod(deviceId) = iot_1click_devices_service("POST", "/devices/$(deviceId)/methods")
InvokeDeviceMethod(deviceId, args::AbstractDict{String, <:Any}) = iot_1click_devices_service("POST", "/devices/$(deviceId)/methods", args)

"""
    ListDeviceEvents()

Using a device ID, returns a DeviceEventsResponse object containing an
 array of events for the device.

# Required Parameters
- `deviceId`: The unique identifier of the device.
- `fromTimeStamp`: The start date for the device event query, in ISO8061 format. For example,
 2018-03-28T15:45:12.880Z
 
- `toTimeStamp`: The end date for the device event query, in ISO8061 format. For example,
 2018-03-28T15:45:12.880Z
 

# Optional Parameters
- `maxResults`: The maximum number of results to return per request. If not set, a default value of
 100 is used.
- `nextToken`: The token to retrieve the next set of results.
"""
ListDeviceEvents(deviceId, fromTimeStamp, toTimeStamp) = iot_1click_devices_service("GET", "/devices/$(deviceId)/events", Dict{String, Any}("fromTimeStamp"=>fromTimeStamp, "toTimeStamp"=>toTimeStamp))
ListDeviceEvents(deviceId, fromTimeStamp, toTimeStamp, args::AbstractDict{String, <:Any}) = iot_1click_devices_service("GET", "/devices/$(deviceId)/events", Dict{String, Any}("fromTimeStamp"=>fromTimeStamp, "toTimeStamp"=>toTimeStamp, args...))

"""
    ListDevices()

Lists the 1-Click compatible devices associated with your AWS account.

# Optional Parameters
- `deviceType`: The type of the device, such as \"button\".
- `maxResults`: The maximum number of results to return per request. If not set, a default value of
 100 is used.
- `nextToken`: The token to retrieve the next set of results.
"""
ListDevices() = iot_1click_devices_service("GET", "/devices")
ListDevices(args::AbstractDict{String, Any}) = iot_1click_devices_service("GET", "/devices", args)

"""
    ListTagsForResource()

Lists the tags associated with the specified resource ARN.

# Required Parameters
- `resource-arn`: The ARN of the resource.

"""
ListTagsForResource(resource_arn) = iot_1click_devices_service("GET", "/tags/$(resource-arn)")
ListTagsForResource(resource_arn, args::AbstractDict{String, <:Any}) = iot_1click_devices_service("GET", "/tags/$(resource-arn)", args)

"""
    TagResource()

Adds or updates the tags associated with the resource ARN. See AWS IoT 1-Click Service Limits for the maximum number of tags allowed per
 resource.

# Required Parameters
- `resource-arn`: The ARN of the resource.
- `tags`: A collection of key/value pairs defining the resource tags. For example, {
 \"tags\": {\"key1\": \"value1\", \"key2\": \"value2\"} }. For more information, see AWS
 Tagging Strategies.
 
 

"""
TagResource(resource_arn, tags) = iot_1click_devices_service("POST", "/tags/$(resource-arn)", Dict{String, Any}("tags"=>tags))
TagResource(resource_arn, tags, args::AbstractDict{String, <:Any}) = iot_1click_devices_service("POST", "/tags/$(resource-arn)", Dict{String, Any}("tags"=>tags, args...))

"""
    UnclaimDevice()

Disassociates a device from your AWS account using its device ID.

# Required Parameters
- `deviceId`: The unique identifier of the device.

"""
UnclaimDevice(deviceId) = iot_1click_devices_service("PUT", "/devices/$(deviceId)/unclaim")
UnclaimDevice(deviceId, args::AbstractDict{String, <:Any}) = iot_1click_devices_service("PUT", "/devices/$(deviceId)/unclaim", args)

"""
    UntagResource()

Using tag keys, deletes the tags (key/value pairs) associated with the specified
 resource ARN.

# Required Parameters
- `resource-arn`: The ARN of the resource.
- `tagKeys`: A collections of tag keys. For example, {\"key1\",\"key2\"}

"""
UntagResource(resource_arn, tagKeys) = iot_1click_devices_service("DELETE", "/tags/$(resource-arn)", Dict{String, Any}("tagKeys"=>tagKeys))
UntagResource(resource_arn, tagKeys, args::AbstractDict{String, <:Any}) = iot_1click_devices_service("DELETE", "/tags/$(resource-arn)", Dict{String, Any}("tagKeys"=>tagKeys, args...))

"""
    UpdateDeviceState()

Using a Boolean value (true or false), this operation
 enables or disables the device given a device ID.

# Required Parameters
- `deviceId`: The unique identifier of the device.

# Optional Parameters
- `enabled`: If true, the device is enabled. If false, the device is
 disabled.
"""
UpdateDeviceState(deviceId) = iot_1click_devices_service("PUT", "/devices/$(deviceId)/state")
UpdateDeviceState(deviceId, args::AbstractDict{String, <:Any}) = iot_1click_devices_service("PUT", "/devices/$(deviceId)/state", args)
