# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: securitylake
using AWS.Compat
using AWS.UUIDs

"""
    create_aws_log_source(input_order)
    create_aws_log_source(input_order, params::Dict{String,<:Any})

Adds a natively-supported Amazon Web Services service as a Security Lake source. Enables
source types for member accounts in required Regions, based on specified parameters. You
can choose any source type in any Region for accounts that are either part of a trusted
organization or standalone accounts. At least one of the three dimensions is a mandatory
input to this API. However, any combination of the three dimensions can be supplied to this
API.  By default, dimension refers to the entire set. When you don't provide a dimension,
Security Lake assumes that the missing dimension refers to the entire set. This is
overridden when you supply any one of the inputs. For instance, when members is not
specified, the API disables all Security Lake member accounts for sources. Similarly, when
Regions are not specified, Security Lake is disabled for all the Regions where Security
Lake is available as a service. You can use this API only to enable a natively-supported
Amazon Web Services services as a source. Use CreateCustomLogSource to enable data
collection from a custom source.

# Arguments
- `input_order`: Specifies the input order to enable dimensions in Security Lake, namely
  region, source type, and member account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"enableAllDimensions"`: Enables specific sources in all Regions and source types.
- `"enableSingleDimension"`: Enables all sources in specific accounts or Regions.
- `"enableTwoDimensions"`: Enables specific service sources in specific accounts or Regions.
"""
function create_aws_log_source(
    inputOrder; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "POST",
        "/v1/logsources/aws",
        Dict{String,Any}("inputOrder" => inputOrder);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_aws_log_source(
    inputOrder,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "POST",
        "/v1/logsources/aws",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("inputOrder" => inputOrder), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_custom_log_source(custom_source_name, event_class, glue_invocation_role_arn, log_provider_account_id)
    create_custom_log_source(custom_source_name, event_class, glue_invocation_role_arn, log_provider_account_id, params::Dict{String,<:Any})

Adds a third-party custom source in Amazon Security Lake, from the Region where you want to
create a custom source. Security Lake can collect logs and events from third-party custom
sources. After creating the appropriate API roles, use this API to add a custom source name
in Security Lake. This operation creates a partition in the Security Lake S3 bucket as the
target location for log files from the custom source, an associated Glue table, and an Glue
crawler.

# Arguments
- `custom_source_name`: The custom source name for a third-party custom source.
- `event_class`: The Open Cybersecurity Schema Framework (OCSF) event class.
- `glue_invocation_role_arn`: The IAM Role ARN to be used by the Glue Crawler. The
  recommended IAM policies are:   The managed policy AWSGlueServiceRole    A custom policy
  granting access to your S3 Data Lake
- `log_provider_account_id`: The Account ID that will assume the above Role to put logs
  into the Data Lake.

"""
function create_custom_log_source(
    customSourceName,
    eventClass,
    glueInvocationRoleArn,
    logProviderAccountId;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "POST",
        "/v1/logsources/custom",
        Dict{String,Any}(
            "customSourceName" => customSourceName,
            "eventClass" => eventClass,
            "glueInvocationRoleArn" => glueInvocationRoleArn,
            "logProviderAccountId" => logProviderAccountId,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_custom_log_source(
    customSourceName,
    eventClass,
    glueInvocationRoleArn,
    logProviderAccountId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "POST",
        "/v1/logsources/custom",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "customSourceName" => customSourceName,
                    "eventClass" => eventClass,
                    "glueInvocationRoleArn" => glueInvocationRoleArn,
                    "logProviderAccountId" => logProviderAccountId,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_datalake()
    create_datalake(params::Dict{String,<:Any})

Initializes an Amazon Security Lake instance with the provided (or default) configuration.
You can enable Security Lake in Regions with customized settings in advance before enabling
log collection in Regions. You can either use the enableAll parameter to specify all
Regions or you can specify the Regions you want to enable Security Lake using the Regions
parameter and configure these Regions using the configurations parameter. When the
CreateDataLake API is called multiple times, if that Region is already enabled, it will
update the Region if configuration for that Region is provided. If that Region is a new
Region, it will be set up with the customized configurations if it is specified.  When you
enable Security Lake, it starts ingesting security data after the CreateAwsLogSource call.
This includes ingesting security data from sources, storing data, and making data
accessible to subscribers. Security Lake also enables all the existing settings and
resources that it stores or maintains for your account in the current Region, including
security log and event data. For more information, see the Amazon Security Lake User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"configurations"`: Enable Security Lake with the specified configurations settings to
  begin ingesting security data.
- `"enableAll"`: Enable Security Lake in all Regions to begin ingesting security data.
- `"metaStoreManagerRoleArn"`: The Role ARN used to create and update the Glue table with
  partitions generated by ingestion and normalization of Amazon Web Services log sources and
  custom sources.
- `"regions"`: Enable Security Lake in the specified Regions to begin ingesting security
  data. To enable Security Lake in specific Amazon Web Services Regions, such as us-east-1 or
  ap-northeast-3, provide the Region codes. For a list of Region codes, see Region codes in
  the Amazon Web Services General Reference.
"""
function create_datalake(; aws_config::AbstractAWSConfig=global_aws_config())
    return securitylake(
        "POST", "/v1/datalake"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function create_datalake(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "POST",
        "/v1/datalake",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_datalake_auto_enable(configuration_for_new_accounts)
    create_datalake_auto_enable(configuration_for_new_accounts, params::Dict{String,<:Any})

Automatically enable Security Lake in the specified Regions to begin ingesting security
data. When you choose to enable organization accounts automatically, then Security Lake
begins to enable new accounts as member accounts as they are added to the organization.
Security Lake does not enable existing organization accounts that are not yet enabled.

# Arguments
- `configuration_for_new_accounts`: Enable Amazon Security Lake with the specified
  configurations settings to begin ingesting security data for new accounts in Security Lake.

"""
function create_datalake_auto_enable(
    configurationForNewAccounts; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "POST",
        "/v1/datalake/autoenable",
        Dict{String,Any}("configurationForNewAccounts" => configurationForNewAccounts);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_datalake_auto_enable(
    configurationForNewAccounts,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "POST",
        "/v1/datalake/autoenable",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "configurationForNewAccounts" => configurationForNewAccounts
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_datalake_delegated_admin(account)
    create_datalake_delegated_admin(account, params::Dict{String,<:Any})

Designates the Security Lake administrator account for the organization. This API can only
be called by the organization management account. The organization management account
cannot be the delegated administrator account.

# Arguments
- `account`: Account ID of the Security Lake delegated administrator.

"""
function create_datalake_delegated_admin(
    account; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "POST",
        "/v1/datalake/delegate",
        Dict{String,Any}("account" => account);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_datalake_delegated_admin(
    account, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "POST",
        "/v1/datalake/delegate",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("account" => account), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_datalake_exceptions_subscription(notification_endpoint, subscription_protocol)
    create_datalake_exceptions_subscription(notification_endpoint, subscription_protocol, params::Dict{String,<:Any})

Creates the specified notification subscription in Security Lake. Creates the specified
subscription notifications in the specified organization.

# Arguments
- `notification_endpoint`: The account in which the exception notifications subscription is
  created.
- `subscription_protocol`: The subscription protocol to which exception messages are
  posted.

"""
function create_datalake_exceptions_subscription(
    notificationEndpoint,
    subscriptionProtocol;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "POST",
        "/v1/datalake/exceptions/subscription",
        Dict{String,Any}(
            "notificationEndpoint" => notificationEndpoint,
            "subscriptionProtocol" => subscriptionProtocol,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_datalake_exceptions_subscription(
    notificationEndpoint,
    subscriptionProtocol,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "POST",
        "/v1/datalake/exceptions/subscription",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "notificationEndpoint" => notificationEndpoint,
                    "subscriptionProtocol" => subscriptionProtocol,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_subscriber(account_id, external_id, source_types, subscriber_name)
    create_subscriber(account_id, external_id, source_types, subscriber_name, params::Dict{String,<:Any})

Creates a subscription permission for accounts that are already enabled in Security Lake.

# Arguments
- `account_id`: The third party Amazon Web Services account ID used to access your data.
- `external_id`: The external ID of the subscriber. External ID allows the user that is
  assuming the role to assert the circumstances in which they are operating. It also provides
  a way for the account owner to permit the role to be assumed only under specific
  circumstances.
- `source_types`: The supported Amazon Web Services services from which logs and events are
  collected. Amazon Security Lake supports logs and events collection for natively-supported
  Amazon Web Services services.
- `subscriber_name`: The name of your Amazon Security Lake subscriber account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"accessTypes"`: The Amazon S3 or Lake Formation access type.
- `"subscriberDescription"`: The subscriber descriptions for the subscriber account in
  Amazon Security Lake.
"""
function create_subscriber(
    accountId,
    externalId,
    sourceTypes,
    subscriberName;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "POST",
        "/v1/subscribers",
        Dict{String,Any}(
            "accountId" => accountId,
            "externalId" => externalId,
            "sourceTypes" => sourceTypes,
            "subscriberName" => subscriberName,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_subscriber(
    accountId,
    externalId,
    sourceTypes,
    subscriberName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "POST",
        "/v1/subscribers",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "accountId" => accountId,
                    "externalId" => externalId,
                    "sourceTypes" => sourceTypes,
                    "subscriberName" => subscriberName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_subscription_notification_configuration(subscription_id)
    create_subscription_notification_configuration(subscription_id, params::Dict{String,<:Any})

Creates the specified notification subscription in Security Lake. Creates the specified
subscription notifications from the specified organization.

# Arguments
- `subscription_id`: The subscription ID for which the subscription notification is
  specified.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"createSqs"`: Create a new subscription notification for the specified subscription ID
  in Security Lake.
- `"httpsApiKeyName"`: The key name for the subscription notification.
- `"httpsApiKeyValue"`: The key value for the subscription notification.
- `"httpsMethod"`: The HTTPS method used for the subscription notification.
- `"roleArn"`: The Amazon Resource Name (ARN) specifying the role of the subscriber.
- `"subscriptionEndpoint"`: The subscription endpoint in Security Lake.
"""
function create_subscription_notification_configuration(
    subscriptionId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "POST",
        "/subscription-notifications/$(subscriptionId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_subscription_notification_configuration(
    subscriptionId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "POST",
        "/subscription-notifications/$(subscriptionId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_aws_log_source(input_order)
    delete_aws_log_source(input_order, params::Dict{String,<:Any})

Removes a natively-supported Amazon Web Services service as a Amazon Security Lake source.
When you remove the source, Security Lake stops collecting data from that source, and
subscribers can no longer consume new data from the source. Subscribers can still consume
data that Amazon Security Lake collected from the source before disablement. You can choose
any source type in any Region for accounts that are either part of a trusted organization
or standalone accounts. At least one of the three dimensions is a mandatory input to this
API. However, any combination of the three dimensions can be supplied to this API.  By
default, dimension refers to the entire set. This is overridden when you supply any one of
the inputs. For instance, when members is not specified, the API disables all Security Lake
member accounts for sources. Similarly, when Regions are not specified, Security Lake is
disabled for all the Regions where Security Lake is available as a service. You can use
this API to remove a natively-supported Amazon Web Services service as a source. Use
DeregisterCustomData to remove a custom source. When you don't provide a dimension,
Security Lake assumes that the missing dimension refers to the entire set. For example, if
you don't provide specific accounts, the API applies to the entire set of accounts in your
organization.

# Arguments
- `input_order`: This is a mandatory input. Specifies the input order to disable dimensions
  in Security Lake, namely Region, source type, and member.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"disableAllDimensions"`: Removes the specific Amazon Web Services sources from all
  Regions and source types.
- `"disableSingleDimension"`: Removes all Amazon Web Services sources from specific
  accounts or Regions.
- `"disableTwoDimensions"`: Remove a specific Amazon Web Services source from specific
  accounts or Regions.
"""
function delete_aws_log_source(
    inputOrder; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "POST",
        "/v1/logsources/aws/delete",
        Dict{String,Any}("inputOrder" => inputOrder);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_aws_log_source(
    inputOrder,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "POST",
        "/v1/logsources/aws/delete",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("inputOrder" => inputOrder), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_custom_log_source(custom_source_name)
    delete_custom_log_source(custom_source_name, params::Dict{String,<:Any})

Removes a custom log source from Security Lake.

# Arguments
- `custom_source_name`: The custom source name for the custome log source.

"""
function delete_custom_log_source(
    customSourceName; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "DELETE",
        "/v1/logsources/custom",
        Dict{String,Any}("customSourceName" => customSourceName);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_custom_log_source(
    customSourceName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "DELETE",
        "/v1/logsources/custom",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("customSourceName" => customSourceName), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_datalake()
    delete_datalake(params::Dict{String,<:Any})

When you delete Amazon Security Lake from your account, Security Lake is disabled in all
Regions. Also, this API automatically performs the off-boarding steps to off-board the
account from Security Lake . This includes ingesting security data from sources, storing
data, and making data accessible to subscribers. Security Lake also deletes all the
existing settings and resources that it stores or maintains for your account in the current
Region, including security log and event data. DeleteDatalake does not delete the S3 bucket
which is owned by the Amazon Web Services account. For more information, see the Amazon
Security Lake User Guide.

"""
function delete_datalake(; aws_config::AbstractAWSConfig=global_aws_config())
    return securitylake(
        "DELETE", "/v1/datalake"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function delete_datalake(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "DELETE",
        "/v1/datalake",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_datalake_auto_enable(remove_from_configuration_for_new_accounts)
    delete_datalake_auto_enable(remove_from_configuration_for_new_accounts, params::Dict{String,<:Any})

Automatically delete Security Lake in the specified Regions to stop ingesting security
data. When you delete Amazon Security Lake from your account, Security Lake is disabled in
all Regions. Also, this API automatically performs the off-boarding steps to off-board the
account from Security Lake . This includes ingesting security data from sources, storing
data, and making data accessible to subscribers. Security Lake also deletes all the
existing settings and resources that it stores or maintains for your account in the current
Region, including security log and event data. For more information, see the Amazon
Security Lake User Guide.

# Arguments
- `remove_from_configuration_for_new_accounts`: Delete Amazon Security Lake with the
  specified configurations settings to stop ingesting security data for new accounts in
  Security Lake.

"""
function delete_datalake_auto_enable(
    removeFromConfigurationForNewAccounts; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "POST",
        "/v1/datalake/autoenable/delete",
        Dict{String,Any}(
            "removeFromConfigurationForNewAccounts" => removeFromConfigurationForNewAccounts
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_datalake_auto_enable(
    removeFromConfigurationForNewAccounts,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "POST",
        "/v1/datalake/autoenable/delete",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "removeFromConfigurationForNewAccounts" =>
                        removeFromConfigurationForNewAccounts,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_datalake_delegated_admin(account)
    delete_datalake_delegated_admin(account, params::Dict{String,<:Any})

Deletes the Security Lake administrator account for the organization. This API can only be
called by the organization management account. The organization management account cannot
be the delegated administrator account.

# Arguments
- `account`: Account ID the Security Lake delegated administrator.

"""
function delete_datalake_delegated_admin(
    account; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "DELETE",
        "/v1/datalake/delegate/$(account)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_datalake_delegated_admin(
    account, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "DELETE",
        "/v1/datalake/delegate/$(account)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_datalake_exceptions_subscription()
    delete_datalake_exceptions_subscription(params::Dict{String,<:Any})

Deletes the specified notification subscription in Security Lake. Deletes the specified
subscription notifications in the specified organization.

"""
function delete_datalake_exceptions_subscription(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "DELETE",
        "/v1/datalake/exceptions/subscription";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_datalake_exceptions_subscription(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "DELETE",
        "/v1/datalake/exceptions/subscription",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_subscriber(id)
    delete_subscriber(id, params::Dict{String,<:Any})

Deletes the specified subscription permissions to Security Lake. Deletes the specified
subscription permissions from the specified organization.

# Arguments
- `id`: A value created by Security Lake that uniquely identifies your DeleteSubscriber API
  request.

"""
function delete_subscriber(id; aws_config::AbstractAWSConfig=global_aws_config())
    return securitylake(
        "DELETE",
        "/v1/subscribers",
        Dict{String,Any}("id" => id);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_subscriber(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "DELETE",
        "/v1/subscribers",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("id" => id), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_subscription_notification_configuration(subscription_id)
    delete_subscription_notification_configuration(subscription_id, params::Dict{String,<:Any})

Deletes the specified notification subscription in Security Lake. Deletes the specified
subscription notifications from the specified organization.

# Arguments
- `subscription_id`: The subscription ID of the Amazon Security Lake subscriber account.

"""
function delete_subscription_notification_configuration(
    subscriptionId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "DELETE",
        "/subscription-notifications/$(subscriptionId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_subscription_notification_configuration(
    subscriptionId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "DELETE",
        "/subscription-notifications/$(subscriptionId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_datalake()
    get_datalake(params::Dict{String,<:Any})

Retrieve the Security Lake configuration object for the specified account ID. This API does
not take input parameters.

"""
function get_datalake(; aws_config::AbstractAWSConfig=global_aws_config())
    return securitylake(
        "GET", "/v1/datalake"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function get_datalake(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "GET",
        "/v1/datalake",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_datalake_auto_enable()
    get_datalake_auto_enable(params::Dict{String,<:Any})

Retrieves the configuration that will be automatically set up for accounts added to the
organization after the organization has on boarded to Amazon Security Lake. This API does
not take input parameters.

"""
function get_datalake_auto_enable(; aws_config::AbstractAWSConfig=global_aws_config())
    return securitylake(
        "GET",
        "/v1/datalake/autoenable";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_datalake_auto_enable(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "GET",
        "/v1/datalake/autoenable",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_datalake_exceptions_expiry()
    get_datalake_exceptions_expiry(params::Dict{String,<:Any})

Retrieves the expiration period and time-to-live (TTL) for which the exception message will
remain. Exceptions are stored by default, for a 2 week period of time from when a record
was created in Security Lake. This API does not take input parameters. This API does not
take input parameters.

"""
function get_datalake_exceptions_expiry(; aws_config::AbstractAWSConfig=global_aws_config())
    return securitylake(
        "GET",
        "/v1/datalake/exceptions/expiry";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_datalake_exceptions_expiry(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "GET",
        "/v1/datalake/exceptions/expiry",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_datalake_exceptions_subscription()
    get_datalake_exceptions_subscription(params::Dict{String,<:Any})

Retrieves the details of exception notifications for the account in Amazon Security Lake.

"""
function get_datalake_exceptions_subscription(;
    aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "GET",
        "/v1/datalake/exceptions/subscription";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_datalake_exceptions_subscription(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "GET",
        "/v1/datalake/exceptions/subscription",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_datalake_status()
    get_datalake_status(params::Dict{String,<:Any})

Retrieve the Security Lake configuration object for the specified account ID. This API does
not take input parameters.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"accountSet"`: The account IDs for which a static snapshot of the current Region,
  including enabled accounts and log sources is retrieved.
- `"maxAccountResults"`: The maximum limit of accounts for which the static snapshot of the
  current Region including enabled accounts and log sources is retrieved.
- `"nextToken"`: If nextToken is returned, there are more results available. The value of
  nextToken is a unique pagination token for each page. Make the call again using the
  returned token to retrieve the next page. Keep all other arguments unchanged. Each
  pagination token expires after 24 hours. Using an expired pagination token will return an
  HTTP 400 InvalidToken error.
"""
function get_datalake_status(; aws_config::AbstractAWSConfig=global_aws_config())
    return securitylake(
        "POST",
        "/v1/datalake/status";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_datalake_status(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "POST",
        "/v1/datalake/status",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_subscriber(id)
    get_subscriber(id, params::Dict{String,<:Any})

Retrieves subscription information for the specified subscription ID.

# Arguments
- `id`: A value created by Security Lake that uniquely identifies your GetSubscriber API
  request.

"""
function get_subscriber(id; aws_config::AbstractAWSConfig=global_aws_config())
    return securitylake(
        "GET",
        "/v1/subscribers/$(id)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_subscriber(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "GET",
        "/v1/subscribers/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_datalake_exceptions()
    list_datalake_exceptions(params::Dict{String,<:Any})

List the Amazon Security Lake exceptions that you can use to find the source of problems
and fix them.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxFailures"`: List the maximum number of failures in Security Lake.
- `"nextToken"`: List if there are more results available. if nextToken is returned, You
  can make the call again using the returned token to retrieve the next page
- `"regionSet"`: List the regions from which exceptions are retrieved.
"""
function list_datalake_exceptions(; aws_config::AbstractAWSConfig=global_aws_config())
    return securitylake(
        "POST",
        "/v1/datalake/exceptions";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_datalake_exceptions(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "POST",
        "/v1/datalake/exceptions",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_log_sources()
    list_log_sources(params::Dict{String,<:Any})

Lists the log sources in the current region.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"inputOrder"`: Lists the log sources in input order, namely Region, source type, and
  member account.
- `"listAllDimensions"`: List the view of log sources for enabled Security Lake accounts in
  all Regions and source types.
- `"listSingleDimension"`: List the view of log sources for enabled Security Lake accounts
  for the entire region.
- `"listTwoDimensions"`: Lists the log sources for the specified source types in enabled
  Security Lake accounts for the entire Region, for selected member accounts.
- `"maxResults"`: The maximum number of accounts for which the configuration is displayed.
- `"nextToken"`: If nextToken is returned, there are more results available. You can make
  the call again using the returned token to retrieve the next page.
"""
function list_log_sources(; aws_config::AbstractAWSConfig=global_aws_config())
    return securitylake(
        "POST",
        "/v1/logsources/list";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_log_sources(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "POST",
        "/v1/logsources/list",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_subscribers()
    list_subscribers(params::Dict{String,<:Any})

List all subscribers for the specific Security Lake account ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of accounts for which the configuration is displayed.
- `"nextToken"`: If nextToken is returned, there are more results available. You can make
  the call again using the returned token to retrieve the next page.
"""
function list_subscribers(; aws_config::AbstractAWSConfig=global_aws_config())
    return securitylake(
        "GET", "/v1/subscribers"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_subscribers(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "GET",
        "/v1/subscribers",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_datalake(configurations)
    update_datalake(configurations, params::Dict{String,<:Any})

Amazon Security Lake allows you to specify where to store your security data and for how
long. You can specify a rollup Region to consolidate data from multiple regions.  You can
update the properties of a Region or source. Input can either be directly specified to the
API.

# Arguments
- `configurations`: The configuration object

"""
function update_datalake(configurations; aws_config::AbstractAWSConfig=global_aws_config())
    return securitylake(
        "PUT",
        "/v1/datalake",
        Dict{String,Any}("configurations" => configurations);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_datalake(
    configurations,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "PUT",
        "/v1/datalake",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("configurations" => configurations), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_datalake_exceptions_expiry(exception_message_expiry)
    update_datalake_exceptions_expiry(exception_message_expiry, params::Dict{String,<:Any})

Update the expiration period for the exception message to your preferred time, and control
the time-to-live (TTL) for the exception message to remain. Exceptions are stored by
default, for a 2 week period of time from when a record was created in Security Lake.

# Arguments
- `exception_message_expiry`: The time-to-live (TTL) for the exception message to remain.

"""
function update_datalake_exceptions_expiry(
    exceptionMessageExpiry; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "PUT",
        "/v1/datalake/exceptions/expiry",
        Dict{String,Any}("exceptionMessageExpiry" => exceptionMessageExpiry);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_datalake_exceptions_expiry(
    exceptionMessageExpiry,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "PUT",
        "/v1/datalake/exceptions/expiry",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("exceptionMessageExpiry" => exceptionMessageExpiry),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_datalake_exceptions_subscription(notification_endpoint, subscription_protocol)
    update_datalake_exceptions_subscription(notification_endpoint, subscription_protocol, params::Dict{String,<:Any})

Update the subscription notification for exception notification.

# Arguments
- `notification_endpoint`: The account which is subscribed to receive exception
  notifications.
- `subscription_protocol`: The subscription protocol to which exception messages are
  posted.

"""
function update_datalake_exceptions_subscription(
    notificationEndpoint,
    subscriptionProtocol;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "PUT",
        "/v1/datalake/exceptions/subscription",
        Dict{String,Any}(
            "notificationEndpoint" => notificationEndpoint,
            "subscriptionProtocol" => subscriptionProtocol,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_datalake_exceptions_subscription(
    notificationEndpoint,
    subscriptionProtocol,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "PUT",
        "/v1/datalake/exceptions/subscription",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "notificationEndpoint" => notificationEndpoint,
                    "subscriptionProtocol" => subscriptionProtocol,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_subscriber(id)
    update_subscriber(id, params::Dict{String,<:Any})

Update the subscription permission for the given Security Lake account ID.

# Arguments
- `id`: A value created by Security Lake that uniquely identifies your UpdateSubscriber API
  request.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"externalId"`: External ID of the Security Lake account.
- `"sourceTypes"`: The supported Amazon Web Services services from which logs and events
  are collected. Amazon Security Lake supports logs and events collection for the following
  natively-supported Amazon Web Services services. For more information, see the Amazon
  Security Lake User Guide.
- `"subscriberDescription"`: Description of the Security Lake account subscriber.
- `"subscriberName"`: Name of the Security Lake account subscriber.
"""
function update_subscriber(id; aws_config::AbstractAWSConfig=global_aws_config())
    return securitylake(
        "PUT",
        "/v1/subscribers/$(id)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_subscriber(
    id, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "PUT",
        "/v1/subscribers/$(id)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_subscription_notification_configuration(subscription_id)
    update_subscription_notification_configuration(subscription_id, params::Dict{String,<:Any})

Create a new subscription notification or add the existing subscription notification
setting for the specified subscription ID.

# Arguments
- `subscription_id`: The subscription ID for which the subscription notification is
  specified.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"createSqs"`: Create a new subscription notification for the specified subscription ID
  in Security Lake.
- `"httpsApiKeyName"`: The key name for the subscription notification.
- `"httpsApiKeyValue"`: The key value for the subscription notification.
- `"httpsMethod"`: The HTTPS method used for the subscription notification.
- `"roleArn"`: The Amazon Resource Name (ARN) specifying the role of the subscriber.
- `"subscriptionEndpoint"`: The subscription endpoint in Security Lake.
"""
function update_subscription_notification_configuration(
    subscriptionId; aws_config::AbstractAWSConfig=global_aws_config()
)
    return securitylake(
        "PUT",
        "/subscription-notifications/$(subscriptionId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_subscription_notification_configuration(
    subscriptionId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return securitylake(
        "PUT",
        "/subscription-notifications/$(subscriptionId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
