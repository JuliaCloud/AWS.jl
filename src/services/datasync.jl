# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: datasync
using AWS.Compat
using AWS.UUIDs

"""
    add_storage_system(agent_arns, client_token, credentials, server_configuration, system_type)
    add_storage_system(agent_arns, client_token, credentials, server_configuration, system_type, params::Dict{String,<:Any})

Creates an Amazon Web Services resource for an on-premises storage system that you want
DataSync Discovery to collect information about.

# Arguments
- `agent_arns`: Specifies the Amazon Resource Name (ARN) of the DataSync agent that
  connects to and reads from your on-premises storage system's management interface.
- `client_token`: Specifies a client token to make sure requests with this API operation
  are idempotent. If you don't specify a client token, DataSync generates one for you
  automatically.
- `credentials`: Specifies the user name and password for accessing your on-premises
  storage system's management interface.
- `server_configuration`: Specifies the server name and network port required to connect
  with the management interface of your on-premises storage system.
- `system_type`: Specifies the type of on-premises storage system that you want DataSync
  Discovery to collect information about.  DataSync Discovery currently supports NetApp
  Fabric-Attached Storage (FAS) and All Flash FAS (AFF) systems running ONTAP 9.7 or later.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CloudWatchLogGroupArn"`: Specifies the ARN of the Amazon CloudWatch log group for
  monitoring and logging discovery job events.
- `"Name"`: Specifies a familiar name for your on-premises storage system.
- `"Tags"`: Specifies labels that help you categorize, filter, and search for your Amazon
  Web Services resources. We recommend creating at least a name tag for your on-premises
  storage system.
"""
function add_storage_system(
    AgentArns,
    ClientToken,
    Credentials,
    ServerConfiguration,
    SystemType;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "AddStorageSystem",
        Dict{String,Any}(
            "AgentArns" => AgentArns,
            "ClientToken" => ClientToken,
            "Credentials" => Credentials,
            "ServerConfiguration" => ServerConfiguration,
            "SystemType" => SystemType,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function add_storage_system(
    AgentArns,
    ClientToken,
    Credentials,
    ServerConfiguration,
    SystemType,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "AddStorageSystem",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "AgentArns" => AgentArns,
                    "ClientToken" => ClientToken,
                    "Credentials" => Credentials,
                    "ServerConfiguration" => ServerConfiguration,
                    "SystemType" => SystemType,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    cancel_task_execution(task_execution_arn)
    cancel_task_execution(task_execution_arn, params::Dict{String,<:Any})

Stops an DataSync task execution that's in progress. The transfer of some files are
abruptly interrupted. File contents that're transferred to the destination might be
incomplete or inconsistent with the source files. However, if you start a new task
execution using the same task and allow it to finish, file content on the destination will
be complete and consistent. This applies to other unexpected failures that interrupt a task
execution. In all of these cases, DataSync successfully completes the transfer when you
start the next task execution.

# Arguments
- `task_execution_arn`: The Amazon Resource Name (ARN) of the task execution to stop.

"""
function cancel_task_execution(
    TaskExecutionArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "CancelTaskExecution",
        Dict{String,Any}("TaskExecutionArn" => TaskExecutionArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function cancel_task_execution(
    TaskExecutionArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CancelTaskExecution",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("TaskExecutionArn" => TaskExecutionArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_agent(activation_key)
    create_agent(activation_key, params::Dict{String,<:Any})

Activates an DataSync agent that you have deployed in your storage environment. The
activation process associates your agent with your account. In the activation process, you
specify information such as the Amazon Web Services Region that you want to activate the
agent in. You activate the agent in the Amazon Web Services Region where your target
locations (in Amazon S3 or Amazon EFS) reside. Your tasks are created in this Amazon Web
Services Region. You can activate the agent in a VPC (virtual private cloud) or provide the
agent access to a VPC endpoint so you can run tasks without going over the public internet.
You can use an agent for more than one location. If a task uses multiple agents, all of
them need to have status AVAILABLE for the task to run. If you use multiple agents for a
source location, the status of all the agents must be AVAILABLE for the task to run.
Agents are automatically updated by Amazon Web Services on a regular basis, using a
mechanism that ensures minimal interruption to your tasks.

# Arguments
- `activation_key`: Your agent activation key. You can get the activation key either by
  sending an HTTP GET request with redirects that enable you to get the agent IP address
  (port 80). Alternatively, you can get it from the DataSync console. The redirect URL
  returned in the response provides you the activation key for your agent in the query string
  parameter activationKey. It might also include other activation-related parameters;
  however, these are merely defaults. The arguments you pass to this API call determine the
  actual configuration of your agent. For more information, see Activating an Agent in the
  DataSync User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AgentName"`: The name you configured for your agent. This value is a text reference
  that is used to identify the agent in the console.
- `"SecurityGroupArns"`: The ARNs of the security groups used to protect your data transfer
  task subnets. See SecurityGroupArns.
- `"SubnetArns"`: The Amazon Resource Names (ARNs) of the subnets in which DataSync will
  create elastic network interfaces for each data transfer task. The agent that runs a task
  must be private. When you start a task that is associated with an agent created in a VPC,
  or one that has access to an IP address in a VPC, then the task is also private. In this
  case, DataSync creates four network interfaces for each task in your subnet. For a data
  transfer to work, the agent must be able to route to all these four network interfaces.
- `"Tags"`: The key-value pair that represents the tag that you want to associate with the
  agent. The value can be an empty string. This value helps you manage, filter, and search
  for your agents.  Valid characters for key and value are letters, spaces, and numbers
  representable in UTF-8 format, and the following special characters: + - = . _ : / @.
- `"VpcEndpointId"`: The ID of the VPC (virtual private cloud) endpoint that the agent has
  access to. This is the client-side VPC endpoint, also called a PrivateLink. If you don't
  have a PrivateLink VPC endpoint, see Creating a VPC Endpoint Service Configuration in the
  Amazon VPC User Guide. VPC endpoint ID looks like this: vpce-01234d5aff67890e1.
"""
function create_agent(ActivationKey; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "CreateAgent",
        Dict{String,Any}("ActivationKey" => ActivationKey);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_agent(
    ActivationKey,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateAgent",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ActivationKey" => ActivationKey), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_location_efs(ec2_config, efs_filesystem_arn)
    create_location_efs(ec2_config, efs_filesystem_arn, params::Dict{String,<:Any})

Creates an endpoint for an Amazon EFS file system that DataSync can access for a transfer.
For more information, see Creating a location for Amazon EFS.

# Arguments
- `ec2_config`: Specifies the subnet and security groups DataSync uses to access your
  Amazon EFS file system.
- `efs_filesystem_arn`: Specifies the ARN for the Amazon EFS file system.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AccessPointArn"`: Specifies the Amazon Resource Name (ARN) of the access point that
  DataSync uses to access the Amazon EFS file system.
- `"FileSystemAccessRoleArn"`: Specifies an Identity and Access Management (IAM) role that
  DataSync assumes when mounting the Amazon EFS file system.
- `"InTransitEncryption"`: Specifies whether you want DataSync to use Transport Layer
  Security (TLS) 1.2 encryption when it copies data to or from the Amazon EFS file system. If
  you specify an access point using AccessPointArn or an IAM role using
  FileSystemAccessRoleArn, you must set this parameter to TLS1_2.
- `"Subdirectory"`: Specifies a mount path for your Amazon EFS file system. This is where
  DataSync reads or writes data (depending on if this is a source or destination location).
  By default, DataSync uses the root directory, but you can also include subdirectories.  You
  must specify a value with forward slashes (for example, /path/to/folder).
- `"Tags"`: Specifies the key-value pair that represents a tag that you want to add to the
  resource. The value can be an empty string. This value helps you manage, filter, and search
  for your resources. We recommend that you create a name tag for your location.
"""
function create_location_efs(
    Ec2Config, EfsFilesystemArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "CreateLocationEfs",
        Dict{String,Any}("Ec2Config" => Ec2Config, "EfsFilesystemArn" => EfsFilesystemArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_location_efs(
    Ec2Config,
    EfsFilesystemArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationEfs",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Ec2Config" => Ec2Config, "EfsFilesystemArn" => EfsFilesystemArn
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_location_fsx_lustre(fsx_filesystem_arn, security_group_arns)
    create_location_fsx_lustre(fsx_filesystem_arn, security_group_arns, params::Dict{String,<:Any})

Creates an endpoint for an Amazon FSx for Lustre file system.

# Arguments
- `fsx_filesystem_arn`: The Amazon Resource Name (ARN) for the FSx for Lustre file system.
- `security_group_arns`: The Amazon Resource Names (ARNs) of the security groups that are
  used to configure the FSx for Lustre file system.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Subdirectory"`: A subdirectory in the location's path. This subdirectory in the FSx for
  Lustre file system is used to read data from the FSx for Lustre source location or write
  data to the FSx for Lustre destination.
- `"Tags"`: The key-value pair that represents a tag that you want to add to the resource.
  The value can be an empty string. This value helps you manage, filter, and search for your
  resources. We recommend that you create a name tag for your location.
"""
function create_location_fsx_lustre(
    FsxFilesystemArn, SecurityGroupArns; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "CreateLocationFsxLustre",
        Dict{String,Any}(
            "FsxFilesystemArn" => FsxFilesystemArn, "SecurityGroupArns" => SecurityGroupArns
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_location_fsx_lustre(
    FsxFilesystemArn,
    SecurityGroupArns,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationFsxLustre",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "FsxFilesystemArn" => FsxFilesystemArn,
                    "SecurityGroupArns" => SecurityGroupArns,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_location_fsx_ontap(protocol, security_group_arns, storage_virtual_machine_arn)
    create_location_fsx_ontap(protocol, security_group_arns, storage_virtual_machine_arn, params::Dict{String,<:Any})

Creates an endpoint for an Amazon FSx for NetApp ONTAP file system that DataSync can access
for a transfer. For more information, see Creating a location for FSx for ONTAP.

# Arguments
- `protocol`:
- `security_group_arns`: Specifies the Amazon EC2 security groups that provide access to
  your file system's preferred subnet. The security groups must allow outbound traffic on the
  following ports (depending on the protocol you use):    Network File System (NFS): TCP
  ports 111, 635, and 2049    Server Message Block (SMB): TCP port 445   Your file system's
  security groups must also allow inbound traffic on the same ports.
- `storage_virtual_machine_arn`: Specifies the ARN of the storage virtual machine (SVM) in
  your file system where you want to copy data to or from.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Subdirectory"`: Specifies a path to the file share in the SVM where you'll copy your
  data. You can specify a junction path (also known as a mount point), qtree path (for NFS
  file shares), or share name (for SMB file shares). For example, your mount path might be
  /vol1, /vol1/tree1, or /share1.  Don't specify a junction path in the SVM's root volume.
  For more information, see Managing FSx for ONTAP storage virtual machines in the Amazon FSx
  for NetApp ONTAP User Guide.
- `"Tags"`: Specifies labels that help you categorize, filter, and search for your Amazon
  Web Services resources. We recommend creating at least a name tag for your location.
"""
function create_location_fsx_ontap(
    Protocol,
    SecurityGroupArns,
    StorageVirtualMachineArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationFsxOntap",
        Dict{String,Any}(
            "Protocol" => Protocol,
            "SecurityGroupArns" => SecurityGroupArns,
            "StorageVirtualMachineArn" => StorageVirtualMachineArn,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_location_fsx_ontap(
    Protocol,
    SecurityGroupArns,
    StorageVirtualMachineArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationFsxOntap",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Protocol" => Protocol,
                    "SecurityGroupArns" => SecurityGroupArns,
                    "StorageVirtualMachineArn" => StorageVirtualMachineArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_location_fsx_open_zfs(fsx_filesystem_arn, protocol, security_group_arns)
    create_location_fsx_open_zfs(fsx_filesystem_arn, protocol, security_group_arns, params::Dict{String,<:Any})

Creates an endpoint for an Amazon FSx for OpenZFS file system that DataSync can access for
a transfer. For more information, see Creating a location for FSx for OpenZFS.  Request
parameters related to SMB aren't supported with the CreateLocationFsxOpenZfs operation.

# Arguments
- `fsx_filesystem_arn`: The Amazon Resource Name (ARN) of the FSx for OpenZFS file system.
- `protocol`: The type of protocol that DataSync uses to access your file system.
- `security_group_arns`: The ARNs of the security groups that are used to configure the FSx
  for OpenZFS file system.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Subdirectory"`: A subdirectory in the location's path that must begin with /fsx.
  DataSync uses this subdirectory to read or write data (depending on whether the file system
  is a source or destination location).
- `"Tags"`: The key-value pair that represents a tag that you want to add to the resource.
  The value can be an empty string. This value helps you manage, filter, and search for your
  resources. We recommend that you create a name tag for your location.
"""
function create_location_fsx_open_zfs(
    FsxFilesystemArn,
    Protocol,
    SecurityGroupArns;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationFsxOpenZfs",
        Dict{String,Any}(
            "FsxFilesystemArn" => FsxFilesystemArn,
            "Protocol" => Protocol,
            "SecurityGroupArns" => SecurityGroupArns,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_location_fsx_open_zfs(
    FsxFilesystemArn,
    Protocol,
    SecurityGroupArns,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationFsxOpenZfs",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "FsxFilesystemArn" => FsxFilesystemArn,
                    "Protocol" => Protocol,
                    "SecurityGroupArns" => SecurityGroupArns,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_location_fsx_windows(fsx_filesystem_arn, password, security_group_arns, user)
    create_location_fsx_windows(fsx_filesystem_arn, password, security_group_arns, user, params::Dict{String,<:Any})

Creates an endpoint for an Amazon FSx for Windows File Server file system.

# Arguments
- `fsx_filesystem_arn`: Specifies the Amazon Resource Name (ARN) for the FSx for Windows
  File Server file system.
- `password`: Specifies the password of the user who has the permissions to access files
  and folders in the file system.
- `security_group_arns`: Specifies the ARNs of the security groups that provide access to
  your file system's preferred subnet.  If you choose a security group that doesn't allow
  connections from within itself, do one of the following:   Configure the security group to
  allow it to communicate within itself.   Choose a different security group that can
  communicate with the mount target's security group.
- `user`: Specifies the user who has the permissions to access files and folders in the
  file system. For information about choosing a user name that ensures sufficient permissions
  to files, folders, and metadata, see user.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Domain"`: Specifies the name of the Windows domain that the FSx for Windows File Server
  belongs to.
- `"Subdirectory"`: Specifies a mount path for your file system using forward slashes. This
  is where DataSync reads or writes data (depending on if this is a source or destination
  location).
- `"Tags"`: Specifies labels that help you categorize, filter, and search for your Amazon
  Web Services resources. We recommend creating at least a name tag for your location.
"""
function create_location_fsx_windows(
    FsxFilesystemArn,
    Password,
    SecurityGroupArns,
    User;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationFsxWindows",
        Dict{String,Any}(
            "FsxFilesystemArn" => FsxFilesystemArn,
            "Password" => Password,
            "SecurityGroupArns" => SecurityGroupArns,
            "User" => User,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_location_fsx_windows(
    FsxFilesystemArn,
    Password,
    SecurityGroupArns,
    User,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationFsxWindows",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "FsxFilesystemArn" => FsxFilesystemArn,
                    "Password" => Password,
                    "SecurityGroupArns" => SecurityGroupArns,
                    "User" => User,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_location_hdfs(agent_arns, authentication_type, name_nodes)
    create_location_hdfs(agent_arns, authentication_type, name_nodes, params::Dict{String,<:Any})

Creates an endpoint for a Hadoop Distributed File System (HDFS).

# Arguments
- `agent_arns`: The Amazon Resource Names (ARNs) of the agents that are used to connect to
  the HDFS cluster.
- `authentication_type`: The type of authentication used to determine the identity of the
  user.
- `name_nodes`: The NameNode that manages the HDFS namespace. The NameNode performs
  operations such as opening, closing, and renaming files and directories. The NameNode
  contains the information to map blocks of data to the DataNodes. You can use only one
  NameNode.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"BlockSize"`: The size of data blocks to write into the HDFS cluster. The block size
  must be a multiple of 512 bytes. The default block size is 128 mebibytes (MiB).
- `"KerberosKeytab"`: The Kerberos key table (keytab) that contains mappings between the
  defined Kerberos principal and the encrypted keys. You can load the keytab from a file by
  providing the file's address. If you're using the CLI, it performs base64 encoding for you.
  Otherwise, provide the base64-encoded text.   If KERBEROS is specified for
  AuthenticationType, this parameter is required.
- `"KerberosKrb5Conf"`: The krb5.conf file that contains the Kerberos configuration
  information. You can load the krb5.conf file by providing the file's address. If you're
  using the CLI, it performs the base64 encoding for you. Otherwise, provide the
  base64-encoded text.   If KERBEROS is specified for AuthenticationType, this parameter is
  required.
- `"KerberosPrincipal"`: The Kerberos principal with access to the files and folders on the
  HDFS cluster.   If KERBEROS is specified for AuthenticationType, this parameter is
  required.
- `"KmsKeyProviderUri"`: The URI of the HDFS cluster's Key Management Server (KMS).
- `"QopConfiguration"`: The Quality of Protection (QOP) configuration specifies the Remote
  Procedure Call (RPC) and data transfer protection settings configured on the Hadoop
  Distributed File System (HDFS) cluster. If QopConfiguration isn't specified, RpcProtection
  and DataTransferProtection default to PRIVACY. If you set RpcProtection or
  DataTransferProtection, the other parameter assumes the same value.
- `"ReplicationFactor"`: The number of DataNodes to replicate the data to when writing to
  the HDFS cluster. By default, data is replicated to three DataNodes.
- `"SimpleUser"`: The user name used to identify the client on the host operating system.
  If SIMPLE is specified for AuthenticationType, this parameter is required.
- `"Subdirectory"`: A subdirectory in the HDFS cluster. This subdirectory is used to read
  data from or write data to the HDFS cluster. If the subdirectory isn't specified, it will
  default to /.
- `"Tags"`: The key-value pair that represents the tag that you want to add to the
  location. The value can be an empty string. We recommend using tags to name your resources.
"""
function create_location_hdfs(
    AgentArns,
    AuthenticationType,
    NameNodes;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationHdfs",
        Dict{String,Any}(
            "AgentArns" => AgentArns,
            "AuthenticationType" => AuthenticationType,
            "NameNodes" => NameNodes,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_location_hdfs(
    AgentArns,
    AuthenticationType,
    NameNodes,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationHdfs",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "AgentArns" => AgentArns,
                    "AuthenticationType" => AuthenticationType,
                    "NameNodes" => NameNodes,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_location_nfs(on_prem_config, server_hostname, subdirectory)
    create_location_nfs(on_prem_config, server_hostname, subdirectory, params::Dict{String,<:Any})

Defines a file system on a Network File System (NFS) server that can be read from or
written to.

# Arguments
- `on_prem_config`: Contains a list of Amazon Resource Names (ARNs) of agents that are used
  to connect to an NFS server.  If you are copying data to or from your Snowcone device, see
  NFS Server on Snowcone for more information.
- `server_hostname`: The name of the NFS server. This value is the IP address or Domain
  Name Service (DNS) name of the NFS server. An agent that is installed on-premises uses this
  hostname to mount the NFS server in a network.  If you are copying data to or from your
  Snowcone device, see NFS Server on Snowcone for more information.  This name must either be
  DNS-compliant or must be an IP version 4 (IPv4) address.
- `subdirectory`: The subdirectory in the NFS file system that is used to read data from
  the NFS source location or write data to the NFS destination. The NFS path should be a path
  that's exported by the NFS server, or a subdirectory of that path. The path should be such
  that it can be mounted by other NFS clients in your network.  To see all the paths exported
  by your NFS server, run \"showmount -e nfs-server-name\" from an NFS client that has access
  to your server. You can specify any directory that appears in the results, and any
  subdirectory of that directory. Ensure that the NFS export is accessible without Kerberos
  authentication.  To transfer all the data in the folder you specified, DataSync needs to
  have permissions to read all the data. To ensure this, either configure the NFS export with
  no_root_squash, or ensure that the permissions for all of the files that you want DataSync
  allow read access for all users. Doing either enables the agent to read the files. For the
  agent to access directories, you must additionally enable all execute access. If you are
  copying data to or from your Snowcone device, see NFS Server on Snowcone for more
  information. For information about NFS export configuration, see 18.7. The /etc/exports
  Configuration File in the Red Hat Enterprise Linux documentation.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MountOptions"`: The NFS mount options that DataSync can use to mount your NFS share.
- `"Tags"`: The key-value pair that represents the tag that you want to add to the
  location. The value can be an empty string. We recommend using tags to name your resources.
"""
function create_location_nfs(
    OnPremConfig,
    ServerHostname,
    Subdirectory;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationNfs",
        Dict{String,Any}(
            "OnPremConfig" => OnPremConfig,
            "ServerHostname" => ServerHostname,
            "Subdirectory" => Subdirectory,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_location_nfs(
    OnPremConfig,
    ServerHostname,
    Subdirectory,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationNfs",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "OnPremConfig" => OnPremConfig,
                    "ServerHostname" => ServerHostname,
                    "Subdirectory" => Subdirectory,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_location_object_storage(agent_arns, bucket_name, server_hostname)
    create_location_object_storage(agent_arns, bucket_name, server_hostname, params::Dict{String,<:Any})

Creates an endpoint for an object storage system that DataSync can access for a transfer.
For more information, see Creating a location for object storage.

# Arguments
- `agent_arns`: Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can
  securely connect with your location.
- `bucket_name`: Specifies the name of the object storage bucket involved in the transfer.
- `server_hostname`: Specifies the domain name or IP address of the object storage server.
  A DataSync agent uses this hostname to mount the object storage server in a network.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AccessKey"`: Specifies the access key (for example, a user name) if credentials are
  required to authenticate with the object storage server.
- `"SecretKey"`: Specifies the secret key (for example, a password) if credentials are
  required to authenticate with the object storage server.
- `"ServerCertificate"`: Specifies a certificate to authenticate with an object storage
  system that uses a private or self-signed certificate authority (CA). You must specify a
  Base64-encoded .pem file (for example, file:///home/user/.ssh/storage_sys_certificate.pem).
  The certificate can be up to 32768 bytes (before Base64 encoding). To use this parameter,
  configure ServerProtocol to HTTPS.
- `"ServerPort"`: Specifies the port that your object storage server accepts inbound
  network traffic on (for example, port 443).
- `"ServerProtocol"`: Specifies the protocol that your object storage server uses to
  communicate.
- `"Subdirectory"`: Specifies the object prefix for your object storage server. If this is
  a source location, DataSync only copies objects with this prefix. If this is a destination
  location, DataSync writes all objects with this prefix.
- `"Tags"`: Specifies the key-value pair that represents a tag that you want to add to the
  resource. Tags can help you manage, filter, and search for your resources. We recommend
  creating a name tag for your location.
"""
function create_location_object_storage(
    AgentArns, BucketName, ServerHostname; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "CreateLocationObjectStorage",
        Dict{String,Any}(
            "AgentArns" => AgentArns,
            "BucketName" => BucketName,
            "ServerHostname" => ServerHostname,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_location_object_storage(
    AgentArns,
    BucketName,
    ServerHostname,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationObjectStorage",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "AgentArns" => AgentArns,
                    "BucketName" => BucketName,
                    "ServerHostname" => ServerHostname,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_location_s3(s3_bucket_arn, s3_config)
    create_location_s3(s3_bucket_arn, s3_config, params::Dict{String,<:Any})

A location is an endpoint for an Amazon S3 bucket. DataSync can use the location as a
source or destination for copying data.  Before you create your location, make sure that
you read the following sections:    Storage class considerations with Amazon S3 locations
  Evaluating S3 request costs when using DataSync      For more information, see Creating
an Amazon S3 location.

# Arguments
- `s3_bucket_arn`: The ARN of the Amazon S3 bucket. If the bucket is on an Amazon Web
  Services Outpost, this must be an access point ARN.
- `s3_config`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AgentArns"`: If you're using DataSync on an Amazon Web Services Outpost, specify the
  Amazon Resource Names (ARNs) of the DataSync agents deployed on your Outpost. For more
  information about launching a DataSync agent on an Amazon Web Services Outpost, see Deploy
  your DataSync agent on Outposts.
- `"S3StorageClass"`: The Amazon S3 storage class that you want to store your files in when
  this location is used as a task destination. For buckets in Amazon Web Services Regions,
  the storage class defaults to Standard. For buckets on Outposts, the storage class defaults
  to Amazon Web Services S3 Outposts. For more information about S3 storage classes, see
  Amazon S3 Storage Classes. Some storage classes have behaviors that can affect your S3
  storage cost. For detailed information, see Considerations when working with S3 storage
  classes in DataSync.
- `"Subdirectory"`: A subdirectory in the Amazon S3 bucket. This subdirectory in Amazon S3
  is used to read data from the S3 source location or write data to the S3 destination.
- `"Tags"`: The key-value pair that represents the tag that you want to add to the
  location. The value can be an empty string. We recommend using tags to name your resources.
"""
function create_location_s3(
    S3BucketArn, S3Config; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "CreateLocationS3",
        Dict{String,Any}("S3BucketArn" => S3BucketArn, "S3Config" => S3Config);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_location_s3(
    S3BucketArn,
    S3Config,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationS3",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("S3BucketArn" => S3BucketArn, "S3Config" => S3Config),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_location_smb(agent_arns, password, server_hostname, subdirectory, user)
    create_location_smb(agent_arns, password, server_hostname, subdirectory, user, params::Dict{String,<:Any})

Creates an endpoint for a Server Message Block (SMB) file server that DataSync can access
for a transfer. For more information, see Creating an SMB location.

# Arguments
- `agent_arns`: Specifies the DataSync agent (or agents) which you want to connect to your
  SMB file server. You specify an agent by using its Amazon Resource Name (ARN).
- `password`: Specifies the password of the user who can mount your SMB file server and has
  permission to access the files and folders involved in your transfer. For more information,
  see required permissions for SMB locations.
- `server_hostname`: Specifies the Domain Name Service (DNS) name or IP address of the SMB
  file server that your DataSync agent will mount.  You can't specify an IP version 6 (IPv6)
  address.
- `subdirectory`: Specifies the name of the share exported by your SMB file server where
  DataSync will read or write data. You can include a subdirectory in the share path (for
  example, /path/to/subdirectory). Make sure that other SMB clients in your network can also
  mount this path. To copy all data in the specified subdirectory, DataSync must be able to
  mount the SMB share and access all of its data. For more information, see required
  permissions for SMB locations.
- `user`: Specifies the user name that can mount your SMB file server and has permission to
  access the files and folders involved in your transfer. For information about choosing a
  user with the right level of access for your transfer, see required permissions for SMB
  locations.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Domain"`: Specifies the Windows domain name that your SMB file server belongs to.  For
  more information, see required permissions for SMB locations.
- `"MountOptions"`: Specifies the version of the SMB protocol that DataSync uses to access
  your SMB file server.
- `"Tags"`: Specifies labels that help you categorize, filter, and search for your Amazon
  Web Services resources. We recommend creating at least a name tag for your location.
"""
function create_location_smb(
    AgentArns,
    Password,
    ServerHostname,
    Subdirectory,
    User;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationSmb",
        Dict{String,Any}(
            "AgentArns" => AgentArns,
            "Password" => Password,
            "ServerHostname" => ServerHostname,
            "Subdirectory" => Subdirectory,
            "User" => User,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_location_smb(
    AgentArns,
    Password,
    ServerHostname,
    Subdirectory,
    User,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateLocationSmb",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "AgentArns" => AgentArns,
                    "Password" => Password,
                    "ServerHostname" => ServerHostname,
                    "Subdirectory" => Subdirectory,
                    "User" => User,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_task(destination_location_arn, source_location_arn)
    create_task(destination_location_arn, source_location_arn, params::Dict{String,<:Any})

Configures a task, which defines where and how DataSync transfers your data. A task
includes a source location, a destination location, and the preferences for how and when
you want to transfer your data (such as bandwidth limits, scheduling, among other options).
 If you're planning to transfer data to or from an Amazon S3 location, review how DataSync
can affect your S3 request charges and the DataSync pricing page before you begin.

# Arguments
- `destination_location_arn`: The Amazon Resource Name (ARN) of an Amazon Web Services
  storage resource's location.
- `source_location_arn`: The Amazon Resource Name (ARN) of the source location for the task.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CloudWatchLogGroupArn"`: The Amazon Resource Name (ARN) of the Amazon CloudWatch log
  group that is used to monitor and log events in the task.
- `"Excludes"`: Specifies a list of filter rules that exclude specific data during your
  transfer. For more information and examples, see Filtering data transferred by DataSync.
- `"Includes"`: Specifies a list of filter rules that include specific data during your
  transfer. For more information and examples, see Filtering data transferred by DataSync.
- `"Name"`: The name of a task. This value is a text reference that is used to identify the
  task in the console.
- `"Options"`: Specifies the configuration options for a task. Some options include
  preserving file or object metadata and verifying data integrity. You can also override
  these options before starting an individual run of a task (also known as a task execution).
  For more information, see StartTaskExecution.
- `"Schedule"`: Specifies a schedule used to periodically transfer files from a source to a
  destination location. The schedule should be specified in UTC time. For more information,
  see Scheduling your task.
- `"Tags"`: Specifies the tags that you want to apply to the Amazon Resource Name (ARN)
  representing the task.  Tags are key-value pairs that help you manage, filter, and search
  for your DataSync resources.
"""
function create_task(
    DestinationLocationArn,
    SourceLocationArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateTask",
        Dict{String,Any}(
            "DestinationLocationArn" => DestinationLocationArn,
            "SourceLocationArn" => SourceLocationArn,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_task(
    DestinationLocationArn,
    SourceLocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "CreateTask",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DestinationLocationArn" => DestinationLocationArn,
                    "SourceLocationArn" => SourceLocationArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_agent(agent_arn)
    delete_agent(agent_arn, params::Dict{String,<:Any})

Deletes an agent. To specify which agent to delete, use the Amazon Resource Name (ARN) of
the agent in your request. The operation disassociates the agent from your Amazon Web
Services account. However, it doesn't delete the agent virtual machine (VM) from your
on-premises environment.

# Arguments
- `agent_arn`: The Amazon Resource Name (ARN) of the agent to delete. Use the ListAgents
  operation to return a list of agents for your account and Amazon Web Services Region.

"""
function delete_agent(AgentArn; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "DeleteAgent",
        Dict{String,Any}("AgentArn" => AgentArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_agent(
    AgentArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DeleteAgent",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("AgentArn" => AgentArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_location(location_arn)
    delete_location(location_arn, params::Dict{String,<:Any})

Deletes the configuration of a location used by DataSync.

# Arguments
- `location_arn`: The Amazon Resource Name (ARN) of the location to delete.

"""
function delete_location(LocationArn; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "DeleteLocation",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_location(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DeleteLocation",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_task(task_arn)
    delete_task(task_arn, params::Dict{String,<:Any})

Deletes an DataSync task.

# Arguments
- `task_arn`: Specifies the Amazon Resource Name (ARN) of the task that you want to delete.

"""
function delete_task(TaskArn; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "DeleteTask",
        Dict{String,Any}("TaskArn" => TaskArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_task(
    TaskArn, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DeleteTask",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("TaskArn" => TaskArn), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_agent(agent_arn)
    describe_agent(agent_arn, params::Dict{String,<:Any})

Returns metadata about an DataSync agent, such as its name, endpoint type, and status.

# Arguments
- `agent_arn`: Specifies the Amazon Resource Name (ARN) of the DataSync agent to describe.

"""
function describe_agent(AgentArn; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "DescribeAgent",
        Dict{String,Any}("AgentArn" => AgentArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_agent(
    AgentArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeAgent",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("AgentArn" => AgentArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_discovery_job(discovery_job_arn)
    describe_discovery_job(discovery_job_arn, params::Dict{String,<:Any})

Returns information about a DataSync discovery job.

# Arguments
- `discovery_job_arn`: Specifies the Amazon Resource Name (ARN) of the discovery job that
  you want information about.

"""
function describe_discovery_job(
    DiscoveryJobArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeDiscoveryJob",
        Dict{String,Any}("DiscoveryJobArn" => DiscoveryJobArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_discovery_job(
    DiscoveryJobArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeDiscoveryJob",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("DiscoveryJobArn" => DiscoveryJobArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_location_efs(location_arn)
    describe_location_efs(location_arn, params::Dict{String,<:Any})

Returns metadata about your DataSync location for an Amazon EFS file system.

# Arguments
- `location_arn`: The Amazon Resource Name (ARN) of the Amazon EFS file system location
  that you want information about.

"""
function describe_location_efs(
    LocationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeLocationEfs",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_location_efs(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeLocationEfs",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_location_fsx_lustre(location_arn)
    describe_location_fsx_lustre(location_arn, params::Dict{String,<:Any})

Provides details about how an DataSync location for an Amazon FSx for Lustre file system is
configured.

# Arguments
- `location_arn`: The Amazon Resource Name (ARN) of the FSx for Lustre location to
  describe.

"""
function describe_location_fsx_lustre(
    LocationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeLocationFsxLustre",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_location_fsx_lustre(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeLocationFsxLustre",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_location_fsx_ontap(location_arn)
    describe_location_fsx_ontap(location_arn, params::Dict{String,<:Any})

Provides details about how an DataSync location for an Amazon FSx for NetApp ONTAP file
system is configured.  If your location uses SMB, the DescribeLocationFsxOntap operation
doesn't actually return a Password.

# Arguments
- `location_arn`: Specifies the Amazon Resource Name (ARN) of the FSx for ONTAP file system
  location that you want information about.

"""
function describe_location_fsx_ontap(
    LocationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeLocationFsxOntap",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_location_fsx_ontap(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeLocationFsxOntap",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_location_fsx_open_zfs(location_arn)
    describe_location_fsx_open_zfs(location_arn, params::Dict{String,<:Any})

Provides details about how an DataSync location for an Amazon FSx for OpenZFS file system
is configured.  Response elements related to SMB aren't supported with the
DescribeLocationFsxOpenZfs operation.

# Arguments
- `location_arn`: The Amazon Resource Name (ARN) of the FSx for OpenZFS location to
  describe.

"""
function describe_location_fsx_open_zfs(
    LocationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeLocationFsxOpenZfs",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_location_fsx_open_zfs(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeLocationFsxOpenZfs",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_location_fsx_windows(location_arn)
    describe_location_fsx_windows(location_arn, params::Dict{String,<:Any})

Returns metadata about an Amazon FSx for Windows File Server location, such as information
about its path.

# Arguments
- `location_arn`: The Amazon Resource Name (ARN) of the FSx for Windows File Server
  location to describe.

"""
function describe_location_fsx_windows(
    LocationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeLocationFsxWindows",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_location_fsx_windows(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeLocationFsxWindows",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_location_hdfs(location_arn)
    describe_location_hdfs(location_arn, params::Dict{String,<:Any})

Returns metadata, such as the authentication information about the Hadoop Distributed File
System (HDFS) location.

# Arguments
- `location_arn`: The Amazon Resource Name (ARN) of the HDFS cluster location to describe.

"""
function describe_location_hdfs(
    LocationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeLocationHdfs",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_location_hdfs(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeLocationHdfs",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_location_nfs(location_arn)
    describe_location_nfs(location_arn, params::Dict{String,<:Any})

Returns metadata, such as the path information, about an NFS location.

# Arguments
- `location_arn`: The Amazon Resource Name (ARN) of the NFS location to describe.

"""
function describe_location_nfs(
    LocationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeLocationNfs",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_location_nfs(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeLocationNfs",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_location_object_storage(location_arn)
    describe_location_object_storage(location_arn, params::Dict{String,<:Any})

Returns metadata about your DataSync location for an object storage system.

# Arguments
- `location_arn`: The Amazon Resource Name (ARN) of the object storage system location that
  you want information about.

"""
function describe_location_object_storage(
    LocationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeLocationObjectStorage",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_location_object_storage(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeLocationObjectStorage",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_location_s3(location_arn)
    describe_location_s3(location_arn, params::Dict{String,<:Any})

Returns metadata, such as bucket name, about an Amazon S3 bucket location.

# Arguments
- `location_arn`: The Amazon Resource Name (ARN) of the Amazon S3 bucket location to
  describe.

"""
function describe_location_s3(
    LocationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeLocationS3",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_location_s3(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeLocationS3",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_location_smb(location_arn)
    describe_location_smb(location_arn, params::Dict{String,<:Any})

Returns metadata, such as the path and user information about an SMB location.

# Arguments
- `location_arn`: The Amazon Resource Name (ARN) of the SMB location to describe.

"""
function describe_location_smb(
    LocationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeLocationSmb",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_location_smb(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeLocationSmb",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_storage_system(storage_system_arn)
    describe_storage_system(storage_system_arn, params::Dict{String,<:Any})

Returns information about an on-premises storage system that you're using with DataSync
Discovery.

# Arguments
- `storage_system_arn`: Specifies the Amazon Resource Name (ARN) of an on-premises storage
  system that you're using with DataSync Discovery.

"""
function describe_storage_system(
    StorageSystemArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeStorageSystem",
        Dict{String,Any}("StorageSystemArn" => StorageSystemArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_storage_system(
    StorageSystemArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeStorageSystem",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("StorageSystemArn" => StorageSystemArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_storage_system_resource_metrics(discovery_job_arn, resource_id, resource_type)
    describe_storage_system_resource_metrics(discovery_job_arn, resource_id, resource_type, params::Dict{String,<:Any})

Returns information, including performance data and capacity usage, which DataSync
Discovery collects about a specific resource in your-premises storage system.

# Arguments
- `discovery_job_arn`: Specifies the Amazon Resource Name (ARN) of the discovery job that
  collects information about your on-premises storage system.
- `resource_id`: Specifies the universally unique identifier (UUID) of the storage system
  resource that you want information about.
- `resource_type`: Specifies the kind of storage system resource that you want information
  about.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"EndTime"`: Specifies a time within the total duration that the discovery job ran. To
  see information gathered during a certain time frame, use this parameter with StartTime.
- `"MaxResults"`: Specifies how many results that you want in the response.
- `"NextToken"`: Specifies an opaque string that indicates the position to begin the next
  list of results in the response.
- `"StartTime"`: Specifies a time within the total duration that the discovery job ran. To
  see information gathered during a certain time frame, use this parameter with EndTime.
"""
function describe_storage_system_resource_metrics(
    DiscoveryJobArn,
    ResourceId,
    ResourceType;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeStorageSystemResourceMetrics",
        Dict{String,Any}(
            "DiscoveryJobArn" => DiscoveryJobArn,
            "ResourceId" => ResourceId,
            "ResourceType" => ResourceType,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_storage_system_resource_metrics(
    DiscoveryJobArn,
    ResourceId,
    ResourceType,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeStorageSystemResourceMetrics",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DiscoveryJobArn" => DiscoveryJobArn,
                    "ResourceId" => ResourceId,
                    "ResourceType" => ResourceType,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_storage_system_resources(discovery_job_arn, resource_type)
    describe_storage_system_resources(discovery_job_arn, resource_type, params::Dict{String,<:Any})

Returns information that DataSync Discovery collects about resources in your on-premises
storage system.

# Arguments
- `discovery_job_arn`: Specifies the Amazon Resource Name (ARN) of the discovery job that's
  collecting data from your on-premises storage system.
- `resource_type`: Specifies what kind of storage system resources that you want
  information about.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filter"`: Filters the storage system resources that you want returned. For example,
  this might be volumes associated with a specific storage virtual machine (SVM).
- `"MaxResults"`: Specifies the maximum number of storage system resources that you want to
  list in a response.
- `"NextToken"`: Specifies an opaque string that indicates the position to begin the next
  list of results in the response.
- `"ResourceIds"`: Specifies the universally unique identifiers (UUIDs) of the storage
  system resources that you want information about. You can't use this parameter in
  combination with the Filter parameter.
"""
function describe_storage_system_resources(
    DiscoveryJobArn, ResourceType; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeStorageSystemResources",
        Dict{String,Any}(
            "DiscoveryJobArn" => DiscoveryJobArn, "ResourceType" => ResourceType
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_storage_system_resources(
    DiscoveryJobArn,
    ResourceType,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeStorageSystemResources",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DiscoveryJobArn" => DiscoveryJobArn, "ResourceType" => ResourceType
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_task(task_arn)
    describe_task(task_arn, params::Dict{String,<:Any})

Returns metadata about a task.

# Arguments
- `task_arn`: The Amazon Resource Name (ARN) of the task to describe.

"""
function describe_task(TaskArn; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "DescribeTask",
        Dict{String,Any}("TaskArn" => TaskArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_task(
    TaskArn, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeTask",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("TaskArn" => TaskArn), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_task_execution(task_execution_arn)
    describe_task_execution(task_execution_arn, params::Dict{String,<:Any})

Returns detailed metadata about a task that is being executed.

# Arguments
- `task_execution_arn`: The Amazon Resource Name (ARN) of the task that is being executed.

"""
function describe_task_execution(
    TaskExecutionArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "DescribeTaskExecution",
        Dict{String,Any}("TaskExecutionArn" => TaskExecutionArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_task_execution(
    TaskExecutionArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "DescribeTaskExecution",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("TaskExecutionArn" => TaskExecutionArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    generate_recommendations(discovery_job_arn, resource_ids, resource_type)
    generate_recommendations(discovery_job_arn, resource_ids, resource_type, params::Dict{String,<:Any})

Creates recommendations about where to migrate your data to in Amazon Web Services.
Recommendations are generated based on information that DataSync Discovery collects about
your on-premises storage system's resources. For more information, see Recommendations
provided by DataSync Discovery. Once generated, you can view your recommendations by using
the DescribeStorageSystemResources operation.  If your discovery job completes
successfully, you don't need to use this operation. DataSync Discovery generates the
recommendations for you automatically.

# Arguments
- `discovery_job_arn`: Specifies the Amazon Resource Name (ARN) of the discovery job that
  collects information about your on-premises storage system.
- `resource_ids`: Specifies the universally unique identifiers (UUIDs) of the resources in
  your storage system that you want recommendations on.
- `resource_type`: Specifies the type of resource in your storage system that you want
  recommendations on.

"""
function generate_recommendations(
    DiscoveryJobArn,
    ResourceIds,
    ResourceType;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "GenerateRecommendations",
        Dict{String,Any}(
            "DiscoveryJobArn" => DiscoveryJobArn,
            "ResourceIds" => ResourceIds,
            "ResourceType" => ResourceType,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function generate_recommendations(
    DiscoveryJobArn,
    ResourceIds,
    ResourceType,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "GenerateRecommendations",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "DiscoveryJobArn" => DiscoveryJobArn,
                    "ResourceIds" => ResourceIds,
                    "ResourceType" => ResourceType,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_agents()
    list_agents(params::Dict{String,<:Any})

Returns a list of DataSync agents that belong to an Amazon Web Services account in the
Amazon Web Services Region specified in the request. With pagination, you can reduce the
number of agents returned in a response. If you get a truncated list of agents in a
response, the response contains a marker that you can specify in your next request to fetch
the next page of agents.  ListAgents is eventually consistent. This means the result of
running the operation might not reflect that you just created or deleted an agent. For
example, if you create an agent with CreateAgent and then immediately run ListAgents, that
agent might not show up in the list right away. In situations like this, you can always
confirm whether an agent has been created (or deleted) by using DescribeAgent.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: Specifies the maximum number of DataSync agents to list in a response. By
  default, a response shows a maximum of 100 agents.
- `"NextToken"`: Specifies an opaque string that indicates the position to begin the next
  list of results in the response.
"""
function list_agents(; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync("ListAgents"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
function list_agents(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "ListAgents", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_discovery_jobs()
    list_discovery_jobs(params::Dict{String,<:Any})

Provides a list of the existing discovery jobs in the Amazon Web Services Region and Amazon
Web Services account where you're using DataSync Discovery.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: Specifies how many results you want in the response.
- `"NextToken"`: Specifies an opaque string that indicates the position to begin the next
  list of results in the response.
- `"StorageSystemArn"`: Specifies the Amazon Resource Name (ARN) of an on-premises storage
  system. Use this parameter if you only want to list the discovery jobs that are associated
  with a specific storage system.
"""
function list_discovery_jobs(; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "ListDiscoveryJobs"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_discovery_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "ListDiscoveryJobs", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_locations()
    list_locations(params::Dict{String,<:Any})

Returns a list of source and destination locations. If you have more locations than are
returned in a response (that is, the response returns only a truncated list of your
agents), the response contains a token that you can specify in your next request to fetch
the next page of locations.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: You can use API filters to narrow down the list of resources returned by
  ListLocations. For example, to retrieve all tasks on a specific source location, you can
  use ListLocations with filter name LocationType S3 and Operator Equals.
- `"MaxResults"`: The maximum number of locations to return.
- `"NextToken"`: An opaque string that indicates the position at which to begin the next
  list of locations.
"""
function list_locations(; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync("ListLocations"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
function list_locations(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "ListLocations", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_storage_systems()
    list_storage_systems(params::Dict{String,<:Any})

Lists the on-premises storage systems that you're using with DataSync Discovery.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: Specifies how many results you want in the response.
- `"NextToken"`: Specifies an opaque string that indicates the position to begin the next
  list of results in the response.
"""
function list_storage_systems(; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "ListStorageSystems"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_storage_systems(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "ListStorageSystems", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Returns all the tags associated with an Amazon Web Services resource.

# Arguments
- `resource_arn`: Specifies the Amazon Resource Name (ARN) of the resource that you want
  tag information on.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: Specifies how many results that you want in the response.
- `"NextToken"`: Specifies an opaque string that indicates the position to begin the next
  list of results in the response.
"""
function list_tags_for_resource(
    ResourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "ListTagsForResource",
        Dict{String,Any}("ResourceArn" => ResourceArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    ResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "ListTagsForResource",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("ResourceArn" => ResourceArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_task_executions()
    list_task_executions(params::Dict{String,<:Any})

Returns a list of executed tasks.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of executed tasks to list.
- `"NextToken"`: An opaque string that indicates the position at which to begin the next
  list of the executed tasks.
- `"TaskArn"`: The Amazon Resource Name (ARN) of the task whose tasks you want to list.
"""
function list_task_executions(; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "ListTaskExecutions"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end
function list_task_executions(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "ListTaskExecutions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_tasks()
    list_tasks(params::Dict{String,<:Any})

Returns a list of the DataSync tasks you created.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Filters"`: You can use API filters to narrow down the list of resources returned by
  ListTasks. For example, to retrieve all tasks on a specific source location, you can use
  ListTasks with filter name LocationId and Operator Equals with the ARN for the location.
- `"MaxResults"`: The maximum number of tasks to return.
- `"NextToken"`: An opaque string that indicates the position at which to begin the next
  list of tasks.
"""
function list_tasks(; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync("ListTasks"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
function list_tasks(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "ListTasks", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    remove_storage_system(storage_system_arn)
    remove_storage_system(storage_system_arn, params::Dict{String,<:Any})

Permanently removes a storage system resource from DataSync Discovery, including the
associated discovery jobs, collected data, and recommendations.

# Arguments
- `storage_system_arn`: Specifies the Amazon Resource Name (ARN) of the storage system that
  you want to permanently remove from DataSync Discovery.

"""
function remove_storage_system(
    StorageSystemArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "RemoveStorageSystem",
        Dict{String,Any}("StorageSystemArn" => StorageSystemArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function remove_storage_system(
    StorageSystemArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "RemoveStorageSystem",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("StorageSystemArn" => StorageSystemArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_discovery_job(client_token, collection_duration_minutes, storage_system_arn)
    start_discovery_job(client_token, collection_duration_minutes, storage_system_arn, params::Dict{String,<:Any})

Runs a DataSync discovery job on your on-premises storage system. If you haven't added the
storage system to DataSync Discovery yet, do this first by using the AddStorageSystem
operation.

# Arguments
- `client_token`: Specifies a client token to make sure requests with this API operation
  are idempotent. If you don't specify a client token, DataSync generates one for you
  automatically.
- `collection_duration_minutes`: Specifies in minutes how long you want the discovery job
  to run.  For more accurate recommendations, we recommend a duration of at least 14 days.
  Longer durations allow time to collect a sufficient number of data points and provide a
  realistic representation of storage performance and utilization.
- `storage_system_arn`: Specifies the Amazon Resource Name (ARN) of the on-premises storage
  system that you want to run the discovery job on.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`: Specifies labels that help you categorize, filter, and search for your Amazon
  Web Services resources.
"""
function start_discovery_job(
    ClientToken,
    CollectionDurationMinutes,
    StorageSystemArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "StartDiscoveryJob",
        Dict{String,Any}(
            "ClientToken" => ClientToken,
            "CollectionDurationMinutes" => CollectionDurationMinutes,
            "StorageSystemArn" => StorageSystemArn,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_discovery_job(
    ClientToken,
    CollectionDurationMinutes,
    StorageSystemArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "StartDiscoveryJob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "ClientToken" => ClientToken,
                    "CollectionDurationMinutes" => CollectionDurationMinutes,
                    "StorageSystemArn" => StorageSystemArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_task_execution(task_arn)
    start_task_execution(task_arn, params::Dict{String,<:Any})

Starts an DataSync task. For each task, you can only run one task execution at a time.
There are several phases to a task execution. For more information, see Task execution
statuses.  If you're planning to transfer data to or from an Amazon S3 location, review how
DataSync can affect your S3 request charges and the DataSync pricing page before you begin.

# Arguments
- `task_arn`: Specifies the Amazon Resource Name (ARN) of the task that you want to start.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Excludes"`: Specifies a list of filter rules that determines which files to exclude
  from a task. The list contains a single filter string that consists of the patterns to
  exclude. The patterns are delimited by \"|\" (that is, a pipe), for example,
  \"/folder1|/folder2\".
- `"Includes"`: Specifies a list of filter rules that determines which files to include
  when running a task. The pattern should contain a single filter string that consists of the
  patterns to include. The patterns are delimited by \"|\" (that is, a pipe), for example,
  \"/folder1|/folder2\".
- `"OverrideOptions"`:
- `"Tags"`: Specifies the tags that you want to apply to the Amazon Resource Name (ARN)
  representing the task execution.  Tags are key-value pairs that help you manage, filter,
  and search for your DataSync resources.
"""
function start_task_execution(TaskArn; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "StartTaskExecution",
        Dict{String,Any}("TaskArn" => TaskArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_task_execution(
    TaskArn, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "StartTaskExecution",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("TaskArn" => TaskArn), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_discovery_job(discovery_job_arn)
    stop_discovery_job(discovery_job_arn, params::Dict{String,<:Any})

Stops a running DataSync discovery job. You can stop a discovery job anytime. A job that's
stopped before it's scheduled to end likely will provide you some information about your
on-premises storage system resources. To get recommendations for a stopped job, you must
use the GenerateRecommendations operation.

# Arguments
- `discovery_job_arn`: Specifies the Amazon Resource Name (ARN) of the discovery job that
  you want to stop.

"""
function stop_discovery_job(
    DiscoveryJobArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "StopDiscoveryJob",
        Dict{String,Any}("DiscoveryJobArn" => DiscoveryJobArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function stop_discovery_job(
    DiscoveryJobArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "StopDiscoveryJob",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("DiscoveryJobArn" => DiscoveryJobArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Applies a tag to an Amazon Web Services resource. Tags are key-value pairs that can help
you manage, filter, and search for your resources. These include DataSync resources, such
as locations, tasks, and task executions.

# Arguments
- `resource_arn`: Specifies the Amazon Resource Name (ARN) of the resource to apply the tag
  to.
- `tags`: Specifies the tags that you want to apply to the resource.

"""
function tag_resource(ResourceArn, Tags; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "TagResource",
        Dict{String,Any}("ResourceArn" => ResourceArn, "Tags" => Tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    ResourceArn,
    Tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "TagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("ResourceArn" => ResourceArn, "Tags" => Tags),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(keys, resource_arn)
    untag_resource(keys, resource_arn, params::Dict{String,<:Any})

Removes tags from an Amazon Web Services resource.

# Arguments
- `keys`: Specifies the keys in the tags that you want to remove.
- `resource_arn`: Specifies the Amazon Resource Name (ARN) of the resource to remove the
  tags from.

"""
function untag_resource(
    Keys, ResourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "UntagResource",
        Dict{String,Any}("Keys" => Keys, "ResourceArn" => ResourceArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    Keys,
    ResourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "UntagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("Keys" => Keys, "ResourceArn" => ResourceArn),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_agent(agent_arn)
    update_agent(agent_arn, params::Dict{String,<:Any})

Updates the name of an agent.

# Arguments
- `agent_arn`: The Amazon Resource Name (ARN) of the agent to update.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Name"`: The name that you want to use to configure the agent.
"""
function update_agent(AgentArn; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "UpdateAgent",
        Dict{String,Any}("AgentArn" => AgentArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_agent(
    AgentArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "UpdateAgent",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("AgentArn" => AgentArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_discovery_job(collection_duration_minutes, discovery_job_arn)
    update_discovery_job(collection_duration_minutes, discovery_job_arn, params::Dict{String,<:Any})

Edits a DataSync discovery job configuration.

# Arguments
- `collection_duration_minutes`: Specifies in minutes how long that you want the discovery
  job to run. (You can't set this parameter to less than the number of minutes that the job
  has already run for.)
- `discovery_job_arn`: Specifies the Amazon Resource Name (ARN) of the discovery job that
  you want to update.

"""
function update_discovery_job(
    CollectionDurationMinutes,
    DiscoveryJobArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "UpdateDiscoveryJob",
        Dict{String,Any}(
            "CollectionDurationMinutes" => CollectionDurationMinutes,
            "DiscoveryJobArn" => DiscoveryJobArn,
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_discovery_job(
    CollectionDurationMinutes,
    DiscoveryJobArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "UpdateDiscoveryJob",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "CollectionDurationMinutes" => CollectionDurationMinutes,
                    "DiscoveryJobArn" => DiscoveryJobArn,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_location_hdfs(location_arn)
    update_location_hdfs(location_arn, params::Dict{String,<:Any})

Updates some parameters of a previously created location for a Hadoop Distributed File
System cluster.

# Arguments
- `location_arn`: The Amazon Resource Name (ARN) of the source HDFS cluster location.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AgentArns"`: The ARNs of the agents that are used to connect to the HDFS cluster.
- `"AuthenticationType"`: The type of authentication used to determine the identity of the
  user.
- `"BlockSize"`: The size of the data blocks to write into the HDFS cluster.
- `"KerberosKeytab"`: The Kerberos key table (keytab) that contains mappings between the
  defined Kerberos principal and the encrypted keys. You can load the keytab from a file by
  providing the file's address. If you use the CLI, it performs base64 encoding for you.
  Otherwise, provide the base64-encoded text.
- `"KerberosKrb5Conf"`: The krb5.conf file that contains the Kerberos configuration
  information. You can load the krb5.conf file by providing the file's address. If you're
  using the CLI, it performs the base64 encoding for you. Otherwise, provide the
  base64-encoded text.
- `"KerberosPrincipal"`: The Kerberos principal with access to the files and folders on the
  HDFS cluster.
- `"KmsKeyProviderUri"`: The URI of the HDFS cluster's Key Management Server (KMS).
- `"NameNodes"`: The NameNode that manages the HDFS namespace. The NameNode performs
  operations such as opening, closing, and renaming files and directories. The NameNode
  contains the information to map blocks of data to the DataNodes. You can use only one
  NameNode.
- `"QopConfiguration"`: The Quality of Protection (QOP) configuration specifies the Remote
  Procedure Call (RPC) and data transfer privacy settings configured on the Hadoop
  Distributed File System (HDFS) cluster.
- `"ReplicationFactor"`: The number of DataNodes to replicate the data to when writing to
  the HDFS cluster.
- `"SimpleUser"`: The user name used to identify the client on the host operating system.
- `"Subdirectory"`: A subdirectory in the HDFS cluster. This subdirectory is used to read
  data from or write data to the HDFS cluster.
"""
function update_location_hdfs(
    LocationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "UpdateLocationHdfs",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_location_hdfs(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "UpdateLocationHdfs",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_location_nfs(location_arn)
    update_location_nfs(location_arn, params::Dict{String,<:Any})

Updates some of the parameters of a previously created location for Network File System
(NFS) access. For information about creating an NFS location, see Creating a location for
NFS.

# Arguments
- `location_arn`: The Amazon Resource Name (ARN) of the NFS location to update.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MountOptions"`:
- `"OnPremConfig"`:
- `"Subdirectory"`: The subdirectory in the NFS file system that is used to read data from
  the NFS source location or write data to the NFS destination. The NFS path should be a path
  that's exported by the NFS server, or a subdirectory of that path. The path should be such
  that it can be mounted by other NFS clients in your network. To see all the paths exported
  by your NFS server, run \"showmount -e nfs-server-name\" from an NFS client that has access
  to your server. You can specify any directory that appears in the results, and any
  subdirectory of that directory. Ensure that the NFS export is accessible without Kerberos
  authentication.  To transfer all the data in the folder that you specified, DataSync must
  have permissions to read all the data. To ensure this, either configure the NFS export with
  no_root_squash, or ensure that the files you want DataSync to access have permissions that
  allow read access for all users. Doing either option enables the agent to read the files.
  For the agent to access directories, you must additionally enable all execute access. If
  you are copying data to or from your Snowcone device, see NFS Server on Snowcone for more
  information. For information about NFS export configuration, see 18.7. The /etc/exports
  Configuration File in the Red Hat Enterprise Linux documentation.
"""
function update_location_nfs(LocationArn; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "UpdateLocationNfs",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_location_nfs(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "UpdateLocationNfs",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_location_object_storage(location_arn)
    update_location_object_storage(location_arn, params::Dict{String,<:Any})

Updates some parameters of an existing object storage location that DataSync accesses for a
transfer. For information about creating a self-managed object storage location, see
Creating a location for object storage.

# Arguments
- `location_arn`: Specifies the ARN of the object storage system location that you're
  updating.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AccessKey"`: Specifies the access key (for example, a user name) if credentials are
  required to authenticate with the object storage server.
- `"AgentArns"`: Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can
  securely connect with your location.
- `"SecretKey"`: Specifies the secret key (for example, a password) if credentials are
  required to authenticate with the object storage server.
- `"ServerCertificate"`: Specifies a certificate to authenticate with an object storage
  system that uses a private or self-signed certificate authority (CA). You must specify a
  Base64-encoded .pem file (for example, file:///home/user/.ssh/storage_sys_certificate.pem).
  The certificate can be up to 32768 bytes (before Base64 encoding). To use this parameter,
  configure ServerProtocol to HTTPS. Updating the certificate doesn't interfere with tasks
  that you have in progress.
- `"ServerPort"`: Specifies the port that your object storage server accepts inbound
  network traffic on (for example, port 443).
- `"ServerProtocol"`: Specifies the protocol that your object storage server uses to
  communicate.
- `"Subdirectory"`: Specifies the object prefix for your object storage server. If this is
  a source location, DataSync only copies objects with this prefix. If this is a destination
  location, DataSync writes all objects with this prefix.
"""
function update_location_object_storage(
    LocationArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "UpdateLocationObjectStorage",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_location_object_storage(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "UpdateLocationObjectStorage",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_location_smb(location_arn)
    update_location_smb(location_arn, params::Dict{String,<:Any})

Updates some of the parameters of a previously created location for Server Message Block
(SMB) file system access. For information about creating an SMB location, see Creating a
location for SMB.

# Arguments
- `location_arn`: The Amazon Resource Name (ARN) of the SMB location to update.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AgentArns"`: The Amazon Resource Names (ARNs) of agents to use for a Simple Message
  Block (SMB) location.
- `"Domain"`: The name of the Windows domain that the SMB server belongs to.
- `"MountOptions"`:
- `"Password"`: The password of the user who can mount the share has the permissions to
  access files and folders in the SMB share.
- `"Subdirectory"`: The subdirectory in the SMB file system that is used to read data from
  the SMB source location or write data to the SMB destination. The SMB path should be a path
  that's exported by the SMB server, or a subdirectory of that path. The path should be such
  that it can be mounted by other SMB clients in your network.   Subdirectory must be
  specified with forward slashes. For example, /path/to/folder.  To transfer all the data in
  the folder that you specified, DataSync must have permissions to mount the SMB share and to
  access all the data in that share. To ensure this, do either of the following:   Ensure
  that the user/password specified belongs to the user who can mount the share and who has
  the appropriate permissions for all of the files and directories that you want DataSync to
  access.   Use credentials of a member of the Backup Operators group to mount the share.
  Doing either of these options enables the agent to access the data. For the agent to access
  directories, you must also enable all execute access.
- `"User"`: The user who can mount the share has the permissions to access files and
  folders in the SMB share.
"""
function update_location_smb(LocationArn; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "UpdateLocationSmb",
        Dict{String,Any}("LocationArn" => LocationArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_location_smb(
    LocationArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "UpdateLocationSmb",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("LocationArn" => LocationArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_storage_system(storage_system_arn)
    update_storage_system(storage_system_arn, params::Dict{String,<:Any})

Modifies some configurations of an on-premises storage system resource that you're using
with DataSync Discovery.

# Arguments
- `storage_system_arn`: Specifies the ARN of the on-premises storage system that you want
  reconfigure.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AgentArns"`: Specifies the Amazon Resource Name (ARN) of the DataSync agent that
  connects to and reads your on-premises storage system.
- `"CloudWatchLogGroupArn"`: Specifies the ARN of the Amazon CloudWatch log group for
  monitoring and logging discovery job events.
- `"Credentials"`: Specifies the user name and password for accessing your on-premises
  storage system's management interface.
- `"Name"`: Specifies a familiar name for your on-premises storage system.
- `"ServerConfiguration"`: Specifies the server name and network port required to connect
  with your on-premises storage system's management interface.
"""
function update_storage_system(
    StorageSystemArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "UpdateStorageSystem",
        Dict{String,Any}("StorageSystemArn" => StorageSystemArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_storage_system(
    StorageSystemArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "UpdateStorageSystem",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("StorageSystemArn" => StorageSystemArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_task(task_arn)
    update_task(task_arn, params::Dict{String,<:Any})

Updates the metadata associated with a task.

# Arguments
- `task_arn`: The Amazon Resource Name (ARN) of the resource name of the task to update.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CloudWatchLogGroupArn"`: The Amazon Resource Name (ARN) of the resource name of the
  Amazon CloudWatch log group.
- `"Excludes"`: Specifies a list of filter rules that exclude specific data during your
  transfer. For more information and examples, see Filtering data transferred by DataSync.
- `"Includes"`: Specifies a list of filter rules that include specific data during your
  transfer. For more information and examples, see Filtering data transferred by DataSync.
- `"Name"`: The name of the task to update.
- `"Options"`:
- `"Schedule"`: Specifies a schedule used to periodically transfer files from a source to a
  destination location. You can configure your task to execute hourly, daily, weekly or on
  specific days of the week. You control when in the day or hour you want the task to
  execute. The time you specify is UTC time. For more information, see Scheduling your task.
"""
function update_task(TaskArn; aws_config::AbstractAWSConfig=global_aws_config())
    return datasync(
        "UpdateTask",
        Dict{String,Any}("TaskArn" => TaskArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_task(
    TaskArn, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "UpdateTask",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("TaskArn" => TaskArn), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_task_execution(options, task_execution_arn)
    update_task_execution(options, task_execution_arn, params::Dict{String,<:Any})

Modifies a running DataSync task.  Currently, the only Option that you can modify with
UpdateTaskExecution is  BytesPerSecond , which throttles bandwidth for a running or queued
task.

# Arguments
- `options`:
- `task_execution_arn`: Specifies the Amazon Resource Name (ARN) of the task execution that
  you're updating.

"""
function update_task_execution(
    Options, TaskExecutionArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return datasync(
        "UpdateTaskExecution",
        Dict{String,Any}("Options" => Options, "TaskExecutionArn" => TaskExecutionArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_task_execution(
    Options,
    TaskExecutionArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return datasync(
        "UpdateTaskExecution",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Options" => Options, "TaskExecutionArn" => TaskExecutionArn
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
