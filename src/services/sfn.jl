# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: sfn
using AWS.Compat
using AWS.UUIDs

"""
    create_activity(name)
    create_activity(name, params::Dict{String,<:Any})

Creates an activity. An activity is a task that you write in any programming language and
host on any machine that has access to Step Functions. Activities must poll Step Functions
using the GetActivityTask API action and respond using SendTask* API actions. This function
lets Step Functions know the existence of your activity and returns an identifier for use
in a state machine and when polling from the activity.  This operation is eventually
consistent. The results are best effort and may not reflect very recent updates and
changes.    CreateActivity is an idempotent API. Subsequent requests won’t create a
duplicate resource if it was already created. CreateActivity's idempotency check is based
on the activity name. If a following request has different tags values, Step Functions will
ignore these differences and treat it as an idempotent request of the previous. In this
case, tags will not be updated, even if they are different.

# Arguments
- `name`: The name of the activity to create. This name must be unique for your Amazon Web
  Services account and region for 90 days. For more information, see  Limits Related to State
  Machine Executions in the Step Functions Developer Guide. A name must not contain:   white
  space   brackets &lt; &gt; { } [ ]    wildcard characters ? *    special characters \" # %
  ^ | ~ `  &amp; , ; : /    control characters (U+0000-001F, U+007F-009F)   To enable logging
  with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and _.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"tags"`: The list of tags to add to a resource. An array of key-value pairs. For more
  information, see Using Cost Allocation Tags in the Amazon Web Services Billing and Cost
  Management User Guide, and Controlling Access Using IAM Tags. Tags may only contain Unicode
  letters, digits, white space, or these symbols: _ . : / = + - @.
"""
function create_activity(name; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn(
        "CreateActivity",
        Dict{String,Any}("name" => name);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_activity(
    name, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "CreateActivity",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("name" => name), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_state_machine(definition, name, role_arn)
    create_state_machine(definition, name, role_arn, params::Dict{String,<:Any})

Creates a state machine. A state machine consists of a collection of states that can do
work (Task states), determine to which states to transition next (Choice states), stop an
execution with an error (Fail states), and so on. State machines are specified using a
JSON-based, structured language. For more information, see Amazon States Language in the
Step Functions User Guide.  This operation is eventually consistent. The results are best
effort and may not reflect very recent updates and changes.    CreateStateMachine is an
idempotent API. Subsequent requests won’t create a duplicate resource if it was already
created. CreateStateMachine's idempotency check is based on the state machine name,
definition, type, LoggingConfiguration and TracingConfiguration. If a following request has
a different roleArn or tags, Step Functions will ignore these differences and treat it as
an idempotent request of the previous. In this case, roleArn and tags will not be updated,
even if they are different.

# Arguments
- `definition`: The Amazon States Language definition of the state machine. See Amazon
  States Language.
- `name`: The name of the state machine.  A name must not contain:   white space   brackets
  &lt; &gt; { } [ ]    wildcard characters ? *    special characters \" # %  ^ | ~ `  &amp; ,
  ; : /    control characters (U+0000-001F, U+007F-009F)   To enable logging with CloudWatch
  Logs, the name should only contain 0-9, A-Z, a-z, - and _.
- `role_arn`: The Amazon Resource Name (ARN) of the IAM role to use for this state machine.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"loggingConfiguration"`: Defines what execution history events are logged and where they
  are logged.  By default, the level is set to OFF. For more information see Log Levels in
  the Step Functions User Guide.
- `"tags"`: Tags to be added when creating a state machine. An array of key-value pairs.
  For more information, see Using Cost Allocation Tags in the Amazon Web Services Billing and
  Cost Management User Guide, and Controlling Access Using IAM Tags. Tags may only contain
  Unicode letters, digits, white space, or these symbols: _ . : / = + - @.
- `"tracingConfiguration"`: Selects whether X-Ray tracing is enabled.
- `"type"`: Determines whether a Standard or Express state machine is created. The default
  is STANDARD. You cannot update the type of a state machine once it has been created.
"""
function create_state_machine(
    definition, name, roleArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "CreateStateMachine",
        Dict{String,Any}("definition" => definition, "name" => name, "roleArn" => roleArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function create_state_machine(
    definition,
    name,
    roleArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "CreateStateMachine",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "definition" => definition, "name" => name, "roleArn" => roleArn
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_activity(activity_arn)
    delete_activity(activity_arn, params::Dict{String,<:Any})

Deletes an activity.

# Arguments
- `activity_arn`: The Amazon Resource Name (ARN) of the activity to delete.

"""
function delete_activity(activityArn; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn(
        "DeleteActivity",
        Dict{String,Any}("activityArn" => activityArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_activity(
    activityArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "DeleteActivity",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("activityArn" => activityArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_state_machine(state_machine_arn)
    delete_state_machine(state_machine_arn, params::Dict{String,<:Any})

Deletes a state machine. This is an asynchronous operation: It sets the state machine's
status to DELETING and begins the deletion process.  If the given state machine Amazon
Resource Name (ARN) is a qualified state machine ARN, it will fail with
ValidationException. A qualified state machine ARN refers to a Distributed Map state
defined within a state machine. For example, the qualified state machine ARN
arn:partition:states:region:account-id:stateMachine:stateMachineName/mapStateLabel refers
to a Distributed Map state with a label mapStateLabel in the state machine named
stateMachineName.  For EXPRESS state machines, the deletion will happen eventually (usually
less than a minute). Running executions may emit logs after DeleteStateMachine API is
called.

# Arguments
- `state_machine_arn`: The Amazon Resource Name (ARN) of the state machine to delete.

"""
function delete_state_machine(
    stateMachineArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "DeleteStateMachine",
        Dict{String,Any}("stateMachineArn" => stateMachineArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function delete_state_machine(
    stateMachineArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "DeleteStateMachine",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("stateMachineArn" => stateMachineArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_activity(activity_arn)
    describe_activity(activity_arn, params::Dict{String,<:Any})

Describes an activity.  This operation is eventually consistent. The results are best
effort and may not reflect very recent updates and changes.

# Arguments
- `activity_arn`: The Amazon Resource Name (ARN) of the activity to describe.

"""
function describe_activity(activityArn; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn(
        "DescribeActivity",
        Dict{String,Any}("activityArn" => activityArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_activity(
    activityArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "DescribeActivity",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("activityArn" => activityArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_execution(execution_arn)
    describe_execution(execution_arn, params::Dict{String,<:Any})

Provides all information about a state machine execution, such as the state machine
associated with the execution, the execution input and output, and relevant execution
metadata. Use this API action to return the Map Run ARN if the execution was dispatched by
a Map Run.  This operation is eventually consistent. The results are best effort and may
not reflect very recent updates and changes.  This API action is not supported by EXPRESS
state machine executions unless they were dispatched by a Map Run.

# Arguments
- `execution_arn`: The Amazon Resource Name (ARN) of the execution to describe.

"""
function describe_execution(executionArn; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn(
        "DescribeExecution",
        Dict{String,Any}("executionArn" => executionArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_execution(
    executionArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "DescribeExecution",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("executionArn" => executionArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_map_run(map_run_arn)
    describe_map_run(map_run_arn, params::Dict{String,<:Any})

Provides information about a Map Run's configuration, progress, and results. For more
information, see Examining Map Run in the Step Functions Developer Guide.

# Arguments
- `map_run_arn`: The Amazon Resource Name (ARN) that identifies a Map Run.

"""
function describe_map_run(mapRunArn; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn(
        "DescribeMapRun",
        Dict{String,Any}("mapRunArn" => mapRunArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_map_run(
    mapRunArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "DescribeMapRun",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("mapRunArn" => mapRunArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_state_machine(state_machine_arn)
    describe_state_machine(state_machine_arn, params::Dict{String,<:Any})

Provides information about a state machine's definition, its IAM role Amazon Resource Name
(ARN), and configuration. If the state machine ARN is a qualified state machine ARN, the
response returned includes the Map state's label. A qualified state machine ARN refers to a
Distributed Map state defined within a state machine. For example, the qualified state
machine ARN
arn:partition:states:region:account-id:stateMachine:stateMachineName/mapStateLabel refers
to a Distributed Map state with a label mapStateLabel in the state machine named
stateMachineName.  This operation is eventually consistent. The results are best effort and
may not reflect very recent updates and changes.

# Arguments
- `state_machine_arn`: The Amazon Resource Name (ARN) of the state machine to describe.

"""
function describe_state_machine(
    stateMachineArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "DescribeStateMachine",
        Dict{String,Any}("stateMachineArn" => stateMachineArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_state_machine(
    stateMachineArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "DescribeStateMachine",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("stateMachineArn" => stateMachineArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_state_machine_for_execution(execution_arn)
    describe_state_machine_for_execution(execution_arn, params::Dict{String,<:Any})

Provides information about a state machine's definition, its execution role ARN, and
configuration. If an execution was dispatched by a Map Run, the Map Run is returned in the
response. Additionally, the state machine returned will be the state machine associated
with the Map Run.  This operation is eventually consistent. The results are best effort and
may not reflect very recent updates and changes.  This API action is not supported by
EXPRESS state machines.

# Arguments
- `execution_arn`: The Amazon Resource Name (ARN) of the execution you want state machine
  information for.

"""
function describe_state_machine_for_execution(
    executionArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "DescribeStateMachineForExecution",
        Dict{String,Any}("executionArn" => executionArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function describe_state_machine_for_execution(
    executionArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "DescribeStateMachineForExecution",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("executionArn" => executionArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_activity_task(activity_arn)
    get_activity_task(activity_arn, params::Dict{String,<:Any})

Used by workers to retrieve a task (with the specified activity ARN) which has been
scheduled for execution by a running state machine. This initiates a long poll, where the
service holds the HTTP connection open and responds as soon as a task becomes available
(i.e. an execution of a task of this type is needed.) The maximum time the service holds on
to the request before responding is 60 seconds. If no task is available within 60 seconds,
the poll returns a taskToken with a null string.  This API action isn't logged in
CloudTrail.   Workers should set their client side socket timeout to at least 65 seconds (5
seconds higher than the maximum time the service may hold the poll request). Polling with
GetActivityTask can cause latency in some implementations. See Avoid Latency When Polling
for Activity Tasks in the Step Functions Developer Guide.

# Arguments
- `activity_arn`: The Amazon Resource Name (ARN) of the activity to retrieve tasks from
  (assigned when you create the task using CreateActivity.)

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"workerName"`: You can provide an arbitrary name in order to identify the worker that
  the task is assigned to. This name is used when it is logged in the execution history.
"""
function get_activity_task(activityArn; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn(
        "GetActivityTask",
        Dict{String,Any}("activityArn" => activityArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_activity_task(
    activityArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "GetActivityTask",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("activityArn" => activityArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_execution_history(execution_arn)
    get_execution_history(execution_arn, params::Dict{String,<:Any})

Returns the history of the specified execution as a list of events. By default, the results
are returned in ascending order of the timeStamp of the events. Use the reverseOrder
parameter to get the latest events first. If nextToken is returned, there are more results
available. The value of nextToken is a unique pagination token for each page. Make the call
again using the returned token to retrieve the next page. Keep all other arguments
unchanged. Each pagination token expires after 24 hours. Using an expired pagination token
will return an HTTP 400 InvalidToken error. This API action is not supported by EXPRESS
state machines.

# Arguments
- `execution_arn`: The Amazon Resource Name (ARN) of the execution.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"includeExecutionData"`: You can select whether execution data (input or output of a
  history event) is returned. The default is true.
- `"maxResults"`: The maximum number of results that are returned per call. You can use
  nextToken to obtain further pages of results. The default is 100 and the maximum allowed
  page size is 1000. A value of 0 uses the default. This is only an upper limit. The actual
  number of results returned per call might be fewer than the specified maximum.
- `"nextToken"`: If nextToken is returned, there are more results available. The value of
  nextToken is a unique pagination token for each page. Make the call again using the
  returned token to retrieve the next page. Keep all other arguments unchanged. Each
  pagination token expires after 24 hours. Using an expired pagination token will return an
  HTTP 400 InvalidToken error.
- `"reverseOrder"`: Lists events in descending order of their timeStamp.
"""
function get_execution_history(
    executionArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "GetExecutionHistory",
        Dict{String,Any}("executionArn" => executionArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function get_execution_history(
    executionArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "GetExecutionHistory",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("executionArn" => executionArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_activities()
    list_activities(params::Dict{String,<:Any})

Lists the existing activities. If nextToken is returned, there are more results available.
The value of nextToken is a unique pagination token for each page. Make the call again
using the returned token to retrieve the next page. Keep all other arguments unchanged.
Each pagination token expires after 24 hours. Using an expired pagination token will return
an HTTP 400 InvalidToken error.  This operation is eventually consistent. The results are
best effort and may not reflect very recent updates and changes.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of results that are returned per call. You can use
  nextToken to obtain further pages of results. The default is 100 and the maximum allowed
  page size is 1000. A value of 0 uses the default. This is only an upper limit. The actual
  number of results returned per call might be fewer than the specified maximum.
- `"nextToken"`: If nextToken is returned, there are more results available. The value of
  nextToken is a unique pagination token for each page. Make the call again using the
  returned token to retrieve the next page. Keep all other arguments unchanged. Each
  pagination token expires after 24 hours. Using an expired pagination token will return an
  HTTP 400 InvalidToken error.
"""
function list_activities(; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn("ListActivities"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
function list_activities(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "ListActivities", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_executions()
    list_executions(params::Dict{String,<:Any})

Lists all executions of a state machine or a Map Run. You can list all executions related
to a state machine by specifying a state machine Amazon Resource Name (ARN), or those
related to a Map Run by specifying a Map Run ARN. Results are sorted by time, with the most
recent execution first. If nextToken is returned, there are more results available. The
value of nextToken is a unique pagination token for each page. Make the call again using
the returned token to retrieve the next page. Keep all other arguments unchanged. Each
pagination token expires after 24 hours. Using an expired pagination token will return an
HTTP 400 InvalidToken error.  This operation is eventually consistent. The results are best
effort and may not reflect very recent updates and changes.  This API action is not
supported by EXPRESS state machines.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"mapRunArn"`: The Amazon Resource Name (ARN) of the Map Run that started the child
  workflow executions. If the mapRunArn field is specified, a list of all of the child
  workflow executions started by a Map Run is returned. For more information, see Examining
  Map Run in the Step Functions Developer Guide. You can specify either a mapRunArn or a
  stateMachineArn, but not both.
- `"maxResults"`: The maximum number of results that are returned per call. You can use
  nextToken to obtain further pages of results. The default is 100 and the maximum allowed
  page size is 1000. A value of 0 uses the default. This is only an upper limit. The actual
  number of results returned per call might be fewer than the specified maximum.
- `"nextToken"`: If nextToken is returned, there are more results available. The value of
  nextToken is a unique pagination token for each page. Make the call again using the
  returned token to retrieve the next page. Keep all other arguments unchanged. Each
  pagination token expires after 24 hours. Using an expired pagination token will return an
  HTTP 400 InvalidToken error.
- `"stateMachineArn"`: The Amazon Resource Name (ARN) of the state machine whose executions
  is listed. You can specify either a mapRunArn or a stateMachineArn, but not both.
- `"statusFilter"`: If specified, only list the executions whose current execution status
  matches the given filter.
"""
function list_executions(; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn("ListExecutions"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
function list_executions(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "ListExecutions", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_map_runs(execution_arn)
    list_map_runs(execution_arn, params::Dict{String,<:Any})

Lists all Map Runs that were started by a given state machine execution. Use this API
action to obtain Map Run ARNs, and then call DescribeMapRun to obtain more information, if
needed.

# Arguments
- `execution_arn`: The Amazon Resource Name (ARN) of the execution for which the Map Runs
  must be listed.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of results that are returned per call. You can use
  nextToken to obtain further pages of results. The default is 100 and the maximum allowed
  page size is 1000. A value of 0 uses the default. This is only an upper limit. The actual
  number of results returned per call might be fewer than the specified maximum.
- `"nextToken"`: If nextToken is returned, there are more results available. The value of
  nextToken is a unique pagination token for each page. Make the call again using the
  returned token to retrieve the next page. Keep all other arguments unchanged. Each
  pagination token expires after 24 hours. Using an expired pagination token will return an
  HTTP 400 InvalidToken error.
"""
function list_map_runs(executionArn; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn(
        "ListMapRuns",
        Dict{String,Any}("executionArn" => executionArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_map_runs(
    executionArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "ListMapRuns",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("executionArn" => executionArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_state_machines()
    list_state_machines(params::Dict{String,<:Any})

Lists the existing state machines. If nextToken is returned, there are more results
available. The value of nextToken is a unique pagination token for each page. Make the call
again using the returned token to retrieve the next page. Keep all other arguments
unchanged. Each pagination token expires after 24 hours. Using an expired pagination token
will return an HTTP 400 InvalidToken error.  This operation is eventually consistent. The
results are best effort and may not reflect very recent updates and changes.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of results that are returned per call. You can use
  nextToken to obtain further pages of results. The default is 100 and the maximum allowed
  page size is 1000. A value of 0 uses the default. This is only an upper limit. The actual
  number of results returned per call might be fewer than the specified maximum.
- `"nextToken"`: If nextToken is returned, there are more results available. The value of
  nextToken is a unique pagination token for each page. Make the call again using the
  returned token to retrieve the next page. Keep all other arguments unchanged. Each
  pagination token expires after 24 hours. Using an expired pagination token will return an
  HTTP 400 InvalidToken error.
"""
function list_state_machines(; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn("ListStateMachines"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
end
function list_state_machines(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "ListStateMachines", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

List tags for a given resource. Tags may only contain Unicode letters, digits, white space,
or these symbols: _ . : / = + - @.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) for the Step Functions state machine or
  activity.

"""
function list_tags_for_resource(
    resourceArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "ListTagsForResource",
        Dict{String,Any}("resourceArn" => resourceArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function list_tags_for_resource(
    resourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "ListTagsForResource",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("resourceArn" => resourceArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    send_task_failure(task_token)
    send_task_failure(task_token, params::Dict{String,<:Any})

Used by activity workers and task states using the callback pattern to report that the task
identified by the taskToken failed.

# Arguments
- `task_token`: The token that represents this task. Task tokens are generated by Step
  Functions when tasks are assigned to a worker, or in the context object when a workflow
  enters a task state. See GetActivityTaskOutputtaskToken.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"cause"`: A more detailed explanation of the cause of the failure.
- `"error"`: The error code of the failure.
"""
function send_task_failure(taskToken; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn(
        "SendTaskFailure",
        Dict{String,Any}("taskToken" => taskToken);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function send_task_failure(
    taskToken,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "SendTaskFailure",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("taskToken" => taskToken), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    send_task_heartbeat(task_token)
    send_task_heartbeat(task_token, params::Dict{String,<:Any})

Used by activity workers and task states using the callback pattern to report to Step
Functions that the task represented by the specified taskToken is still making progress.
This action resets the Heartbeat clock. The Heartbeat threshold is specified in the state
machine's Amazon States Language definition (HeartbeatSeconds). This action does not in
itself create an event in the execution history. However, if the task times out, the
execution history contains an ActivityTimedOut entry for activities, or a TaskTimedOut
entry for for tasks using the job run or callback pattern.  The Timeout of a task, defined
in the state machine's Amazon States Language definition, is its maximum allowed duration,
regardless of the number of SendTaskHeartbeat requests received. Use HeartbeatSeconds to
configure the timeout interval for heartbeats.

# Arguments
- `task_token`: The token that represents this task. Task tokens are generated by Step
  Functions when tasks are assigned to a worker, or in the context object when a workflow
  enters a task state. See GetActivityTaskOutputtaskToken.

"""
function send_task_heartbeat(taskToken; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn(
        "SendTaskHeartbeat",
        Dict{String,Any}("taskToken" => taskToken);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function send_task_heartbeat(
    taskToken,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "SendTaskHeartbeat",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("taskToken" => taskToken), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    send_task_success(output, task_token)
    send_task_success(output, task_token, params::Dict{String,<:Any})

Used by activity workers and task states using the callback pattern to report that the task
identified by the taskToken completed successfully.

# Arguments
- `output`: The JSON output of the task. Length constraints apply to the payload size, and
  are expressed as bytes in UTF-8 encoding.
- `task_token`: The token that represents this task. Task tokens are generated by Step
  Functions when tasks are assigned to a worker, or in the context object when a workflow
  enters a task state. See GetActivityTaskOutputtaskToken.

"""
function send_task_success(
    output, taskToken; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "SendTaskSuccess",
        Dict{String,Any}("output" => output, "taskToken" => taskToken);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function send_task_success(
    output,
    taskToken,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "SendTaskSuccess",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("output" => output, "taskToken" => taskToken),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_execution(state_machine_arn)
    start_execution(state_machine_arn, params::Dict{String,<:Any})

Starts a state machine execution. If the given state machine Amazon Resource Name (ARN) is
a qualified state machine ARN, it will fail with ValidationException. A qualified state
machine ARN refers to a Distributed Map state defined within a state machine. For example,
the qualified state machine ARN
arn:partition:states:region:account-id:stateMachine:stateMachineName/mapStateLabel refers
to a Distributed Map state with a label mapStateLabel in the state machine named
stateMachineName.   StartExecution is idempotent for STANDARD workflows. For a STANDARD
workflow, if StartExecution is called with the same name and input as a running execution,
the call will succeed and return the same response as the original request. If the
execution is closed or if the input is different, it will return a 400
ExecutionAlreadyExists error. Names can be reused after 90 days.   StartExecution is not
idempotent for EXPRESS workflows.

# Arguments
- `state_machine_arn`: The Amazon Resource Name (ARN) of the state machine to execute.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"input"`: The string that contains the JSON input data for the execution, for example:
  \"input\": \"{\"first_name\" : \"test\"}\"   If you don't include any JSON input data, you
  still must include the two braces, for example: \"input\": \"{}\"   Length constraints
  apply to the payload size, and are expressed as bytes in UTF-8 encoding.
- `"name"`: The name of the execution. This name must be unique for your Amazon Web
  Services account, region, and state machine for 90 days. For more information, see  Limits
  Related to State Machine Executions in the Step Functions Developer Guide. A name must not
  contain:   white space   brackets &lt; &gt; { } [ ]    wildcard characters ? *    special
  characters \" # %  ^ | ~ `  &amp; , ; : /    control characters (U+0000-001F, U+007F-009F)
   To enable logging with CloudWatch Logs, the name should only contain 0-9, A-Z, a-z, - and
  _.
- `"traceHeader"`: Passes the X-Ray trace header. The trace header can also be passed in
  the request payload.
"""
function start_execution(stateMachineArn; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn(
        "StartExecution",
        Dict{String,Any}("stateMachineArn" => stateMachineArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_execution(
    stateMachineArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "StartExecution",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("stateMachineArn" => stateMachineArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_sync_execution(state_machine_arn)
    start_sync_execution(state_machine_arn, params::Dict{String,<:Any})

Starts a Synchronous Express state machine execution. StartSyncExecution is not available
for STANDARD workflows.   StartSyncExecution will return a 200 OK response, even if your
execution fails, because the status code in the API response doesn't reflect function
errors. Error codes are reserved for errors that prevent your execution from running, such
as permissions errors, limit errors, or issues with your state machine code and
configuration.    This API action isn't logged in CloudTrail.

# Arguments
- `state_machine_arn`: The Amazon Resource Name (ARN) of the state machine to execute.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"input"`: The string that contains the JSON input data for the execution, for example:
  \"input\": \"{\"first_name\" : \"test\"}\"   If you don't include any JSON input data, you
  still must include the two braces, for example: \"input\": \"{}\"   Length constraints
  apply to the payload size, and are expressed as bytes in UTF-8 encoding.
- `"name"`: The name of the execution.
- `"traceHeader"`: Passes the X-Ray trace header. The trace header can also be passed in
  the request payload.
"""
function start_sync_execution(
    stateMachineArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "StartSyncExecution",
        Dict{String,Any}("stateMachineArn" => stateMachineArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function start_sync_execution(
    stateMachineArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "StartSyncExecution",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("stateMachineArn" => stateMachineArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_execution(execution_arn)
    stop_execution(execution_arn, params::Dict{String,<:Any})

Stops an execution. This API action is not supported by EXPRESS state machines.

# Arguments
- `execution_arn`: The Amazon Resource Name (ARN) of the execution to stop.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"cause"`: A more detailed explanation of the cause of the failure.
- `"error"`: The error code of the failure.
"""
function stop_execution(executionArn; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn(
        "StopExecution",
        Dict{String,Any}("executionArn" => executionArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function stop_execution(
    executionArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "StopExecution",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("executionArn" => executionArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Add a tag to a Step Functions resource. An array of key-value pairs. For more information,
see Using Cost Allocation Tags in the Amazon Web Services Billing and Cost Management User
Guide, and Controlling Access Using IAM Tags. Tags may only contain Unicode letters,
digits, white space, or these symbols: _ . : / = + - @.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) for the Step Functions state machine or
  activity.
- `tags`: The list of tags to add to a resource. Tags may only contain Unicode letters,
  digits, white space, or these symbols: _ . : / = + - @.

"""
function tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn(
        "TagResource",
        Dict{String,Any}("resourceArn" => resourceArn, "tags" => tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function tag_resource(
    resourceArn,
    tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "TagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("resourceArn" => resourceArn, "tags" => tags),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Remove a tag from a Step Functions resource

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) for the Step Functions state machine or
  activity.
- `tag_keys`: The list of tags to remove from the resource.

"""
function untag_resource(
    resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "UntagResource",
        Dict{String,Any}("resourceArn" => resourceArn, "tagKeys" => tagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function untag_resource(
    resourceArn,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "UntagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("resourceArn" => resourceArn, "tagKeys" => tagKeys),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_map_run(map_run_arn)
    update_map_run(map_run_arn, params::Dict{String,<:Any})

Updates an in-progress Map Run's configuration to include changes to the settings that
control maximum concurrency and Map Run failure.

# Arguments
- `map_run_arn`: The Amazon Resource Name (ARN) of a Map Run.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxConcurrency"`: The maximum number of child workflow executions that can be specified
  to run in parallel for the Map Run at the same time.
- `"toleratedFailureCount"`: The maximum number of failed items before the Map Run fails.
- `"toleratedFailurePercentage"`: The maximum percentage of failed items before the Map Run
  fails.
"""
function update_map_run(mapRunArn; aws_config::AbstractAWSConfig=global_aws_config())
    return sfn(
        "UpdateMapRun",
        Dict{String,Any}("mapRunArn" => mapRunArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_map_run(
    mapRunArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "UpdateMapRun",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("mapRunArn" => mapRunArn), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_state_machine(state_machine_arn)
    update_state_machine(state_machine_arn, params::Dict{String,<:Any})

Updates an existing state machine by modifying its definition, roleArn, or
loggingConfiguration. Running executions will continue to use the previous definition and
roleArn. You must include at least one of definition or roleArn or you will receive a
MissingRequiredParameter error. If the given state machine Amazon Resource Name (ARN) is a
qualified state machine ARN, it will fail with ValidationException. A qualified state
machine ARN refers to a Distributed Map state defined within a state machine. For example,
the qualified state machine ARN
arn:partition:states:region:account-id:stateMachine:stateMachineName/mapStateLabel refers
to a Distributed Map state with a label mapStateLabel in the state machine named
stateMachineName.  All StartExecution calls within a few seconds will use the updated
definition and roleArn. Executions started immediately after calling UpdateStateMachine may
use the previous state machine definition and roleArn.

# Arguments
- `state_machine_arn`: The Amazon Resource Name (ARN) of the state machine.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"definition"`: The Amazon States Language definition of the state machine. See Amazon
  States Language.
- `"loggingConfiguration"`: The LoggingConfiguration data type is used to set CloudWatch
  Logs options.
- `"roleArn"`: The Amazon Resource Name (ARN) of the IAM role of the state machine.
- `"tracingConfiguration"`: Selects whether X-Ray tracing is enabled.
"""
function update_state_machine(
    stateMachineArn; aws_config::AbstractAWSConfig=global_aws_config()
)
    return sfn(
        "UpdateStateMachine",
        Dict{String,Any}("stateMachineArn" => stateMachineArn);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
function update_state_machine(
    stateMachineArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return sfn(
        "UpdateStateMachine",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("stateMachineArn" => stateMachineArn), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
