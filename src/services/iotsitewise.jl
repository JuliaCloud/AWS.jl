# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: iotsitewise

using Compat
using UUIDs
"""
    AssociateAssets()

Associates a child asset with the given parent asset through a hierarchy defined in the parent asset's model. For more information, see Associating Assets in the AWS IoT SiteWise User Guide.

# Required Parameters
- `assetId`: The ID of the parent asset.
- `childAssetId`: The ID of the child asset to be associated.
- `hierarchyId`: The ID of a hierarchy in the parent asset's model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. For more information, see Asset Hierarchies in the AWS IoT SiteWise User Guide.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
"""
AssociateAssets(assetId, childAssetId, hierarchyId; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/assets/$(assetId)/associate", Dict{String, Any}("childAssetId"=>childAssetId, "hierarchyId"=>hierarchyId, "clientToken"=>string(uuid4())); aws=aws)
AssociateAssets(assetId, childAssetId, hierarchyId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/assets/$(assetId)/associate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("childAssetId"=>childAssetId, "hierarchyId"=>hierarchyId, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    BatchAssociateProjectAssets()

Associates a group (batch) of assets with an AWS IoT SiteWise Monitor project.

# Required Parameters
- `assetIds`: The IDs of the assets to be associated to the project.
- `projectId`: The ID of the project to which to associate the assets.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
"""
BatchAssociateProjectAssets(assetIds, projectId; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/projects/$(projectId)/assets/associate", Dict{String, Any}("assetIds"=>assetIds, "clientToken"=>string(uuid4())); aws=aws)
BatchAssociateProjectAssets(assetIds, projectId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/projects/$(projectId)/assets/associate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assetIds"=>assetIds, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    BatchDisassociateProjectAssets()

Disassociates a group (batch) of assets from an AWS IoT SiteWise Monitor project.

# Required Parameters
- `assetIds`: The IDs of the assets to be disassociated from the project.
- `projectId`: The ID of the project from which to disassociate the assets.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
"""
BatchDisassociateProjectAssets(assetIds, projectId; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/projects/$(projectId)/assets/disassociate", Dict{String, Any}("assetIds"=>assetIds, "clientToken"=>string(uuid4())); aws=aws)
BatchDisassociateProjectAssets(assetIds, projectId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/projects/$(projectId)/assets/disassociate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assetIds"=>assetIds, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    BatchPutAssetPropertyValue()

Sends a list of asset property values to AWS IoT SiteWise. Each value is a timestamp-quality-value (TQV) data point. For more information, see Ingesting Data Using the API in the AWS IoT SiteWise User Guide. To identify an asset property, you must specify one of the following:   The assetId and propertyId of an asset property.   A propertyAlias, which is a data stream alias (for example, /company/windfarm/3/turbine/7/temperature). To define an asset property's alias, see UpdateAssetProperty.    With respect to Unix epoch time, AWS IoT SiteWise accepts only TQVs that have a timestamp of no more than 15 minutes in the past and no more than 5 minutes in the future. AWS IoT SiteWise rejects timestamps outside of the inclusive range of [-15, +5] minutes and returns a TimestampOutOfRangeException error. For each asset property, AWS IoT SiteWise overwrites TQVs with duplicate timestamps unless the newer TQV has a different quality. For example, if you store a TQV {T1, GOOD, V1}, then storing {T1, GOOD, V2} replaces the existing TQV. 

# Required Parameters
- `entries`: The list of asset property value entries for the batch put request. You can specify up to 10 entries per request.

"""
BatchPutAssetPropertyValue(entries; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/properties", Dict{String, Any}("entries"=>entries))
BatchPutAssetPropertyValue(entries, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/properties", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("entries"=>entries), args)); aws=aws)

"""
    CreateAccessPolicy()

Creates an access policy that grants the specified AWS Single Sign-On user or group access to the specified AWS IoT SiteWise Monitor portal or project resource.

# Required Parameters
- `accessPolicyIdentity`: The identity for this access policy. Choose either a user or a group but not both.
- `accessPolicyPermission`: The permission level for this access policy. Note that a project ADMINISTRATOR is also known as a project owner.
- `accessPolicyResource`: The AWS IoT SiteWise Monitor resource for this access policy. Choose either portal or project but not both.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
- `tags`: A list of key-value pairs that contain metadata for the access policy. For more information, see Tagging your AWS IoT SiteWise resources in the AWS IoT SiteWise User Guide.
"""
CreateAccessPolicy(accessPolicyIdentity, accessPolicyPermission, accessPolicyResource; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/access-policies", Dict{String, Any}("accessPolicyIdentity"=>accessPolicyIdentity, "accessPolicyPermission"=>accessPolicyPermission, "accessPolicyResource"=>accessPolicyResource, "clientToken"=>string(uuid4())); aws=aws)
CreateAccessPolicy(accessPolicyIdentity, accessPolicyPermission, accessPolicyResource, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/access-policies", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("accessPolicyIdentity"=>accessPolicyIdentity, "accessPolicyPermission"=>accessPolicyPermission, "accessPolicyResource"=>accessPolicyResource, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    CreateAsset()

Creates an asset from an existing asset model. For more information, see Creating Assets in the AWS IoT SiteWise User Guide.

# Required Parameters
- `assetModelId`: The ID of the asset model from which to create the asset.
- `assetName`: A unique, friendly name for the asset.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
- `tags`: A list of key-value pairs that contain metadata for the asset. For more information, see Tagging your AWS IoT SiteWise resources in the AWS IoT SiteWise User Guide.
"""
CreateAsset(assetModelId, assetName; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/assets", Dict{String, Any}("assetModelId"=>assetModelId, "assetName"=>assetName, "clientToken"=>string(uuid4())); aws=aws)
CreateAsset(assetModelId, assetName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/assets", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assetModelId"=>assetModelId, "assetName"=>assetName, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    CreateAssetModel()

Creates an asset model from specified property and hierarchy definitions. You create assets from asset models. With asset models, you can easily create assets of the same type that have standardized definitions. Each asset created from a model inherits the asset model's property and hierarchy definitions. For more information, see Defining Asset Models in the AWS IoT SiteWise User Guide.

# Required Parameters
- `assetModelName`: A unique, friendly name for the asset model.

# Optional Parameters
- `assetModelDescription`: A description for the asset model.
- `assetModelHierarchies`: The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. For more information, see Asset Hierarchies in the AWS IoT SiteWise User Guide. You can specify up to 10 hierarchies per asset model. For more information, see Quotas in the AWS IoT SiteWise User Guide.
- `assetModelProperties`: The property definitions of the asset model. For more information, see Asset Properties in the AWS IoT SiteWise User Guide. You can specify up to 200 properties per asset model. For more information, see Quotas in the AWS IoT SiteWise User Guide.
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
- `tags`: A list of key-value pairs that contain metadata for the asset model. For more information, see Tagging your AWS IoT SiteWise resources in the AWS IoT SiteWise User Guide.
"""
CreateAssetModel(assetModelName; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/asset-models", Dict{String, Any}("assetModelName"=>assetModelName, "clientToken"=>string(uuid4())); aws=aws)
CreateAssetModel(assetModelName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/asset-models", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assetModelName"=>assetModelName, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    CreateDashboard()

Creates a dashboard in an AWS IoT SiteWise Monitor project.

# Required Parameters
- `dashboardDefinition`: The dashboard definition specified in a JSON literal. For detailed information, see Creating Dashboards (CLI) in the AWS IoT SiteWise User Guide.
- `dashboardName`: A friendly name for the dashboard.
- `projectId`: The ID of the project in which to create the dashboard.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
- `dashboardDescription`: A description for the dashboard.
- `tags`: A list of key-value pairs that contain metadata for the dashboard. For more information, see Tagging your AWS IoT SiteWise resources in the AWS IoT SiteWise User Guide.
"""
CreateDashboard(dashboardDefinition, dashboardName, projectId; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/dashboards", Dict{String, Any}("dashboardDefinition"=>dashboardDefinition, "dashboardName"=>dashboardName, "projectId"=>projectId, "clientToken"=>string(uuid4())); aws=aws)
CreateDashboard(dashboardDefinition, dashboardName, projectId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/dashboards", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("dashboardDefinition"=>dashboardDefinition, "dashboardName"=>dashboardName, "projectId"=>projectId, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    CreateGateway()

Creates a gateway, which is a virtual or edge device that delivers industrial data streams from local servers to AWS IoT SiteWise. For more information, see Ingesting data using a gateway in the AWS IoT SiteWise User Guide.

# Required Parameters
- `gatewayName`: A unique, friendly name for the gateway.
- `gatewayPlatform`: The gateway's platform. You can only specify one platform in a gateway.

# Optional Parameters
- `tags`: A list of key-value pairs that contain metadata for the gateway. For more information, see Tagging your AWS IoT SiteWise resources in the AWS IoT SiteWise User Guide.
"""
CreateGateway(gatewayName, gatewayPlatform; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/20200301/gateways", Dict{String, Any}("gatewayName"=>gatewayName, "gatewayPlatform"=>gatewayPlatform))
CreateGateway(gatewayName, gatewayPlatform, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/20200301/gateways", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("gatewayName"=>gatewayName, "gatewayPlatform"=>gatewayPlatform), args)); aws=aws)

"""
    CreatePortal()

Creates a portal, which can contain projects and dashboards. Before you can create a portal, you must configure AWS Single Sign-On in the current Region. AWS IoT SiteWise Monitor uses AWS SSO to manage user permissions. For more information, see Enabling AWS SSO in the AWS IoT SiteWise User Guide.  Before you can sign in to a new portal, you must add at least one AWS SSO user or group to that portal. For more information, see Adding or Removing Portal Administrators in the AWS IoT SiteWise User Guide. 

# Required Parameters
- `portalContactEmail`: The AWS administrator's contact email address.
- `portalName`: A friendly name for the portal.
- `roleArn`: The ARN of a service role that allows the portal's users to access your AWS IoT SiteWise resources on your behalf. For more information, see Using service roles for AWS IoT SiteWise Monitor in the AWS IoT SiteWise User Guide.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
- `portalDescription`: A description for the portal.
- `portalLogoImageFile`: A logo image to display in the portal. Upload a square, high-resolution image. The image is displayed on a dark background.
- `tags`: A list of key-value pairs that contain metadata for the portal. For more information, see Tagging your AWS IoT SiteWise resources in the AWS IoT SiteWise User Guide.
"""
CreatePortal(portalContactEmail, portalName, roleArn; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/portals", Dict{String, Any}("portalContactEmail"=>portalContactEmail, "portalName"=>portalName, "roleArn"=>roleArn, "clientToken"=>string(uuid4())); aws=aws)
CreatePortal(portalContactEmail, portalName, roleArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/portals", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("portalContactEmail"=>portalContactEmail, "portalName"=>portalName, "roleArn"=>roleArn, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    CreateProject()

Creates a project in the specified portal.

# Required Parameters
- `portalId`: The ID of the portal in which to create the project.
- `projectName`: A friendly name for the project.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
- `projectDescription`: A description for the project.
- `tags`: A list of key-value pairs that contain metadata for the project. For more information, see Tagging your AWS IoT SiteWise resources in the AWS IoT SiteWise User Guide.
"""
CreateProject(portalId, projectName; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/projects", Dict{String, Any}("portalId"=>portalId, "projectName"=>projectName, "clientToken"=>string(uuid4())); aws=aws)
CreateProject(portalId, projectName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/projects", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("portalId"=>portalId, "projectName"=>projectName, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    DeleteAccessPolicy()

Deletes an access policy that grants the specified AWS Single Sign-On identity access to the specified AWS IoT SiteWise Monitor resource. You can use this operation to revoke access to an AWS IoT SiteWise Monitor resource.

# Required Parameters
- `accessPolicyId`: The ID of the access policy to be deleted.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
"""
DeleteAccessPolicy(accessPolicyId; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/access-policies/$(accessPolicyId)", Dict{String, Any}("clientToken"=>string(uuid4())); aws=aws)
DeleteAccessPolicy(accessPolicyId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/access-policies/$(accessPolicyId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("clientToken"=>string(uuid4())), args)); aws=aws)

"""
    DeleteAsset()

Deletes an asset. This action can't be undone. For more information, see Deleting Assets and Models in the AWS IoT SiteWise User Guide.   You can't delete an asset that's associated to another asset. For more information, see DisassociateAssets. 

# Required Parameters
- `assetId`: The ID of the asset to delete.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
"""
DeleteAsset(assetId; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/assets/$(assetId)", Dict{String, Any}("clientToken"=>string(uuid4())); aws=aws)
DeleteAsset(assetId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/assets/$(assetId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("clientToken"=>string(uuid4())), args)); aws=aws)

"""
    DeleteAssetModel()

Deletes an asset model. This action can't be undone. You must delete all assets created from an asset model before you can delete the model. Also, you can't delete an asset model if a parent asset model exists that contains a property formula expression that depends on the asset model that you want to delete. For more information, see Deleting Assets and Models in the AWS IoT SiteWise User Guide.

# Required Parameters
- `assetModelId`: The ID of the asset model to delete.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
"""
DeleteAssetModel(assetModelId; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/asset-models/$(assetModelId)", Dict{String, Any}("clientToken"=>string(uuid4())); aws=aws)
DeleteAssetModel(assetModelId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/asset-models/$(assetModelId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("clientToken"=>string(uuid4())), args)); aws=aws)

"""
    DeleteDashboard()

Deletes a dashboard from AWS IoT SiteWise Monitor.

# Required Parameters
- `dashboardId`: The ID of the dashboard to delete.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
"""
DeleteDashboard(dashboardId; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/dashboards/$(dashboardId)", Dict{String, Any}("clientToken"=>string(uuid4())); aws=aws)
DeleteDashboard(dashboardId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/dashboards/$(dashboardId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("clientToken"=>string(uuid4())), args)); aws=aws)

"""
    DeleteGateway()

Deletes a gateway from AWS IoT SiteWise. When you delete a gateway, some of the gateway's files remain in your gateway's file system. For more information, see Data retention in the AWS IoT SiteWise User Guide.

# Required Parameters
- `gatewayId`: The ID of the gateway to delete.

"""
DeleteGateway(gatewayId; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/20200301/gateways/$(gatewayId)"; aws=aws)
DeleteGateway(gatewayId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/20200301/gateways/$(gatewayId)", args; aws=aws)

"""
    DeletePortal()

Deletes a portal from AWS IoT SiteWise Monitor.

# Required Parameters
- `portalId`: The ID of the portal to delete.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
"""
DeletePortal(portalId; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/portals/$(portalId)", Dict{String, Any}("clientToken"=>string(uuid4())); aws=aws)
DeletePortal(portalId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/portals/$(portalId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("clientToken"=>string(uuid4())), args)); aws=aws)

"""
    DeleteProject()

Deletes a project from AWS IoT SiteWise Monitor.

# Required Parameters
- `projectId`: The ID of the project.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
"""
DeleteProject(projectId; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/projects/$(projectId)", Dict{String, Any}("clientToken"=>string(uuid4())); aws=aws)
DeleteProject(projectId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/projects/$(projectId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("clientToken"=>string(uuid4())), args)); aws=aws)

"""
    DescribeAccessPolicy()

Describes an access policy, which specifies an AWS SSO user or group's access to an AWS IoT SiteWise Monitor portal or project.

# Required Parameters
- `accessPolicyId`: The ID of the access policy.

"""
DescribeAccessPolicy(accessPolicyId; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/access-policies/$(accessPolicyId)"; aws=aws)
DescribeAccessPolicy(accessPolicyId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/access-policies/$(accessPolicyId)", args; aws=aws)

"""
    DescribeAsset()

Retrieves information about an asset.

# Required Parameters
- `assetId`: The ID of the asset.

"""
DescribeAsset(assetId; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/assets/$(assetId)"; aws=aws)
DescribeAsset(assetId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/assets/$(assetId)", args; aws=aws)

"""
    DescribeAssetModel()

Retrieves information about an asset model.

# Required Parameters
- `assetModelId`: The ID of the asset model.

"""
DescribeAssetModel(assetModelId; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/asset-models/$(assetModelId)"; aws=aws)
DescribeAssetModel(assetModelId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/asset-models/$(assetModelId)", args; aws=aws)

"""
    DescribeAssetProperty()

Retrieves information about an asset's property.

# Required Parameters
- `assetId`: The ID of the asset.
- `propertyId`: The ID of the asset property.

"""
DescribeAssetProperty(assetId, propertyId; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/assets/$(assetId)/properties/$(propertyId)"; aws=aws)
DescribeAssetProperty(assetId, propertyId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/assets/$(assetId)/properties/$(propertyId)", args; aws=aws)

"""
    DescribeDashboard()

Retrieves information about a dashboard.

# Required Parameters
- `dashboardId`: The ID of the dashboard.

"""
DescribeDashboard(dashboardId; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/dashboards/$(dashboardId)"; aws=aws)
DescribeDashboard(dashboardId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/dashboards/$(dashboardId)", args; aws=aws)

"""
    DescribeGateway()

Retrieves information about a gateway.

# Required Parameters
- `gatewayId`: The ID of the gateway device.

"""
DescribeGateway(gatewayId; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/20200301/gateways/$(gatewayId)"; aws=aws)
DescribeGateway(gatewayId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/20200301/gateways/$(gatewayId)", args; aws=aws)

"""
    DescribeGatewayCapabilityConfiguration()

Retrieves information about a gateway capability configuration. Each gateway capability defines data sources for a gateway. A capability configuration can contain multiple data source configurations. If you define OPC-UA sources for a gateway in the AWS IoT SiteWise console, all of your OPC-UA sources are stored in one capability configuration. To list all capability configurations for a gateway, use DescribeGateway.

# Required Parameters
- `capabilityNamespace`: The namespace of the capability configuration. For example, if you configure OPC-UA sources from the AWS IoT SiteWise console, your OPC-UA capability configuration has the namespace iotsitewise:opcuacollector:version, where version is a number such as 1.
- `gatewayId`: The ID of the gateway that defines the capability configuration.

"""
DescribeGatewayCapabilityConfiguration(capabilityNamespace, gatewayId; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/20200301/gateways/$(gatewayId)/capability/$(capabilityNamespace)"; aws=aws)
DescribeGatewayCapabilityConfiguration(capabilityNamespace, gatewayId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/20200301/gateways/$(gatewayId)/capability/$(capabilityNamespace)", args; aws=aws)

"""
    DescribeLoggingOptions()

Retrieves the current AWS IoT SiteWise logging options.

"""
DescribeLoggingOptions(; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/logging"; aws=aws)
DescribeLoggingOptions(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/logging", args; aws=aws)

"""
    DescribePortal()

Retrieves information about a portal.

# Required Parameters
- `portalId`: The ID of the portal.

"""
DescribePortal(portalId; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/portals/$(portalId)"; aws=aws)
DescribePortal(portalId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/portals/$(portalId)", args; aws=aws)

"""
    DescribeProject()

Retrieves information about a project.

# Required Parameters
- `projectId`: The ID of the project.

"""
DescribeProject(projectId; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/projects/$(projectId)"; aws=aws)
DescribeProject(projectId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/projects/$(projectId)", args; aws=aws)

"""
    DisassociateAssets()

Disassociates a child asset from the given parent asset through a hierarchy defined in the parent asset's model.

# Required Parameters
- `assetId`: The ID of the parent asset from which to disassociate the child asset.
- `childAssetId`: The ID of the child asset to disassociate.
- `hierarchyId`: The ID of a hierarchy in the parent asset's model. Hierarchies allow different groupings of assets to be formed that all come from the same asset model. You can use the hierarchy ID to identify the correct asset to disassociate. For more information, see Asset Hierarchies in the AWS IoT SiteWise User Guide.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
"""
DisassociateAssets(assetId, childAssetId, hierarchyId; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/assets/$(assetId)/disassociate", Dict{String, Any}("childAssetId"=>childAssetId, "hierarchyId"=>hierarchyId, "clientToken"=>string(uuid4())); aws=aws)
DisassociateAssets(assetId, childAssetId, hierarchyId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/assets/$(assetId)/disassociate", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("childAssetId"=>childAssetId, "hierarchyId"=>hierarchyId, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    GetAssetPropertyAggregates()

Gets aggregated values for an asset property. For more information, see Querying Aggregated Property Values in the AWS IoT SiteWise User Guide. To identify an asset property, you must specify one of the following:   The assetId and propertyId of an asset property.   A propertyAlias, which is a data stream alias (for example, /company/windfarm/3/turbine/7/temperature). To define an asset property's alias, see UpdateAssetProperty.  

# Required Parameters
- `aggregateTypes`: The data aggregating function.
- `endDate`: The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.
- `resolution`: The time interval over which to aggregate data.
- `startDate`: The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.

# Optional Parameters
- `assetId`: The ID of the asset.
- `maxResults`: The maximum number of results to be returned per paginated request.
- `nextToken`: The token to be used for the next set of paginated results.
- `propertyAlias`: The property alias that identifies the property, such as an OPC-UA server data stream path (for example, /company/windfarm/3/turbine/7/temperature). For more information, see Mapping Industrial Data Streams to Asset Properties in the AWS IoT SiteWise User Guide.
- `propertyId`: The ID of the asset property.
- `qualities`: The quality by which to filter asset data.
- `timeOrdering`: The chronological sorting order of the requested information.
"""
GetAssetPropertyAggregates(aggregateTypes, endDate, resolution, startDate; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/properties/aggregates", Dict{String, Any}("aggregateTypes"=>aggregateTypes, "endDate"=>endDate, "resolution"=>resolution, "startDate"=>startDate))
GetAssetPropertyAggregates(aggregateTypes, endDate, resolution, startDate, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/properties/aggregates", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("aggregateTypes"=>aggregateTypes, "endDate"=>endDate, "resolution"=>resolution, "startDate"=>startDate), args)); aws=aws)

"""
    GetAssetPropertyValue()

Gets an asset property's current value. For more information, see Querying Current Property Values in the AWS IoT SiteWise User Guide. To identify an asset property, you must specify one of the following:   The assetId and propertyId of an asset property.   A propertyAlias, which is a data stream alias (for example, /company/windfarm/3/turbine/7/temperature). To define an asset property's alias, see UpdateAssetProperty.  

# Optional Parameters
- `assetId`: The ID of the asset.
- `propertyAlias`: The property alias that identifies the property, such as an OPC-UA server data stream path (for example, /company/windfarm/3/turbine/7/temperature). For more information, see Mapping Industrial Data Streams to Asset Properties in the AWS IoT SiteWise User Guide.
- `propertyId`: The ID of the asset property.
"""
GetAssetPropertyValue(; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/properties/latest"; aws=aws)
GetAssetPropertyValue(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/properties/latest", args; aws=aws)

"""
    GetAssetPropertyValueHistory()

Gets the history of an asset property's values. For more information, see Querying Historical Property Values in the AWS IoT SiteWise User Guide. To identify an asset property, you must specify one of the following:   The assetId and propertyId of an asset property.   A propertyAlias, which is a data stream alias (for example, /company/windfarm/3/turbine/7/temperature). To define an asset property's alias, see UpdateAssetProperty.  

# Optional Parameters
- `assetId`: The ID of the asset.
- `endDate`: The inclusive end of the range from which to query historical data, expressed in seconds in Unix epoch time.
- `maxResults`: The maximum number of results to be returned per paginated request.
- `nextToken`: The token to be used for the next set of paginated results.
- `propertyAlias`: The property alias that identifies the property, such as an OPC-UA server data stream path (for example, /company/windfarm/3/turbine/7/temperature). For more information, see Mapping Industrial Data Streams to Asset Properties in the AWS IoT SiteWise User Guide.
- `propertyId`: The ID of the asset property.
- `qualities`: The quality by which to filter asset data.
- `startDate`: The exclusive start of the range from which to query historical data, expressed in seconds in Unix epoch time.
- `timeOrdering`: The chronological sorting order of the requested information.
"""
GetAssetPropertyValueHistory(; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/properties/history"; aws=aws)
GetAssetPropertyValueHistory(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/properties/history", args; aws=aws)

"""
    ListAccessPolicies()

Retrieves a paginated list of access policies for an AWS SSO identity (a user or group) or an AWS IoT SiteWise Monitor resource (a portal or project).

# Optional Parameters
- `identityId`: The ID of the identity. This parameter is required if you specify identityType.
- `identityType`: The type of identity (user or group). This parameter is required if you specify identityId.
- `maxResults`: The maximum number of results to be returned per paginated request.
- `nextToken`: The token to be used for the next set of paginated results.
- `resourceId`: The ID of the resource. This parameter is required if you specify resourceType.
- `resourceType`: The type of resource (portal or project). This parameter is required if you specify resourceId.
"""
ListAccessPolicies(; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/access-policies"; aws=aws)
ListAccessPolicies(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/access-policies", args; aws=aws)

"""
    ListAssetModels()

Retrieves a paginated list of summaries of all asset models.

# Optional Parameters
- `maxResults`: The maximum number of results to be returned per paginated request.
- `nextToken`: The token to be used for the next set of paginated results.
"""
ListAssetModels(; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/asset-models"; aws=aws)
ListAssetModels(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/asset-models", args; aws=aws)

"""
    ListAssets()

Retrieves a paginated list of asset summaries. You can use this operation to do the following:   List assets based on a specific asset model.   List top-level assets.   You can't use this operation to list all assets. To retrieve summaries for all of your assets, use ListAssetModels to get all of your asset model IDs. Then, use ListAssets to get all assets for each asset model.

# Optional Parameters
- `assetModelId`: The ID of the asset model by which to filter the list of assets. This parameter is required if you choose ALL for filter.
- `filter`: The filter for the requested list of assets. Choose one of the following options. Defaults to ALL.    ALL – The list includes all assets for a given asset model ID. The assetModelId parameter is required if you filter by ALL.    TOP_LEVEL – The list includes only top-level assets in the asset hierarchy tree.  
- `maxResults`: The maximum number of results to be returned per paginated request.
- `nextToken`: The token to be used for the next set of paginated results.
"""
ListAssets(; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/assets"; aws=aws)
ListAssets(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/assets", args; aws=aws)

"""
    ListAssociatedAssets()

Retrieves a paginated list of the assets associated to a parent asset (assetId) by a given hierarchy (hierarchyId).

# Required Parameters
- `assetId`: The ID of the parent asset.
- `hierarchyId`: The hierarchy ID (of the parent asset model) whose associated assets are returned. To find a hierarchy ID, use the DescribeAsset or DescribeAssetModel actions. For more information, see Asset Hierarchies in the AWS IoT SiteWise User Guide.

# Optional Parameters
- `maxResults`: The maximum number of results to be returned per paginated request.
- `nextToken`: The token to be used for the next set of paginated results.
"""
ListAssociatedAssets(assetId, hierarchyId; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/assets/$(assetId)/hierarchies", Dict{String, Any}("hierarchyId"=>hierarchyId))
ListAssociatedAssets(assetId, hierarchyId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/assets/$(assetId)/hierarchies", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("hierarchyId"=>hierarchyId), args)); aws=aws)

"""
    ListDashboards()

Retrieves a paginated list of dashboards for an AWS IoT SiteWise Monitor project.

# Required Parameters
- `projectId`: The ID of the project.

# Optional Parameters
- `maxResults`: The maximum number of results to be returned per paginated request.
- `nextToken`: The token to be used for the next set of paginated results.
"""
ListDashboards(projectId; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/dashboards", Dict{String, Any}("projectId"=>projectId))
ListDashboards(projectId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/dashboards", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("projectId"=>projectId), args)); aws=aws)

"""
    ListGateways()

Retrieves a paginated list of gateways.

# Optional Parameters
- `maxResults`: The maximum number of results to be returned per paginated request.
- `nextToken`: The token to be used for the next set of paginated results.
"""
ListGateways(; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/20200301/gateways"; aws=aws)
ListGateways(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/20200301/gateways", args; aws=aws)

"""
    ListPortals()

Retrieves a paginated list of AWS IoT SiteWise Monitor portals.

# Optional Parameters
- `maxResults`: The maximum number of results to be returned per paginated request.
- `nextToken`: The token to be used for the next set of paginated results.
"""
ListPortals(; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/portals"; aws=aws)
ListPortals(args::AbstractDict{String, Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/portals", args; aws=aws)

"""
    ListProjectAssets()

Retrieves a paginated list of assets associated with an AWS IoT SiteWise Monitor project.

# Required Parameters
- `projectId`: The ID of the project.

# Optional Parameters
- `maxResults`: The maximum number of results to be returned per paginated request.
- `nextToken`: The token to be used for the next set of paginated results.
"""
ListProjectAssets(projectId; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/projects/$(projectId)/assets"; aws=aws)
ListProjectAssets(projectId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/projects/$(projectId)/assets", args; aws=aws)

"""
    ListProjects()

Retrieves a paginated list of projects for an AWS IoT SiteWise Monitor portal.

# Required Parameters
- `portalId`: The ID of the portal.

# Optional Parameters
- `maxResults`: The maximum number of results to be returned per paginated request.
- `nextToken`: The token to be used for the next set of paginated results.
"""
ListProjects(portalId; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/projects", Dict{String, Any}("portalId"=>portalId))
ListProjects(portalId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/projects", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("portalId"=>portalId), args)); aws=aws)

"""
    ListTagsForResource()

Retrieves the list of tags for an AWS IoT SiteWise resource.

# Required Parameters
- `resourceArn`: The ARN of the resource.

"""
ListTagsForResource(resourceArn; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/tags", Dict{String, Any}("resourceArn"=>resourceArn))
ListTagsForResource(resourceArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("GET", "/tags", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceArn"=>resourceArn), args)); aws=aws)

"""
    PutLoggingOptions()

Sets logging options for AWS IoT SiteWise.

# Required Parameters
- `loggingOptions`: The logging options to set.

"""
PutLoggingOptions(loggingOptions; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/logging", Dict{String, Any}("loggingOptions"=>loggingOptions))
PutLoggingOptions(loggingOptions, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/logging", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("loggingOptions"=>loggingOptions), args)); aws=aws)

"""
    TagResource()

Adds tags to an AWS IoT SiteWise resource. If a tag already exists for the resource, this operation updates the tag's value.

# Required Parameters
- `resourceArn`: The ARN of the resource to tag.
- `tags`: A list of key-value pairs that contain metadata for the resource. For more information, see Tagging your AWS IoT SiteWise resources in the AWS IoT SiteWise User Guide.

"""
TagResource(resourceArn, tags; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/tags", Dict{String, Any}("resourceArn"=>resourceArn, "tags"=>tags))
TagResource(resourceArn, tags, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/tags", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceArn"=>resourceArn, "tags"=>tags), args)); aws=aws)

"""
    UntagResource()

Removes a tag from an AWS IoT SiteWise resource.

# Required Parameters
- `resourceArn`: The ARN of the resource to untag.
- `tagKeys`: A list of keys for tags to remove from the resource.

"""
UntagResource(resourceArn, tagKeys; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/tags", Dict{String, Any}("resourceArn"=>resourceArn, "tagKeys"=>tagKeys))
UntagResource(resourceArn, tagKeys, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("DELETE", "/tags", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceArn"=>resourceArn, "tagKeys"=>tagKeys), args)); aws=aws)

"""
    UpdateAccessPolicy()

Updates an existing access policy that specifies an AWS SSO user or group's access to an AWS IoT SiteWise Monitor portal or project resource.

# Required Parameters
- `accessPolicyId`: The ID of the access policy.
- `accessPolicyIdentity`: The identity for this access policy. Choose either a user or a group but not both.
- `accessPolicyPermission`: The permission level for this access policy. Note that a project ADMINISTRATOR is also known as a project owner.
- `accessPolicyResource`: The AWS IoT SiteWise Monitor resource for this access policy. Choose either portal or project but not both.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
"""
UpdateAccessPolicy(accessPolicyId, accessPolicyIdentity, accessPolicyPermission, accessPolicyResource; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/access-policies/$(accessPolicyId)", Dict{String, Any}("accessPolicyIdentity"=>accessPolicyIdentity, "accessPolicyPermission"=>accessPolicyPermission, "accessPolicyResource"=>accessPolicyResource, "clientToken"=>string(uuid4())); aws=aws)
UpdateAccessPolicy(accessPolicyId, accessPolicyIdentity, accessPolicyPermission, accessPolicyResource, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/access-policies/$(accessPolicyId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("accessPolicyIdentity"=>accessPolicyIdentity, "accessPolicyPermission"=>accessPolicyPermission, "accessPolicyResource"=>accessPolicyResource, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    UpdateAsset()

Updates an asset's name. For more information, see Updating Assets and Models in the AWS IoT SiteWise User Guide.

# Required Parameters
- `assetId`: The ID of the asset to update.
- `assetName`: A unique, friendly name for the asset.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
"""
UpdateAsset(assetId, assetName; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/assets/$(assetId)", Dict{String, Any}("assetName"=>assetName, "clientToken"=>string(uuid4())); aws=aws)
UpdateAsset(assetId, assetName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/assets/$(assetId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assetName"=>assetName, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    UpdateAssetModel()

Updates an asset model and all of the assets that were created from the model. Each asset created from the model inherits the updated asset model's property and hierarchy definitions. For more information, see Updating Assets and Models in the AWS IoT SiteWise User Guide.  This operation overwrites the existing model with the provided model. To avoid deleting your asset model's properties or hierarchies, you must include their IDs and definitions in the updated asset model payload. For more information, see DescribeAssetModel. If you remove a property from an asset model or update a property's formula expression, AWS IoT SiteWise deletes all previous data for that property. If you remove a hierarchy definition from an asset model, AWS IoT SiteWise disassociates every asset associated with that hierarchy. You can't change the type or data type of an existing property. 

# Required Parameters
- `assetModelId`: The ID of the asset model to update.
- `assetModelName`: A unique, friendly name for the asset model.

# Optional Parameters
- `assetModelDescription`: A description for the asset model.
- `assetModelHierarchies`: The updated hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. For more information, see Asset Hierarchies in the AWS IoT SiteWise User Guide. You can specify up to 10 hierarchies per asset model. For more information, see Quotas in the AWS IoT SiteWise User Guide.
- `assetModelProperties`: The updated property definitions of the asset model. For more information, see Asset Properties in the AWS IoT SiteWise User Guide. You can specify up to 200 properties per asset model. For more information, see Quotas in the AWS IoT SiteWise User Guide.
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
"""
UpdateAssetModel(assetModelId, assetModelName; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/asset-models/$(assetModelId)", Dict{String, Any}("assetModelName"=>assetModelName, "clientToken"=>string(uuid4())); aws=aws)
UpdateAssetModel(assetModelId, assetModelName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/asset-models/$(assetModelId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("assetModelName"=>assetModelName, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    UpdateAssetProperty()

Updates an asset property's alias and notification state.  This operation overwrites the property's existing alias and notification state. To keep your existing property's alias or notification state, you must include the existing values in the UpdateAssetProperty request. For more information, see DescribeAssetProperty. 

# Required Parameters
- `assetId`: The ID of the asset to be updated.
- `propertyId`: The ID of the asset property to be updated.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
- `propertyAlias`: The property alias that identifies the property, such as an OPC-UA server data stream path (for example, /company/windfarm/3/turbine/7/temperature). For more information, see Mapping Industrial Data Streams to Asset Properties in the AWS IoT SiteWise User Guide. If you omit this parameter, the alias is removed from the property.
- `propertyNotificationState`: The MQTT notification state (enabled or disabled) for this asset property. When the notification state is enabled, AWS IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see Interacting with Other Services in the AWS IoT SiteWise User Guide. If you omit this parameter, the notification state is set to DISABLED.
"""
UpdateAssetProperty(assetId, propertyId; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/assets/$(assetId)/properties/$(propertyId)", Dict{String, Any}("clientToken"=>string(uuid4())); aws=aws)
UpdateAssetProperty(assetId, propertyId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/assets/$(assetId)/properties/$(propertyId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("clientToken"=>string(uuid4())), args)); aws=aws)

"""
    UpdateDashboard()

Updates an AWS IoT SiteWise Monitor dashboard.

# Required Parameters
- `dashboardDefinition`: The new dashboard definition, as specified in a JSON literal. For detailed information, see Creating Dashboards (CLI) in the AWS IoT SiteWise User Guide.
- `dashboardId`: The ID of the dashboard to update.
- `dashboardName`: A new friendly name for the dashboard.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
- `dashboardDescription`: A new description for the dashboard.
"""
UpdateDashboard(dashboardDefinition, dashboardId, dashboardName; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/dashboards/$(dashboardId)", Dict{String, Any}("dashboardDefinition"=>dashboardDefinition, "dashboardName"=>dashboardName, "clientToken"=>string(uuid4())); aws=aws)
UpdateDashboard(dashboardDefinition, dashboardId, dashboardName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/dashboards/$(dashboardId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("dashboardDefinition"=>dashboardDefinition, "dashboardName"=>dashboardName, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    UpdateGateway()

Updates a gateway's name.

# Required Parameters
- `gatewayId`: The ID of the gateway to update.
- `gatewayName`: A unique, friendly name for the gateway.

"""
UpdateGateway(gatewayId, gatewayName; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/20200301/gateways/$(gatewayId)", Dict{String, Any}("gatewayName"=>gatewayName))
UpdateGateway(gatewayId, gatewayName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/20200301/gateways/$(gatewayId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("gatewayName"=>gatewayName), args)); aws=aws)

"""
    UpdateGatewayCapabilityConfiguration()

Updates a gateway capability configuration or defines a new capability configuration. Each gateway capability defines data sources for a gateway. A capability configuration can contain multiple data source configurations. If you define OPC-UA sources for a gateway in the AWS IoT SiteWise console, all of your OPC-UA sources are stored in one capability configuration. To list all capability configurations for a gateway, use DescribeGateway.

# Required Parameters
- `capabilityConfiguration`: The JSON document that defines the configuration for the gateway capability. For more information, see Configuring data sources (CLI) in the AWS IoT SiteWise User Guide.
- `capabilityNamespace`: The namespace of the gateway capability configuration to be updated. For example, if you configure OPC-UA sources from the AWS IoT SiteWise console, your OPC-UA capability configuration has the namespace iotsitewise:opcuacollector:version, where version is a number such as 1.
- `gatewayId`: The ID of the gateway to be updated.

"""
UpdateGatewayCapabilityConfiguration(capabilityConfiguration, capabilityNamespace, gatewayId; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/20200301/gateways/$(gatewayId)/capability", Dict{String, Any}("capabilityConfiguration"=>capabilityConfiguration, "capabilityNamespace"=>capabilityNamespace))
UpdateGatewayCapabilityConfiguration(capabilityConfiguration, capabilityNamespace, gatewayId, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("POST", "/20200301/gateways/$(gatewayId)/capability", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("capabilityConfiguration"=>capabilityConfiguration, "capabilityNamespace"=>capabilityNamespace), args)); aws=aws)

"""
    UpdatePortal()

Updates an AWS IoT SiteWise Monitor portal.

# Required Parameters
- `portalContactEmail`: The AWS administrator's contact email address.
- `portalId`: The ID of the portal to update.
- `portalName`: A new friendly name for the portal.
- `roleArn`: The ARN of a service role that allows the portal's users to access your AWS IoT SiteWise resources on your behalf. For more information, see Using service roles for AWS IoT SiteWise Monitor in the AWS IoT SiteWise User Guide.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
- `portalDescription`: A new description for the portal.
- `portalLogoImage`: 
"""
UpdatePortal(portalContactEmail, portalId, portalName, roleArn; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/portals/$(portalId)", Dict{String, Any}("portalContactEmail"=>portalContactEmail, "portalName"=>portalName, "roleArn"=>roleArn, "clientToken"=>string(uuid4())); aws=aws)
UpdatePortal(portalContactEmail, portalId, portalName, roleArn, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/portals/$(portalId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("portalContactEmail"=>portalContactEmail, "portalName"=>portalName, "roleArn"=>roleArn, "clientToken"=>string(uuid4())), args)); aws=aws)

"""
    UpdateProject()

Updates an AWS IoT SiteWise Monitor project.

# Required Parameters
- `projectId`: The ID of the project to update.
- `projectName`: A new friendly name for the project.

# Optional Parameters
- `clientToken`: A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.
- `projectDescription`: A new description for the project.
"""
UpdateProject(projectId, projectName; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/projects/$(projectId)", Dict{String, Any}("projectName"=>projectName, "clientToken"=>string(uuid4())); aws=aws)
UpdateProject(projectId, projectName, args::AbstractDict{String, <:Any}; aws::AWSConfig=AWSConfig()) = iotsitewise("PUT", "/projects/$(projectId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("projectName"=>projectName, "clientToken"=>string(uuid4())), args)); aws=aws)
