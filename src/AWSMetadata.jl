module AWSMetadata

using DataStructures: OrderedDict
using HTTP
using JSON

include("AWSMetadataUtilities.jl")

function parse_aws_metadata()
    function _process_service(file::OrderedDict{String, Any}, version::String)
        data_changed = true
        push!(metadata, file["name"] => Dict("version" => version, "sha" => file["sha"]))
        push!(services_modified, file)
    end

    metadata_path = joinpath(@__DIR__, "metadata.json")
    metadata = JSON.parsefile(metadata_path, dicttype=OrderedDict)

    files = AWSMetadataUtilities._get_aws_sdk_js_files()

    data_changed = false
    services_modified = OrderedDict[]

    for file in files
        service_name, version = AWSMetadataUtilities._get_service_and_version(file["name"])
        filename = file["name"]

        # AWS has released a new service API
        if !haskey(metadata, filename)
            println(service_name, " does not exist in metadata.")
            _process_service(file, version)
        else
            # Check if the service API has changed since the last run
            if metadata[filename]["sha"] != file["sha"]
                println(service_name, " sha hashes do not match, updating.")
                _process_service(file, version)
            end
        end
    end

    if data_changed
        _generate_low_level_wrappers(files)
        _generate_high_level_wrapper(services_modified)
        open(metadata_path, "w") do f
            print(f, json(OrderedDict(metadata), 2))
        end
    end
end

function _generate_low_level_wrappers(services::Array{OrderedDict})
    service_definitions = AWSMetadataUtilities._generate_low_level_definitions(services)

    template = """
    # This is file is auto-generated by AWSMetadata.jl

    module AWSServices

    include("AWS.jl")

    $(join(service_definitions, "\n"))

    end
    """

    services_path = joinpath(@__DIR__, "AWSServices.jl")
    open(services_path, "w") do f
        print(f, template)
    end

    return template
end

function _generate_high_level_wrapper(services::Array{OrderedDict})
    for service in services
        service_name = service["name"]
        println("Generating high level wrapper for $service_name")
        service = JSON.parse(String(HTTP.get(service["download_url"]).body))
        service_name = lowercase(service["metadata"]["serviceId"])
        service_name = replace(service_name, ' ' => '_')
        operations = service["operations"]
        shapes = service["shapes"]

        protocol = service["metadata"]["protocol"]

        operations = AWSMetadataUtilities._generate_high_level_definitions(service_name, protocol, operations, shapes)

        service_path = joinpath(@__DIR__, "services/$service_name.jl")
        open(service_path, "w") do f
            println(f, "include(\"../AWSServices.jl\")")
            println(f, "using .AWSServices: $service_name\n")
            print(f, join(operations, "\n"))
        end
    end
end

end