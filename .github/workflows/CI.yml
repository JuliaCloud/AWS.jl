name: CI
# Run on master, any tag or any pull request
on:
  push:
    branches:
      - master
      - staging
      - trying
    tags: '*'
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 a.m. UTC
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    continue-on-error: ${{ matrix.version == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - 1
        os:
          - ubuntu-latest
          - macOS-latest
        arch:
          - x64
        include:
          # Add a job using the earliest version of Julia supported by this package
          - os: ubuntu-latest
            version: 1.6
            arch: x64
    env:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      MINIO_REGION_NAME: aregion
    steps:
      - uses: actions/checkout@v2
      - name: MinIO server setup
        run: |
          case "$RUNNER_OS" in
            Linux)
              host_os="linux-amd64"
              ;;
            macOS)
              host_os="darwin-amd64"
              ;;
            *)
              echo "$RUNNER_OS not supported" >&2
              exit 1
              ;;
          esac
          curl -LO "https://dl.minio.io/server/minio/release/${host_os}/minio"
          mkdir data
          chmod +x ./minio
          ./minio server --compat --quiet data 2>&1 > minio.log &
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@latest
      - run: |
          git config --global user.name Tester
          git config --global user.email te@st.er
      - uses: julia-actions/julia-runtest@latest
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  slack:
    name: Notify Slack Failure
    needs: test
    runs-on: ubuntu-latest
    if: github.event == 'schedule'
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - uses: voxmedia/github-action-slack-notify-build@v1
        if: env.WORKFLOW_CONCLUSION == 'failure'
        with:
          channel: nightly-dev
          status: FAILED
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1'
      - run: |
          julia --project=docs -e '
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()
            include("docs/make.jl")'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
